{"ast":null,"code":"import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { LegacyThreadContext } from './LegacyThreadContext';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = props => {\n  const {\n    channel,\n    channelConfig,\n    thread\n  } = useChannelStateContext('Thread');\n  const threadInstance = useThreadContext();\n  if (!thread && !threadInstance) return null;\n  if (channelConfig?.replies === false) return null;\n  // the wrapper ensures a key variable is set and the component recreates on thread switch\n  return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, {\n      ...props,\n      key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}`\n    })\n  );\n};\nconst selector = nextValue => ({\n  isLoadingNext: nextValue.pagination.isLoadingNext,\n  isLoadingPrev: nextValue.pagination.isLoadingPrev,\n  parentMessage: nextValue.parentMessage,\n  replies: nextValue.replies\n});\nconst ThreadInner = props => {\n  const {\n    additionalMessageInputProps,\n    additionalMessageListProps,\n    additionalParentMessageProps,\n    additionalVirtualizedMessageListProps,\n    autoFocus = true,\n    enableDateSeparator = false,\n    Input: PropInput,\n    Message: PropMessage,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    virtualized\n  } = props;\n  const threadInstance = useThreadContext();\n  const {\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages = [],\n    threadSuppressAutoscroll\n  } = useChannelStateContext('Thread');\n  const {\n    closeThread,\n    loadMoreThread\n  } = useChannelActionContext('Thread');\n  const {\n    customClasses\n  } = useChatContext('Thread');\n  const {\n    Message: ContextMessage,\n    ThreadHead = DefaultThreadHead,\n    ThreadHeader = DefaultThreadHeader,\n    ThreadInput: ContextInput,\n    VirtualMessage\n  } = useComponentContext('Thread');\n  const {\n    isLoadingNext,\n    isLoadingPrev,\n    parentMessage,\n    replies\n  } = useStateStore(threadInstance?.state, selector) ?? {};\n  const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;\n  const ThreadMessage = PropMessage || additionalMessageListProps?.Message;\n  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n  const MessageUIComponent = ThreadMessage || FallbackMessage;\n  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n  useEffect(() => {\n    if (threadInstance) return;\n    if ((thread?.reply_count ?? 0) > 0) {\n      // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n      loadMoreThread();\n    }\n  }, [thread, loadMoreThread, threadInstance]);\n  const threadProps = threadInstance ? {\n    loadingMore: isLoadingPrev,\n    loadingMoreNewer: isLoadingNext,\n    loadMore: threadInstance.loadPrevPage,\n    loadMoreNewer: threadInstance.loadNextPage,\n    messages: replies\n  } : {\n    hasMore: threadHasMore,\n    loadingMore: threadLoadingMore,\n    loadMore: loadMoreThread,\n    messages: threadMessages\n  };\n  const messageAsThread = thread ?? parentMessage;\n  if (!messageAsThread) return null;\n  const threadClass = customClasses?.thread || clsx('str-chat__thread-container str-chat__thread', {\n    'str-chat__thread--virtualized': virtualized\n  });\n  const head = React.createElement(ThreadHead, {\n    key: messageAsThread.id,\n    message: messageAsThread,\n    Message: MessageUIComponent,\n    ...additionalParentMessageProps\n  });\n  return (\n    // Thread component needs a context which we can use for message composer\n    React.createElement(LegacyThreadContext.Provider, {\n      value: {\n        legacyThread: thread ?? undefined\n      }\n    }, React.createElement(\"div\", {\n      className: threadClass\n    }, React.createElement(ThreadHeader, {\n      closeThread: closeThread,\n      thread: messageAsThread\n    }), React.createElement(ThreadMessageList, {\n      disableDateSeparator: !enableDateSeparator,\n      head: head,\n      Message: MessageUIComponent,\n      messageActions: messageActions,\n      suppressAutoscroll: threadSuppressAutoscroll,\n      threadList: true,\n      ...threadProps,\n      ...(virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps)\n    }), React.createElement(MessageInput, {\n      focus: autoFocus,\n      Input: ThreadInput,\n      isThreadInput: true,\n      parent: thread ?? parentMessage,\n      ...additionalMessageInputProps\n    })))\n  );\n};","map":{"version":3,"names":["React","useEffect","clsx","LegacyThreadContext","MESSAGE_ACTIONS","MessageInput","MessageInputFlat","MessageList","VirtualizedMessageList","ThreadHeader","DefaultThreadHeader","ThreadHead","DefaultThreadHead","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","useThreadContext","useStateStore","Thread","props","channel","channelConfig","thread","threadInstance","replies","createElement","ThreadInner","key","id","cid","selector","nextValue","isLoadingNext","pagination","isLoadingPrev","parentMessage","additionalMessageInputProps","additionalMessageListProps","additionalParentMessageProps","additionalVirtualizedMessageListProps","autoFocus","enableDateSeparator","Input","PropInput","Message","PropMessage","messageActions","Object","keys","virtualized","threadHasMore","threadLoadingMore","threadMessages","threadSuppressAutoscroll","closeThread","loadMoreThread","customClasses","ContextMessage","ThreadInput","ContextInput","VirtualMessage","state","ThreadMessage","FallbackMessage","MessageUIComponent","ThreadMessageList","reply_count","threadProps","loadingMore","loadingMoreNewer","loadMore","loadPrevPage","loadMoreNewer","loadNextPage","messages","hasMore","messageAsThread","threadClass","head","message","Provider","value","legacyThread","undefined","className","disableDateSeparator","suppressAutoscroll","threadList","focus","isThreadInput","parent"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Thread/Thread.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { LegacyThreadContext } from './LegacyThreadContext';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext, } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = (props) => {\n    const { channel, channelConfig, thread } = useChannelStateContext('Thread');\n    const threadInstance = useThreadContext();\n    if (!thread && !threadInstance)\n        return null;\n    if (channelConfig?.replies === false)\n        return null;\n    // the wrapper ensures a key variable is set and the component recreates on thread switch\n    return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, { ...props, key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}` }));\n};\nconst selector = (nextValue) => ({\n    isLoadingNext: nextValue.pagination.isLoadingNext,\n    isLoadingPrev: nextValue.pagination.isLoadingPrev,\n    parentMessage: nextValue.parentMessage,\n    replies: nextValue.replies,\n});\nconst ThreadInner = (props) => {\n    const { additionalMessageInputProps, additionalMessageListProps, additionalParentMessageProps, additionalVirtualizedMessageListProps, autoFocus = true, enableDateSeparator = false, Input: PropInput, Message: PropMessage, messageActions = Object.keys(MESSAGE_ACTIONS), virtualized, } = props;\n    const threadInstance = useThreadContext();\n    const { thread, threadHasMore, threadLoadingMore, threadMessages = [], threadSuppressAutoscroll, } = useChannelStateContext('Thread');\n    const { closeThread, loadMoreThread } = useChannelActionContext('Thread');\n    const { customClasses } = useChatContext('Thread');\n    const { Message: ContextMessage, ThreadHead = DefaultThreadHead, ThreadHeader = DefaultThreadHeader, ThreadInput: ContextInput, VirtualMessage, } = useComponentContext('Thread');\n    const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance?.state, selector) ?? {};\n    const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;\n    const ThreadMessage = PropMessage || additionalMessageListProps?.Message;\n    const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n    const MessageUIComponent = ThreadMessage || FallbackMessage;\n    const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n    useEffect(() => {\n        if (threadInstance)\n            return;\n        if ((thread?.reply_count ?? 0) > 0) {\n            // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n            loadMoreThread();\n        }\n    }, [thread, loadMoreThread, threadInstance]);\n    const threadProps = threadInstance\n        ? {\n            loadingMore: isLoadingPrev,\n            loadingMoreNewer: isLoadingNext,\n            loadMore: threadInstance.loadPrevPage,\n            loadMoreNewer: threadInstance.loadNextPage,\n            messages: replies,\n        }\n        : {\n            hasMore: threadHasMore,\n            loadingMore: threadLoadingMore,\n            loadMore: loadMoreThread,\n            messages: threadMessages,\n        };\n    const messageAsThread = thread ?? parentMessage;\n    if (!messageAsThread)\n        return null;\n    const threadClass = customClasses?.thread ||\n        clsx('str-chat__thread-container str-chat__thread', {\n            'str-chat__thread--virtualized': virtualized,\n        });\n    const head = (React.createElement(ThreadHead, { key: messageAsThread.id, message: messageAsThread, Message: MessageUIComponent, ...additionalParentMessageProps }));\n    return (\n    // Thread component needs a context which we can use for message composer\n    React.createElement(LegacyThreadContext.Provider, { value: {\n            legacyThread: thread ?? undefined,\n        } },\n        React.createElement(\"div\", { className: threadClass },\n            React.createElement(ThreadHeader, { closeThread: closeThread, thread: messageAsThread }),\n            React.createElement(ThreadMessageList, { disableDateSeparator: !enableDateSeparator, head: head, Message: MessageUIComponent, messageActions: messageActions, suppressAutoscroll: threadSuppressAutoscroll, threadList: true, ...threadProps, ...(virtualized\n                    ? additionalVirtualizedMessageListProps\n                    : additionalMessageListProps) }),\n            React.createElement(MessageInput, { focus: autoFocus, Input: ThreadInput, isThreadInput: true, parent: thread ?? parentMessage, ...additionalMessageInputProps }))));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,eAAe,QAAQ,YAAY;AAC5C,SAASC,YAAY,EAAEC,gBAAgB,QAAQ,iBAAiB;AAChE,SAASC,WAAW,EAAEC,sBAAsB,QAAQ,gBAAgB;AACpE,SAASC,YAAY,IAAIC,mBAAmB,QAAQ,gBAAgB;AACpE,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,sBAAsB;AACtE,SAASC,uBAAuB,EAAEC,sBAAsB,EAAEC,cAAc,EAAEC,mBAAmB,QAAS,eAAe;AACrH,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,SAASC,aAAa,QAAQ,aAAa;AAC3C;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC,OAAO;IAAEC,aAAa;IAAEC;EAAO,CAAC,GAAGT,sBAAsB,CAAC,QAAQ,CAAC;EAC3E,MAAMU,cAAc,GAAGP,gBAAgB,CAAC,CAAC;EACzC,IAAI,CAACM,MAAM,IAAI,CAACC,cAAc,EAC1B,OAAO,IAAI;EACf,IAAIF,aAAa,EAAEG,OAAO,KAAK,KAAK,EAChC,OAAO,IAAI;EACf;EACA;IACA;IACAzB,KAAK,CAAC0B,aAAa,CAACC,WAAW,EAAE;MAAE,GAAGP,KAAK;MAAEQ,GAAG,EAAE,UAAU,CAACL,MAAM,IAAIC,cAAc,GAAGK,EAAE,IAAIR,OAAO,EAAES,GAAG;IAAG,CAAC;EAAC;AACnH,CAAC;AACD,MAAMC,QAAQ,GAAIC,SAAS,KAAM;EAC7BC,aAAa,EAAED,SAAS,CAACE,UAAU,CAACD,aAAa;EACjDE,aAAa,EAAEH,SAAS,CAACE,UAAU,CAACC,aAAa;EACjDC,aAAa,EAAEJ,SAAS,CAACI,aAAa;EACtCX,OAAO,EAAEO,SAAS,CAACP;AACvB,CAAC,CAAC;AACF,MAAME,WAAW,GAAIP,KAAK,IAAK;EAC3B,MAAM;IAAEiB,2BAA2B;IAAEC,0BAA0B;IAAEC,4BAA4B;IAAEC,qCAAqC;IAAEC,SAAS,GAAG,IAAI;IAAEC,mBAAmB,GAAG,KAAK;IAAEC,KAAK,EAAEC,SAAS;IAAEC,OAAO,EAAEC,WAAW;IAAEC,cAAc,GAAGC,MAAM,CAACC,IAAI,CAAC7C,eAAe,CAAC;IAAE8C;EAAa,CAAC,GAAG9B,KAAK;EAClS,MAAMI,cAAc,GAAGP,gBAAgB,CAAC,CAAC;EACzC,MAAM;IAAEM,MAAM;IAAE4B,aAAa;IAAEC,iBAAiB;IAAEC,cAAc,GAAG,EAAE;IAAEC;EAA0B,CAAC,GAAGxC,sBAAsB,CAAC,QAAQ,CAAC;EACrI,MAAM;IAAEyC,WAAW;IAAEC;EAAe,CAAC,GAAG3C,uBAAuB,CAAC,QAAQ,CAAC;EACzE,MAAM;IAAE4C;EAAc,CAAC,GAAG1C,cAAc,CAAC,QAAQ,CAAC;EAClD,MAAM;IAAE8B,OAAO,EAAEa,cAAc;IAAE/C,UAAU,GAAGC,iBAAiB;IAAEH,YAAY,GAAGC,mBAAmB;IAAEiD,WAAW,EAAEC,YAAY;IAAEC;EAAgB,CAAC,GAAG7C,mBAAmB,CAAC,QAAQ,CAAC;EACjL,MAAM;IAAEiB,aAAa;IAAEE,aAAa;IAAEC,aAAa;IAAEX;EAAQ,CAAC,GAAGP,aAAa,CAACM,cAAc,EAAEsC,KAAK,EAAE/B,QAAQ,CAAC,IAAI,CAAC,CAAC;EACrH,MAAM4B,WAAW,GAAGf,SAAS,IAAIP,2BAA2B,EAAEM,KAAK,IAAIiB,YAAY,IAAItD,gBAAgB;EACvG,MAAMyD,aAAa,GAAGjB,WAAW,IAAIR,0BAA0B,EAAEO,OAAO;EACxE,MAAMmB,eAAe,GAAGd,WAAW,IAAIW,cAAc,GAAGA,cAAc,GAAGH,cAAc;EACvF,MAAMO,kBAAkB,GAAGF,aAAa,IAAIC,eAAe;EAC3D,MAAME,iBAAiB,GAAGhB,WAAW,GAAG1C,sBAAsB,GAAGD,WAAW;EAC5EN,SAAS,CAAC,MAAM;IACZ,IAAIuB,cAAc,EACd;IACJ,IAAI,CAACD,MAAM,EAAE4C,WAAW,IAAI,CAAC,IAAI,CAAC,EAAE;MAChC;MACAX,cAAc,CAAC,CAAC;IACpB;EACJ,CAAC,EAAE,CAACjC,MAAM,EAAEiC,cAAc,EAAEhC,cAAc,CAAC,CAAC;EAC5C,MAAM4C,WAAW,GAAG5C,cAAc,GAC5B;IACE6C,WAAW,EAAElC,aAAa;IAC1BmC,gBAAgB,EAAErC,aAAa;IAC/BsC,QAAQ,EAAE/C,cAAc,CAACgD,YAAY;IACrCC,aAAa,EAAEjD,cAAc,CAACkD,YAAY;IAC1CC,QAAQ,EAAElD;EACd,CAAC,GACC;IACEmD,OAAO,EAAEzB,aAAa;IACtBkB,WAAW,EAAEjB,iBAAiB;IAC9BmB,QAAQ,EAAEf,cAAc;IACxBmB,QAAQ,EAAEtB;EACd,CAAC;EACL,MAAMwB,eAAe,GAAGtD,MAAM,IAAIa,aAAa;EAC/C,IAAI,CAACyC,eAAe,EAChB,OAAO,IAAI;EACf,MAAMC,WAAW,GAAGrB,aAAa,EAAElC,MAAM,IACrCrB,IAAI,CAAC,6CAA6C,EAAE;IAChD,+BAA+B,EAAEgD;EACrC,CAAC,CAAC;EACN,MAAM6B,IAAI,GAAI/E,KAAK,CAAC0B,aAAa,CAACf,UAAU,EAAE;IAAEiB,GAAG,EAAEiD,eAAe,CAAChD,EAAE;IAAEmD,OAAO,EAAEH,eAAe;IAAEhC,OAAO,EAAEoB,kBAAkB;IAAE,GAAG1B;EAA6B,CAAC,CAAE;EACnK;IACA;IACAvC,KAAK,CAAC0B,aAAa,CAACvB,mBAAmB,CAAC8E,QAAQ,EAAE;MAAEC,KAAK,EAAE;QACnDC,YAAY,EAAE5D,MAAM,IAAI6D;MAC5B;IAAE,CAAC,EACHpF,KAAK,CAAC0B,aAAa,CAAC,KAAK,EAAE;MAAE2D,SAAS,EAAEP;IAAY,CAAC,EACjD9E,KAAK,CAAC0B,aAAa,CAACjB,YAAY,EAAE;MAAE8C,WAAW,EAAEA,WAAW;MAAEhC,MAAM,EAAEsD;IAAgB,CAAC,CAAC,EACxF7E,KAAK,CAAC0B,aAAa,CAACwC,iBAAiB,EAAE;MAAEoB,oBAAoB,EAAE,CAAC5C,mBAAmB;MAAEqC,IAAI,EAAEA,IAAI;MAAElC,OAAO,EAAEoB,kBAAkB;MAAElB,cAAc,EAAEA,cAAc;MAAEwC,kBAAkB,EAAEjC,wBAAwB;MAAEkC,UAAU,EAAE,IAAI;MAAE,GAAGpB,WAAW;MAAE,IAAIlB,WAAW,GACnPV,qCAAqC,GACrCF,0BAA0B;IAAE,CAAC,CAAC,EACxCtC,KAAK,CAAC0B,aAAa,CAACrB,YAAY,EAAE;MAAEoF,KAAK,EAAEhD,SAAS;MAAEE,KAAK,EAAEgB,WAAW;MAAE+B,aAAa,EAAE,IAAI;MAAEC,MAAM,EAAEpE,MAAM,IAAIa,aAAa;MAAE,GAAGC;IAA4B,CAAC,CAAC,CAAC;EAAC;AAC/K,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}