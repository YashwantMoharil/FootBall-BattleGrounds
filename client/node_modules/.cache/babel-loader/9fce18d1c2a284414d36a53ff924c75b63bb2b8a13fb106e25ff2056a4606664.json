{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = ({\n  channelType = 'messaging',\n  clearSearchOnClickOutside = true,\n  disabled = false,\n  onSearch: onSearchCallback,\n  onSearchExit,\n  onSelectResult,\n  searchDebounceIntervalMs = 300,\n  searchForChannels = false,\n  searchForUsers = true,\n  searchFunction,\n  searchQueryParams,\n  setChannels\n}) => {\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext('useChannelSearch');\n  const [inputIsFocused, setInputIsFocused] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const searchQueryPromiseInProgress = useRef(false);\n  const shouldIgnoreQueryResults = useRef(false);\n  const inputRef = useRef(null);\n  const searchBarRef = useRef(null);\n  const clearState = useCallback(() => {\n    setQuery('');\n    setResults([]);\n    setSearching(false);\n    shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;\n  }, []);\n  const activateSearch = useCallback(() => {\n    setInputIsFocused(true);\n  }, []);\n  const exitSearch = useCallback(() => {\n    setInputIsFocused(false);\n    inputRef.current?.blur();\n    clearState();\n    onSearchExit?.();\n  }, [clearState, onSearchExit]);\n  useEffect(() => {\n    if (disabled) return;\n    const clickListener = event => {\n      if (!(event.target instanceof HTMLElement)) return;\n      const isInputClick = searchBarRef.current?.contains(event.target);\n      if (isInputClick) return;\n      if (inputIsFocused && !query || clearSearchOnClickOutside) {\n        exitSearch();\n      }\n    };\n    document.addEventListener('click', clickListener);\n    return () => document.removeEventListener('click', clickListener);\n  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n  useEffect(() => {\n    if (!inputRef.current || disabled) return;\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') return exitSearch();\n    };\n    inputRef.current.addEventListener('keydown', handleKeyDown);\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      inputRef.current?.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled]);\n  const selectResult = useCallback(async result => {\n    if (!client.userID) return;\n    if (onSelectResult) {\n      await onSelectResult({\n        setQuery,\n        setResults,\n        setSearching\n      }, result);\n      return;\n    }\n    let selectedChannel;\n    if (isChannel(result)) {\n      setActiveChannel(result);\n      selectedChannel = result;\n    } else {\n      const newChannel = client.channel(channelType, {\n        members: [client.userID, result.id]\n      });\n      await newChannel.watch();\n      setActiveChannel(newChannel);\n      selectedChannel = newChannel;\n    }\n    setChannels?.(channels => uniqBy([selectedChannel, ...channels], 'cid'));\n    if (clearSearchOnClickOutside) {\n      exitSearch();\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);\n  const getChannels = useCallback(async text => {\n    if (!searchForChannels && !searchForUsers) return;\n    let results = [];\n    const promises = [];\n    try {\n      if (searchForChannels) {\n        promises.push(client.queryChannels({\n          members: {\n            $in: [client.userID]\n          },\n          name: {\n            $autocomplete: text\n          },\n          ...searchQueryParams?.channelFilters?.filters\n        }, searchQueryParams?.channelFilters?.sort || {}, {\n          limit: 5,\n          ...searchQueryParams?.channelFilters?.options\n        }));\n      }\n      if (searchForUsers) {\n        promises.push(client.queryUsers({\n          $or: [{\n            id: {\n              $autocomplete: text\n            }\n          }, {\n            name: {\n              $autocomplete: text\n            }\n          }],\n          ...searchQueryParams?.userFilters?.filters\n        }, {\n          id: 1,\n          ...searchQueryParams?.userFilters?.sort\n        }, {\n          limit: 8,\n          ...searchQueryParams?.userFilters?.options\n        }));\n      }\n      if (promises.length) {\n        searchQueryPromiseInProgress.current = true;\n        const resolved = await Promise.all(promises);\n        if (searchForChannels && searchForUsers) {\n          const [channels, {\n            users\n          }] = resolved;\n          results = [...channels, ...users.filter(u => u.id !== client.user?.id)];\n        } else if (searchForChannels) {\n          const [channels] = resolved;\n          results = [...channels];\n        } else if (searchForUsers) {\n          const [{\n            users\n          }] = resolved;\n          results = [...users.filter(u => u.id !== client.user?.id)];\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    setSearching(false);\n    if (!shouldIgnoreQueryResults.current) {\n      setResults(results);\n    } else {\n      shouldIgnoreQueryResults.current = false;\n    }\n    searchQueryPromiseInProgress.current = false;\n  }, [client, searchForChannels, searchForUsers, searchQueryParams]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);\n  const onSearch = useCallback(event => {\n    event.preventDefault();\n    if (disabled) return;\n    if (searchFunction) {\n      searchFunction({\n        setQuery,\n        setResults,\n        setSearching\n      }, event);\n    } else if (!searchForChannels && !searchForUsers) {\n      return;\n    } else if (event.target.value) {\n      setSearching(true);\n      setQuery(event.target.value);\n      scheduleGetChannels(event.target.value);\n    } else if (!event.target.value) {\n      clearState();\n      scheduleGetChannels.cancel();\n    }\n    onSearchCallback?.(event);\n  }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchForChannels, searchForUsers, searchFunction]);\n  return {\n    activateSearch,\n    clearState,\n    exitSearch,\n    inputIsFocused,\n    inputRef,\n    onSearch,\n    query,\n    results,\n    searchBarRef,\n    searching,\n    selectResult\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","debounce","uniqBy","isChannel","useChatContext","useChannelSearch","channelType","clearSearchOnClickOutside","disabled","onSearch","onSearchCallback","onSearchExit","onSelectResult","searchDebounceIntervalMs","searchForChannels","searchForUsers","searchFunction","searchQueryParams","setChannels","client","setActiveChannel","inputIsFocused","setInputIsFocused","query","setQuery","results","setResults","searching","setSearching","searchQueryPromiseInProgress","shouldIgnoreQueryResults","inputRef","searchBarRef","clearState","current","activateSearch","exitSearch","blur","clickListener","event","target","HTMLElement","isInputClick","contains","document","addEventListener","removeEventListener","handleKeyDown","key","selectResult","result","userID","selectedChannel","newChannel","channel","members","id","watch","channels","getChannels","text","promises","push","queryChannels","$in","name","$autocomplete","channelFilters","filters","sort","limit","options","queryUsers","$or","userFilters","length","resolved","Promise","all","users","filter","u","user","error","console","scheduleGetChannels","preventDefault","value","cancel"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = ({ channelType = 'messaging', clearSearchOnClickOutside = true, disabled = false, onSearch: onSearchCallback, onSearchExit, onSelectResult, searchDebounceIntervalMs = 300, searchForChannels = false, searchForUsers = true, searchFunction, searchQueryParams, setChannels, }) => {\n    const { client, setActiveChannel } = useChatContext('useChannelSearch');\n    const [inputIsFocused, setInputIsFocused] = useState(false);\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState([]);\n    const [searching, setSearching] = useState(false);\n    const searchQueryPromiseInProgress = useRef(false);\n    const shouldIgnoreQueryResults = useRef(false);\n    const inputRef = useRef(null);\n    const searchBarRef = useRef(null);\n    const clearState = useCallback(() => {\n        setQuery('');\n        setResults([]);\n        setSearching(false);\n        shouldIgnoreQueryResults.current = searchQueryPromiseInProgress.current;\n    }, []);\n    const activateSearch = useCallback(() => {\n        setInputIsFocused(true);\n    }, []);\n    const exitSearch = useCallback(() => {\n        setInputIsFocused(false);\n        inputRef.current?.blur();\n        clearState();\n        onSearchExit?.();\n    }, [clearState, onSearchExit]);\n    useEffect(() => {\n        if (disabled)\n            return;\n        const clickListener = (event) => {\n            if (!(event.target instanceof HTMLElement))\n                return;\n            const isInputClick = searchBarRef.current?.contains(event.target);\n            if (isInputClick)\n                return;\n            if ((inputIsFocused && !query) || clearSearchOnClickOutside) {\n                exitSearch();\n            }\n        };\n        document.addEventListener('click', clickListener);\n        return () => document.removeEventListener('click', clickListener);\n    }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n    useEffect(() => {\n        if (!inputRef.current || disabled)\n            return;\n        const handleKeyDown = (event) => {\n            if (event.key === 'Escape')\n                return exitSearch();\n        };\n        inputRef.current.addEventListener('keydown', handleKeyDown);\n        return () => {\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            inputRef.current?.removeEventListener('keydown', handleKeyDown);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n    const selectResult = useCallback(async (result) => {\n        if (!client.userID)\n            return;\n        if (onSelectResult) {\n            await onSelectResult({\n                setQuery,\n                setResults,\n                setSearching,\n            }, result);\n            return;\n        }\n        let selectedChannel;\n        if (isChannel(result)) {\n            setActiveChannel(result);\n            selectedChannel = result;\n        }\n        else {\n            const newChannel = client.channel(channelType, {\n                members: [client.userID, result.id],\n            });\n            await newChannel.watch();\n            setActiveChannel(newChannel);\n            selectedChannel = newChannel;\n        }\n        setChannels?.((channels) => uniqBy([selectedChannel, ...channels], 'cid'));\n        if (clearSearchOnClickOutside) {\n            exitSearch();\n        }\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        clearSearchOnClickOutside,\n        client,\n        exitSearch,\n        onSelectResult,\n        setActiveChannel,\n        setChannels,\n    ]);\n    const getChannels = useCallback(async (text) => {\n        if (!searchForChannels && !searchForUsers)\n            return;\n        let results = [];\n        const promises = [];\n        try {\n            if (searchForChannels) {\n                promises.push(client.queryChannels({\n                    members: { $in: [client.userID] },\n                    name: { $autocomplete: text },\n                    ...searchQueryParams?.channelFilters?.filters,\n                }, searchQueryParams?.channelFilters?.sort || {}, { limit: 5, ...searchQueryParams?.channelFilters?.options }));\n            }\n            if (searchForUsers) {\n                promises.push(client.queryUsers({\n                    $or: [{ id: { $autocomplete: text } }, { name: { $autocomplete: text } }],\n                    ...searchQueryParams?.userFilters?.filters,\n                }, { id: 1, ...searchQueryParams?.userFilters?.sort }, { limit: 8, ...searchQueryParams?.userFilters?.options }));\n            }\n            if (promises.length) {\n                searchQueryPromiseInProgress.current = true;\n                const resolved = await Promise.all(promises);\n                if (searchForChannels && searchForUsers) {\n                    const [channels, { users }] = resolved;\n                    results = [...channels, ...users.filter((u) => u.id !== client.user?.id)];\n                }\n                else if (searchForChannels) {\n                    const [channels] = resolved;\n                    results = [...channels];\n                }\n                else if (searchForUsers) {\n                    const [{ users }] = resolved;\n                    results = [...users.filter((u) => u.id !== client.user?.id)];\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n        setSearching(false);\n        if (!shouldIgnoreQueryResults.current) {\n            setResults(results);\n        }\n        else {\n            shouldIgnoreQueryResults.current = false;\n        }\n        searchQueryPromiseInProgress.current = false;\n    }, [client, searchForChannels, searchForUsers, searchQueryParams]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);\n    const onSearch = useCallback((event) => {\n        event.preventDefault();\n        if (disabled)\n            return;\n        if (searchFunction) {\n            searchFunction({\n                setQuery,\n                setResults,\n                setSearching,\n            }, event);\n        }\n        else if (!searchForChannels && !searchForUsers) {\n            return;\n        }\n        else if (event.target.value) {\n            setSearching(true);\n            setQuery(event.target.value);\n            scheduleGetChannels(event.target.value);\n        }\n        else if (!event.target.value) {\n            clearState();\n            scheduleGetChannels.cancel();\n        }\n        onSearchCallback?.(event);\n    }, [\n        clearState,\n        disabled,\n        scheduleGetChannels,\n        onSearchCallback,\n        searchForChannels,\n        searchForUsers,\n        searchFunction,\n    ]);\n    return {\n        activateSearch,\n        clearState,\n        exitSearch,\n        inputIsFocused,\n        inputRef,\n        onSearch,\n        query,\n        results,\n        searchBarRef,\n        searching,\n        selectResult,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}