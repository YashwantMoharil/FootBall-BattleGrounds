{"ast":null,"code":"import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\n/**\n * Component to display system and channel event messages\n */\nconst UnMemoizedEventComponent = props => {\n  const {\n    Avatar = DefaultAvatar,\n    calendar,\n    calendarFormats,\n    format,\n    message\n  } = props;\n  const {\n    t,\n    tDateTimeParser\n  } = useTranslationContext('EventComponent');\n  const {\n    created_at = '',\n    event,\n    text,\n    type\n  } = message;\n  const getDateOptions = {\n    messageCreatedAt: created_at.toString(),\n    tDateTimeParser\n  };\n  if (type === 'system') return React.createElement(\"div\", {\n    className: 'str-chat__message--system',\n    \"data-testid\": 'message-system'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__text'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  }), React.createElement(\"p\", null, text), React.createElement(\"div\", {\n    className: 'str-chat__message--system__line'\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message--system__date'\n  }, React.createElement(\"strong\", null, getDateString({\n    ...getDateOptions,\n    calendar,\n    calendarFormats,\n    format,\n    t,\n    timestampTranslationKey: 'timestamp/SystemMessage'\n  }))));\n  if (event?.type === 'member.removed' || event?.type === 'member.added') {\n    const name = event.user?.name || event.user?.id;\n    const sentence = `${name} ${event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat'}`;\n    return React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event'\n    }, React.createElement(Avatar, {\n      image: event.user?.image,\n      name: name,\n      user: event.user\n    }), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__content'\n    }, React.createElement(\"em\", {\n      className: 'str-chat__event-component__channel-event__sentence'\n    }, sentence), React.createElement(\"div\", {\n      className: 'str-chat__event-component__channel-event__date'\n    }, getDateString({\n      ...getDateOptions,\n      format: 'LT'\n    }))));\n  }\n  return null;\n};\nexport const EventComponent = React.memo(UnMemoizedEventComponent);","map":{"version":3,"names":["React","Avatar","DefaultAvatar","useTranslationContext","getDateString","UnMemoizedEventComponent","props","calendar","calendarFormats","format","message","t","tDateTimeParser","created_at","event","text","type","getDateOptions","messageCreatedAt","toString","createElement","className","timestampTranslationKey","name","user","id","sentence","image","EventComponent","memo"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/EventComponent/EventComponent.js"],"sourcesContent":["import React from 'react';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\n/**\n * Component to display system and channel event messages\n */\nconst UnMemoizedEventComponent = (props) => {\n    const { Avatar = DefaultAvatar, calendar, calendarFormats, format, message } = props;\n    const { t, tDateTimeParser } = useTranslationContext('EventComponent');\n    const { created_at = '', event, text, type } = message;\n    const getDateOptions = { messageCreatedAt: created_at.toString(), tDateTimeParser };\n    if (type === 'system')\n        return (React.createElement(\"div\", { className: 'str-chat__message--system', \"data-testid\": 'message-system' },\n            React.createElement(\"div\", { className: 'str-chat__message--system__text' },\n                React.createElement(\"div\", { className: 'str-chat__message--system__line' }),\n                React.createElement(\"p\", null, text),\n                React.createElement(\"div\", { className: 'str-chat__message--system__line' })),\n            React.createElement(\"div\", { className: 'str-chat__message--system__date' },\n                React.createElement(\"strong\", null, getDateString({\n                    ...getDateOptions,\n                    calendar,\n                    calendarFormats,\n                    format,\n                    t,\n                    timestampTranslationKey: 'timestamp/SystemMessage',\n                })))));\n    if (event?.type === 'member.removed' || event?.type === 'member.added') {\n        const name = event.user?.name || event.user?.id;\n        const sentence = `${name} ${event.type === 'member.added' ? 'has joined the chat' : 'was removed from the chat'}`;\n        return (React.createElement(\"div\", { className: 'str-chat__event-component__channel-event' },\n            React.createElement(Avatar, { image: event.user?.image, name: name, user: event.user }),\n            React.createElement(\"div\", { className: 'str-chat__event-component__channel-event__content' },\n                React.createElement(\"em\", { className: 'str-chat__event-component__channel-event__sentence' }, sentence),\n                React.createElement(\"div\", { className: 'str-chat__event-component__channel-event__date' }, getDateString({ ...getDateOptions, format: 'LT' })))));\n    }\n    return null;\n};\nexport const EventComponent = React.memo(UnMemoizedEventComponent);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}