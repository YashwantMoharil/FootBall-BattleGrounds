{"ast":null,"code":"import clsx from 'clsx';\nimport React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useDialogIsOpen } from '../Dialog';\nimport { ReactionSelectorWithButton } from '../Reactions/ReactionSelectorWithButton';\nimport { useMessageContext, useTranslationContext } from '../../context';\nconst UnMemoizedMessageOptions = props => {\n  const {\n    ActionsIcon = DefaultActionsIcon,\n    displayReplies = true,\n    handleOpenThread: propHandleOpenThread,\n    ReactionIcon = DefaultReactionIcon,\n    theme = 'simple',\n    ThreadIcon = DefaultThreadIcon\n  } = props;\n  const {\n    getMessageActions,\n    handleOpenThread: contextHandleOpenThread,\n    initialMessage,\n    message,\n    threadList\n  } = useMessageContext('MessageOptions');\n  const {\n    t\n  } = useTranslationContext('MessageOptions');\n  const messageActionsDialogIsOpen = useDialogIsOpen(`message-actions--${message.id}`);\n  const reactionSelectorDialogIsOpen = useDialogIsOpen(`reaction-selector--${message.id}`);\n  const handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  const messageActions = getMessageActions();\n  const shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: clsx(`str-chat__message-${theme}__actions str-chat__message-options`, {\n      'str-chat__message-options--active': messageActionsDialogIsOpen || reactionSelectorDialogIsOpen\n    }),\n    \"data-testid\": 'message-options'\n  }, React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon\n  }), shouldShowReplies && React.createElement(\"button\", {\n    \"aria-label\": t('aria/Open Thread'),\n    className: `str-chat__message-${theme}__actions__action str-chat__message-${theme}__actions__action--thread str-chat__message-reply-in-thread-button`,\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, {\n    className: 'str-chat__message-action-icon'\n  })), shouldShowReactions && React.createElement(ReactionSelectorWithButton, {\n    ReactionIcon: ReactionIcon\n  }));\n};\nexport const MessageOptions = React.memo(UnMemoizedMessageOptions);","map":{"version":3,"names":["clsx","React","ActionsIcon","DefaultActionsIcon","ReactionIcon","DefaultReactionIcon","ThreadIcon","DefaultThreadIcon","MESSAGE_ACTIONS","MessageActions","useDialogIsOpen","ReactionSelectorWithButton","useMessageContext","useTranslationContext","UnMemoizedMessageOptions","props","displayReplies","handleOpenThread","propHandleOpenThread","theme","getMessageActions","contextHandleOpenThread","initialMessage","message","threadList","t","messageActionsDialogIsOpen","id","reactionSelectorDialogIsOpen","messageActions","shouldShowReactions","indexOf","react","shouldShowReplies","reply","type","status","createElement","className","onClick","MessageOptions","memo"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/MessageOptions.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon, } from './icons';\nimport { MESSAGE_ACTIONS } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useDialogIsOpen } from '../Dialog';\nimport { ReactionSelectorWithButton } from '../Reactions/ReactionSelectorWithButton';\nimport { useMessageContext, useTranslationContext } from '../../context';\nconst UnMemoizedMessageOptions = (props) => {\n    const { ActionsIcon = DefaultActionsIcon, displayReplies = true, handleOpenThread: propHandleOpenThread, ReactionIcon = DefaultReactionIcon, theme = 'simple', ThreadIcon = DefaultThreadIcon, } = props;\n    const { getMessageActions, handleOpenThread: contextHandleOpenThread, initialMessage, message, threadList, } = useMessageContext('MessageOptions');\n    const { t } = useTranslationContext('MessageOptions');\n    const messageActionsDialogIsOpen = useDialogIsOpen(`message-actions--${message.id}`);\n    const reactionSelectorDialogIsOpen = useDialogIsOpen(`reaction-selector--${message.id}`);\n    const handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n    const messageActions = getMessageActions();\n    const shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n    const shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n    if (!message.type ||\n        message.type === 'error' ||\n        message.type === 'system' ||\n        message.type === 'ephemeral' ||\n        message.status === 'failed' ||\n        message.status === 'sending' ||\n        initialMessage) {\n        return null;\n    }\n    return (React.createElement(\"div\", { className: clsx(`str-chat__message-${theme}__actions str-chat__message-options`, {\n            'str-chat__message-options--active': messageActionsDialogIsOpen || reactionSelectorDialogIsOpen,\n        }), \"data-testid\": 'message-options' },\n        React.createElement(MessageActions, { ActionsIcon: ActionsIcon }),\n        shouldShowReplies && (React.createElement(\"button\", { \"aria-label\": t('aria/Open Thread'), className: `str-chat__message-${theme}__actions__action str-chat__message-${theme}__actions__action--thread str-chat__message-reply-in-thread-button`, \"data-testid\": 'thread-action', onClick: handleOpenThread },\n            React.createElement(ThreadIcon, { className: 'str-chat__message-action-icon' }))),\n        shouldShowReactions && React.createElement(ReactionSelectorWithButton, { ReactionIcon: ReactionIcon })));\n};\nexport const MessageOptions = React.memo(UnMemoizedMessageOptions);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}