{"ast":null,"code":"var _jsxFileName = \"/Users/yashwantmoharil/Desktop/football-battlegrounds/client/src/Components/TicTacToe.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useChannelStateContext, useChatContext } from \"stream-chat-react\";\nimport Board from \"./Board\";\nimport GameOver from \"./GameOver\";\nimport GameState from \"./GameState\";\nimport Reset from \"./Reset\";\nimport Mines from \"./Mines\"; // Assuming Mines is a function that returns the mine array\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TicTacToe() {\n  _s();\n  // This 'player' variable needs careful consideration in a multi-player setup.\n  // 'client.userID' is typically used to identify the current player.\n  // For now, sticking with your \"X\" but keep in mind for full multiplayer logic.\n  const localPlayer = \"X\"; // This represents the player for THIS client's UI\n  const {\n    channel\n  } = useChannelStateContext();\n  const {\n    client\n  } = useChatContext();\n  const [turn, setTurn] = useState(\"X\"); // Whose turn it is\n  const [mistakeCounts, setMistakeCounts] = useState({\n    \"X\": 0,\n    \"O\": 0\n  });\n  const [tiles, setTiles] = useState(Array(64).fill(null)); // Revealed tiles (null for hidden, value for revealed)\n  const [mines, setMines] = useState(Array(64).fill(null)); // The actual mine layout (-1 for mine, 0+ for numbers)\n  const [mineCount, setMineCount] = useState(5); // Number of mines remaining to be revealed\n  const [strike, setStrike] = useState(null); // Not entirely clear how strike is used in your current logic.\n  const [gameState, setGameState] = useState(GameState.mineCreation);\n\n  // Effect to initialize mines when the game starts or resets\n  useEffect(() => {\n    if (gameState === GameState.mineCreation) {\n      const newGrid = Mines(mineCount); // Assuming Mines(count) generates the mine array\n      setMines(newGrid);\n      setGameState(GameState.start);\n      // Potentially send an initial board state here if players join at different times\n      // or if the mine layout needs to be consistent from the very beginning for all.\n      // For simplicity, we'll rely on game-move for tile clicks for now.\n    }\n  }, [gameState, mineCount]); // Depend on gameState and mineCount\n\n  const handleTileclick = async index => {\n    // Only allow clicks if the game is in a playable state\n    if (gameState !== GameState.start && gameState !== GameState.inProgress) {\n      console.log(\"Game not in playable state.\");\n      return;\n    }\n    // Prevent clicking on an already revealed tile\n    if (tiles[index] !== null) {\n      console.log(\"Tile already revealed.\");\n      return;\n    }\n\n    // Ensure the game transitions to inProgress once a move is made from start\n    if (gameState === GameState.start) {\n      setGameState(GameState.inProgress);\n    }\n\n    // --- Calculate new state based on the move ---\n    const newTiles = [...tiles];\n    const isMine = mines[index] === -1; // Check if the clicked tile is a mine\n    newTiles[index] = mines[index]; // Reveal the tile\n\n    let updatedMineCount = mineCount;\n    const updatedMistakeCounts = {\n      ...mistakeCounts\n    };\n    let updatedGameState = gameState; // Assume it stays inProgress unless changed below\n    let nextTurn = turn === 'X' ? 'O' : 'X'; // Determine next turn based on current turn\n\n    if (isMine) {\n      updatedMineCount -= 1;\n      // Increment mistake count for the player whose turn it was\n      updatedMistakeCounts[turn] = (updatedMistakeCounts[turn] || 0) + 1;\n      if (updatedMineCount === 0) {\n        updatedGameState = GameState.gameover; // All mines found (or exploded)\n      }\n    }\n\n    // --- Update local state first ---\n    setTiles(newTiles);\n    setMineCount(updatedMineCount);\n    setMistakeCounts(updatedMistakeCounts);\n    setTurn(nextTurn); // Update turn after local player's action\n    setGameState(updatedGameState);\n\n    // --- Send the *updated* state to other clients ---\n    await channel.sendEvent({\n      type: \"game_move\",\n      // Use snake_case for event types for consistency\n      data: {\n        tiles: newTiles,\n        // Send the *newly calculated* tiles state\n        mines: mines,\n        // Mines array typically doesn't change after initial setup\n        mineCount: updatedMineCount,\n        mistakeCounts: updatedMistakeCounts,\n        turn: nextTurn,\n        gameState: updatedGameState\n        // player: client.userID // Consider sending the actual user ID instead of a static \"player\"\n      }\n    });\n  };\n\n  // Effect for receiving game events from other clients\n  useEffect(() => {\n    const handleGameEvent = event => {\n      // Only process events if they are of type \"game_move\" and not from the current user\n      if (event.type === \"game_move\" && event.user.id !== client.userID) {\n        // Apply the synced state from the event data\n        setTiles(event.data.tiles);\n        setMines(event.data.mines);\n        setMineCount(event.data.mineCount);\n        setMistakeCounts(event.data.mistakeCounts);\n        setTurn(event.data.turn);\n        setGameState(event.data.gameState);\n      }\n      // Also handle game reset events\n      if (event.type === \"game_reset\" && event.user.id !== client.userID) {\n        setTiles(event.data.tiles);\n        setMines(event.data.mines);\n        setMineCount(event.data.mineCount);\n        setMistakeCounts(event.data.mistakeCounts);\n        setTurn(event.data.turn);\n        setGameState(event.data.gameState);\n        setStrike(event.data.strike); // Assuming strike is part of reset\n      }\n    };\n\n    // Register the event listener when the component mounts\n    channel.on(\"event\", handleGameEvent);\n\n    // Cleanup function: Unregister the event listener when the component unmounts\n    return () => {\n      channel.off(\"event\", handleGameEvent);\n    };\n  }, [channel, client.userID]); // Dependencies: channel and client.userID\n\n  const handleReset = async () => {\n    // Reset local state to initial values\n    const initialTiles = Array(64).fill(null);\n    const newMinesLayout = Mines(5); // Generate new mine layout for reset\n    const initialMistakeCounts = {\n      \"X\": 0,\n      \"O\": 0\n    };\n    const initialMineCount = 5;\n    setTiles(initialTiles);\n    setMines(newMinesLayout);\n    setTurn(\"X\");\n    setMistakeCounts(initialMistakeCounts);\n    setMineCount(initialMineCount);\n    setGameState(GameState.mineCreation); // Go back to mine creation state on reset\n    setStrike(null);\n\n    // Send a \"game_reset\" event to other clients\n    await channel.sendEvent({\n      type: \"game_reset\",\n      data: {\n        tiles: initialTiles,\n        mines: newMinesLayout,\n        turn: \"X\",\n        mineCount: initialMineCount,\n        mistakeCounts: initialMistakeCounts,\n        gameState: GameState.mineCreation,\n        strike: null\n      }\n    });\n  };\n\n  // The `checkWinner` logic needs to be tailored for a Minesweeper-like game.\n  // A \"full board\" doesn't necessarily mean a win or tie in Minesweeper.\n  // Consider conditions like:\n  // 1. All non-mine tiles revealed (win)\n  // 2. All mines have been clicked (loss, or end of game)\n  useEffect(() => {\n    // Example: Check for game win (all non-mine tiles revealed)\n    const allNonMineTiles = mines.filter(m => m !== -1).length;\n    const revealedNonMineTiles = tiles.filter((t, i) => t !== null && mines[i] !== -1).length;\n    if (gameState === GameState.inProgress && revealedNonMineTiles === allNonMineTiles) {\n      setGameState(GameState.gameover); // Or GameState.win if you define it\n      console.log(\"Game Over: All non-mine tiles revealed!\");\n    }\n    // You already have `mineCount === 0` leading to `GameState.gameover` in handleTileclick for mine explosions.\n  }, [tiles, mines, gameState]); // Depend on tiles, mines, and gameState for win/loss checks\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic Tac Toe / Minesweeper Hybrid\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Current Turn: \", turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Mistakes - X: \", mistakeCounts[\"X\"], \", O: \", mistakeCounts[\"O\"]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Mines Remaining: \", mineCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      player: localPlayer // Pass the local client's player representation\n      ,\n      tiles: tiles,\n      onTileClick: handleTileclick,\n      strike: strike\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GameOver, {\n      gameState: gameState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Reset, {\n      gameState: gameState,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n}\n_s(TicTacToe, \"BWCvPFy365tDQ/ojokRwR8yWevg=\", false, function () {\n  return [useChannelStateContext, useChatContext];\n});\n_c = TicTacToe;\nexport default TicTacToe;\nvar _c;\n$RefreshReg$(_c, \"TicTacToe\");","map":{"version":3,"names":["React","useEffect","useState","useChannelStateContext","useChatContext","Board","GameOver","GameState","Reset","Mines","jsxDEV","_jsxDEV","TicTacToe","_s","localPlayer","channel","client","turn","setTurn","mistakeCounts","setMistakeCounts","tiles","setTiles","Array","fill","mines","setMines","mineCount","setMineCount","strike","setStrike","gameState","setGameState","mineCreation","newGrid","start","handleTileclick","index","inProgress","console","log","newTiles","isMine","updatedMineCount","updatedMistakeCounts","updatedGameState","nextTurn","gameover","sendEvent","type","data","handleGameEvent","event","user","id","userID","on","off","handleReset","initialTiles","newMinesLayout","initialMistakeCounts","initialMineCount","allNonMineTiles","filter","m","length","revealedNonMineTiles","t","i","children","fileName","_jsxFileName","lineNumber","columnNumber","player","onTileClick","onReset","_c","$RefreshReg$"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/src/Components/TicTacToe.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useChannelStateContext, useChatContext } from \"stream-chat-react\";\nimport Board from \"./Board\";\nimport GameOver from \"./GameOver\";\nimport GameState from \"./GameState\";\nimport Reset from \"./Reset\";\nimport Mines from \"./Mines\"; // Assuming Mines is a function that returns the mine array\n\nfunction TicTacToe() {\n  // This 'player' variable needs careful consideration in a multi-player setup.\n  // 'client.userID' is typically used to identify the current player.\n  // For now, sticking with your \"X\" but keep in mind for full multiplayer logic.\n  const localPlayer = \"X\"; // This represents the player for THIS client's UI\n  const { channel } = useChannelStateContext();\n  const { client } = useChatContext();\n\n  const [turn, setTurn] = useState(\"X\"); // Whose turn it is\n  const [mistakeCounts, setMistakeCounts] = useState({ \"X\": 0, \"O\": 0 });\n  const [tiles, setTiles] = useState(Array(64).fill(null)); // Revealed tiles (null for hidden, value for revealed)\n  const [mines, setMines] = useState(Array(64).fill(null)); // The actual mine layout (-1 for mine, 0+ for numbers)\n  const [mineCount, setMineCount] = useState(5); // Number of mines remaining to be revealed\n  const [strike, setStrike] = useState(null); // Not entirely clear how strike is used in your current logic.\n  const [gameState, setGameState] = useState(GameState.mineCreation);\n\n  // Effect to initialize mines when the game starts or resets\n  useEffect(() => {\n    if (gameState === GameState.mineCreation) {\n      const newGrid = Mines(mineCount); // Assuming Mines(count) generates the mine array\n      setMines(newGrid);\n      setGameState(GameState.start);\n      // Potentially send an initial board state here if players join at different times\n      // or if the mine layout needs to be consistent from the very beginning for all.\n      // For simplicity, we'll rely on game-move for tile clicks for now.\n    }\n  }, [gameState, mineCount]); // Depend on gameState and mineCount\n\n  const handleTileclick = async (index) => {\n    // Only allow clicks if the game is in a playable state\n    if (gameState !== GameState.start && gameState !== GameState.inProgress) {\n      console.log(\"Game not in playable state.\");\n      return;\n    }\n    // Prevent clicking on an already revealed tile\n    if (tiles[index] !== null) {\n      console.log(\"Tile already revealed.\");\n      return;\n    }\n\n    // Ensure the game transitions to inProgress once a move is made from start\n    if (gameState === GameState.start) {\n      setGameState(GameState.inProgress);\n    }\n\n    // --- Calculate new state based on the move ---\n    const newTiles = [...tiles];\n    const isMine = mines[index] === -1; // Check if the clicked tile is a mine\n    newTiles[index] = mines[index]; // Reveal the tile\n\n    let updatedMineCount = mineCount;\n    const updatedMistakeCounts = { ...mistakeCounts };\n    let updatedGameState = gameState; // Assume it stays inProgress unless changed below\n    let nextTurn = turn === 'X' ? 'O' : 'X'; // Determine next turn based on current turn\n\n    if (isMine) {\n      updatedMineCount -= 1;\n      // Increment mistake count for the player whose turn it was\n      updatedMistakeCounts[turn] = (updatedMistakeCounts[turn] || 0) + 1;\n\n      if (updatedMineCount === 0) {\n        updatedGameState = GameState.gameover; // All mines found (or exploded)\n      }\n    }\n\n    // --- Update local state first ---\n    setTiles(newTiles);\n    setMineCount(updatedMineCount);\n    setMistakeCounts(updatedMistakeCounts);\n    setTurn(nextTurn); // Update turn after local player's action\n    setGameState(updatedGameState);\n\n\n    // --- Send the *updated* state to other clients ---\n    await channel.sendEvent({\n      type: \"game_move\", // Use snake_case for event types for consistency\n      data: {\n        tiles: newTiles, // Send the *newly calculated* tiles state\n        mines: mines, // Mines array typically doesn't change after initial setup\n        mineCount: updatedMineCount,\n        mistakeCounts: updatedMistakeCounts,\n        turn: nextTurn,\n        gameState: updatedGameState,\n        // player: client.userID // Consider sending the actual user ID instead of a static \"player\"\n      },\n    });\n  };\n\n  // Effect for receiving game events from other clients\n  useEffect(() => {\n    const handleGameEvent = (event) => {\n      // Only process events if they are of type \"game_move\" and not from the current user\n      if (event.type === \"game_move\" && event.user.id !== client.userID) {\n        // Apply the synced state from the event data\n        setTiles(event.data.tiles);\n        setMines(event.data.mines);\n        setMineCount(event.data.mineCount);\n        setMistakeCounts(event.data.mistakeCounts);\n        setTurn(event.data.turn);\n        setGameState(event.data.gameState);\n      }\n      // Also handle game reset events\n      if (event.type === \"game_reset\" && event.user.id !== client.userID) {\n        setTiles(event.data.tiles);\n        setMines(event.data.mines);\n        setMineCount(event.data.mineCount);\n        setMistakeCounts(event.data.mistakeCounts);\n        setTurn(event.data.turn);\n        setGameState(event.data.gameState);\n        setStrike(event.data.strike); // Assuming strike is part of reset\n      }\n    };\n\n    // Register the event listener when the component mounts\n    channel.on(\"event\", handleGameEvent);\n\n    // Cleanup function: Unregister the event listener when the component unmounts\n    return () => {\n      channel.off(\"event\", handleGameEvent);\n    };\n  }, [channel, client.userID]); // Dependencies: channel and client.userID\n\n  const handleReset = async () => {\n    // Reset local state to initial values\n    const initialTiles = Array(64).fill(null);\n    const newMinesLayout = Mines(5); // Generate new mine layout for reset\n    const initialMistakeCounts = { \"X\": 0, \"O\": 0 };\n    const initialMineCount = 5;\n\n    setTiles(initialTiles);\n    setMines(newMinesLayout);\n    setTurn(\"X\");\n    setMistakeCounts(initialMistakeCounts);\n    setMineCount(initialMineCount);\n    setGameState(GameState.mineCreation); // Go back to mine creation state on reset\n    setStrike(null);\n\n    // Send a \"game_reset\" event to other clients\n    await channel.sendEvent({\n      type: \"game_reset\",\n      data: {\n        tiles: initialTiles,\n        mines: newMinesLayout,\n        turn: \"X\",\n        mineCount: initialMineCount,\n        mistakeCounts: initialMistakeCounts,\n        gameState: GameState.mineCreation,\n        strike: null,\n      },\n    });\n  };\n\n  // The `checkWinner` logic needs to be tailored for a Minesweeper-like game.\n  // A \"full board\" doesn't necessarily mean a win or tie in Minesweeper.\n  // Consider conditions like:\n  // 1. All non-mine tiles revealed (win)\n  // 2. All mines have been clicked (loss, or end of game)\n  useEffect(() => {\n    // Example: Check for game win (all non-mine tiles revealed)\n    const allNonMineTiles = mines.filter(m => m !== -1).length;\n    const revealedNonMineTiles = tiles.filter((t, i) => t !== null && mines[i] !== -1).length;\n\n    if (gameState === GameState.inProgress && revealedNonMineTiles === allNonMineTiles) {\n      setGameState(GameState.gameover); // Or GameState.win if you define it\n      console.log(\"Game Over: All non-mine tiles revealed!\");\n    }\n    // You already have `mineCount === 0` leading to `GameState.gameover` in handleTileclick for mine explosions.\n\n  }, [tiles, mines, gameState]); // Depend on tiles, mines, and gameState for win/loss checks\n\n\n  return (\n    <div>\n      <h1>Tic Tac Toe / Minesweeper Hybrid</h1>\n      {/* It's more accurate to show the current player's ID if you're using client.userID */}\n      <h4>Current Turn: {turn}</h4>\n      <h4>Mistakes - X: {mistakeCounts[\"X\"]}, O: {mistakeCounts[\"O\"]}</h4>\n      <h4>Mines Remaining: {mineCount}</h4>\n      <Board\n        player={localPlayer} // Pass the local client's player representation\n        tiles={tiles}\n        onTileClick={handleTileclick}\n        strike={strike}\n      />\n      <GameOver gameState={gameState} />\n      <Reset gameState={gameState} onReset={handleReset} />\n    </div>\n  );\n}\n\nexport default TicTacToe;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}