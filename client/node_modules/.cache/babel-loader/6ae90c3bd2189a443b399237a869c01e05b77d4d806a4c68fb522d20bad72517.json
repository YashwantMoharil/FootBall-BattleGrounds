{"ast":null,"code":"import React from 'react';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\nconst UnMemoizedDateSeparator = props => {\n  const {\n    calendar,\n    date: messageCreatedAt,\n    formatDate,\n    position = 'right',\n    unread,\n    ...restTimestampFormatterOptions\n  } = props;\n  const {\n    t,\n    tDateTimeParser\n  } = useTranslationContext('DateSeparator');\n  const formattedDate = getDateString({\n    calendar,\n    ...restTimestampFormatterOptions,\n    formatDate,\n    messageCreatedAt,\n    t,\n    tDateTimeParser,\n    timestampTranslationKey: 'timestamp/DateSeparator'\n  });\n  return React.createElement(\"div\", {\n    className: 'str-chat__date-separator',\n    \"data-testid\": 'date-separator'\n  }, (position === 'right' || position === 'center') && React.createElement(\"hr\", {\n    className: 'str-chat__date-separator-line'\n  }), React.createElement(\"div\", {\n    className: 'str-chat__date-separator-date'\n  }, unread ? `${t('New')} - ${formattedDate}` : formattedDate), (position === 'left' || position === 'center') && React.createElement(\"hr\", {\n    className: 'str-chat__date-separator-line'\n  }));\n};\n/**\n * A simple date separator between messages.\n */\nexport const DateSeparator = React.memo(UnMemoizedDateSeparator);","map":{"version":3,"names":["React","useTranslationContext","getDateString","UnMemoizedDateSeparator","props","calendar","date","messageCreatedAt","formatDate","position","unread","restTimestampFormatterOptions","t","tDateTimeParser","formattedDate","timestampTranslationKey","createElement","className","DateSeparator","memo"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/DateSeparator/DateSeparator.js"],"sourcesContent":["import React from 'react';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { getDateString } from '../../i18n/utils';\nconst UnMemoizedDateSeparator = (props) => {\n    const { calendar, date: messageCreatedAt, formatDate, position = 'right', unread, ...restTimestampFormatterOptions } = props;\n    const { t, tDateTimeParser } = useTranslationContext('DateSeparator');\n    const formattedDate = getDateString({\n        calendar,\n        ...restTimestampFormatterOptions,\n        formatDate,\n        messageCreatedAt,\n        t,\n        tDateTimeParser,\n        timestampTranslationKey: 'timestamp/DateSeparator',\n    });\n    return (React.createElement(\"div\", { className: 'str-chat__date-separator', \"data-testid\": 'date-separator' },\n        (position === 'right' || position === 'center') && (React.createElement(\"hr\", { className: 'str-chat__date-separator-line' })),\n        React.createElement(\"div\", { className: 'str-chat__date-separator-date' }, unread ? `${t('New')} - ${formattedDate}` : formattedDate),\n        (position === 'left' || position === 'center') && (React.createElement(\"hr\", { className: 'str-chat__date-separator-line' }))));\n};\n/**\n * A simple date separator between messages.\n */\nexport const DateSeparator = React.memo(UnMemoizedDateSeparator);\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,aAAa,QAAQ,kBAAkB;AAChD,MAAMC,uBAAuB,GAAIC,KAAK,IAAK;EACvC,MAAM;IAAEC,QAAQ;IAAEC,IAAI,EAAEC,gBAAgB;IAAEC,UAAU;IAAEC,QAAQ,GAAG,OAAO;IAAEC,MAAM;IAAE,GAAGC;EAA8B,CAAC,GAAGP,KAAK;EAC5H,MAAM;IAAEQ,CAAC;IAAEC;EAAgB,CAAC,GAAGZ,qBAAqB,CAAC,eAAe,CAAC;EACrE,MAAMa,aAAa,GAAGZ,aAAa,CAAC;IAChCG,QAAQ;IACR,GAAGM,6BAA6B;IAChCH,UAAU;IACVD,gBAAgB;IAChBK,CAAC;IACDC,eAAe;IACfE,uBAAuB,EAAE;EAC7B,CAAC,CAAC;EACF,OAAQf,KAAK,CAACgB,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE,0BAA0B;IAAE,aAAa,EAAE;EAAiB,CAAC,EACzG,CAACR,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,QAAQ,KAAMT,KAAK,CAACgB,aAAa,CAAC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,CAAE,EAC9HjB,KAAK,CAACgB,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,EAAEP,MAAM,GAAG,GAAGE,CAAC,CAAC,KAAK,CAAC,MAAME,aAAa,EAAE,GAAGA,aAAa,CAAC,EACrI,CAACL,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,QAAQ,KAAMT,KAAK,CAACgB,aAAa,CAAC,IAAI,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,CAAE,CAAC;AACtI,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGlB,KAAK,CAACmB,IAAI,CAAChB,uBAAuB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}