{"ast":null,"code":"import { useMemo } from 'react';\nimport { isDate, isDayOrMoment } from '../../../i18n';\nexport const useCreateChannelStateContext = value => {\n  const {\n    channel,\n    channelCapabilitiesArray = [],\n    channelConfig,\n    channelUnreadUiState,\n    error,\n    giphyVersion,\n    hasMore,\n    hasMoreNewer,\n    highlightedMessageId,\n    imageAttachmentSizeHandler,\n    loading,\n    loadingMore,\n    members,\n    messages = [],\n    mutes,\n    notifications,\n    pinnedMessages,\n    read = {},\n    shouldGenerateVideoThumbnail,\n    skipMessageDataMemoization,\n    suppressAutoscroll,\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages = [],\n    videoAttachmentSizeHandler,\n    watcher_count,\n    watcherCount,\n    watchers\n  } = value;\n  const channelId = channel.cid;\n  const lastRead = channel.initialized && channel.lastRead()?.getTime();\n  const membersLength = Object.keys(members || []).length;\n  const notificationsLength = notifications.length;\n  const readUsers = Object.values(read);\n  const readUsersLength = readUsers.length;\n  const readUsersLastReads = readUsers.map(({\n    last_read\n  }) => last_read.toISOString()).join();\n  const threadMessagesLength = threadMessages?.length;\n  const channelCapabilities = {};\n  channelCapabilitiesArray.forEach(capability => {\n    channelCapabilities[capability] = true;\n  });\n  const memoizedMessageData = skipMessageDataMemoization ? messages : messages.map(({\n    deleted_at,\n    latest_reactions,\n    pinned,\n    reply_count,\n    status,\n    updated_at,\n    user\n  }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({\n    type\n  }) => type).join() : ''}${pinned}${reply_count}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ''}${user?.updated_at}`).join();\n  const memoizedThreadMessageData = threadMessages.map(({\n    deleted_at,\n    latest_reactions,\n    pinned,\n    status,\n    updated_at,\n    user\n  }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({\n    type\n  }) => type).join() : ''}${pinned}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at)) ? updated_at.toISOString() : updated_at || ''}${user?.updated_at}`).join();\n  const channelStateContext = useMemo(() => ({\n    channel,\n    channelCapabilities,\n    channelConfig,\n    channelUnreadUiState,\n    error,\n    giphyVersion,\n    hasMore,\n    hasMoreNewer,\n    highlightedMessageId,\n    imageAttachmentSizeHandler,\n    loading,\n    loadingMore,\n    members,\n    messages,\n    mutes,\n    notifications,\n    pinnedMessages,\n    read,\n    shouldGenerateVideoThumbnail,\n    suppressAutoscroll,\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages,\n    videoAttachmentSizeHandler,\n    watcher_count,\n    watcherCount,\n    watchers\n  }),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [channel.data?.name,\n  // otherwise ChannelHeader will not be updated\n  channelId, channelUnreadUiState, error, hasMore, hasMoreNewer, highlightedMessageId, lastRead, loading, loadingMore, membersLength, memoizedMessageData, memoizedThreadMessageData, notificationsLength, readUsersLength, readUsersLastReads, shouldGenerateVideoThumbnail, skipMessageDataMemoization, suppressAutoscroll, thread, threadHasMore, threadLoadingMore, threadMessagesLength, watcherCount]);\n  return channelStateContext;\n};","map":{"version":3,"names":["useMemo","isDate","isDayOrMoment","useCreateChannelStateContext","value","channel","channelCapabilitiesArray","channelConfig","channelUnreadUiState","error","giphyVersion","hasMore","hasMoreNewer","highlightedMessageId","imageAttachmentSizeHandler","loading","loadingMore","members","messages","mutes","notifications","pinnedMessages","read","shouldGenerateVideoThumbnail","skipMessageDataMemoization","suppressAutoscroll","thread","threadHasMore","threadLoadingMore","threadMessages","videoAttachmentSizeHandler","watcher_count","watcherCount","watchers","channelId","cid","lastRead","initialized","getTime","membersLength","Object","keys","length","notificationsLength","readUsers","values","readUsersLength","readUsersLastReads","map","last_read","toISOString","join","threadMessagesLength","channelCapabilities","forEach","capability","memoizedMessageData","deleted_at","latest_reactions","pinned","reply_count","status","updated_at","user","type","memoizedThreadMessageData","channelStateContext","data","name"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Channel/hooks/useCreateChannelStateContext.js"],"sourcesContent":["import { useMemo } from 'react';\nimport { isDate, isDayOrMoment } from '../../../i18n';\nexport const useCreateChannelStateContext = (value) => {\n    const { channel, channelCapabilitiesArray = [], channelConfig, channelUnreadUiState, error, giphyVersion, hasMore, hasMoreNewer, highlightedMessageId, imageAttachmentSizeHandler, loading, loadingMore, members, messages = [], mutes, notifications, pinnedMessages, read = {}, shouldGenerateVideoThumbnail, skipMessageDataMemoization, suppressAutoscroll, thread, threadHasMore, threadLoadingMore, threadMessages = [], videoAttachmentSizeHandler, watcher_count, watcherCount, watchers, } = value;\n    const channelId = channel.cid;\n    const lastRead = channel.initialized && channel.lastRead()?.getTime();\n    const membersLength = Object.keys(members || []).length;\n    const notificationsLength = notifications.length;\n    const readUsers = Object.values(read);\n    const readUsersLength = readUsers.length;\n    const readUsersLastReads = readUsers\n        .map(({ last_read }) => last_read.toISOString())\n        .join();\n    const threadMessagesLength = threadMessages?.length;\n    const channelCapabilities = {};\n    channelCapabilitiesArray.forEach((capability) => {\n        channelCapabilities[capability] = true;\n    });\n    const memoizedMessageData = skipMessageDataMemoization\n        ? messages\n        : messages\n            .map(({ deleted_at, latest_reactions, pinned, reply_count, status, updated_at, user, }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ''}${pinned}${reply_count}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))\n            ? updated_at.toISOString()\n            : updated_at || ''}${user?.updated_at}`)\n            .join();\n    const memoizedThreadMessageData = threadMessages\n        .map(({ deleted_at, latest_reactions, pinned, status, updated_at, user }) => `${deleted_at}${latest_reactions ? latest_reactions.map(({ type }) => type).join() : ''}${pinned}${status}${updated_at && (isDayOrMoment(updated_at) || isDate(updated_at))\n        ? updated_at.toISOString()\n        : updated_at || ''}${user?.updated_at}`)\n        .join();\n    const channelStateContext = useMemo(() => ({\n        channel,\n        channelCapabilities,\n        channelConfig,\n        channelUnreadUiState,\n        error,\n        giphyVersion,\n        hasMore,\n        hasMoreNewer,\n        highlightedMessageId,\n        imageAttachmentSizeHandler,\n        loading,\n        loadingMore,\n        members,\n        messages,\n        mutes,\n        notifications,\n        pinnedMessages,\n        read,\n        shouldGenerateVideoThumbnail,\n        suppressAutoscroll,\n        thread,\n        threadHasMore,\n        threadLoadingMore,\n        threadMessages,\n        videoAttachmentSizeHandler,\n        watcher_count,\n        watcherCount,\n        watchers,\n    }), \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        channel.data?.name, // otherwise ChannelHeader will not be updated\n        channelId,\n        channelUnreadUiState,\n        error,\n        hasMore,\n        hasMoreNewer,\n        highlightedMessageId,\n        lastRead,\n        loading,\n        loadingMore,\n        membersLength,\n        memoizedMessageData,\n        memoizedThreadMessageData,\n        notificationsLength,\n        readUsersLength,\n        readUsersLastReads,\n        shouldGenerateVideoThumbnail,\n        skipMessageDataMemoization,\n        suppressAutoscroll,\n        thread,\n        threadHasMore,\n        threadLoadingMore,\n        threadMessagesLength,\n        watcherCount,\n    ]);\n    return channelStateContext;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}