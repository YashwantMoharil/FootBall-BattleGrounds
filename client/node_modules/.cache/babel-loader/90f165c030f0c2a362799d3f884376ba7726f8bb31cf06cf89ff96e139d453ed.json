{"ast":null,"code":"import { escapeRegExp } from '../regex';\nimport { findAndReplace } from 'hast-util-find-and-replace';\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nexport const mentionsMarkdownPlugin = mentioned_users => () => {\n  const mentioned_usernames = mentioned_users.map(user => user.name || user.id).filter(Boolean).map(escapeRegExp);\n  const mentionedUsersRegex = new RegExp(mentioned_usernames.map(username => `@${username}`).join('|'), 'g');\n  const replace = match => {\n    const usernameOrId = match.replace('@', '');\n    const user = mentioned_users.find(({\n      id,\n      name\n    }) => name === usernameOrId || id === usernameOrId);\n    return u('element', {\n      mentionedUser: user,\n      properties: {},\n      tagName: 'mention'\n    }, [u('text', match)]);\n  };\n  const transform = tree => {\n    if (!mentioned_usernames.length) return;\n    // handles special cases of mentions where user.name is an e-mail\n    // Remark GFM translates all e-mail-like text nodes to links creating\n    // two separate child nodes \"@\" and \"your.name@as.email\" instead of\n    // keeping it as one text node with value \"@your.name@as.email\"\n    // this piece finds these two separated nodes and merges them together\n    // before \"replace\" function takes over\n    visit(tree, (node, index, parent) => {\n      if (typeof index === 'undefined') return;\n      if (!parent) return;\n      const nextChild = parent.children.at(index + 1);\n      const nextChildHref = nextChild?.properties?.href;\n      if (node.type === 'text' &&\n      // text value has to have @ sign at the end of the string\n      // and no other characters except whitespace can precede it\n      // valid cases:   \"text @\", \"@\", \" @\"\n      // invalid cases: \"text@\", \"@text\",\n      /.?\\s?@$|^@$/.test(node.value) && nextChildHref?.startsWith('mailto:')) {\n        const newTextValue = node.value.replace(/@$/, '');\n        const username = nextChildHref.replace('mailto:', '');\n        parent.children[index] = u('text', newTextValue);\n        parent.children[index + 1] = u('text', `@${username}`);\n      }\n    });\n    findAndReplace(tree, [mentionedUsersRegex, replace]);\n  };\n  return transform;\n};","map":{"version":3,"names":["escapeRegExp","findAndReplace","u","visit","mentionsMarkdownPlugin","mentioned_users","mentioned_usernames","map","user","name","id","filter","Boolean","mentionedUsersRegex","RegExp","username","join","replace","match","usernameOrId","find","mentionedUser","properties","tagName","transform","tree","length","node","index","parent","nextChild","children","at","nextChildHref","href","type","test","value","startsWith","newTextValue"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/renderText/rehypePlugins/mentionsMarkdownPlugin.js"],"sourcesContent":["import { escapeRegExp } from '../regex';\nimport { findAndReplace } from 'hast-util-find-and-replace';\nimport { u } from 'unist-builder';\nimport { visit } from 'unist-util-visit';\nexport const mentionsMarkdownPlugin = (mentioned_users) => () => {\n    const mentioned_usernames = mentioned_users\n        .map((user) => user.name || user.id)\n        .filter(Boolean)\n        .map(escapeRegExp);\n    const mentionedUsersRegex = new RegExp(mentioned_usernames.map((username) => `@${username}`).join('|'), 'g');\n    const replace = (match) => {\n        const usernameOrId = match.replace('@', '');\n        const user = mentioned_users.find(({ id, name }) => name === usernameOrId || id === usernameOrId);\n        return u('element', { mentionedUser: user, properties: {}, tagName: 'mention' }, [\n            u('text', match),\n        ]);\n    };\n    const transform = (tree) => {\n        if (!mentioned_usernames.length)\n            return;\n        // handles special cases of mentions where user.name is an e-mail\n        // Remark GFM translates all e-mail-like text nodes to links creating\n        // two separate child nodes \"@\" and \"your.name@as.email\" instead of\n        // keeping it as one text node with value \"@your.name@as.email\"\n        // this piece finds these two separated nodes and merges them together\n        // before \"replace\" function takes over\n        visit(tree, (node, index, parent) => {\n            if (typeof index === 'undefined')\n                return;\n            if (!parent)\n                return;\n            const nextChild = parent.children.at(index + 1);\n            const nextChildHref = nextChild?.properties?.href;\n            if (node.type === 'text' &&\n                // text value has to have @ sign at the end of the string\n                // and no other characters except whitespace can precede it\n                // valid cases:   \"text @\", \"@\", \" @\"\n                // invalid cases: \"text@\", \"@text\",\n                /.?\\s?@$|^@$/.test(node.value) &&\n                nextChildHref?.startsWith('mailto:')) {\n                const newTextValue = node.value.replace(/@$/, '');\n                const username = nextChildHref.replace('mailto:', '');\n                parent.children[index] = u('text', newTextValue);\n                parent.children[index + 1] = u('text', `@${username}`);\n            }\n        });\n        findAndReplace(tree, [mentionedUsersRegex, replace]);\n    };\n    return transform;\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,CAAC,QAAQ,eAAe;AACjC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,OAAO,MAAMC,sBAAsB,GAAIC,eAAe,IAAK,MAAM;EAC7D,MAAMC,mBAAmB,GAAGD,eAAe,CACtCE,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,EAAE,CAAC,CACnCC,MAAM,CAACC,OAAO,CAAC,CACfL,GAAG,CAACP,YAAY,CAAC;EACtB,MAAMa,mBAAmB,GAAG,IAAIC,MAAM,CAACR,mBAAmB,CAACC,GAAG,CAAEQ,QAAQ,IAAK,IAAIA,QAAQ,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;EAC5G,MAAMC,OAAO,GAAIC,KAAK,IAAK;IACvB,MAAMC,YAAY,GAAGD,KAAK,CAACD,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;IAC3C,MAAMT,IAAI,GAAGH,eAAe,CAACe,IAAI,CAAC,CAAC;MAAEV,EAAE;MAAED;IAAK,CAAC,KAAKA,IAAI,KAAKU,YAAY,IAAIT,EAAE,KAAKS,YAAY,CAAC;IACjG,OAAOjB,CAAC,CAAC,SAAS,EAAE;MAAEmB,aAAa,EAAEb,IAAI;MAAEc,UAAU,EAAE,CAAC,CAAC;MAAEC,OAAO,EAAE;IAAU,CAAC,EAAE,CAC7ErB,CAAC,CAAC,MAAM,EAAEgB,KAAK,CAAC,CACnB,CAAC;EACN,CAAC;EACD,MAAMM,SAAS,GAAIC,IAAI,IAAK;IACxB,IAAI,CAACnB,mBAAmB,CAACoB,MAAM,EAC3B;IACJ;IACA;IACA;IACA;IACA;IACA;IACAvB,KAAK,CAACsB,IAAI,EAAE,CAACE,IAAI,EAAEC,KAAK,EAAEC,MAAM,KAAK;MACjC,IAAI,OAAOD,KAAK,KAAK,WAAW,EAC5B;MACJ,IAAI,CAACC,MAAM,EACP;MACJ,MAAMC,SAAS,GAAGD,MAAM,CAACE,QAAQ,CAACC,EAAE,CAACJ,KAAK,GAAG,CAAC,CAAC;MAC/C,MAAMK,aAAa,GAAGH,SAAS,EAAER,UAAU,EAAEY,IAAI;MACjD,IAAIP,IAAI,CAACQ,IAAI,KAAK,MAAM;MACpB;MACA;MACA;MACA;MACA,aAAa,CAACC,IAAI,CAACT,IAAI,CAACU,KAAK,CAAC,IAC9BJ,aAAa,EAAEK,UAAU,CAAC,SAAS,CAAC,EAAE;QACtC,MAAMC,YAAY,GAAGZ,IAAI,CAACU,KAAK,CAACpB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;QACjD,MAAMF,QAAQ,GAAGkB,aAAa,CAAChB,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;QACrDY,MAAM,CAACE,QAAQ,CAACH,KAAK,CAAC,GAAG1B,CAAC,CAAC,MAAM,EAAEqC,YAAY,CAAC;QAChDV,MAAM,CAACE,QAAQ,CAACH,KAAK,GAAG,CAAC,CAAC,GAAG1B,CAAC,CAAC,MAAM,EAAE,IAAIa,QAAQ,EAAE,CAAC;MAC1D;IACJ,CAAC,CAAC;IACFd,cAAc,CAACwB,IAAI,EAAE,CAACZ,mBAAmB,EAAEI,OAAO,CAAC,CAAC;EACxD,CAAC;EACD,OAAOO,SAAS;AACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}