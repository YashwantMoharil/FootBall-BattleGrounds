{"ast":null,"code":"import { useMemo, useRef } from 'react';\nimport { isLocalMessage } from '../../utils';\nconst STATUSES_EXCLUDED_FROM_PREPEND = {\n  failed: true,\n  sending: true\n};\nexport function usePrependedMessagesCount(messages, hasDateSeparator) {\n  const firstRealMessageIndex = hasDateSeparator ? 1 : 0;\n  const firstMessageOnFirstLoadedPage = useRef(undefined);\n  const previousFirstMessageOnFirstLoadedPage = useRef(undefined);\n  const previousNumItemsPrepended = useRef(0);\n  const numItemsPrepended = useMemo(() => {\n    if (!messages || !messages.length) {\n      previousNumItemsPrepended.current = 0;\n      return 0;\n    }\n    const currentFirstMessage = messages?.[firstRealMessageIndex];\n    const noNewMessages = currentFirstMessage?.id === previousFirstMessageOnFirstLoadedPage.current?.id;\n    // This is possible only, when sending messages very quickly (basically single char messages submitted like a crazy) in empty channel (first page)\n    // Optimistic UI update, when sending messages, can lead to a situation, when\n    // the order of the messages changes for a moment. This can happen, when a user\n    // sends multiple messages withing few milliseconds. E.g. we send a message A\n    // then message B. At first we have message array with both messages of status \"sending\"\n    // then response for message A is received with a new - later - created_at timestamp\n    // this leads to rearrangement of 1.B (\"sending\"), 2.A (\"received\"). Still firstMessageOnFirstLoadedPage.current\n    // points to message A, but now this message has index 1 => previousNumItemsPrepended.current === 1\n    // That in turn leads to incorrect index calculation in VirtualizedMessageList trying to access a message\n    // at non-existent index. Therefore, we ignore messages of status \"sending\" / \"failed\" in order they are\n    // not considered as prepended messages.\n    const currentFirstMessageStatus = isLocalMessage(currentFirstMessage) ? currentFirstMessage.status : undefined;\n    const firstMsgMovedAfterMessagesInExcludedStatus = !!(currentFirstMessageStatus && STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessageStatus]);\n    if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {\n      return previousNumItemsPrepended.current;\n    }\n    if (!firstMessageOnFirstLoadedPage.current) {\n      firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n    }\n    previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;\n    // if new messages were prepended, find out how many\n    // start with this number because there cannot be fewer prepended items than before\n    for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {\n      const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === firstMessageOnFirstLoadedPage.current?.id;\n      if (messageIsFirstOnFirstLoadedPage) {\n        previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;\n        return previousNumItemsPrepended.current;\n      }\n    }\n    // if no match has found, we have jumped - reset the prepended item count.\n    firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n    previousNumItemsPrepended.current = 0;\n    return 0;\n    // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n    // that's why the second dependency is necessary\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [firstRealMessageIndex, messages, messages?.length]);\n  return numItemsPrepended;\n}","map":{"version":3,"names":["useMemo","useRef","isLocalMessage","STATUSES_EXCLUDED_FROM_PREPEND","failed","sending","usePrependedMessagesCount","messages","hasDateSeparator","firstRealMessageIndex","firstMessageOnFirstLoadedPage","undefined","previousFirstMessageOnFirstLoadedPage","previousNumItemsPrepended","numItemsPrepended","length","current","currentFirstMessage","noNewMessages","id","currentFirstMessageStatus","status","firstMsgMovedAfterMessagesInExcludedStatus","prependedMessageCount","messageIsFirstOnFirstLoadedPage"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/VirtualizedMessageList/usePrependMessagesCount.js"],"sourcesContent":["import { useMemo, useRef } from 'react';\nimport { isLocalMessage } from '../../utils';\nconst STATUSES_EXCLUDED_FROM_PREPEND = {\n    failed: true,\n    sending: true,\n};\nexport function usePrependedMessagesCount(messages, hasDateSeparator) {\n    const firstRealMessageIndex = hasDateSeparator ? 1 : 0;\n    const firstMessageOnFirstLoadedPage = useRef(undefined);\n    const previousFirstMessageOnFirstLoadedPage = useRef(undefined);\n    const previousNumItemsPrepended = useRef(0);\n    const numItemsPrepended = useMemo(() => {\n        if (!messages || !messages.length) {\n            previousNumItemsPrepended.current = 0;\n            return 0;\n        }\n        const currentFirstMessage = messages?.[firstRealMessageIndex];\n        const noNewMessages = currentFirstMessage?.id === previousFirstMessageOnFirstLoadedPage.current?.id;\n        // This is possible only, when sending messages very quickly (basically single char messages submitted like a crazy) in empty channel (first page)\n        // Optimistic UI update, when sending messages, can lead to a situation, when\n        // the order of the messages changes for a moment. This can happen, when a user\n        // sends multiple messages withing few milliseconds. E.g. we send a message A\n        // then message B. At first we have message array with both messages of status \"sending\"\n        // then response for message A is received with a new - later - created_at timestamp\n        // this leads to rearrangement of 1.B (\"sending\"), 2.A (\"received\"). Still firstMessageOnFirstLoadedPage.current\n        // points to message A, but now this message has index 1 => previousNumItemsPrepended.current === 1\n        // That in turn leads to incorrect index calculation in VirtualizedMessageList trying to access a message\n        // at non-existent index. Therefore, we ignore messages of status \"sending\" / \"failed\" in order they are\n        // not considered as prepended messages.\n        const currentFirstMessageStatus = isLocalMessage(currentFirstMessage)\n            ? currentFirstMessage.status\n            : undefined;\n        const firstMsgMovedAfterMessagesInExcludedStatus = !!(currentFirstMessageStatus &&\n            STATUSES_EXCLUDED_FROM_PREPEND[currentFirstMessageStatus]);\n        if (noNewMessages || firstMsgMovedAfterMessagesInExcludedStatus) {\n            return previousNumItemsPrepended.current;\n        }\n        if (!firstMessageOnFirstLoadedPage.current) {\n            firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        }\n        previousFirstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        // if new messages were prepended, find out how many\n        // start with this number because there cannot be fewer prepended items than before\n        for (let prependedMessageCount = previousNumItemsPrepended.current; prependedMessageCount < messages.length; prependedMessageCount += 1) {\n            const messageIsFirstOnFirstLoadedPage = messages[prependedMessageCount].id === firstMessageOnFirstLoadedPage.current?.id;\n            if (messageIsFirstOnFirstLoadedPage) {\n                previousNumItemsPrepended.current = prependedMessageCount - firstRealMessageIndex;\n                return previousNumItemsPrepended.current;\n            }\n        }\n        // if no match has found, we have jumped - reset the prepended item count.\n        firstMessageOnFirstLoadedPage.current = currentFirstMessage;\n        previousNumItemsPrepended.current = 0;\n        return 0;\n        // TODO: there's a bug here, the messages prop is the same array instance (something mutates it)\n        // that's why the second dependency is necessary\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [firstRealMessageIndex, messages, messages?.length]);\n    return numItemsPrepended;\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,SAASC,cAAc,QAAQ,aAAa;AAC5C,MAAMC,8BAA8B,GAAG;EACnCC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;AACb,CAAC;AACD,OAAO,SAASC,yBAAyBA,CAACC,QAAQ,EAAEC,gBAAgB,EAAE;EAClE,MAAMC,qBAAqB,GAAGD,gBAAgB,GAAG,CAAC,GAAG,CAAC;EACtD,MAAME,6BAA6B,GAAGT,MAAM,CAACU,SAAS,CAAC;EACvD,MAAMC,qCAAqC,GAAGX,MAAM,CAACU,SAAS,CAAC;EAC/D,MAAME,yBAAyB,GAAGZ,MAAM,CAAC,CAAC,CAAC;EAC3C,MAAMa,iBAAiB,GAAGd,OAAO,CAAC,MAAM;IACpC,IAAI,CAACO,QAAQ,IAAI,CAACA,QAAQ,CAACQ,MAAM,EAAE;MAC/BF,yBAAyB,CAACG,OAAO,GAAG,CAAC;MACrC,OAAO,CAAC;IACZ;IACA,MAAMC,mBAAmB,GAAGV,QAAQ,GAAGE,qBAAqB,CAAC;IAC7D,MAAMS,aAAa,GAAGD,mBAAmB,EAAEE,EAAE,KAAKP,qCAAqC,CAACI,OAAO,EAAEG,EAAE;IACnG;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,yBAAyB,GAAGlB,cAAc,CAACe,mBAAmB,CAAC,GAC/DA,mBAAmB,CAACI,MAAM,GAC1BV,SAAS;IACf,MAAMW,0CAA0C,GAAG,CAAC,EAAEF,yBAAyB,IAC3EjB,8BAA8B,CAACiB,yBAAyB,CAAC,CAAC;IAC9D,IAAIF,aAAa,IAAII,0CAA0C,EAAE;MAC7D,OAAOT,yBAAyB,CAACG,OAAO;IAC5C;IACA,IAAI,CAACN,6BAA6B,CAACM,OAAO,EAAE;MACxCN,6BAA6B,CAACM,OAAO,GAAGC,mBAAmB;IAC/D;IACAL,qCAAqC,CAACI,OAAO,GAAGC,mBAAmB;IACnE;IACA;IACA,KAAK,IAAIM,qBAAqB,GAAGV,yBAAyB,CAACG,OAAO,EAAEO,qBAAqB,GAAGhB,QAAQ,CAACQ,MAAM,EAAEQ,qBAAqB,IAAI,CAAC,EAAE;MACrI,MAAMC,+BAA+B,GAAGjB,QAAQ,CAACgB,qBAAqB,CAAC,CAACJ,EAAE,KAAKT,6BAA6B,CAACM,OAAO,EAAEG,EAAE;MACxH,IAAIK,+BAA+B,EAAE;QACjCX,yBAAyB,CAACG,OAAO,GAAGO,qBAAqB,GAAGd,qBAAqB;QACjF,OAAOI,yBAAyB,CAACG,OAAO;MAC5C;IACJ;IACA;IACAN,6BAA6B,CAACM,OAAO,GAAGC,mBAAmB;IAC3DJ,yBAAyB,CAACG,OAAO,GAAG,CAAC;IACrC,OAAO,CAAC;IACR;IACA;IACA;EACJ,CAAC,EAAE,CAACP,qBAAqB,EAAEF,QAAQ,EAAEA,QAAQ,EAAEQ,MAAM,CAAC,CAAC;EACvD,OAAOD,iBAAiB;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}