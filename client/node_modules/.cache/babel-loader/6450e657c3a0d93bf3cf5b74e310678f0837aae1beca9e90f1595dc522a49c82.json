{"ast":null,"code":"import { useEffect, useMemo, useState } from 'react';\nimport { useChannelStateContext, useChatContext } from '../../../context';\nexport const useCooldownTimer = () => {\n  const {\n    client,\n    latestMessageDatesByChannels\n  } = useChatContext('useCooldownTimer');\n  const {\n    channel,\n    messages = []\n  } = useChannelStateContext('useCooldownTimer');\n  const [cooldownRemaining, setCooldownRemaining] = useState();\n  const {\n    cooldown: cooldownInterval = 0,\n    own_capabilities\n  } = channel.data || {};\n  const skipCooldown = own_capabilities?.includes('skip-slow-mode');\n  const ownLatestMessageDate = useMemo(() => latestMessageDatesByChannels[channel.cid] ?? [...messages].sort((a, b) => b.created_at?.getTime() - a.created_at?.getTime()).find(v => v.user?.id === client.user?.id)?.created_at, [messages, client.user?.id, latestMessageDatesByChannels, channel.cid]);\n  useEffect(() => {\n    const timeSinceOwnLastMessage = ownLatestMessageDate ?\n    // prevent negative values\n    Math.max(0, (new Date().getTime() - ownLatestMessageDate.getTime()) / 1000) : undefined;\n    const remaining = !skipCooldown && typeof timeSinceOwnLastMessage !== 'undefined' && cooldownInterval > timeSinceOwnLastMessage ? Math.round(cooldownInterval - timeSinceOwnLastMessage) : 0;\n    setCooldownRemaining(remaining);\n    if (!remaining) return;\n    const timeout = setTimeout(() => {\n      setCooldownRemaining(0);\n    }, remaining * 1000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);\n  return {\n    cooldownInterval,\n    cooldownRemaining,\n    setCooldownRemaining\n  };\n};","map":{"version":3,"names":["useEffect","useMemo","useState","useChannelStateContext","useChatContext","useCooldownTimer","client","latestMessageDatesByChannels","channel","messages","cooldownRemaining","setCooldownRemaining","cooldown","cooldownInterval","own_capabilities","data","skipCooldown","includes","ownLatestMessageDate","cid","sort","a","b","created_at","getTime","find","v","user","id","timeSinceOwnLastMessage","Math","max","Date","undefined","remaining","round","timeout","setTimeout","clearTimeout"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport { useChannelStateContext, useChatContext } from '../../../context';\nexport const useCooldownTimer = () => {\n    const { client, latestMessageDatesByChannels } = useChatContext('useCooldownTimer');\n    const { channel, messages = [] } = useChannelStateContext('useCooldownTimer');\n    const [cooldownRemaining, setCooldownRemaining] = useState();\n    const { cooldown: cooldownInterval = 0, own_capabilities } = (channel.data ||\n        {});\n    const skipCooldown = own_capabilities?.includes('skip-slow-mode');\n    const ownLatestMessageDate = useMemo(() => latestMessageDatesByChannels[channel.cid] ??\n        [...messages]\n            .sort((a, b) => b.created_at?.getTime() - a.created_at?.getTime())\n            .find((v) => v.user?.id === client.user?.id)?.created_at, [messages, client.user?.id, latestMessageDatesByChannels, channel.cid]);\n    useEffect(() => {\n        const timeSinceOwnLastMessage = ownLatestMessageDate\n            ? // prevent negative values\n                Math.max(0, (new Date().getTime() - ownLatestMessageDate.getTime()) / 1000)\n            : undefined;\n        const remaining = !skipCooldown &&\n            typeof timeSinceOwnLastMessage !== 'undefined' &&\n            cooldownInterval > timeSinceOwnLastMessage\n            ? Math.round(cooldownInterval - timeSinceOwnLastMessage)\n            : 0;\n        setCooldownRemaining(remaining);\n        if (!remaining)\n            return;\n        const timeout = setTimeout(() => {\n            setCooldownRemaining(0);\n        }, remaining * 1000);\n        return () => {\n            clearTimeout(timeout);\n        };\n    }, [cooldownInterval, ownLatestMessageDate, skipCooldown]);\n    return {\n        cooldownInterval,\n        cooldownRemaining,\n        setCooldownRemaining,\n    };\n};\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,OAAO,EAAEC,QAAQ,QAAQ,OAAO;AACpD,SAASC,sBAAsB,EAAEC,cAAc,QAAQ,kBAAkB;AACzE,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAClC,MAAM;IAAEC,MAAM;IAAEC;EAA6B,CAAC,GAAGH,cAAc,CAAC,kBAAkB,CAAC;EACnF,MAAM;IAAEI,OAAO;IAAEC,QAAQ,GAAG;EAAG,CAAC,GAAGN,sBAAsB,CAAC,kBAAkB,CAAC;EAC7E,MAAM,CAACO,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAC5D,MAAM;IAAEU,QAAQ,EAAEC,gBAAgB,GAAG,CAAC;IAAEC;EAAiB,CAAC,GAAIN,OAAO,CAACO,IAAI,IACtE,CAAC,CAAE;EACP,MAAMC,YAAY,GAAGF,gBAAgB,EAAEG,QAAQ,CAAC,gBAAgB,CAAC;EACjE,MAAMC,oBAAoB,GAAGjB,OAAO,CAAC,MAAMM,4BAA4B,CAACC,OAAO,CAACW,GAAG,CAAC,IAChF,CAAC,GAAGV,QAAQ,CAAC,CACRW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,UAAU,EAAEC,OAAO,CAAC,CAAC,GAAGH,CAAC,CAACE,UAAU,EAAEC,OAAO,CAAC,CAAC,CAAC,CACjEC,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,EAAEC,EAAE,KAAKtB,MAAM,CAACqB,IAAI,EAAEC,EAAE,CAAC,EAAEL,UAAU,EAAE,CAACd,QAAQ,EAAEH,MAAM,CAACqB,IAAI,EAAEC,EAAE,EAAErB,4BAA4B,EAAEC,OAAO,CAACW,GAAG,CAAC,CAAC;EACzInB,SAAS,CAAC,MAAM;IACZ,MAAM6B,uBAAuB,GAAGX,oBAAoB;IAC9C;IACEY,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,IAAIC,IAAI,CAAC,CAAC,CAACR,OAAO,CAAC,CAAC,GAAGN,oBAAoB,CAACM,OAAO,CAAC,CAAC,IAAI,IAAI,CAAC,GAC7ES,SAAS;IACf,MAAMC,SAAS,GAAG,CAAClB,YAAY,IAC3B,OAAOa,uBAAuB,KAAK,WAAW,IAC9ChB,gBAAgB,GAAGgB,uBAAuB,GACxCC,IAAI,CAACK,KAAK,CAACtB,gBAAgB,GAAGgB,uBAAuB,CAAC,GACtD,CAAC;IACPlB,oBAAoB,CAACuB,SAAS,CAAC;IAC/B,IAAI,CAACA,SAAS,EACV;IACJ,MAAME,OAAO,GAAGC,UAAU,CAAC,MAAM;MAC7B1B,oBAAoB,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAEuB,SAAS,GAAG,IAAI,CAAC;IACpB,OAAO,MAAM;MACTI,YAAY,CAACF,OAAO,CAAC;IACzB,CAAC;EACL,CAAC,EAAE,CAACvB,gBAAgB,EAAEK,oBAAoB,EAAEF,YAAY,CAAC,CAAC;EAC1D,OAAO;IACHH,gBAAgB;IAChBH,iBAAiB;IACjBC;EACJ,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}