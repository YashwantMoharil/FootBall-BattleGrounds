{"ast":null,"code":"export const makeChannelReducer = () => (state, action) => {\n  switch (action.type) {\n    case 'closeThread':\n      {\n        return {\n          ...state,\n          thread: null,\n          threadLoadingMore: false,\n          threadMessages: []\n        };\n      }\n    case 'copyMessagesFromChannel':\n      {\n        const {\n          channel,\n          parentId\n        } = action;\n        return {\n          ...state,\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          // copying messages from channel happens with new message - this resets the suppressAutoscroll\n          suppressAutoscroll: false,\n          threadMessages: parentId ? {\n            ...channel.state.threads\n          }[parentId] || [] : state.threadMessages\n        };\n      }\n    case 'copyStateFromChannelOnEvent':\n      {\n        const {\n          channel\n        } = action;\n        return {\n          ...state,\n          members: {\n            ...channel.state.members\n          },\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          read: {\n            ...channel.state.read\n          },\n          watcherCount: channel.state.watcher_count,\n          watchers: {\n            ...channel.state.watchers\n          }\n        };\n      }\n    case 'initStateFromChannel':\n      {\n        const {\n          channel,\n          hasMore\n        } = action;\n        return {\n          ...state,\n          hasMore,\n          loading: false,\n          members: {\n            ...channel.state.members\n          },\n          messages: [...channel.state.messages],\n          pinnedMessages: [...channel.state.pinnedMessages],\n          read: {\n            ...channel.state.read\n          },\n          watcherCount: channel.state.watcher_count,\n          watchers: {\n            ...channel.state.watchers\n          }\n        };\n      }\n    case 'jumpToLatestMessage':\n      {\n        return {\n          ...state,\n          hasMoreNewer: false,\n          highlightedMessageId: undefined,\n          loading: false,\n          suppressAutoscroll: false\n        };\n      }\n    case 'jumpToMessageFinished':\n      {\n        return {\n          ...state,\n          hasMoreNewer: action.channel.state.messagePagination.hasNext,\n          highlightedMessageId: action.highlightedMessageId,\n          messages: action.channel.state.messages\n        };\n      }\n    case 'clearHighlightedMessage':\n      {\n        return {\n          ...state,\n          highlightedMessageId: undefined\n        };\n      }\n    case 'loadMoreFinished':\n      {\n        const {\n          hasMore,\n          messages\n        } = action;\n        return {\n          ...state,\n          hasMore,\n          loadingMore: false,\n          messages,\n          suppressAutoscroll: false\n        };\n      }\n    case 'loadMoreNewerFinished':\n      {\n        const {\n          hasMoreNewer,\n          messages\n        } = action;\n        return {\n          ...state,\n          hasMoreNewer,\n          loadingMoreNewer: false,\n          messages\n        };\n      }\n    case 'loadMoreThreadFinished':\n      {\n        const {\n          threadHasMore,\n          threadMessages\n        } = action;\n        return {\n          ...state,\n          threadHasMore,\n          threadLoadingMore: false,\n          threadMessages\n        };\n      }\n    case 'openThread':\n      {\n        const {\n          channel,\n          message\n        } = action;\n        return {\n          ...state,\n          thread: message,\n          threadHasMore: true,\n          threadMessages: message.id ? {\n            ...channel.state.threads\n          }[message.id] || [] : [],\n          threadSuppressAutoscroll: false\n        };\n      }\n    case 'setError':\n      {\n        const {\n          error\n        } = action;\n        return {\n          ...state,\n          error\n        };\n      }\n    case 'setLoadingMore':\n      {\n        const {\n          loadingMore\n        } = action;\n        // suppress the autoscroll behavior\n        return {\n          ...state,\n          loadingMore,\n          suppressAutoscroll: loadingMore\n        };\n      }\n    case 'setLoadingMoreNewer':\n      {\n        const {\n          loadingMoreNewer\n        } = action;\n        return {\n          ...state,\n          loadingMoreNewer\n        };\n      }\n    case 'setThread':\n      {\n        const {\n          message\n        } = action;\n        return {\n          ...state,\n          thread: message\n        };\n      }\n    case 'setTyping':\n      {\n        const {\n          channel\n        } = action;\n        return {\n          ...state,\n          typing: {\n            ...channel.state.typing\n          }\n        };\n      }\n    case 'startLoadingThread':\n      {\n        return {\n          ...state,\n          threadLoadingMore: true,\n          threadSuppressAutoscroll: true\n        };\n      }\n    case 'updateThreadOnEvent':\n      {\n        const {\n          channel,\n          message\n        } = action;\n        if (!state.thread) return state;\n        return {\n          ...state,\n          thread: message?.id === state.thread.id ? channel.state.formatMessage(message) : state.thread,\n          threadMessages: state.thread?.id ? {\n            ...channel.state.threads\n          }[state.thread.id] || [] : []\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport const initialState = {\n  error: null,\n  hasMore: true,\n  hasMoreNewer: false,\n  loading: true,\n  loadingMore: false,\n  members: {},\n  messages: [],\n  pinnedMessages: [],\n  read: {},\n  suppressAutoscroll: false,\n  thread: null,\n  threadHasMore: true,\n  threadLoadingMore: false,\n  threadMessages: [],\n  threadSuppressAutoscroll: false,\n  typing: {},\n  watcherCount: 0,\n  watchers: {}\n};","map":{"version":3,"names":["makeChannelReducer","state","action","type","thread","threadLoadingMore","threadMessages","channel","parentId","messages","pinnedMessages","suppressAutoscroll","threads","members","read","watcherCount","watcher_count","watchers","hasMore","loading","hasMoreNewer","highlightedMessageId","undefined","messagePagination","hasNext","loadingMore","loadingMoreNewer","threadHasMore","message","id","threadSuppressAutoscroll","error","typing","formatMessage","initialState"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Channel/channelState.js"],"sourcesContent":["export const makeChannelReducer = () => (state, action) => {\n    switch (action.type) {\n        case 'closeThread': {\n            return {\n                ...state,\n                thread: null,\n                threadLoadingMore: false,\n                threadMessages: [],\n            };\n        }\n        case 'copyMessagesFromChannel': {\n            const { channel, parentId } = action;\n            return {\n                ...state,\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                // copying messages from channel happens with new message - this resets the suppressAutoscroll\n                suppressAutoscroll: false,\n                threadMessages: parentId\n                    ? { ...channel.state.threads }[parentId] || []\n                    : state.threadMessages,\n            };\n        }\n        case 'copyStateFromChannelOnEvent': {\n            const { channel } = action;\n            return {\n                ...state,\n                members: { ...channel.state.members },\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                read: { ...channel.state.read },\n                watcherCount: channel.state.watcher_count,\n                watchers: { ...channel.state.watchers },\n            };\n        }\n        case 'initStateFromChannel': {\n            const { channel, hasMore } = action;\n            return {\n                ...state,\n                hasMore,\n                loading: false,\n                members: { ...channel.state.members },\n                messages: [...channel.state.messages],\n                pinnedMessages: [...channel.state.pinnedMessages],\n                read: { ...channel.state.read },\n                watcherCount: channel.state.watcher_count,\n                watchers: { ...channel.state.watchers },\n            };\n        }\n        case 'jumpToLatestMessage': {\n            return {\n                ...state,\n                hasMoreNewer: false,\n                highlightedMessageId: undefined,\n                loading: false,\n                suppressAutoscroll: false,\n            };\n        }\n        case 'jumpToMessageFinished': {\n            return {\n                ...state,\n                hasMoreNewer: action.channel.state.messagePagination.hasNext,\n                highlightedMessageId: action.highlightedMessageId,\n                messages: action.channel.state.messages,\n            };\n        }\n        case 'clearHighlightedMessage': {\n            return {\n                ...state,\n                highlightedMessageId: undefined,\n            };\n        }\n        case 'loadMoreFinished': {\n            const { hasMore, messages } = action;\n            return {\n                ...state,\n                hasMore,\n                loadingMore: false,\n                messages,\n                suppressAutoscroll: false,\n            };\n        }\n        case 'loadMoreNewerFinished': {\n            const { hasMoreNewer, messages } = action;\n            return {\n                ...state,\n                hasMoreNewer,\n                loadingMoreNewer: false,\n                messages,\n            };\n        }\n        case 'loadMoreThreadFinished': {\n            const { threadHasMore, threadMessages } = action;\n            return {\n                ...state,\n                threadHasMore,\n                threadLoadingMore: false,\n                threadMessages,\n            };\n        }\n        case 'openThread': {\n            const { channel, message } = action;\n            return {\n                ...state,\n                thread: message,\n                threadHasMore: true,\n                threadMessages: message.id\n                    ? { ...channel.state.threads }[message.id] || []\n                    : [],\n                threadSuppressAutoscroll: false,\n            };\n        }\n        case 'setError': {\n            const { error } = action;\n            return { ...state, error };\n        }\n        case 'setLoadingMore': {\n            const { loadingMore } = action;\n            // suppress the autoscroll behavior\n            return { ...state, loadingMore, suppressAutoscroll: loadingMore };\n        }\n        case 'setLoadingMoreNewer': {\n            const { loadingMoreNewer } = action;\n            return { ...state, loadingMoreNewer };\n        }\n        case 'setThread': {\n            const { message } = action;\n            return { ...state, thread: message };\n        }\n        case 'setTyping': {\n            const { channel } = action;\n            return {\n                ...state,\n                typing: { ...channel.state.typing },\n            };\n        }\n        case 'startLoadingThread': {\n            return {\n                ...state,\n                threadLoadingMore: true,\n                threadSuppressAutoscroll: true,\n            };\n        }\n        case 'updateThreadOnEvent': {\n            const { channel, message } = action;\n            if (!state.thread)\n                return state;\n            return {\n                ...state,\n                thread: message?.id === state.thread.id\n                    ? channel.state.formatMessage(message)\n                    : state.thread,\n                threadMessages: state.thread?.id\n                    ? { ...channel.state.threads }[state.thread.id] || []\n                    : [],\n            };\n        }\n        default:\n            return state;\n    }\n};\nexport const initialState = {\n    error: null,\n    hasMore: true,\n    hasMoreNewer: false,\n    loading: true,\n    loadingMore: false,\n    members: {},\n    messages: [],\n    pinnedMessages: [],\n    read: {},\n    suppressAutoscroll: false,\n    thread: null,\n    threadHasMore: true,\n    threadLoadingMore: false,\n    threadMessages: [],\n    threadSuppressAutoscroll: false,\n    typing: {},\n    watcherCount: 0,\n    watchers: {},\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}