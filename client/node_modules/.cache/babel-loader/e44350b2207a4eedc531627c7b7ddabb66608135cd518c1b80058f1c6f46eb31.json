{"ast":null,"code":"var __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n    exports: {}\n  }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\n\n// node_modules/base64-js/index.js\nvar require_base64_js = __commonJS({\n  \"node_modules/base64-js/index.js\"(exports) {\n    \"use strict\";\n\n    exports.byteLength = byteLength;\n    exports.toByteArray = toByteArray;\n    exports.fromByteArray = fromByteArray2;\n    var lookup = [];\n    var revLookup = [];\n    var Arr = typeof Uint8Array !== \"undefined\" ? Uint8Array : Array;\n    var code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    for (i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n    var i;\n    var len;\n    revLookup[\"-\".charCodeAt(0)] = 62;\n    revLookup[\"_\".charCodeAt(0)] = 63;\n    function getLens(b64) {\n      var len2 = b64.length;\n      if (len2 % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n      }\n      var validLen = b64.indexOf(\"=\");\n      if (validLen === -1) validLen = len2;\n      var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;\n      return [validLen, placeHoldersLen];\n    }\n    function byteLength(b64) {\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function _byteLength(b64, validLen, placeHoldersLen) {\n      return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n    }\n    function toByteArray(b64) {\n      var tmp;\n      var lens = getLens(b64);\n      var validLen = lens[0];\n      var placeHoldersLen = lens[1];\n      var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n      var curByte = 0;\n      var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;\n      var i2;\n      for (i2 = 0; i2 < len2; i2 += 4) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n      }\n      if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n      }\n      return arr;\n    }\n    function tripletToBase64(num) {\n      return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n    }\n    function encodeChunk(uint8, start, end) {\n      var tmp;\n      var output = [];\n      for (var i2 = start; i2 < end; i2 += 3) {\n        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);\n        output.push(tripletToBase64(tmp));\n      }\n      return output.join(\"\");\n    }\n    function fromByteArray2(uint8) {\n      var tmp;\n      var len2 = uint8.length;\n      var extraBytes = len2 % 3;\n      var parts = [];\n      var maxChunkLength = 16383;\n      for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {\n        parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));\n      }\n      if (extraBytes === 1) {\n        tmp = uint8[len2 - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n      } else if (extraBytes === 2) {\n        tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n      }\n      return parts.join(\"\");\n    }\n  }\n});\n\n// (disabled):https\nvar require_https = __commonJS({\n  \"(disabled):https\"() {}\n});\n\n// node_modules/form-data/lib/browser.js\nvar require_browser = __commonJS({\n  \"node_modules/form-data/lib/browser.js\"(exports, module) {\n    module.exports = typeof self == \"object\" ? self.FormData : window.FormData;\n  }\n});\n\n// (disabled):node_modules/jsonwebtoken/index.js\nvar require_jsonwebtoken = __commonJS({\n  \"(disabled):node_modules/jsonwebtoken/index.js\"() {}\n});\n\n// (disabled):crypto\nvar require_crypto = __commonJS({\n  \"(disabled):crypto\"() {}\n});\n\n// src/base64.ts\nvar import_base64_js = __toESM(require_base64_js());\nfunction isString(arrayOrString) {\n  return typeof arrayOrString === \"string\";\n}\nfunction isMapStringCallback(arrayOrString, callback) {\n  return !!callback && isString(arrayOrString);\n}\nfunction map(arrayOrString, callback) {\n  const res = [];\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n  return res;\n}\nvar encodeBase64 = data => (0, import_base64_js.fromByteArray)(new Uint8Array(map(data, char => char.charCodeAt(0))));\nvar decodeBase64 = s => {\n  const e = {},\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = \"\";\n  const A = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = b >>> (l -= 8) & 255) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n\n// src/campaign.ts\nvar Campaign = class {\n  constructor(client, id, data) {\n    this.client = client;\n    this.id = id;\n    this.data = data;\n  }\n  async create() {\n    const body = {\n      id: this.id,\n      message_template: this.data?.message_template,\n      segment_ids: this.data?.segment_ids,\n      sender_id: this.data?.sender_id,\n      sender_mode: this.data?.sender_mode,\n      channel_template: this.data?.channel_template,\n      create_channels: this.data?.create_channels,\n      show_channels: this.data?.show_channels,\n      description: this.data?.description,\n      name: this.data?.name,\n      skip_push: this.data?.skip_push,\n      skip_webhook: this.data?.skip_webhook,\n      user_ids: this.data?.user_ids\n    };\n    const result = await this.client.createCampaign(body);\n    this.id = result.campaign.id;\n    this.data = result.campaign;\n    return result;\n  }\n  verifyCampaignId() {\n    if (!this.id) {\n      throw new Error(\"Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)\");\n    }\n  }\n  async start(options) {\n    this.verifyCampaignId();\n    return await this.client.startCampaign(this.id, options);\n  }\n  update(data) {\n    this.verifyCampaignId();\n    return this.client.updateCampaign(this.id, data);\n  }\n  async delete() {\n    this.verifyCampaignId();\n    return await this.client.deleteCampaign(this.id);\n  }\n  stop() {\n    this.verifyCampaignId();\n    return this.client.stopCampaign(this.id);\n  }\n  get(options) {\n    this.verifyCampaignId();\n    return this.client.getCampaign(this.id, options);\n  }\n};\n\n// node_modules/axios/lib/helpers/bind.js\nfunction bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n\n// node_modules/axios/lib/utils.js\nvar {\n  toString\n} = Object.prototype;\nvar {\n  getPrototypeOf\n} = Object;\nvar kindOf = /* @__PURE__ */(cache => thing => {\n  const str = toString.call(thing);\n  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(/* @__PURE__ */Object.create(null));\nvar kindOfTest = type => {\n  type = type.toLowerCase();\n  return thing => kindOf(thing) === type;\n};\nvar typeOfTest = type => thing => typeof thing === type;\nvar {\n  isArray\n} = Array;\nvar isUndefined = typeOfTest(\"undefined\");\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\nvar isArrayBuffer = kindOfTest(\"ArrayBuffer\");\nfunction isArrayBufferView(val) {\n  let result;\n  if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = val && val.buffer && isArrayBuffer(val.buffer);\n  }\n  return result;\n}\nvar isString2 = typeOfTest(\"string\");\nvar isFunction = typeOfTest(\"function\");\nvar isNumber = typeOfTest(\"number\");\nvar isObject = thing => thing !== null && typeof thing === \"object\";\nvar isBoolean = thing => thing === true || thing === false;\nvar isPlainObject = val => {\n  if (kindOf(val) !== \"object\") {\n    return false;\n  }\n  const prototype3 = getPrototypeOf(val);\n  return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n};\nvar isDate = kindOfTest(\"Date\");\nvar isFile = kindOfTest(\"File\");\nvar isBlob = kindOfTest(\"Blob\");\nvar isFileList = kindOfTest(\"FileList\");\nvar isStream = val => isObject(val) && isFunction(val.pipe);\nvar isFormData = thing => {\n  let kind;\n  return thing && (typeof FormData === \"function\" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === \"formdata\" ||\n  // detect form-data instance\n  kind === \"object\" && isFunction(thing.toString) && thing.toString() === \"[object FormData]\"));\n};\nvar isURLSearchParams = kindOfTest(\"URLSearchParams\");\nvar trim = str => str.trim ? str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\nfunction forEach(obj, fn, {\n  allOwnKeys = false\n} = {}) {\n  if (obj === null || typeof obj === \"undefined\") {\n    return;\n  }\n  let i;\n  let l;\n  if (typeof obj !== \"object\") {\n    obj = [obj];\n  }\n  if (isArray(obj)) {\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\nvar _global = (() => {\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : global;\n})();\nvar isContextDefined = context => !isUndefined(context) && context !== _global;\nfunction merge() {\n  const {\n    caseless\n  } = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  };\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\nvar extend = (a, b, thisArg, {\n  allOwnKeys\n} = {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {\n    allOwnKeys\n  });\n  return a;\n};\nvar stripBOM = content => {\n  if (content.charCodeAt(0) === 65279) {\n    content = content.slice(1);\n  }\n  return content;\n};\nvar inherits = (constructor, superConstructor, props, descriptors2) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors2);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, \"super\", {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n};\nvar toFlatObject = (sourceObj, destObj, filter2, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n  destObj = destObj || {};\n  if (sourceObj == null) return destObj;\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter2 !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);\n  return destObj;\n};\nvar endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === void 0 || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n};\nvar toArray = thing => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n};\nvar isTypedArray = /* @__PURE__ */(TypedArray => {\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== \"undefined\" && getPrototypeOf(Uint8Array));\nvar forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n  const iterator = generator.call(obj);\n  let result;\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n};\nvar matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n  return arr;\n};\nvar isHTMLForm = kindOfTest(\"HTMLFormElement\");\nvar toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g, function replacer(m, p1, p2) {\n    return p1.toUpperCase() + p2;\n  });\n};\nvar hasOwnProperty = (({\n  hasOwnProperty: hasOwnProperty2\n}) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);\nvar isRegExp = kindOfTest(\"RegExp\");\nvar reduceDescriptors = (obj, reducer) => {\n  const descriptors2 = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n  forEach(descriptors2, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n  Object.defineProperties(obj, reducedDescriptors);\n};\nvar freezeMethods = obj => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    if (isFunction(obj) && [\"arguments\", \"caller\", \"callee\"].indexOf(name) !== -1) {\n      return false;\n    }\n    const value = obj[name];\n    if (!isFunction(value)) return;\n    descriptor.enumerable = false;\n    if (\"writable\" in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error(\"Can not rewrite read-only method '\" + name + \"'\");\n      };\n    }\n  });\n};\nvar toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n  const define = arr => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  };\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n  return obj;\n};\nvar noop = () => {};\nvar toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n};\nvar ALPHA = \"abcdefghijklmnopqrstuvwxyz\";\nvar DIGIT = \"0123456789\";\nvar ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n};\nvar generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = \"\";\n  const {\n    length\n  } = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length | 0];\n  }\n  return str;\n};\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === \"FormData\" && thing[Symbol.iterator]);\n}\nvar toJSONObject = obj => {\n  const stack = new Array(10);\n  const visit = (source, i) => {\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n      if (!(\"toJSON\" in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n        stack[i] = void 0;\n        return target;\n      }\n    }\n    return source;\n  };\n  return visit(obj, 0);\n};\nvar isAsyncFn = kindOfTest(\"AsyncFunction\");\nvar isThenable = thing => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\nvar utils_default = {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString: isString2,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty,\n  // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n\n// node_modules/axios/lib/core/AxiosError.js\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.message = message;\n  this.name = \"AxiosError\";\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\nutils_default.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils_default.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\nvar prototype = AxiosError.prototype;\nvar descriptors = {};\n[\"ERR_BAD_OPTION_VALUE\", \"ERR_BAD_OPTION\", \"ECONNABORTED\", \"ETIMEDOUT\", \"ERR_NETWORK\", \"ERR_FR_TOO_MANY_REDIRECTS\", \"ERR_DEPRECATED\", \"ERR_BAD_RESPONSE\", \"ERR_BAD_REQUEST\", \"ERR_CANCELED\", \"ERR_NOT_SUPPORT\", \"ERR_INVALID_URL\"\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {\n    value: code\n  };\n});\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, \"isAxiosError\", {\n  value: true\n});\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n  utils_default.toFlatObject(error, axiosError, function filter2(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== \"isAxiosError\";\n  });\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n  axiosError.cause = error;\n  axiosError.name = error.name;\n  customProps && Object.assign(axiosError, customProps);\n  return axiosError;\n};\nvar AxiosError_default = AxiosError;\n\n// node_modules/axios/lib/helpers/null.js\nvar null_default = null;\n\n// node_modules/axios/lib/helpers/toFormData.js\nfunction isVisitable(thing) {\n  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);\n}\nfunction removeBrackets(key) {\n  return utils_default.endsWith(key, \"[]\") ? key.slice(0, -2) : key;\n}\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    token = removeBrackets(token);\n    return !dots && i ? \"[\" + token + \"]\" : token;\n  }).join(dots ? \".\" : \"\");\n}\nfunction isFlatArray(arr) {\n  return utils_default.isArray(arr) && !arr.some(isVisitable);\n}\nvar predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\nfunction toFormData(obj, formData, options) {\n  if (!utils_default.isObject(obj)) {\n    throw new TypeError(\"target must be an object\");\n  }\n  formData = formData || new (null_default || FormData)();\n  options = utils_default.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    return !utils_default.isUndefined(source[option]);\n  });\n  const metaTokens = options.metaTokens;\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== \"undefined\" && Blob;\n  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);\n  if (!utils_default.isFunction(visitor)) {\n    throw new TypeError(\"visitor must be a function\");\n  }\n  function convertValue(value) {\n    if (value === null) return \"\";\n    if (utils_default.isDate(value)) {\n      return value.toISOString();\n    }\n    if (!useBlob && utils_default.isBlob(value)) {\n      throw new AxiosError_default(\"Blob is not supported. Use a Buffer instead.\");\n    }\n    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {\n      return useBlob && typeof Blob === \"function\" ? new Blob([value]) : Buffer.from(value);\n    }\n    return value;\n  }\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n    if (value && !path && typeof value === \"object\") {\n      if (utils_default.endsWith(key, \"{}\")) {\n        key = metaTokens ? key : key.slice(0, -2);\n        value = JSON.stringify(value);\n      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, \"[]\")) && (arr = utils_default.toArray(value))) {\n        key = removeBrackets(key);\n        arr.forEach(function each(el, index) {\n          !(utils_default.isUndefined(el) || el === null) && formData.append(\n          // eslint-disable-next-line no-nested-ternary\n          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + \"[]\", convertValue(el));\n        });\n        return false;\n      }\n    }\n    if (isVisitable(value)) {\n      return true;\n    }\n    formData.append(renderKey(path, key, dots), convertValue(value));\n    return false;\n  }\n  const stack = [];\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n  function build(value, path) {\n    if (utils_default.isUndefined(value)) return;\n    if (stack.indexOf(value) !== -1) {\n      throw Error(\"Circular reference detected in \" + path.join(\".\"));\n    }\n    stack.push(value);\n    utils_default.forEach(value, function each(el, key) {\n      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(formData, el, utils_default.isString(key) ? key.trim() : key, path, exposedHelpers);\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n    stack.pop();\n  }\n  if (!utils_default.isObject(obj)) {\n    throw new TypeError(\"data must be an object\");\n  }\n  build(obj);\n  return formData;\n}\nvar toFormData_default = toFormData;\n\n// node_modules/axios/lib/helpers/AxiosURLSearchParams.js\nfunction encode(str) {\n  const charMap = {\n    \"!\": \"%21\",\n    \"'\": \"%27\",\n    \"(\": \"%28\",\n    \")\": \"%29\",\n    \"~\": \"%7E\",\n    \"%20\": \"+\",\n    \"%00\": \"\\0\"\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n  params && toFormData_default(params, this, options);\n}\nvar prototype2 = AxiosURLSearchParams.prototype;\nprototype2.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\nprototype2.toString = function toString2(encoder) {\n  const _encode = encoder ? function (value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + \"=\" + _encode(pair[1]);\n  }, \"\").join(\"&\");\n};\nvar AxiosURLSearchParams_default = AxiosURLSearchParams;\n\n// node_modules/axios/lib/helpers/buildURL.js\nfunction encode2(val) {\n  return encodeURIComponent(val).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n}\nfunction buildURL(url, params, options) {\n  if (!params) {\n    return url;\n  }\n  const _encode = options && options.encode || encode2;\n  const serializeFn = options && options.serialize;\n  let serializedParams;\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);\n  }\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n  }\n  return url;\n}\n\n// node_modules/axios/lib/core/InterceptorManager.js\nvar InterceptorManager = class {\n  constructor() {\n    this.handlers = [];\n  }\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils_default.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n};\nvar InterceptorManager_default = InterceptorManager;\n\n// node_modules/axios/lib/defaults/transitional.js\nvar transitional_default = {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n\n// node_modules/axios/lib/platform/browser/classes/URLSearchParams.js\nvar URLSearchParams_default = typeof URLSearchParams !== \"undefined\" ? URLSearchParams : AxiosURLSearchParams_default;\n\n// node_modules/axios/lib/platform/browser/classes/FormData.js\nvar FormData_default = typeof FormData !== \"undefined\" ? FormData : null;\n\n// node_modules/axios/lib/platform/browser/classes/Blob.js\nvar Blob_default = typeof Blob !== \"undefined\" ? Blob : null;\n\n// node_modules/axios/lib/platform/browser/index.js\nvar isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== \"undefined\" && ((product = navigator.product) === \"ReactNative\" || product === \"NativeScript\" || product === \"NS\")) {\n    return false;\n  }\n  return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n})();\nvar isStandardBrowserWebWorkerEnv = (() => {\n  return typeof WorkerGlobalScope !== \"undefined\" &&\n  // eslint-disable-next-line no-undef\n  self instanceof WorkerGlobalScope && typeof self.importScripts === \"function\";\n})();\nvar browser_default = {\n  isBrowser: true,\n  classes: {\n    URLSearchParams: URLSearchParams_default,\n    FormData: FormData_default,\n    Blob: Blob_default\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: [\"http\", \"https\", \"file\", \"blob\", \"url\", \"data\"]\n};\n\n// node_modules/axios/lib/helpers/toURLEncodedForm.js\nfunction toURLEncodedForm(data, options) {\n  return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({\n    visitor: function (value, key, path, helpers) {\n      if (browser_default.isNode && utils_default.isBuffer(value)) {\n        this.append(key, value.toString(\"base64\"));\n        return false;\n      }\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n\n// node_modules/axios/lib/helpers/formDataToJSON.js\nfunction parsePropPath(name) {\n  return utils_default.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === \"[]\" ? \"\" : match[1] || match[0];\n  });\n}\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils_default.isArray(target) ? target.length : name;\n    if (isLast) {\n      if (utils_default.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n      return !isNumericKey;\n    }\n    if (!target[name] || !utils_default.isObject(target[name])) {\n      target[name] = [];\n    }\n    const result = buildPath(path, value, target[name], index);\n    if (result && utils_default.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n    return !isNumericKey;\n  }\n  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {\n    const obj = {};\n    utils_default.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n    return obj;\n  }\n  return null;\n}\nvar formDataToJSON_default = formDataToJSON;\n\n// node_modules/axios/lib/defaults/index.js\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils_default.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils_default.trim(rawValue);\n    } catch (e) {\n      if (e.name !== \"SyntaxError\") {\n        throw e;\n      }\n    }\n  }\n  return (encoder || JSON.stringify)(rawValue);\n}\nvar defaults = {\n  transitional: transitional_default,\n  adapter: [\"xhr\", \"http\"],\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || \"\";\n    const hasJSONContentType = contentType.indexOf(\"application/json\") > -1;\n    const isObjectPayload = utils_default.isObject(data);\n    if (isObjectPayload && utils_default.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n    const isFormData2 = utils_default.isFormData(data);\n    if (isFormData2) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;\n    }\n    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {\n      return data;\n    }\n    if (utils_default.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils_default.isURLSearchParams(data)) {\n      headers.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\", false);\n      return data.toString();\n    }\n    let isFileList3;\n    if (isObjectPayload) {\n      if (contentType.indexOf(\"application/x-www-form-urlencoded\") > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n      if ((isFileList3 = utils_default.isFileList(data)) || contentType.indexOf(\"multipart/form-data\") > -1) {\n        const _FormData = this.env && this.env.FormData;\n        return toFormData_default(isFileList3 ? {\n          \"files[]\": data\n        } : data, _FormData && new _FormData(), this.formSerializer);\n      }\n    }\n    if (isObjectPayload || hasJSONContentType) {\n      headers.setContentType(\"application/json\", false);\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n  transformResponse: [function transformResponse(data) {\n    const transitional2 = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;\n    const JSONRequested = this.responseType === \"json\";\n    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n      const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === \"SyntaxError\") {\n            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n    return data;\n  }],\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\",\n  maxContentLength: -1,\n  maxBodyLength: -1,\n  env: {\n    FormData: browser_default.classes.FormData,\n    Blob: browser_default.classes.Blob\n  },\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n  headers: {\n    common: {\n      \"Accept\": \"application/json, text/plain, */*\",\n      \"Content-Type\": void 0\n    }\n  }\n};\nutils_default.forEach([\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\"], method => {\n  defaults.headers[method] = {};\n});\nvar defaults_default = defaults;\n\n// node_modules/axios/lib/helpers/parseHeaders.js\nvar ignoreDuplicateOf = utils_default.toObjectSet([\"age\", \"authorization\", \"content-length\", \"content-type\", \"etag\", \"expires\", \"from\", \"host\", \"if-modified-since\", \"if-unmodified-since\", \"last-modified\", \"location\", \"max-forwards\", \"proxy-authorization\", \"referer\", \"retry-after\", \"user-agent\"]);\nvar parseHeaders_default = rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n  rawHeaders && rawHeaders.split(\"\\n\").forEach(function parser(line) {\n    i = line.indexOf(\":\");\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n    if (!key || parsed[key] && ignoreDuplicateOf[key]) {\n      return;\n    }\n    if (key === \"set-cookie\") {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + \", \" + val : val;\n    }\n  });\n  return parsed;\n};\n\n// node_modules/axios/lib/core/AxiosHeaders.js\nvar $internals = Symbol(\"internals\");\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n  const tokens = /* @__PURE__ */Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n  while (match = tokensRE.exec(str)) {\n    tokens[match[1]] = match[2];\n  }\n  return tokens;\n}\nvar isValidHeaderName = str => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\nfunction matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {\n  if (utils_default.isFunction(filter2)) {\n    return filter2.call(this, value, header);\n  }\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n  if (!utils_default.isString(value)) return;\n  if (utils_default.isString(filter2)) {\n    return value.indexOf(filter2) !== -1;\n  }\n  if (utils_default.isRegExp(filter2)) {\n    return filter2.test(value);\n  }\n}\nfunction formatHeader(header) {\n  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n    return char.toUpperCase() + str;\n  });\n}\nfunction buildAccessors(obj, header) {\n  const accessorName = utils_default.toCamelCase(\" \" + header);\n  [\"get\", \"set\", \"has\"].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function (arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\nvar AxiosHeaders = class {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n  set(header, valueOrRewrite, rewrite) {\n    const self2 = this;\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n      if (!lHeader) {\n        throw new Error(\"header name must be a non-empty string\");\n      }\n      const key = utils_default.findKey(self2, lHeader);\n      if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {\n        self2[key || _header] = normalizeValue(_value);\n      }\n    }\n    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite);\n    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders_default(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n    return this;\n  }\n  get(header, parser) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils_default.findKey(this, header);\n      if (key) {\n        const value = this[key];\n        if (!parser) {\n          return value;\n        }\n        if (parser === true) {\n          return parseTokens(value);\n        }\n        if (utils_default.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n        if (utils_default.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n        throw new TypeError(\"parser must be boolean|regexp|function\");\n      }\n    }\n  }\n  has(header, matcher) {\n    header = normalizeHeader(header);\n    if (header) {\n      const key = utils_default.findKey(this, header);\n      return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n    return false;\n  }\n  delete(header, matcher) {\n    const self2 = this;\n    let deleted = false;\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n      if (_header) {\n        const key = utils_default.findKey(self2, _header);\n        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {\n          delete self2[key];\n          deleted = true;\n        }\n      }\n    }\n    if (utils_default.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n    return deleted;\n  }\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n    while (i--) {\n      const key = keys[i];\n      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n    return deleted;\n  }\n  normalize(format) {\n    const self2 = this;\n    const headers = {};\n    utils_default.forEach(this, (value, header) => {\n      const key = utils_default.findKey(headers, header);\n      if (key) {\n        self2[key] = normalizeValue(value);\n        delete self2[header];\n        return;\n      }\n      const normalized = format ? formatHeader(header) : String(header).trim();\n      if (normalized !== header) {\n        delete self2[header];\n      }\n      self2[normalized] = normalizeValue(value);\n      headers[normalized] = true;\n    });\n    return this;\n  }\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n  toJSON(asStrings) {\n    const obj = /* @__PURE__ */Object.create(null);\n    utils_default.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(\", \") : value);\n    });\n    return obj;\n  }\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + \": \" + value).join(\"\\n\");\n  }\n  get [Symbol.toStringTag]() {\n    return \"AxiosHeaders\";\n  }\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n  static concat(first, ...targets) {\n    const computed = new this(first);\n    targets.forEach(target => computed.set(target));\n    return computed;\n  }\n  static accessor(header) {\n    const internals = this[$internals] = this[$internals] = {\n      accessors: {}\n    };\n    const accessors = internals.accessors;\n    const prototype3 = this.prototype;\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype3, _header);\n        accessors[lHeader] = true;\n      }\n    }\n    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n    return this;\n  }\n};\nAxiosHeaders.accessor([\"Content-Type\", \"Content-Length\", \"Accept\", \"Accept-Encoding\", \"User-Agent\", \"Authorization\"]);\nutils_default.reduceDescriptors(AxiosHeaders.prototype, ({\n  value\n}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1);\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  };\n});\nutils_default.freezeMethods(AxiosHeaders);\nvar AxiosHeaders_default = AxiosHeaders;\n\n// node_modules/axios/lib/core/transformData.js\nfunction transformData(fns, response) {\n  const config = this || defaults_default;\n  const context = response || config;\n  const headers = AxiosHeaders_default.from(context.headers);\n  let data = context.data;\n  utils_default.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);\n  });\n  headers.normalize();\n  return data;\n}\n\n// node_modules/axios/lib/cancel/isCancel.js\nfunction isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n\n// node_modules/axios/lib/cancel/CanceledError.js\nfunction CanceledError(message, config, request) {\n  AxiosError_default.call(this, message == null ? \"canceled\" : message, AxiosError_default.ERR_CANCELED, config, request);\n  this.name = \"CanceledError\";\n}\nutils_default.inherits(CanceledError, AxiosError_default, {\n  __CANCEL__: true\n});\nvar CanceledError_default = CanceledError;\n\n// node_modules/axios/lib/core/settle.js\nfunction settle(resolve, reject, response) {\n  const validateStatus2 = response.config.validateStatus;\n  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError_default(\"Request failed with status code \" + response.status, [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));\n  }\n}\n\n// node_modules/axios/lib/helpers/cookies.js\nvar cookies_default = browser_default.isStandardBrowserEnv ?\n// Standard browser envs support document.cookie\n/* @__PURE__ */\nfunction standardBrowserEnv() {\n  return {\n    write: function write(name, value, expires, path, domain2, secure) {\n      const cookie = [];\n      cookie.push(name + \"=\" + encodeURIComponent(value));\n      if (utils_default.isNumber(expires)) {\n        cookie.push(\"expires=\" + new Date(expires).toGMTString());\n      }\n      if (utils_default.isString(path)) {\n        cookie.push(\"path=\" + path);\n      }\n      if (utils_default.isString(domain2)) {\n        cookie.push(\"domain=\" + domain2);\n      }\n      if (secure === true) {\n        cookie.push(\"secure\");\n      }\n      document.cookie = cookie.join(\"; \");\n    },\n    read: function read(name) {\n      const match = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + name + \")=([^;]*)\"));\n      return match ? decodeURIComponent(match[3]) : null;\n    },\n    remove: function remove(name) {\n      this.write(name, \"\", Date.now() - 864e5);\n    }\n  };\n}() :\n// Non standard browser env (web workers, react-native) lack needed support.\n/* @__PURE__ */\nfunction nonStandardBrowserEnv() {\n  return {\n    write: function write() {},\n    read: function read() {\n      return null;\n    },\n    remove: function remove() {}\n  };\n}();\n\n// node_modules/axios/lib/helpers/isAbsoluteURL.js\nfunction isAbsoluteURL(url) {\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n\n// node_modules/axios/lib/helpers/combineURLs.js\nfunction combineURLs(baseURL, relativeURL) {\n  return relativeURL ? baseURL.replace(/\\/+$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n}\n\n// node_modules/axios/lib/core/buildFullPath.js\nfunction buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n\n// node_modules/axios/lib/helpers/isURLSameOrigin.js\nvar isURLSameOrigin_default = browser_default.isStandardBrowserEnv ?\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\nfunction standardBrowserEnv2() {\n  const msie = /(msie|trident)/i.test(navigator.userAgent);\n  const urlParsingNode = document.createElement(\"a\");\n  let originURL;\n  function resolveURL(url) {\n    let href = url;\n    if (msie) {\n      urlParsingNode.setAttribute(\"href\", href);\n      href = urlParsingNode.href;\n    }\n    urlParsingNode.setAttribute(\"href\", href);\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \"\") : \"\",\n      host: urlParsingNode.host,\n      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \"\") : \"\",\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \"\") : \"\",\n      hostname: urlParsingNode.hostname,\n      port: urlParsingNode.port,\n      pathname: urlParsingNode.pathname.charAt(0) === \"/\" ? urlParsingNode.pathname : \"/\" + urlParsingNode.pathname\n    };\n  }\n  originURL = resolveURL(window.location.href);\n  return function isURLSameOrigin(requestURL) {\n    const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n  };\n}() :\n// Non standard browser envs (web workers, react-native) lack needed support.\n/* @__PURE__ */\nfunction nonStandardBrowserEnv2() {\n  return function isURLSameOrigin() {\n    return true;\n  };\n}();\n\n// node_modules/axios/lib/helpers/parseProtocol.js\nfunction parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || \"\";\n}\n\n// node_modules/axios/lib/helpers/speedometer.js\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n  min = min !== void 0 ? min : 1e3;\n  return function push(chunkLength) {\n    const now = Date.now();\n    const startedAt = timestamps[tail];\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n    let i = tail;\n    let bytesCount = 0;\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n    head = (head + 1) % samplesCount;\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n    if (now - firstSampleTS < min) {\n      return;\n    }\n    const passed = startedAt && now - startedAt;\n    return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;\n  };\n}\nvar speedometer_default = speedometer;\n\n// node_modules/axios/lib/adapters/xhr.js\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer_default(50, 250);\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : void 0;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n    bytesNotified = loaded;\n    const data = {\n      loaded,\n      total,\n      progress: total ? loaded / total : void 0,\n      bytes: progressBytes,\n      rate: rate ? rate : void 0,\n      estimated: rate && total && inRange ? (total - loaded) / rate : void 0,\n      event: e\n    };\n    data[isDownloadStream ? \"download\" : \"upload\"] = true;\n    listener(data);\n  };\n}\nvar isXHRAdapterSupported = typeof XMLHttpRequest !== \"undefined\";\nvar xhr_default = isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders_default.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n      if (config.signal) {\n        config.signal.removeEventListener(\"abort\", onCanceled);\n      }\n    }\n    let contentType;\n    if (utils_default.isFormData(requestData)) {\n      if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false);\n      } else if (!requestHeaders.getContentType(/^\\s*multipart\\/form-data/)) {\n        requestHeaders.setContentType(\"multipart/form-data\");\n      } else if (utils_default.isString(contentType = requestHeaders.getContentType())) {\n        requestHeaders.setContentType(contentType.replace(/^\\s*(multipart\\/form-data);+/, \"$1\"));\n      }\n    }\n    let request = new XMLHttpRequest();\n    if (config.auth) {\n      const username = config.auth.username || \"\";\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \"\";\n      requestHeaders.set(\"Authorization\", \"Basic \" + btoa(username + \":\" + password));\n    }\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n    request.timeout = config.timeout;\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      const responseHeaders = AxiosHeaders_default.from(\"getAllResponseHeaders\" in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === \"text\" || responseType === \"json\" ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n      request = null;\n    }\n    if (\"onloadend\" in request) {\n      request.onloadend = onloadend;\n    } else {\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\"file:\") === 0)) {\n          return;\n        }\n        setTimeout(onloadend);\n      };\n    }\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n      reject(new AxiosError_default(\"Request aborted\", AxiosError_default.ECONNABORTED, config, request));\n      request = null;\n    };\n    request.onerror = function handleError() {\n      reject(new AxiosError_default(\"Network Error\", AxiosError_default.ERR_NETWORK, config, request));\n      request = null;\n    };\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? \"timeout of \" + config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n      const transitional2 = config.transitional || transitional_default;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError_default(timeoutErrorMessage, transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED, config, request));\n      request = null;\n    };\n    if (browser_default.isStandardBrowserEnv) {\n      const xsrfValue = isURLSameOrigin_default(fullPath) && config.xsrfCookieName && cookies_default.read(config.xsrfCookieName);\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n    requestData === void 0 && requestHeaders.setContentType(null);\n    if (\"setRequestHeader\" in request) {\n      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n    if (!utils_default.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n    if (responseType && responseType !== \"json\") {\n      request.responseType = config.responseType;\n    }\n    if (typeof config.onDownloadProgress === \"function\") {\n      request.addEventListener(\"progress\", progressEventReducer(config.onDownloadProgress, true));\n    }\n    if (typeof config.onUploadProgress === \"function\" && request.upload) {\n      request.upload.addEventListener(\"progress\", progressEventReducer(config.onUploadProgress));\n    }\n    if (config.cancelToken || config.signal) {\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener(\"abort\", onCanceled);\n      }\n    }\n    const protocol = parseProtocol(fullPath);\n    if (protocol && browser_default.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError_default(\"Unsupported protocol \" + protocol + \":\", AxiosError_default.ERR_BAD_REQUEST, config));\n      return;\n    }\n    request.send(requestData || null);\n  });\n};\n\n// node_modules/axios/lib/adapters/adapters.js\nvar knownAdapters = {\n  http: null_default,\n  xhr: xhr_default\n};\nutils_default.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, \"name\", {\n        value\n      });\n    } catch (e) {}\n    Object.defineProperty(fn, \"adapterName\", {\n      value\n    });\n  }\n});\nvar renderReason = reason => `- ${reason}`;\nvar isResolvedHandle = adapter => utils_default.isFunction(adapter) || adapter === null || adapter === false;\nvar adapters_default = {\n  getAdapter: adapters => {\n    adapters = utils_default.isArray(adapters) ? adapters : [adapters];\n    const {\n      length\n    } = adapters;\n    let nameOrAdapter;\n    let adapter;\n    const rejectedReasons = {};\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n      adapter = nameOrAdapter;\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n        if (adapter === void 0) {\n          throw new AxiosError_default(`Unknown adapter '${id}'`);\n        }\n      }\n      if (adapter) {\n        break;\n      }\n      rejectedReasons[id || \"#\" + i] = adapter;\n    }\n    if (!adapter) {\n      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? \"is not supported by the environment\" : \"is not available in the build\"));\n      let s = length ? reasons.length > 1 ? \"since :\\n\" + reasons.map(renderReason).join(\"\\n\") : \" \" + renderReason(reasons[0]) : \"as no adapter specified\";\n      throw new AxiosError_default(`There is no suitable adapter to dispatch the request ` + s, \"ERR_NOT_SUPPORT\");\n    }\n    return adapter;\n  },\n  adapters: knownAdapters\n};\n\n// node_modules/axios/lib/core/dispatchRequest.js\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError_default(null, config);\n  }\n}\nfunction dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n  config.headers = AxiosHeaders_default.from(config.headers);\n  config.data = transformData.call(config, config.transformRequest);\n  if ([\"post\", \"put\", \"patch\"].indexOf(config.method) !== -1) {\n    config.headers.setContentType(\"application/x-www-form-urlencoded\", false);\n  }\n  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n    response.data = transformData.call(config, config.transformResponse, response);\n    response.headers = AxiosHeaders_default.from(response.headers);\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(config, config.transformResponse, reason.response);\n        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);\n      }\n    }\n    return Promise.reject(reason);\n  });\n}\n\n// node_modules/axios/lib/core/mergeConfig.js\nvar headersToObject = thing => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;\nfunction mergeConfig(config1, config2) {\n  config2 = config2 || {};\n  const config = {};\n  function getMergedValue(target, source, caseless) {\n    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {\n      return utils_default.merge.call({\n        caseless\n      }, target, source);\n    } else if (utils_default.isPlainObject(source)) {\n      return utils_default.merge({}, source);\n    } else if (utils_default.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils_default.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils_default.isUndefined(a)) {\n      return getMergedValue(void 0, a, caseless);\n    }\n  }\n  function valueFromConfig2(a, b) {\n    if (!utils_default.isUndefined(b)) {\n      return getMergedValue(void 0, b);\n    }\n  }\n  function defaultToConfig2(a, b) {\n    if (!utils_default.isUndefined(b)) {\n      return getMergedValue(void 0, b);\n    } else if (!utils_default.isUndefined(a)) {\n      return getMergedValue(void 0, a);\n    }\n  }\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(void 0, a);\n    }\n  }\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge2 = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge2(config1[prop], config2[prop], prop);\n    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);\n  });\n  return config;\n}\n\n// node_modules/axios/lib/env/data.js\nvar VERSION = \"1.6.0\";\n\n// node_modules/axios/lib/helpers/validator.js\nvar validators = {};\n[\"object\", \"boolean\", \"number\", \"function\", \"string\", \"symbol\"].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || \"a\" + (i < 1 ? \"n \" : \" \") + type;\n  };\n});\nvar deprecatedWarnings = {};\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage2(opt, desc) {\n    return \"[Axios v\" + VERSION + \"] Transitional option '\" + opt + \"'\" + desc + (message ? \". \" + message : \"\");\n  }\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError_default(formatMessage2(opt, \" has been removed\" + (version ? \" in \" + version : \"\")), AxiosError_default.ERR_DEPRECATED);\n    }\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      console.warn(formatMessage2(opt, \" has been deprecated since v\" + version + \" and will be removed in the near future\"));\n    }\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== \"object\") {\n    throw new AxiosError_default(\"options must be an object\", AxiosError_default.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === void 0 || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError_default(\"option \" + opt + \" must be \" + result, AxiosError_default.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError_default(\"Unknown option \" + opt, AxiosError_default.ERR_BAD_OPTION);\n    }\n  }\n}\nvar validator_default = {\n  assertOptions,\n  validators\n};\n\n// node_modules/axios/lib/core/Axios.js\nvar validators2 = validator_default.validators;\nvar Axios = class {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager_default(),\n      response: new InterceptorManager_default()\n    };\n  }\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    if (typeof configOrUrl === \"string\") {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n    config = mergeConfig(this.defaults, config);\n    const {\n      transitional: transitional2,\n      paramsSerializer,\n      headers\n    } = config;\n    if (transitional2 !== void 0) {\n      validator_default.assertOptions(transitional2, {\n        silentJSONParsing: validators2.transitional(validators2.boolean),\n        forcedJSONParsing: validators2.transitional(validators2.boolean),\n        clarifyTimeoutError: validators2.transitional(validators2.boolean)\n      }, false);\n    }\n    if (paramsSerializer != null) {\n      if (utils_default.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        };\n      } else {\n        validator_default.assertOptions(paramsSerializer, {\n          encode: validators2.function,\n          serialize: validators2.function\n        }, true);\n      }\n    }\n    config.method = (config.method || this.defaults.method || \"get\").toLowerCase();\n    let contextHeaders = headers && utils_default.merge(headers.common, headers[config.method]);\n    headers && utils_default.forEach([\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\", \"common\"], method => {\n      delete headers[method];\n    });\n    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === \"function\" && interceptor.runWhen(config) === false) {\n        return;\n      }\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n    let promise;\n    let i = 0;\n    let len;\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), void 0];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n      promise = Promise.resolve(config);\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n      return promise;\n    }\n    len = requestInterceptorChain.length;\n    let newConfig = config;\n    i = 0;\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n    i = 0;\n    len = responseInterceptorChain.length;\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n    return promise;\n  }\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n};\nutils_default.forEach([\"delete\", \"get\", \"head\", \"options\"], function forEachMethodNoData(method) {\n  Axios.prototype[method] = function (url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\nutils_default.forEach([\"post\", \"put\", \"patch\"], function forEachMethodWithData(method) {\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          \"Content-Type\": \"multipart/form-data\"\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n  Axios.prototype[method] = generateHTTPMethod();\n  Axios.prototype[method + \"Form\"] = generateHTTPMethod(true);\n});\nvar Axios_default = Axios;\n\n// node_modules/axios/lib/cancel/CancelToken.js\nvar CancelToken = class _CancelToken {\n  constructor(executor) {\n    if (typeof executor !== \"function\") {\n      throw new TypeError(\"executor must be a function.\");\n    }\n    let resolvePromise;\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n    const token = this;\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n      let i = token._listeners.length;\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n      return promise;\n    };\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        return;\n      }\n      token.reason = new CanceledError_default(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n  /**\n   * Subscribe to the cancel signal\n   */\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n  /**\n   * Unsubscribe from the cancel signal\n   */\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new _CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n};\nvar CancelToken_default = CancelToken;\n\n// node_modules/axios/lib/helpers/spread.js\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n\n// node_modules/axios/lib/helpers/isAxiosError.js\nfunction isAxiosError(payload) {\n  return utils_default.isObject(payload) && payload.isAxiosError === true;\n}\n\n// node_modules/axios/lib/helpers/HttpStatusCode.js\nvar HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511\n};\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\nvar HttpStatusCode_default = HttpStatusCode;\n\n// node_modules/axios/lib/axios.js\nfunction createInstance(defaultConfig) {\n  const context = new Axios_default(defaultConfig);\n  const instance = bind(Axios_default.prototype.request, context);\n  utils_default.extend(instance, Axios_default.prototype, context, {\n    allOwnKeys: true\n  });\n  utils_default.extend(instance, context, null, {\n    allOwnKeys: true\n  });\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n  return instance;\n}\nvar axios = createInstance(defaults_default);\naxios.Axios = Axios_default;\naxios.CanceledError = CanceledError_default;\naxios.CancelToken = CancelToken_default;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData_default;\naxios.AxiosError = AxiosError_default;\naxios.Cancel = axios.CanceledError;\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = spread;\naxios.isAxiosError = isAxiosError;\naxios.mergeConfig = mergeConfig;\naxios.AxiosHeaders = AxiosHeaders_default;\naxios.formToJSON = thing => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);\naxios.getAdapter = adapters_default.getAdapter;\naxios.HttpStatusCode = HttpStatusCode_default;\naxios.default = axios;\nvar axios_default = axios;\n\n// node_modules/axios/index.js\nvar {\n  Axios: Axios2,\n  AxiosError: AxiosError2,\n  CanceledError: CanceledError2,\n  isCancel: isCancel2,\n  CancelToken: CancelToken2,\n  VERSION: VERSION2,\n  all: all2,\n  Cancel,\n  isAxiosError: isAxiosError2,\n  spread: spread2,\n  toFormData: toFormData2,\n  AxiosHeaders: AxiosHeaders2,\n  HttpStatusCode: HttpStatusCode2,\n  formToJSON,\n  getAdapter,\n  mergeConfig: mergeConfig2\n} = axios_default;\n\n// src/client.ts\nvar import_https = __toESM(require_https());\n\n// src/utils.ts\nvar import_form_data = __toESM(require_browser());\n\n// src/constants.ts\nvar DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;\nvar DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;\nvar DEFAULT_MESSAGE_SET_PAGINATION = {\n  hasNext: false,\n  hasPrev: false\n};\nvar DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024;\nvar API_MAX_FILES_ALLOWED_PER_MESSAGE = 10;\nvar MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY = 100;\nvar RESERVED_UPDATED_MESSAGE_FIELDS = {\n  // Dates should not be converted back to ISO strings as JS looses precision on them (milliseconds)\n  created_at: true,\n  deleted_at: true,\n  pinned_at: true,\n  updated_at: true,\n  command: true,\n  // Back-end enriches these fields\n  mentioned_users: true,\n  quoted_message: true,\n  // Client-specific fields\n  latest_reactions: true,\n  own_reactions: true,\n  reaction_counts: true,\n  reply_count: true,\n  // Message text related fields that shouldn't be in update\n  i18n: true,\n  type: true,\n  html: true,\n  __html: true,\n  user: true\n};\nvar LOCAL_MESSAGE_FIELDS = {\n  error: true\n};\nvar DEFAULT_QUERY_CHANNELS_RETRY_COUNT = 3;\nvar DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES = 1e3;\n\n// src/utils.ts\nfunction logChatPromiseExecution(promise, name) {\n  promise.then().catch(error => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\nvar sleep = m => new Promise(r => setTimeout(r, m));\nfunction isFunction2(value) {\n  return typeof value === \"function\" || value instanceof Function || Object.prototype.toString.call(value) === \"[object Function]\";\n}\nvar chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1e3\n};\nfunction isReadableStream(obj) {\n  return obj !== null && typeof obj === \"object\" && (obj.readable || typeof obj._read === \"function\");\n}\nfunction isBuffer2(obj) {\n  return obj != null && obj.constructor != null &&\n  // @ts-expect-error expected\n  typeof obj.constructor.isBuffer === \"function\" &&\n  // @ts-expect-error expected\n  obj.constructor.isBuffer(obj);\n}\nfunction isFileWebAPI(uri) {\n  return typeof window !== \"undefined\" && \"File\" in window && uri instanceof File;\n}\nfunction isOwnUser(user) {\n  return user?.total_unread_count !== void 0;\n}\nfunction isBlobWebAPI(uri) {\n  return typeof window !== \"undefined\" && \"Blob\" in window && uri instanceof Blob;\n}\nfunction isOwnUserBaseProperty(property) {\n  const ownUserBaseProperties = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    unread_threads: true,\n    invisible: true,\n    privacy_settings: true,\n    roles: true,\n    push_preferences: true\n  };\n  return ownUserBaseProperties[property];\n}\nfunction addFileToFormData(uri, name, contentType) {\n  const data = new import_form_data.default();\n  if (isReadableStream(uri) || isBuffer2(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append(\"file\", uri, name);else data.append(\"file\", uri);\n  } else {\n    data.append(\"file\", {\n      uri,\n      name: name || uri.split(\"/\").reverse()[0],\n      contentType: contentType || void 0,\n      type: contentType || void 0\n    });\n  }\n  return data;\n}\nfunction normalizeQuerySort(sort) {\n  const sortFields = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item);\n    if (entries.length > 1) {\n      console.warn(\"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\");\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({\n        field,\n        direction\n      });\n    }\n  }\n  return sortFields;\n}\nfunction retryInterval(numberOfFailures) {\n  const max = Math.min(500 + numberOfFailures * 2e3, 25e3);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2e3), 25e3);\n  return Math.floor(Math.random() * (max - min) + min);\n}\nfunction randomId() {\n  return generateUUIDv4();\n}\nfunction hex(bytes) {\n  let s = \"\";\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, \"0\");\n  }\n  return s;\n}\nfunction generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = bytes[6] & 15 | 64;\n  bytes[8] = bytes[8] & 191 | 128;\n  return hex(bytes.subarray(0, 4)) + \"-\" + hex(bytes.subarray(4, 6)) + \"-\" + hex(bytes.subarray(6, 8)) + \"-\" + hex(bytes.subarray(8, 10)) + \"-\" + hex(bytes.subarray(10, 16));\n}\nfunction getRandomValuesWithMathRandom(bytes) {\n  const max = Math.pow(2, 8 * bytes.byteLength / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\nvar getRandomValues = (() => {\n  if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues !== \"undefined\") {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== \"undefined\") {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\nfunction getRandomBytes(length) {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\nfunction convertErrorToJson(err) {\n  const jsonObj = {};\n  if (!err) return jsonObj;\n  try {\n    Object.getOwnPropertyNames(err).forEach(key => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: \"failed to serialize the error\"\n    };\n  }\n  return jsonObj;\n}\nfunction isOnline() {\n  const nav = typeof navigator !== \"undefined\" ? navigator : typeof window !== \"undefined\" && window.navigator ? window.navigator : void 0;\n  if (!nav) {\n    console.warn(\"isOnline failed to access window.navigator and assume browser is online\");\n    return true;\n  }\n  if (typeof nav.onLine !== \"boolean\") {\n    return true;\n  }\n  return nav.onLine;\n}\nfunction addConnectionEventListeners(cb) {\n  if (typeof window !== \"undefined\" && window.addEventListener) {\n    window.addEventListener(\"offline\", cb);\n    window.addEventListener(\"online\", cb);\n  }\n}\nfunction removeConnectionEventListeners(cb) {\n  if (typeof window !== \"undefined\" && window.removeEventListener) {\n    window.removeEventListener(\"offline\", cb);\n    window.removeEventListener(\"online\", cb);\n  }\n}\nvar axiosParamsSerializer = params => {\n  const newParams = [];\n  for (const k in params) {\n    if (params[k] === void 0) continue;\n    if (Array.isArray(params[k]) || typeof params[k] === \"object\") {\n      newParams.push(`${k}=${encodeURIComponent(JSON.stringify(params[k]))}`);\n    } else {\n      newParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  }\n  return newParams.join(\"&\");\n};\nfunction formatMessage(message) {\n  const toLocalMessageBase = msg => {\n    if (!msg) return null;\n    return {\n      ...msg,\n      created_at: message.created_at ? new Date(message.created_at) : /* @__PURE__ */new Date(),\n      deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,\n      pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n      reaction_groups: maybeGetReactionGroupsFallback(message.reaction_groups, message.reaction_counts, message.reaction_scores),\n      status: message.status || \"received\",\n      updated_at: message.updated_at ? new Date(message.updated_at) : /* @__PURE__ */new Date()\n    };\n  };\n  return {\n    ...toLocalMessageBase(message),\n    error: message.error ?? null,\n    quoted_message: toLocalMessageBase(message.quoted_message)\n  };\n}\nfunction unformatMessage(message) {\n  const toMessageResponseBase = msg => {\n    if (!msg) return null;\n    const newDateString = (/* @__PURE__ */new Date()).toISOString();\n    return {\n      ...msg,\n      created_at: message.created_at ? message.created_at.toISOString() : newDateString,\n      deleted_at: message.deleted_at ? message.deleted_at.toISOString() : void 0,\n      pinned_at: message.pinned_at ? message.pinned_at.toISOString() : void 0,\n      updated_at: message.updated_at ? message.updated_at.toISOString() : newDateString\n    };\n  };\n  return {\n    ...toMessageResponseBase(message),\n    quoted_message: toMessageResponseBase(message.quoted_message)\n  };\n}\nvar localMessageToNewMessagePayload = localMessage => {\n  const {\n    // Remove all timestamp fields and client-specific fields.\n    // Field pinned_at can therefore be earlier than created_at as new message payload can hold it.\n    created_at,\n    updated_at,\n    deleted_at,\n    // Client-specific fields\n    error,\n    status,\n    // Reaction related fields\n    latest_reactions,\n    own_reactions,\n    reaction_counts,\n    reaction_scores,\n    reply_count,\n    // Message text related fields that shouldn't be in update\n    command,\n    html,\n    i18n,\n    quoted_message,\n    mentioned_users,\n    // Message content related fields\n    ...messageFields\n  } = localMessage;\n  return {\n    ...messageFields,\n    pinned_at: messageFields.pinned_at?.toISOString(),\n    mentioned_users: mentioned_users?.map(user => user.id)\n  };\n};\nvar toUpdatedMessagePayload = message => {\n  const reservedKeys = {\n    ...RESERVED_UPDATED_MESSAGE_FIELDS,\n    ...LOCAL_MESSAGE_FIELDS\n  };\n  const messageFields = Object.fromEntries(Object.entries(message).filter(([key]) => !reservedKeys[key]));\n  return {\n    ...messageFields,\n    pinned: !!message.pinned_at,\n    mentioned_users: message.mentioned_users?.map(user => typeof user === \"string\" ? user : user.id)\n  };\n};\nvar findIndexInSortedArray = ({\n  needle,\n  sortedArray,\n  selectKey,\n  selectValueToCompare = e => e,\n  sortDirection = \"ascending\"\n}) => {\n  if (!sortedArray.length) return 0;\n  let left = 0;\n  let right = sortedArray.length - 1;\n  let middle = 0;\n  const recalculateMiddle = () => {\n    middle = Math.round((left + right) / 2);\n  };\n  const comparableNeedle = selectValueToCompare(needle);\n  while (left <= right) {\n    recalculateMiddle();\n    const comparableMiddle = selectValueToCompare(sortedArray[middle]);\n    if (sortDirection === \"ascending\" && comparableNeedle < comparableMiddle || sortDirection === \"descending\" && comparableNeedle >= comparableMiddle) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n  if (selectKey) {\n    const needleKey = selectKey(needle);\n    const step = sortDirection === \"ascending\" ? -1 : 1;\n    for (let i = left + step; 0 <= i && i < sortedArray.length && selectValueToCompare(sortedArray[i]) === comparableNeedle; i += step) {\n      if (selectKey(sortedArray[i]) === needleKey) {\n        return i;\n      }\n    }\n  }\n  return left;\n};\nfunction addToMessageList(messages, newMessage, timestampChanged = false, sortBy = \"created_at\", addIfDoesNotExist = true) {\n  const addMessageToList = addIfDoesNotExist || timestampChanged;\n  let newMessages = [...messages];\n  if (timestampChanged) {\n    newMessages = newMessages.filter(message => !(message.id && newMessage.id === message.id));\n  }\n  if (newMessages.length === 0 && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (newMessages.length === 0) {\n    return newMessages;\n  }\n  const messageTime = newMessage[sortBy].getTime();\n  const messageIsNewest = newMessages.at(-1)[sortBy].getTime() < messageTime;\n  if (messageIsNewest && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (messageIsNewest) {\n    return newMessages;\n  }\n  const insertionIndex = findIndexInSortedArray({\n    needle: newMessage,\n    sortedArray: newMessages,\n    sortDirection: \"ascending\",\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    selectValueToCompare: m => m[sortBy].getTime(),\n    selectKey: m => m.id\n  });\n  if (!timestampChanged && newMessage.id && newMessages[insertionIndex] && newMessage.id === newMessages[insertionIndex].id) {\n    newMessages[insertionIndex] = newMessage;\n    return newMessages;\n  }\n  if (addMessageToList) {\n    newMessages.splice(insertionIndex, 0, newMessage);\n  }\n  return newMessages;\n}\nfunction maybeGetReactionGroupsFallback(groups, counts, scores) {\n  if (groups) {\n    return groups;\n  }\n  if (counts && scores) {\n    const fallback = {};\n    for (const type of Object.keys(counts)) {\n      fallback[type] = {\n        count: counts[type],\n        sum_scores: scores[type]\n      };\n    }\n    return fallback;\n  }\n  return null;\n}\nvar debounce = (fn, timeout = 0, {\n  leading = false,\n  trailing = true\n} = {}) => {\n  let runningTimeout = null;\n  let argsForTrailingExecution = null;\n  let lastResult;\n  const debouncedFn = (...args) => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n    } else if (leading) {\n      lastResult = fn(...args);\n    }\n    if (trailing) argsForTrailingExecution = args;\n    const timeoutHandler = () => {\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n        argsForTrailingExecution = null;\n      }\n      runningTimeout = null;\n    };\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n    return lastResult;\n  };\n  debouncedFn.cancel = () => {\n    if (runningTimeout) clearTimeout(runningTimeout);\n  };\n  debouncedFn.flush = () => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n      runningTimeout = null;\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n      }\n    }\n    return lastResult;\n  };\n  return debouncedFn;\n};\nvar throttle = (fn, timeout = 200, {\n  leading = true,\n  trailing = false\n} = {}) => {\n  let runningTimeout = null;\n  let storedArgs = null;\n  return (...args) => {\n    if (runningTimeout) {\n      if (trailing) storedArgs = args;\n      return;\n    }\n    if (leading) fn(...args);\n    const timeoutHandler = () => {\n      if (storedArgs) {\n        fn(...storedArgs);\n        storedArgs = null;\n        runningTimeout = setTimeout(timeoutHandler, timeout);\n        return;\n      }\n      runningTimeout = null;\n    };\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n  };\n};\nvar get = (obj, path) => path.split(\".\").reduce((acc, key) => {\n  if (acc && typeof acc === \"object\" && key in acc) {\n    return acc[key];\n  }\n  return void 0;\n}, obj);\nvar uniqBy = (array, iteratee) => {\n  if (!Array.isArray(array)) return [];\n  const seen = /* @__PURE__ */new Set();\n  return array.filter(item => {\n    const key = typeof iteratee === \"function\" ? iteratee(item) : get(item, iteratee);\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n};\nfunction binarySearchByDateEqualOrNearestGreater(array, targetDate) {\n  let left = 0;\n  let right = array.length - 1;\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const midCreatedAt = array[mid].created_at;\n    if (!midCreatedAt) {\n      left += 1;\n      continue;\n    }\n    const midDate = new Date(midCreatedAt);\n    if (midDate.getTime() === targetDate.getTime()) {\n      return mid;\n    } else if (midDate.getTime() < targetDate.getTime()) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n  return left;\n}\nvar messagePaginationCreatedAtAround = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions\n}) => {\n  const newPagination = {\n    ...parentSet.pagination\n  };\n  if (!messagePaginationOptions?.created_at_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n  let updateHasPrev;\n  let updateHasNext;\n  const createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const wholePageHasNewerMessages = !!firstPageMsg?.created_at && new Date(firstPageMsg.created_at) > createdAtAroundDate;\n  const wholePageHasOlderMessages = !!lastPageMsg?.created_at && new Date(lastPageMsg.created_at) < createdAtAroundDate;\n  const requestedPageSizeNotMet = requestedPageSize > parentSet.messages.length && requestedPageSize > returnedPage.length;\n  const noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;\n  if (wholePageHasNewerMessages) {\n    hasPrev = false;\n    updateHasPrev = true;\n    if (requestedPageSizeNotMet) {\n      hasNext = false;\n      updateHasNext = true;\n    }\n  } else if (wholePageHasOlderMessages) {\n    hasNext = false;\n    updateHasNext = true;\n    if (requestedPageSizeNotMet) {\n      hasPrev = false;\n      updateHasPrev = true;\n    }\n  } else if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else {\n    const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id, lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id];\n    updateHasPrev = firstPageMsgIsFirstInSet;\n    updateHasNext = lastPageMsgIsLastInSet;\n    const midPointByCount = Math.floor(returnedPage.length / 2);\n    const midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(returnedPage, createdAtAroundDate);\n    if (midPointByCreationDate !== -1) {\n      hasPrev = midPointByCount <= midPointByCreationDate;\n      hasNext = midPointByCount >= midPointByCreationDate;\n    }\n  }\n  if (updateHasPrev && typeof hasPrev !== \"undefined\") newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== \"undefined\") newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messagePaginationIdAround = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions\n}) => {\n  const newPagination = {\n    ...parentSet.pagination\n  };\n  const {\n    id_around\n  } = messagePaginationOptions || {};\n  if (!id_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [firstPageMsg?.id === parentSet.messages[0]?.id, lastPageMsg?.id === parentSet.messages.slice(-1)[0]?.id];\n  let updateHasPrev = firstPageMsgIsFirstInSet;\n  let updateHasNext = lastPageMsgIsLastInSet;\n  const midPoint = Math.floor(returnedPage.length / 2);\n  const noMoreMessages = (requestedPageSize > parentSet.messages.length || parentSet.messages.length >= returnedPage.length) && requestedPageSize > returnedPage.length;\n  if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else if (!returnedPage[midPoint]) {\n    return newPagination;\n  } else if (returnedPage[midPoint].id === id_around) {\n    hasPrev = hasNext = true;\n  } else {\n    let targetMsg;\n    const halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];\n    hasPrev = hasNext = true;\n    for (let i = 0; i < halves.length; i++) {\n      targetMsg = halves[i].find(message => message.id === id_around);\n      if (targetMsg && i === 0) {\n        hasPrev = false;\n      }\n      if (targetMsg && i === 1) {\n        hasNext = false;\n      }\n    }\n  }\n  if (updateHasPrev && typeof hasPrev !== \"undefined\") newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== \"undefined\") newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messagePaginationLinear = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions\n}) => {\n  const newPagination = {\n    ...parentSet.pagination\n  };\n  let hasPrev;\n  let hasNext;\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id, lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id];\n  const queriedNextMessages = messagePaginationOptions && (messagePaginationOptions.created_at_after_or_equal || messagePaginationOptions.created_at_after || messagePaginationOptions.id_gt || messagePaginationOptions.id_gte);\n  const queriedPrevMessages = typeof messagePaginationOptions === \"undefined\" ? true : messagePaginationOptions.created_at_before_or_equal || messagePaginationOptions.created_at_before || messagePaginationOptions.id_lt || messagePaginationOptions.id_lte || messagePaginationOptions.offset;\n  const containsUnrecognizedOptionsOnly = !queriedNextMessages && !queriedPrevMessages && !messagePaginationOptions?.id_around && !messagePaginationOptions?.created_at_around;\n  const hasMore = returnedPage.length >= requestedPageSize;\n  if (typeof queriedPrevMessages !== \"undefined\" || containsUnrecognizedOptionsOnly) {\n    hasPrev = hasMore;\n  }\n  if (typeof queriedNextMessages !== \"undefined\") {\n    hasNext = hasMore;\n  }\n  const returnedPageIsEmpty = returnedPage.length === 0;\n  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== \"undefined\") newPagination.hasPrev = hasPrev;\n  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== \"undefined\") newPagination.hasNext = hasNext;\n  return newPagination;\n};\nvar messageSetPagination = params => {\n  if (params.parentSet.messages.length < params.returnedPage.length) {\n    params.logger?.(\"error\", \"Corrupted message set state: parent set size < returned page size\");\n    return params.parentSet.pagination;\n  }\n  if (params.messagePaginationOptions?.created_at_around) {\n    return messagePaginationCreatedAtAround(params);\n  } else if (params.messagePaginationOptions?.id_around) {\n    return messagePaginationIdAround(params);\n  } else {\n    return messagePaginationLinear(params);\n  }\n};\nvar WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL = {};\nvar getAndWatchChannel = async ({\n  channel,\n  client,\n  id,\n  members,\n  options,\n  type\n}) => {\n  if (!channel && !type) {\n    throw new Error(\"Channel or channel type have to be provided to query a channel.\");\n  }\n  const channelToWatch = channel || client.channel(type, id, {\n    members\n  });\n  const originalCid = channelToWatch.id ? channelToWatch.cid : members && members.length ? generateChannelTempCid(channelToWatch.type, members) : void 0;\n  if (!originalCid) {\n    throw new Error(\"Channel ID or channel members array have to be provided to query a channel.\");\n  }\n  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n  if (queryPromise) {\n    await queryPromise;\n  } else {\n    try {\n      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);\n      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    } finally {\n      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    }\n  }\n  return channelToWatch;\n};\nvar generateChannelTempCid = (channelType, members) => {\n  if (!members) return;\n  const membersStr = [...members].sort().join(\",\");\n  if (!membersStr) return;\n  return `${channelType}:!members-${membersStr}`;\n};\nvar isChannelPinned = channel => {\n  if (!channel) return false;\n  const member = channel.state.membership;\n  return !!member?.pinned_at;\n};\nvar isChannelArchived = channel => {\n  if (!channel) return false;\n  const member = channel.state.membership;\n  return !!member?.archived_at;\n};\nvar shouldConsiderArchivedChannels = filters => {\n  if (!filters) return false;\n  return typeof filters.archived === \"boolean\";\n};\nvar extractSortValue = ({\n  atIndex,\n  sort,\n  targetKey\n}) => {\n  if (!sort) return null;\n  let option = null;\n  if (Array.isArray(sort)) {\n    option = sort[atIndex] ?? null;\n  } else {\n    let index = 0;\n    for (const key in sort) {\n      if (index !== atIndex) {\n        index++;\n        continue;\n      }\n      if (key !== targetKey) {\n        return null;\n      }\n      option = sort;\n      break;\n    }\n  }\n  return option?.[targetKey] ?? null;\n};\nvar shouldConsiderPinnedChannels = sort => {\n  const value = findPinnedAtSortOrder({\n    sort\n  });\n  if (typeof value !== \"number\") return false;\n  return Math.abs(value) === 1;\n};\nvar findPinnedAtSortOrder = ({\n  sort\n}) => extractSortValue({\n  atIndex: 0,\n  sort,\n  targetKey: \"pinned_at\"\n});\nvar findLastPinnedChannelIndex = ({\n  channels\n}) => {\n  let lastPinnedChannelIndex = null;\n  for (const channel of channels) {\n    if (!isChannelPinned(channel)) break;\n    if (typeof lastPinnedChannelIndex === \"number\") {\n      lastPinnedChannelIndex++;\n    } else {\n      lastPinnedChannelIndex = 0;\n    }\n  }\n  return lastPinnedChannelIndex;\n};\nvar promoteChannel = ({\n  channels,\n  channelToMove,\n  channelToMoveIndexWithinChannels,\n  sort\n}) => {\n  const targetChannelIndex = channelToMoveIndexWithinChannels ?? channels.findIndex(channel => channel.cid === channelToMove.cid);\n  const targetChannelExistsWithinList = targetChannelIndex >= 0;\n  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;\n  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n  const isTargetChannelPinned = isChannelPinned(channelToMove);\n  if (targetChannelAlreadyAtTheTop || considerPinnedChannels && isTargetChannelPinned) {\n    return channels;\n  }\n  const newChannels = [...channels];\n  if (targetChannelExistsWithinList) {\n    newChannels.splice(targetChannelIndex, 1);\n  }\n  let lastPinnedChannelIndex = null;\n  if (considerPinnedChannels) {\n    lastPinnedChannelIndex = findLastPinnedChannelIndex({\n      channels: newChannels\n    });\n  }\n  newChannels.splice(typeof lastPinnedChannelIndex === \"number\" ? lastPinnedChannelIndex + 1 : 0, 0, channelToMove);\n  return newChannels;\n};\nvar isDate2 = value => !!value.getTime;\nvar isLocalMessage = message => isDate2(message.created_at);\nvar runDetached = (callback, options) => {\n  const {\n    context,\n    onSuccessCallback = () => void 0,\n    onErrorCallback\n  } = options ?? {};\n  const defaultOnError = error => {\n    console.log(`An error has occurred in context ${context}: ${error}`);\n  };\n  const onError = onErrorCallback ?? defaultOnError;\n  let promise = callback;\n  if (onSuccessCallback) {\n    promise = promise.then(onSuccessCallback);\n  }\n  promise.catch(onError);\n};\n\n// src/channel_state.ts\nvar ChannelState = class {\n  constructor(channel) {\n    /**\n     * Disjoint lists of messages\n     * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n     * The state manages these lists and merges them when lists overlap\n     * The messages array contains the currently active set\n     */\n    this.messageSets = [];\n    /**\n     * Takes the message object, parses the dates, sets `__html`\n     * and sets the status to `received` if missing; returns a new message object.\n     *\n     * @param {MessageResponse} message `MessageResponse` object\n     */\n    this.formatMessage = message => formatMessage(message);\n    /**\n     * Setter for isUpToDate.\n     *\n     * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n     *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     *                    When false, any new message (received by websocket event - message.new) will not\n     *                    be pushed on to message list.\n     */\n    this.setIsUpToDate = isUpToDate => {\n      this.isUpToDate = isUpToDate;\n    };\n    this.removeMessageFromArray = (msgArray, msg) => {\n      const result = msgArray.filter(message => !(!!message.id && !!msg.id && message.id === msg.id));\n      return {\n        removed: result.length < msgArray.length,\n        result\n      };\n    };\n    /**\n     * Updates the message.user property with updated user object, for messages.\n     *\n     * @param {UserResponse} user\n     */\n    this.updateUserMessages = user => {\n      const _updateUserMessages = (messages, user2) => {\n        for (let i = 0; i < messages.length; i++) {\n          const m = messages[i];\n          if (m.user?.id === user2.id) {\n            messages[i] = {\n              ...m,\n              user: user2\n            };\n          }\n        }\n      };\n      this.messageSets.forEach(set => _updateUserMessages(set.messages, user));\n      for (const parentId in this.threads) {\n        _updateUserMessages(this.threads[parentId], user);\n      }\n      _updateUserMessages(this.pinnedMessages, user);\n    };\n    /**\n     * Marks the messages as deleted, from deleted user.\n     *\n     * @param {UserResponse} user\n     * @param {boolean} hardDelete\n     */\n    this.deleteUserMessages = (user, hardDelete = false) => {\n      const _deleteUserMessages = (messages, user2, hardDelete2 = false) => {\n        for (let i = 0; i < messages.length; i++) {\n          const m = messages[i];\n          if (m.user?.id !== user2.id) {\n            continue;\n          }\n          if (hardDelete2) {\n            messages[i] = {\n              cid: m.cid,\n              created_at: m.created_at,\n              deleted_at: user2.deleted_at,\n              id: m.id,\n              latest_reactions: [],\n              mentioned_users: [],\n              own_reactions: [],\n              parent_id: m.parent_id,\n              reply_count: m.reply_count,\n              status: m.status,\n              thread_participants: m.thread_participants,\n              type: \"deleted\",\n              updated_at: m.updated_at,\n              user: m.user\n            };\n          } else {\n            messages[i] = {\n              ...m,\n              type: \"deleted\",\n              deleted_at: user2.deleted_at ? new Date(user2.deleted_at) : null\n            };\n          }\n        }\n      };\n      this.messageSets.forEach(set => _deleteUserMessages(set.messages, user, hardDelete));\n      for (const parentId in this.threads) {\n        _deleteUserMessages(this.threads[parentId], user, hardDelete);\n      }\n      _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n    };\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {};\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    this.isUpToDate = true;\n    this.last_message_at = channel?.state?.last_message_at != null ? new Date(channel.state.last_message_at) : null;\n  }\n  get messages() {\n    return this.messageSets.find(s => s.isCurrent)?.messages || [];\n  }\n  set messages(messages) {\n    const index = this.messageSets.findIndex(s => s.isCurrent);\n    this.messageSets[index].messages = messages;\n  }\n  /**\n   * The list of latest messages\n   * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n   */\n  get latestMessages() {\n    return this.messageSets.find(s => s.isLatest)?.messages || [];\n  }\n  set latestMessages(messages) {\n    const index = this.messageSets.findIndex(s => s.isLatest);\n    this.messageSets[index].messages = messages;\n  }\n  get messagePagination() {\n    return this.messageSets.find(s => s.isCurrent)?.pagination || DEFAULT_MESSAGE_SET_PAGINATION;\n  }\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n   */\n  addMessageSorted(newMessage, timestampChanged = false, addIfDoesNotExist = true, messageSetToAddToIfDoesNotExist = \"latest\") {\n    return this.addMessagesSorted([newMessage], timestampChanged, false, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);\n  }\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n   *\n   */\n  addMessagesSorted(newMessages, timestampChanged = false, initializing = false, addIfDoesNotExist = true, messageSetToAddToIfDoesNotExist = \"current\") {\n    const {\n      messagesToAdd,\n      targetMessageSetIndex\n    } = this.findTargetMessageSet(newMessages, addIfDoesNotExist, messageSetToAddToIfDoesNotExist);\n    for (let i = 0; i < messagesToAdd.length; i += 1) {\n      const isFromShadowBannedUser = messagesToAdd[i].shadowed;\n      if (isFromShadowBannedUser) {\n        continue;\n      }\n      const isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n      let message;\n      if (isMessageFormatted) {\n        message = messagesToAdd[i];\n      } else {\n        message = this.formatMessage(messagesToAdd[i]);\n        if (message.user && this._channel?.cid) {\n          this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n        }\n        if (initializing && message.id && this.threads[message.id]) {\n          delete this.threads[message.id];\n        }\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n      }\n      const parentID = message.parent_id;\n      if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(this.messageSets[targetMessageSetIndex].messages, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n      }\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        this.threads[parentID] = this._addToMessageList(thread, message, timestampChanged, \"created_at\", addIfDoesNotExist);\n      }\n    }\n    return {\n      messageSet: this.messageSets[targetMessageSetIndex]\n    };\n  }\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(pinnedMessages) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(pinnedMessage) {\n    this.pinnedMessages = this._addToMessageList(this.pinnedMessages, this.formatMessage(pinnedMessage), false, \"pinned_at\");\n  }\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse} message message to remove\n   *\n   */\n  removePinnedMessage(message) {\n    const {\n      result\n    } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n  addReaction(reaction, message, enforce_unique) {\n    const messageWithReaction = message;\n    let messageFromState;\n    if (!messageWithReaction) {\n      messageFromState = this.findMessage(reaction.message_id);\n    }\n    if (!messageWithReaction && !messageFromState) {\n      return;\n    }\n    const messageToUpdate = messageWithReaction ?? messageFromState;\n    const updateData = {\n      id: messageToUpdate?.id,\n      parent_id: messageToUpdate?.parent_id,\n      pinned: messageToUpdate?.pinned,\n      show_in_channel: messageToUpdate?.show_in_channel\n    };\n    this._updateMessage(updateData, msg => {\n      if (messageWithReaction) {\n        const updatedMessage = {\n          ...messageWithReaction\n        };\n        messageWithReaction.own_reactions = this._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n        updatedMessage.own_reactions = this._channel.getClient().userID === reaction.user_id ? messageWithReaction.own_reactions : msg.own_reactions;\n        return this.formatMessage(updatedMessage);\n      }\n      if (messageFromState) {\n        return this._addReactionToState(messageFromState, reaction, enforce_unique);\n      }\n      return msg;\n    });\n    return messageWithReaction ?? messageFromState;\n  }\n  _addReactionToState(messageFromState, reaction, enforce_unique) {\n    if (!messageFromState.reaction_groups) {\n      messageFromState.reaction_groups = {};\n    }\n    if (enforce_unique) {\n      for (const ownReaction of messageFromState.own_reactions ?? []) {\n        const oldOwnReactionTypeData = messageFromState.reaction_groups[ownReaction.type];\n        messageFromState.reaction_groups[ownReaction.type] = {\n          ...oldOwnReactionTypeData,\n          count: oldOwnReactionTypeData.count - 1,\n          sum_scores: oldOwnReactionTypeData.sum_scores - (ownReaction.score ?? 1)\n        };\n        if (messageFromState.reaction_groups[ownReaction.type].count < 1) {\n          delete messageFromState.reaction_groups[ownReaction.type];\n        }\n      }\n    }\n    const newReactionGroups = messageFromState.reaction_groups;\n    const oldReactionTypeData = newReactionGroups[reaction.type];\n    const score = reaction.score ?? 1;\n    messageFromState.reaction_groups[reaction.type] = oldReactionTypeData ? {\n      ...oldReactionTypeData,\n      count: oldReactionTypeData.count + 1,\n      sum_scores: oldReactionTypeData.sum_scores + score,\n      last_reaction_at: reaction.created_at\n    } : {\n      count: 1,\n      first_reaction_at: reaction.created_at,\n      last_reaction_at: reaction.created_at,\n      sum_scores: score\n    };\n    messageFromState.own_reactions = this._addOwnReactionToMessage(messageFromState.own_reactions, reaction, enforce_unique);\n    const userId = this._channel.getClient().userID;\n    messageFromState.latest_reactions = enforce_unique ? [...(messageFromState.latest_reactions || []).filter(r => r.user_id !== userId), reaction] : [...(messageFromState.latest_reactions || []), reaction];\n    return messageFromState;\n  }\n  _addOwnReactionToMessage(ownReactions, reaction, enforce_unique) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n    return ownReactions;\n  }\n  _removeOwnReactionFromMessage(ownReactions, reaction) {\n    if (ownReactions) {\n      return ownReactions.filter(item => item.user_id !== reaction.user_id || item.type !== reaction.type);\n    }\n    return ownReactions;\n  }\n  removeReaction(reaction, message) {\n    const messageWithRemovedReaction = message;\n    let messageFromState;\n    if (!messageWithRemovedReaction) {\n      messageFromState = this.findMessage(reaction.message_id);\n    }\n    if (!messageWithRemovedReaction && !messageFromState) {\n      return;\n    }\n    const messageToUpdate = messageWithRemovedReaction ?? messageFromState;\n    const updateData = {\n      id: messageToUpdate?.id,\n      parent_id: messageToUpdate?.parent_id,\n      pinned: messageToUpdate?.pinned,\n      show_in_channel: messageToUpdate?.show_in_channel\n    };\n    this._updateMessage(updateData, msg => {\n      if (messageWithRemovedReaction) {\n        messageWithRemovedReaction.own_reactions = this._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n        return this.formatMessage(messageWithRemovedReaction);\n      }\n      if (messageFromState) {\n        return this._removeReactionFromState(messageFromState, reaction);\n      }\n      return msg;\n    });\n    return messageWithRemovedReaction;\n  }\n  _removeReactionFromState(messageFromState, reaction) {\n    const reactionToRemove = messageFromState.own_reactions?.find(r => r.type === reaction.type);\n    if (reactionToRemove && messageFromState.reaction_groups?.[reactionToRemove.type]) {\n      const newReactionGroup = messageFromState.reaction_groups[reactionToRemove.type];\n      messageFromState.reaction_groups[reactionToRemove.type] = {\n        ...newReactionGroup,\n        count: newReactionGroup.count - 1,\n        sum_scores: newReactionGroup.sum_scores - (reactionToRemove.score ?? 1)\n      };\n      if (messageFromState.reaction_groups[reactionToRemove.type].count < 1) {\n        delete messageFromState.reaction_groups[reactionToRemove.type];\n      }\n    }\n    messageFromState.own_reactions = messageFromState.own_reactions?.filter(r => r.type !== reaction.type);\n    const userId = this._channel.getClient().userID;\n    messageFromState.latest_reactions = messageFromState.latest_reactions?.filter(r => !(r.user_id === userId && r.type === reaction.type));\n    return messageFromState;\n  }\n  _updateQuotedMessageReferences({\n    message,\n    remove\n  }) {\n    const parseMessage = m => ({\n      ...m,\n      created_at: m.created_at.toISOString(),\n      pinned_at: m.pinned_at?.toISOString(),\n      updated_at: m.updated_at?.toISOString()\n    });\n    const update = messages => {\n      const updatedMessages = messages.reduce((acc, msg) => {\n        if (msg.quoted_message_id === message.id) {\n          acc.push({\n            ...parseMessage(msg),\n            quoted_message: remove ? {\n              ...message,\n              attachments: []\n            } : message\n          });\n        }\n        return acc;\n      }, []);\n      this.addMessagesSorted(updatedMessages, true);\n    };\n    if (!message.parent_id) {\n      this.messageSets.forEach(set => update(set.messages));\n    } else if (message.parent_id && this.threads[message.parent_id]) {\n      update(this.threads[message.parent_id]);\n    }\n  }\n  removeQuotedMessageReferences(message) {\n    this._updateQuotedMessageReferences({\n      message,\n      remove: true\n    });\n  }\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(message, updateFunc) {\n    const {\n      parent_id,\n      show_in_channel,\n      pinned\n    } = message;\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex(msg => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n    if (!show_in_channel && !parent_id || show_in_channel) {\n      const messageSetIndex = this.findMessageSetIndex(message);\n      if (messageSetIndex !== -1) {\n        const msgIndex = this.messageSets[messageSetIndex].messages.findIndex(msg => msg.id === message.id);\n        if (msgIndex !== -1) {\n          const upMsg = updateFunc(this.messageSets[messageSetIndex].messages[msgIndex]);\n          this.messageSets[messageSetIndex].messages[msgIndex] = upMsg;\n        }\n      }\n    }\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex(msg => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(messages, message, timestampChanged = false, sortBy = \"created_at\", addIfDoesNotExist = true) {\n    return addToMessageList(messages, message, timestampChanged, sortBy, addIfDoesNotExist);\n  }\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const {\n        removed,\n        result: threadMessages\n      } = this.removeMessageFromArray(this.threads[messageToRemove.parent_id], messageToRemove);\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const messageSetIndex = messageToRemove.messageSetIndex ?? this.findMessageSetIndex(messageToRemove);\n      if (messageSetIndex !== -1) {\n        const {\n          removed,\n          result: messages\n        } = this.removeMessageFromArray(this.messageSets[messageSetIndex].messages, messageToRemove);\n        this.messageSets[messageSetIndex].messages = messages;\n        isRemoved = removed;\n      }\n    }\n    return isRemoved;\n  }\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.latestMessages.filter(message => message.type !== \"error\");\n    this.latestMessages = filteredMessages;\n  }\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = /* @__PURE__ */new Date();\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt = typeof lastEvent.received_at === \"string\" ? new Date(lastEvent.received_at) : lastEvent.received_at || /* @__PURE__ */new Date();\n      if (now.getTime() - receivedAt.getTime() > 7e3) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: \"typing.stop\",\n          user: {\n            id: userID\n          }\n        });\n      }\n    }\n  }\n  clearMessages() {\n    this.initMessages();\n    this.pinnedMessages = [];\n  }\n  initMessages() {\n    this.messageSets = [{\n      messages: [],\n      isLatest: true,\n      isCurrent: true,\n      pagination: DEFAULT_MESSAGE_SET_PAGINATION\n    }];\n  }\n  /**\n   * loadMessageIntoState - Loads a given message (and messages around it) into the state\n   *\n   * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   * @param {number} limit The page size if the message has to be queried from the server\n   */\n  async loadMessageIntoState(messageId, parentMessageId, limit = 25) {\n    let messageSetIndex;\n    let switchedToMessageSet = false;\n    let loadedMessageThread = false;\n    const messageIdToFind = parentMessageId || messageId;\n    if (messageId === \"latest\") {\n      if (this.messages === this.latestMessages) {\n        return;\n      }\n      messageSetIndex = this.messageSets.findIndex(s => s.isLatest);\n    } else {\n      messageSetIndex = this.findMessageSetIndex({\n        id: messageIdToFind\n      });\n    }\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n      switchedToMessageSet = true;\n    }\n    loadedMessageThread = !parentMessageId || !!this.threads[parentMessageId]?.find(m => m.id === messageId);\n    if (switchedToMessageSet && loadedMessageThread) {\n      return;\n    }\n    if (!switchedToMessageSet) {\n      await this._channel.query({\n        messages: {\n          id_around: messageIdToFind,\n          limit\n        }\n      }, \"new\");\n    }\n    if (!loadedMessageThread && parentMessageId) {\n      await this._channel.getReplies(parentMessageId, {\n        id_around: messageId,\n        limit\n      });\n    }\n    messageSetIndex = this.findMessageSetIndex({\n      id: messageIdToFind\n    });\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n    }\n  }\n  /**\n   * findMessage - Finds a message inside the state\n   *\n   * @param {string} messageId The id of the message\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   *\n   * @return {ReturnType<ChannelState['formatMessage']>} Returns the message, or undefined if the message wasn't found\n   */\n  findMessage(messageId, parentMessageId) {\n    if (parentMessageId) {\n      const messages = this.threads[parentMessageId];\n      if (!messages) {\n        return void 0;\n      }\n      return messages.find(m => m.id === messageId);\n    }\n    const messageSetIndex = this.findMessageSetIndex({\n      id: messageId\n    });\n    if (messageSetIndex === -1) {\n      return void 0;\n    }\n    return this.messageSets[messageSetIndex].messages.find(m => m.id === messageId);\n  }\n  switchToMessageSet(index) {\n    const currentMessages = this.messageSets.find(s => s.isCurrent);\n    if (!currentMessages) {\n      return;\n    }\n    currentMessages.isCurrent = false;\n    this.messageSets[index].isCurrent = true;\n  }\n  areMessageSetsOverlap(messages1, messages2) {\n    return messages1.some(m1 => messages2.find(m2 => m1.id === m2.id));\n  }\n  findMessageSetIndex(message) {\n    return this.messageSets.findIndex(set => !!set.messages.find(m => m.id === message.id));\n  }\n  findTargetMessageSet(newMessages, addIfDoesNotExist = true, messageSetToAddToIfDoesNotExist = \"current\") {\n    let messagesToAdd = newMessages;\n    let targetMessageSetIndex;\n    if (addIfDoesNotExist) {\n      const overlappingMessageSetIndices = this.messageSets.map((_, i) => i).filter(i => this.areMessageSetsOverlap(this.messageSets[i].messages, newMessages));\n      switch (messageSetToAddToIfDoesNotExist) {\n        case \"new\":\n          if (overlappingMessageSetIndices.length > 0) {\n            targetMessageSetIndex = overlappingMessageSetIndices[0];\n          } else if (newMessages.some(m => !m.parent_id)) {\n            this.messageSets.push({\n              messages: [],\n              isCurrent: false,\n              isLatest: false,\n              pagination: DEFAULT_MESSAGE_SET_PAGINATION\n            });\n            targetMessageSetIndex = this.messageSets.length - 1;\n          }\n          break;\n        case \"current\":\n          targetMessageSetIndex = this.messageSets.findIndex(s => s.isCurrent);\n          break;\n        case \"latest\":\n          targetMessageSetIndex = this.messageSets.findIndex(s => s.isLatest);\n          break;\n        default:\n          targetMessageSetIndex = -1;\n      }\n      const mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n      const mergeSourceMessageSetIndices = [...overlappingMessageSetIndices];\n      if (mergeTargetMessageSetIndex !== void 0 && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n      }\n      if (mergeSourceMessageSetIndices.length > 0) {\n        const target = this.messageSets[mergeTargetMessageSetIndex];\n        const sources = this.messageSets.filter((_, i) => mergeSourceMessageSetIndices.indexOf(i) !== -1);\n        sources.forEach(messageSet => {\n          target.isLatest = target.isLatest || messageSet.isLatest;\n          target.isCurrent = target.isCurrent || messageSet.isCurrent;\n          target.pagination.hasPrev = messageSet.messages[0].created_at < target.messages[0].created_at ? messageSet.pagination.hasPrev : target.pagination.hasPrev;\n          target.pagination.hasNext = target.messages.slice(-1)[0].created_at < messageSet.messages.slice(-1)[0].created_at ? messageSet.pagination.hasNext : target.pagination.hasNext;\n          messagesToAdd = [...messagesToAdd, ...messageSet.messages];\n        });\n        sources.forEach(s => this.messageSets.splice(this.messageSets.indexOf(s), 1));\n        const overlappingMessageSetIndex = this.messageSets.findIndex(s => this.areMessageSetsOverlap(s.messages, newMessages));\n        targetMessageSetIndex = overlappingMessageSetIndex;\n      }\n    } else {\n      targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n    }\n    return {\n      targetMessageSetIndex,\n      messagesToAdd\n    };\n  }\n};\n\n// src/messageComposer/attachmentIdentity.ts\nvar isScrapedContent = attachment => !!attachment?.og_scrape_url || !!attachment?.title_link;\nvar isLocalAttachment = attachment => !!attachment?.localMetadata?.id;\nvar isLocalUploadAttachment = attachment => !!attachment?.localMetadata?.uploadState;\nvar isFileAttachment = (attachment, supportedVideoFormat = []) => attachment.type === \"file\" || !!(attachment.mime_type && supportedVideoFormat.indexOf(attachment.mime_type) === -1 && attachment.type !== \"video\");\nvar isLocalFileAttachment = attachment => isFileAttachment(attachment) && isLocalAttachment(attachment);\nvar isImageAttachment = attachment => attachment.type === \"image\" && !isScrapedContent(attachment);\nvar isLocalImageAttachment = attachment => isImageAttachment(attachment) && isLocalAttachment(attachment);\nvar isAudioAttachment = attachment => attachment.type === \"audio\";\nvar isLocalAudioAttachment = attachment => isAudioAttachment(attachment) && isLocalAttachment(attachment);\nvar isVoiceRecordingAttachment = attachment => attachment.type === \"voiceRecording\";\nvar isLocalVoiceRecordingAttachment = attachment => isVoiceRecordingAttachment(attachment) && isLocalAttachment(attachment);\nvar isVideoAttachment = (attachment, supportedVideoFormat = []) => attachment.type === \"video\" || !!(attachment.mime_type && supportedVideoFormat.indexOf(attachment.mime_type) !== -1);\nvar isLocalVideoAttachment = attachment => isVideoAttachment(attachment) && isLocalAttachment(attachment);\nvar isUploadedAttachment = attachment => isAudioAttachment(attachment) || isFileAttachment(attachment) || isImageAttachment(attachment) || isVideoAttachment(attachment) || isVoiceRecordingAttachment(attachment);\n\n// src/messageComposer/fileUtils.ts\nvar isFile2 = fileLike => !!fileLike.lastModified && !(\"uri\" in fileLike);\nvar isFileList2 = obj => {\n  if (obj === null || obj === void 0) return false;\n  if (typeof obj !== \"object\") return false;\n  return typeof FileList !== \"undefined\" && obj instanceof FileList || \"item\" in obj && \"length\" in obj && !Array.isArray(obj);\n};\nvar isBlobButNotFile = obj => obj instanceof Blob && !(obj instanceof File);\nvar isFileReference = obj => obj !== null && typeof obj === \"object\" && !isFile2(obj) && !isBlobButNotFile(obj) && typeof obj.name === \"string\" && typeof obj.uri === \"string\" && typeof obj.size === \"number\" && typeof obj.type === \"string\";\nvar createFileFromBlobs = ({\n  blobsArray,\n  fileName,\n  mimeType\n}) => {\n  const concatenatedBlob = new Blob(blobsArray, {\n    type: mimeType\n  });\n  return new File([concatenatedBlob], fileName, {\n    type: concatenatedBlob.type\n  });\n};\nvar getExtensionFromMimeType = mimeType => {\n  const match = mimeType.match(/\\/([^/;]+)/);\n  return match?.[1];\n};\nvar readFileAsArrayBuffer = file => new Promise((resolve, reject) => {\n  const fileReader = new FileReader();\n  fileReader.onload = () => {\n    resolve(fileReader.result);\n  };\n  fileReader.onerror = () => {\n    reject(fileReader.error);\n  };\n  fileReader.readAsArrayBuffer(file);\n});\nvar generateFileName = mimeType => {\n  const extension = getExtensionFromMimeType(mimeType);\n  return `file_${(/* @__PURE__ */new Date()).toISOString()}${extension ? \".\" + extension : \"\"}`;\n};\nvar isImageFile = fileLike => {\n  const mimeType = fileLike.type;\n  return mimeType.startsWith(\"image/\") && !mimeType.endsWith(\".photoshop\");\n};\nvar getAttachmentTypeFromMimeType = mimeType => {\n  if (mimeType.startsWith(\"image/\") && !mimeType.endsWith(\".photoshop\")) return \"image\";\n  if (mimeType.includes(\"video/\")) return \"video\";\n  if (mimeType.includes(\"audio/\")) return \"audio\";\n  return \"file\";\n};\nvar ensureIsLocalAttachment = attachment => {\n  if (!attachment) return null;\n  if (isLocalAttachment(attachment)) {\n    return attachment;\n  }\n  const {\n    localMetadata,\n    ...rest\n  } = attachment;\n  return {\n    localMetadata: {\n      ...(localMetadata ?? {}),\n      id: localMetadata?.id || generateUUIDv4()\n    },\n    ...rest\n  };\n};\n\n// src/store.ts\nvar isPatch = value => typeof value === \"function\";\nvar noop2 = () => {};\nvar StateStore = class {\n  constructor(value) {\n    this.value = value;\n    this.handlers = /* @__PURE__ */new Set();\n    this.preprocessors = /* @__PURE__ */new Set();\n    this.partialNext = partial => this.next(current => ({\n      ...current,\n      ...partial\n    }));\n    this.subscribeWithSelector = (selector, handler) => {\n      let previouslySelectedValues;\n      const wrappedHandler = nextValue => {\n        const newlySelectedValues = selector(nextValue);\n        let hasUpdatedValues = typeof previouslySelectedValues === \"undefined\";\n        for (const key in previouslySelectedValues) {\n          if (previouslySelectedValues[key] === newlySelectedValues[key]) continue;\n          hasUpdatedValues = true;\n          break;\n        }\n        if (!hasUpdatedValues) return;\n        const previouslySelectedValuesCopy = previouslySelectedValues;\n        previouslySelectedValues = newlySelectedValues;\n        handler(newlySelectedValues, previouslySelectedValuesCopy);\n      };\n      return this.subscribe(wrappedHandler);\n    };\n  }\n  /**\n   * Allows merging two stores only if their keys differ otherwise there's no way to ensure the data type stability.\n   * @experimental\n   * This method is experimental and may change in future versions.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  merge(stateStore) {\n    return new MergedStateStore({\n      original: this,\n      merged: stateStore\n    });\n  }\n  next(newValueOrPatch) {\n    const newValue = isPatch(newValueOrPatch) ? newValueOrPatch(this.value) : newValueOrPatch;\n    if (newValue === this.value) return;\n    this.preprocessors.forEach(preprocessor => preprocessor(newValue, this.value));\n    const oldValue = this.value;\n    this.value = newValue;\n    this.handlers.forEach(handler => handler(this.value, oldValue));\n  }\n  getLatestValue() {\n    return this.value;\n  }\n  subscribe(handler) {\n    handler(this.value, void 0);\n    this.handlers.add(handler);\n    return () => {\n      this.handlers.delete(handler);\n    };\n  }\n  /**\n   * Registers a preprocessor function that will be called before the state is updated.\n   *\n   * Preprocessors are invoked with the new and previous values whenever `next` or `partialNext` methods\n   * are called, allowing you to mutate or react to the new value before it is set. Preprocessors run in the\n   * order they were registered.\n   *\n   * @example\n   * ```ts\n   * const store = new StateStore<{ count: number; isMaxValue: bool; }>({ count: 0, isMaxValue: false });\n   *\n   * store.addPreprocessor((nextValue, prevValue) => {\n   *   if (nextValue.count > 10) {\n   *     nextValue.count = 10; // Clamp the value to a maximum of 10\n   *   }\n   *\n   *   if (nextValue.count === 10) {\n   *     nextValue.isMaxValue = true; // Set isMaxValue to true if count is 10\n   *   } else {\n   *     nextValue.isMaxValue = false; // Reset isMaxValue otherwise\n   *   }\n   * });\n   *\n   * store.partialNext({ count: 15 });\n   *\n   * store.getLatestValue(); // { count: 10, isMaxValue: true }\n   *\n   * store.partialNext({ count: 5 });\n   *\n   * store.getLatestValue(); // { count: 5, isMaxValue: false }\n   * ```\n   *\n   * @param preprocessor - The function to be called with the next and previous values before the state is updated.\n   * @returns A `RemovePreprocessor` function that removes the preprocessor when called.\n   */\n  addPreprocessor(preprocessor) {\n    this.preprocessors.add(preprocessor);\n    return () => {\n      this.preprocessors.delete(preprocessor);\n    };\n  }\n};\nvar MergedStateStore = class _MergedStateStore extends StateStore {\n  constructor({\n    original,\n    merged\n  }) {\n    const originalValue = original.getLatestValue();\n    const mergedValue = merged.getLatestValue();\n    super({\n      ...originalValue,\n      ...mergedValue\n    });\n    // override original methods and \"disable\" them\n    this.next = () => {\n      console.warn(`${_MergedStateStore.name}.next is disabled, call original.next or merged.next instead`);\n    };\n    this.partialNext = () => {\n      console.warn(`${_MergedStateStore.name}.partialNext is disabled, call original.partialNext or merged.partialNext instead`);\n    };\n    this.cachedOriginalValue = originalValue;\n    this.cachedMergedValue = mergedValue;\n    this.original = original;\n    this.merged = merged;\n  }\n  /**\n   * Subscribes to changes in the merged state store.\n   *\n   * This method extends the base subscribe functionality to handle the merged nature of this store:\n   * 1. The first subscriber triggers registration of helper subscribers that listen to both source stores\n   * 2. Changes from either source store are propagated to this merged store\n   * 3. Source store values are cached to prevent unnecessary updates\n   *\n   * When the first subscriber is added, the method sets up listeners on both original and merged stores.\n   * These listeners update the combined store value whenever either source store changes.\n   * All subscriptions (helpers and the actual handler) are tracked so they can be properly cleaned up.\n   *\n   * @param handler - The callback function that will be executed when the state changes\n   * @returns An unsubscribe function that, when called, removes the subscription and any helper subscriptions\n   */\n  subscribe(handler) {\n    const unsubscribeFunctions = [];\n    if (!this.handlers.size) {\n      const base = nextValue => {\n        super.next(currentValue => ({\n          ...currentValue,\n          ...nextValue\n        }));\n      };\n      unsubscribeFunctions.push(this.original.subscribe(nextValue => {\n        if (nextValue === this.cachedOriginalValue) return;\n        this.cachedOriginalValue = nextValue;\n        base(nextValue);\n      }), this.merged.subscribe(nextValue => {\n        if (nextValue === this.cachedMergedValue) return;\n        this.cachedMergedValue = nextValue;\n        base(nextValue);\n      }));\n    }\n    unsubscribeFunctions.push(super.subscribe(handler));\n    return () => {\n      unsubscribeFunctions.forEach(unsubscribe => unsubscribe());\n    };\n  }\n  /**\n   * Retrieves the latest combined state from both original and merged stores.\n   *\n   * This method extends the base getLatestValue functionality to ensure the merged store\n   * remains in sync with its source stores even when there are no active subscribers.\n   *\n   * When there are no handlers registered, the method:\n   * 1. Fetches the latest values from both source stores\n   * 2. Compares them with the cached values to detect changes\n   * 3. If changes are detected, updates the internal value and caches\n   *    the new source values to maintain consistency\n   *\n   * This approach ensures that calling getLatestValue() always returns the most\n   * up-to-date combined state, even if the merged store hasn't been actively\n   * receiving updates through subscriptions.\n   *\n   * @returns The latest combined state from both original and merged stores\n   */\n  getLatestValue() {\n    if (!this.handlers.size) {\n      const originalValue = this.original.getLatestValue();\n      const mergedValue = this.merged.getLatestValue();\n      if (originalValue !== this.cachedOriginalValue || mergedValue !== this.cachedMergedValue) {\n        this.value = {\n          ...originalValue,\n          ...mergedValue\n        };\n        this.cachedMergedValue = mergedValue;\n        this.cachedOriginalValue = originalValue;\n      }\n    }\n    return super.getLatestValue();\n  }\n  addPreprocessor() {\n    console.warn(`${_MergedStateStore.name}.addPreprocessor is disabled, call original.addPreprocessor or merged.addPreprocessor instead`);\n    return noop2;\n  }\n};\n\n// src/utils/mergeWith/mergeWithCore.ts\nvar isClassInstance = value => {\n  if (!value || typeof value !== \"object\") return false;\n  if (Array.isArray(value)) return false;\n  const proto = Object.getPrototypeOf(value);\n  if (proto === null || proto === Object.prototype) return false;\n  return value.constructor && value.constructor !== Object;\n};\nvar isEqual = (value1, value2, compareStack = /* @__PURE__ */new Set(), objectStack1 = /* @__PURE__ */new WeakSet(), objectStack2 = /* @__PURE__ */new WeakSet()) => {\n  if (value1 === value2) return true;\n  if (value1 == null || value2 == null) return false;\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) return false;\n  if (type1 !== \"object\") {\n    if (value1 !== value1 && value2 !== value2) return true;\n    return value1 === value2;\n  }\n  const obj1 = value1;\n  const obj2 = value2;\n  if (objectStack1.has(obj1) || objectStack2.has(obj2)) {\n    return objectStack1.has(obj1) && objectStack2.has(obj2);\n  }\n  objectStack1.add(obj1);\n  objectStack2.add(obj2);\n  if (value1 instanceof Date && value2 instanceof Date) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return value1.getTime() === value2.getTime();\n  }\n  if (value1 instanceof RegExp && value2 instanceof RegExp) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return value1.toString() === value2.toString();\n  }\n  if (isClassInstance(value1) || isClassInstance(value2)) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n  if (isArray1 !== isArray2) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n  if (isArray1 && isArray2) {\n    const arr1 = value1;\n    const arr2 = value2;\n    if (arr1.length !== arr2.length) {\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n    const pairKey2 = [value1, value2];\n    if (compareStack.has(pairKey2)) {\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return true;\n    }\n    compareStack.add(pairKey2);\n    for (let i = 0; i < arr1.length; i++) {\n      if (!isEqual(arr1[i], arr2[i], compareStack, objectStack1, objectStack2)) {\n        compareStack.delete(pairKey2);\n        objectStack1.delete(obj1);\n        objectStack2.delete(obj2);\n        return false;\n      }\n    }\n    compareStack.delete(pairKey2);\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return true;\n  }\n  const plainObj1 = value1;\n  const plainObj2 = value2;\n  const keys1 = Object.keys(plainObj1);\n  const keys2 = Object.keys(plainObj2);\n  if (keys1.length !== keys2.length) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n  for (const key of keys2) {\n    if (!Object.prototype.hasOwnProperty.call(plainObj1, key)) {\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n  }\n  const pairKey = [value1, value2];\n  if (compareStack.has(pairKey)) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return true;\n  }\n  compareStack.add(pairKey);\n  for (const key of keys1) {\n    if (!isEqual(plainObj1[key], plainObj2[key], compareStack, objectStack1, objectStack2)) {\n      compareStack.delete(pairKey);\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n  }\n  compareStack.delete(pairKey);\n  objectStack1.delete(obj1);\n  objectStack2.delete(obj2);\n  return true;\n};\nfunction generateDiff(original, modified) {\n  const diffRoot = {\n    children: {}\n  };\n  compareAndBuildDiff(original, modified, diffRoot);\n  return cleanupDiffTree(diffRoot);\n}\nfunction compareAndBuildDiff(original, modified, parentDiffNode, key, compareStack = /* @__PURE__ */new Set(), objectStack = /* @__PURE__ */new Set()) {\n  if (isEqual(original, modified, new Set(compareStack))) {\n    return;\n  }\n  if (original === void 0 || original === null) {\n    if (key !== void 0) {\n      parentDiffNode.children[String(key)] = {\n        type: \"added\",\n        value: modified,\n        children: {}\n      };\n    }\n    return;\n  }\n  if (typeof original === \"object\" && original !== null) {\n    if (objectStack.has(original)) {\n      if (key !== void 0) {\n        parentDiffNode.children[String(key)] = {\n          type: \"circular\",\n          value: modified,\n          oldValue: original,\n          children: {}\n        };\n      }\n      return;\n    }\n    objectStack.add(original);\n  }\n  const shouldTreatAtomically = typeof original !== \"object\" || typeof modified !== \"object\" || original === null || modified === null || Array.isArray(original) !== Array.isArray(modified) || isClassInstance(original) || isClassInstance(modified);\n  if (shouldTreatAtomically) {\n    if (key !== void 0) {\n      parentDiffNode.children[String(key)] = {\n        type: \"updated\",\n        value: modified,\n        oldValue: original,\n        children: {}\n      };\n    }\n    if (typeof original === \"object\" && original !== null) {\n      objectStack.delete(original);\n    }\n    return;\n  }\n  const originalObj = original;\n  const modifiedObj = modified;\n  const currentDiffNode = key !== void 0 ? {\n    type: \"updated\",\n    children: {},\n    oldValue: original,\n    value: modified\n  } : parentDiffNode;\n  if (key !== void 0) {\n    parentDiffNode.children[String(key)] = currentDiffNode;\n  }\n  const pairKey = [original, modified];\n  if (compareStack.has(pairKey)) {\n    if (typeof original === \"object\" && original !== null) {\n      objectStack.delete(original);\n    }\n    return;\n  }\n  compareStack.add(pairKey);\n  const allKeys = /* @__PURE__ */new Set([...Object.keys(originalObj), ...Object.getOwnPropertySymbols(originalObj), ...Object.keys(modifiedObj), ...Object.getOwnPropertySymbols(modifiedObj)]);\n  for (const childKey of allKeys) {\n    const originalValue = originalObj[childKey];\n    const modifiedValue = modifiedObj[childKey];\n    if (!(childKey in modifiedObj)) {\n      continue;\n    }\n    if (!(childKey in originalObj)) {\n      currentDiffNode.children[String(childKey)] = {\n        type: \"added\",\n        value: modifiedValue,\n        children: {}\n      };\n      continue;\n    }\n    compareAndBuildDiff(originalValue, modifiedValue, currentDiffNode, childKey, compareStack, objectStack);\n  }\n  compareStack.delete(pairKey);\n  if (typeof original === \"object\" && original !== null) {\n    objectStack.delete(original);\n  }\n}\nfunction createMergeCore(options = {}) {\n  const {\n    trackDiff = false\n  } = options;\n  return function mergeCore({\n    target,\n    source,\n    customizer\n  }) {\n    const sources = Array.isArray(source) ? source : [source];\n    const originalTarget = trackDiff ? structuredClone(target) : void 0;\n    function handleCustomizer(targetValue, srcValue, sourceKey, target2, src, stack) {\n      const customValue = customizer?.(targetValue, srcValue, sourceKey, target2, src, stack);\n      if (customValue !== void 0) {\n        Object.defineProperty(target2, sourceKey, {\n          value: customValue,\n          enumerable: true,\n          writable: true,\n          configurable: true\n        });\n        return true;\n      }\n      return false;\n    }\n    function createNewTarget(targetValue, srcValue) {\n      if (targetValue === null || typeof targetValue === \"undefined\") {\n        return srcValue;\n      }\n      if (!Array.isArray(targetValue) && typeof targetValue !== \"object\") {\n        return srcValue;\n      }\n      if (targetValue && typeof targetValue === \"object\") {\n        const isTargetClassInstance = isClassInstance(targetValue);\n        const isSourceClassInstance = isClassInstance(srcValue);\n        if (isTargetClassInstance || isSourceClassInstance) {\n          if (isSourceClassInstance) {\n            return srcValue;\n          }\n          return targetValue;\n        }\n        return Array.isArray(targetValue) ? [...targetValue] : {\n          ...targetValue\n        };\n      }\n      return Array.isArray(srcValue) ? [] : {};\n    }\n    function processSourceValue(target2, src, sourceKey, stack, pendingMerges) {\n      const srcValue = src[sourceKey];\n      const targetValue = target2[sourceKey];\n      if (handleCustomizer(targetValue, srcValue, sourceKey, target2, src, stack)) {\n        return;\n      }\n      if (srcValue && typeof srcValue === \"object\") {\n        if (!stack.has(srcValue)) {\n          const newTarget = createNewTarget(targetValue, srcValue);\n          Object.defineProperty(target2, sourceKey, {\n            value: newTarget,\n            enumerable: true,\n            writable: true,\n            configurable: true\n          });\n          if (isClassInstance(newTarget)) return;\n          pendingMerges.push({\n            target: newTarget,\n            source: srcValue,\n            sourceKey,\n            parentTarget: target2\n          });\n        }\n      } else if (srcValue !== void 0) {\n        target2[sourceKey] = srcValue;\n      }\n    }\n    function processKeys(target2, source2, stack, pendingMerges) {\n      const sourceKeys = [...Object.keys(source2), ...Object.getOwnPropertySymbols(source2)];\n      for (const sourceKey of sourceKeys) {\n        processSourceValue(target2, source2, sourceKey, stack, pendingMerges);\n      }\n    }\n    function processPendingMerge({\n      target: target2,\n      source: source2,\n      sourceKey,\n      parentTarget\n    }, stack, pendingMerges) {\n      if (stack.has(source2)) {\n        if (trackDiff && sourceKey && parentTarget) {\n          Object.defineProperty(parentTarget, sourceKey, {\n            value: target2,\n            enumerable: true,\n            writable: true,\n            configurable: true\n          });\n        }\n        return;\n      }\n      if (!stack.has(target2) && !stack.has(source2)) {\n        stack.add(target2);\n        stack.add(source2);\n        processKeys(target2, source2, stack, pendingMerges);\n        stack.delete(source2);\n        stack.delete(target2);\n      }\n    }\n    function baseMerge(object, source2, stack = /* @__PURE__ */new Set()) {\n      if (stack.has(object) || stack.has(source2)) {\n        return {\n          ...object\n        };\n      }\n      const result2 = {\n        ...object\n      };\n      const pendingMerges = [];\n      stack.add(result2);\n      stack.add(source2);\n      processKeys(result2, source2, stack, pendingMerges);\n      while (pendingMerges.length) {\n        processPendingMerge(pendingMerges.pop(), stack, pendingMerges);\n      }\n      stack.delete(source2);\n      stack.delete(result2);\n      return result2;\n    }\n    const result = sources.reduce((result2, source2) => baseMerge(result2, source2), {\n      ...target\n    });\n    const diff = trackDiff && originalTarget ? generateDiff(originalTarget, result) : null;\n    return {\n      result,\n      diff\n    };\n  };\n}\nfunction cleanupDiffTree(diffNode) {\n  const cleanChildren = {};\n  let hasChildren = false;\n  for (const key in diffNode.children) {\n    const childNode = cleanupDiffTree(diffNode.children[key]);\n    if (childNode) {\n      cleanChildren[key] = childNode;\n      hasChildren = true;\n    }\n  }\n  if (diffNode.type || hasChildren) {\n    return {\n      ...diffNode,\n      children: cleanChildren\n    };\n  }\n  return null;\n}\n\n// src/utils/mergeWith/mergeWith.ts\nfunction mergeWith(target, source, customizer) {\n  const mergeCore = createMergeCore();\n  return mergeCore({\n    target,\n    source,\n    customizer\n  }).result;\n}\n\n// src/utils/mergeWith/mergeWithDiff.ts\nfunction mergeWithDiff(target, source, customizer) {\n  const mergeCore = createMergeCore({\n    trackDiff: true\n  });\n  const {\n    result,\n    diff\n  } = mergeCore({\n    target,\n    source,\n    customizer\n  });\n  return {\n    result,\n    diff: cleanupDiffTree(diff ?? {\n      children: {}\n    }) || {\n      children: {}\n    }\n  };\n}\n\n// src/messageComposer/attachmentManager.ts\nvar initState = ({\n  message\n}) => ({\n  attachments: (message?.attachments ?? [])?.filter(({\n    og_scrape_url\n  }) => !og_scrape_url).map(att => {\n    const localMetadata = isUploadedAttachment(att) ? {\n      id: generateUUIDv4(),\n      uploadState: \"finished\"\n    } : {\n      id: generateUUIDv4()\n    };\n    return {\n      ...att,\n      localMetadata\n    };\n  })\n});\nvar AttachmentManager = class {\n  constructor({\n    composer,\n    message\n  }) {\n    this.setCustomUploadFn = doUploadRequest => {\n      this.composer.updateConfig({\n        attachments: {\n          doUploadRequest\n        }\n      });\n    };\n    this.initState = ({\n      message\n    } = {}) => {\n      this.state.next(initState({\n        message\n      }));\n    };\n    this.getAttachmentIndex = localId => {\n      const attachmentsById = this.attachmentsById;\n      return this.attachments.indexOf(attachmentsById[localId]);\n    };\n    this.prepareAttachmentUpdate = attachmentToUpdate => {\n      const stateAttachments = this.attachments;\n      const attachments = [...this.attachments];\n      const attachmentIndex = this.getAttachmentIndex(attachmentToUpdate.localMetadata.id);\n      if (attachmentIndex === -1) return null;\n      const merged = mergeWithDiff(stateAttachments[attachmentIndex], attachmentToUpdate);\n      const updatesOnMerge = merged.diff && Object.keys(merged.diff.children).length;\n      if (updatesOnMerge) {\n        const localAttachment = ensureIsLocalAttachment(merged.result);\n        if (localAttachment) {\n          attachments.splice(attachmentIndex, 1, localAttachment);\n          return attachments;\n        }\n      }\n      return null;\n    };\n    this.updateAttachment = attachmentToUpdate => {\n      const updatedAttachments = this.prepareAttachmentUpdate(attachmentToUpdate);\n      if (updatedAttachments) {\n        this.state.partialNext({\n          attachments: updatedAttachments\n        });\n      }\n    };\n    this.upsertAttachments = attachmentsToUpsert => {\n      if (!attachmentsToUpsert.length) return;\n      let attachments = [...this.attachments];\n      let hasUpdates = false;\n      attachmentsToUpsert.forEach(attachment => {\n        const updatedAttachments = this.prepareAttachmentUpdate(attachment);\n        if (updatedAttachments) {\n          attachments = updatedAttachments;\n          hasUpdates = true;\n        } else {\n          const localAttachment = ensureIsLocalAttachment(attachment);\n          if (localAttachment) {\n            attachments.push(localAttachment);\n            hasUpdates = true;\n          }\n        }\n      });\n      if (hasUpdates) {\n        this.state.partialNext({\n          attachments\n        });\n      }\n    };\n    this.removeAttachments = localAttachmentIds => {\n      this.state.partialNext({\n        attachments: this.attachments.filter(attachment => !localAttachmentIds.includes(attachment.localMetadata?.id))\n      });\n    };\n    this.getUploadConfigCheck = async fileLike => {\n      const client = this.channel.getClient();\n      let appSettings;\n      if (!client.appSettingsPromise) {\n        appSettings = await client.getAppSettings();\n      } else {\n        appSettings = await client.appSettingsPromise;\n      }\n      const uploadConfig = isImageFile(fileLike) ? appSettings?.app?.image_upload_config : appSettings?.app?.file_upload_config;\n      if (!uploadConfig) return {\n        uploadBlocked: false\n      };\n      const {\n        allowed_file_extensions,\n        allowed_mime_types,\n        blocked_file_extensions,\n        blocked_mime_types,\n        size_limit\n      } = uploadConfig;\n      const sizeLimit = size_limit || DEFAULT_UPLOAD_SIZE_LIMIT_BYTES;\n      const mimeType = fileLike.type;\n      if (isFile2(fileLike) || isFileReference(fileLike)) {\n        if (allowed_file_extensions?.length && !allowed_file_extensions.some(ext => fileLike.name.toLowerCase().endsWith(ext.toLowerCase()))) {\n          return {\n            uploadBlocked: true,\n            reason: \"allowed_file_extensions\"\n          };\n        }\n        if (blocked_file_extensions?.length && blocked_file_extensions.some(ext => fileLike.name.toLowerCase().endsWith(ext.toLowerCase()))) {\n          return {\n            uploadBlocked: true,\n            reason: \"blocked_file_extensions\"\n          };\n        }\n      }\n      if (allowed_mime_types?.length && !allowed_mime_types.some(type => type.toLowerCase() === mimeType?.toLowerCase())) {\n        return {\n          uploadBlocked: true,\n          reason: \"allowed_mime_types\"\n        };\n      }\n      if (blocked_mime_types?.length && blocked_mime_types.some(type => type.toLowerCase() === mimeType?.toLowerCase())) {\n        return {\n          uploadBlocked: true,\n          reason: \"blocked_mime_types\"\n        };\n      }\n      if (fileLike.size && fileLike.size > sizeLimit) {\n        return {\n          uploadBlocked: true,\n          reason: \"size_limit\"\n        };\n      }\n      return {\n        uploadBlocked: false\n      };\n    };\n    this.fileToLocalUploadAttachment = async fileLike => {\n      const file = isFileReference(fileLike) || isFile2(fileLike) ? fileLike : createFileFromBlobs({\n        blobsArray: [fileLike],\n        fileName: generateFileName(fileLike.type),\n        mimeType: fileLike.type\n      });\n      const uploadPermissionCheck = await this.getUploadConfigCheck(file);\n      const localAttachment = {\n        file_size: file.size,\n        mime_type: file.type,\n        localMetadata: {\n          file,\n          id: generateUUIDv4(),\n          uploadPermissionCheck,\n          uploadState: uploadPermissionCheck.uploadBlocked ? \"blocked\" : \"pending\"\n        },\n        type: getAttachmentTypeFromMimeType(file.type)\n      };\n      localAttachment[isImageFile(file) ? \"fallback\" : \"title\"] = file.name;\n      if (isImageFile(file)) {\n        localAttachment.localMetadata.previewUri = isFileReference(fileLike) ? fileLike.uri : URL.createObjectURL?.(fileLike);\n        if (isFileReference(fileLike) && fileLike.height && fileLike.width) {\n          localAttachment.original_height = fileLike.height;\n          localAttachment.original_width = fileLike.width;\n        }\n      }\n      if (isFileReference(fileLike) && fileLike.thumb_url) {\n        localAttachment.thumb_url = fileLike.thumb_url;\n      }\n      return localAttachment;\n    };\n    this.ensureLocalUploadAttachment = async attachment => {\n      if (!attachment.localMetadata?.file || !attachment.localMetadata.id) {\n        this.client.notifications.addError({\n          message: \"File is required for upload attachment\",\n          origin: {\n            emitter: \"AttachmentManager\",\n            context: {\n              attachment\n            }\n          },\n          options: {\n            type: \"validation:attachment:file:missing\"\n          }\n        });\n        return;\n      }\n      if (!this.fileUploadFilter(attachment)) return;\n      const newAttachment = await this.fileToLocalUploadAttachment(attachment.localMetadata.file);\n      if (attachment.localMetadata.id) {\n        newAttachment.localMetadata.id = attachment.localMetadata.id;\n      }\n      return newAttachment;\n    };\n    /**\n     * Method to perform the default upload behavior without checking for custom upload functions\n     * to prevent recursive calls\n     */\n    this.doDefaultUploadRequest = async fileLike => {\n      if (isFileReference(fileLike)) {\n        return this.channel[isImageFile(fileLike) ? \"sendImage\" : \"sendFile\"](fileLike.uri, fileLike.name, fileLike.type);\n      }\n      const file = isFile2(fileLike) ? fileLike : createFileFromBlobs({\n        blobsArray: [fileLike],\n        fileName: generateFileName(fileLike.type),\n        mimeType: fileLike.type\n      });\n      const {\n        duration,\n        ...result\n      } = await this.channel[isImageFile(fileLike) ? \"sendImage\" : \"sendFile\"](file);\n      return result;\n    };\n    /**\n     * todo: docs how to customize the image and file upload by overriding do\n     */\n    this.doUploadRequest = async fileLike => {\n      const customUploadFn = this.config.doUploadRequest;\n      if (customUploadFn) {\n        return await customUploadFn(fileLike);\n      }\n      return this.doDefaultUploadRequest(fileLike);\n    };\n    this.uploadAttachment = async attachment => {\n      if (!this.isUploadEnabled) return;\n      const localAttachment = await this.ensureLocalUploadAttachment(attachment);\n      if (typeof localAttachment === \"undefined\") return;\n      if (localAttachment.localMetadata.uploadState === \"blocked\") {\n        this.upsertAttachments([localAttachment]);\n        this.client.notifications.addError({\n          message: `The attachment upload was blocked`,\n          origin: {\n            emitter: \"AttachmentManager\",\n            context: {\n              attachment,\n              blockedAttachment: localAttachment\n            }\n          },\n          options: {\n            type: \"validation:attachment:upload:blocked\",\n            metadata: {\n              reason: localAttachment.localMetadata.uploadPermissionCheck?.reason\n            }\n          }\n        });\n        return localAttachment;\n      }\n      this.upsertAttachments([{\n        ...attachment,\n        localMetadata: {\n          ...attachment.localMetadata,\n          uploadState: \"uploading\"\n        }\n      }]);\n      let response;\n      try {\n        response = await this.doUploadRequest(localAttachment.localMetadata.file);\n      } catch (error) {\n        const reason = error instanceof Error ? error.message : \"unknown error\";\n        const failedAttachment = {\n          ...attachment,\n          localMetadata: {\n            ...attachment.localMetadata,\n            uploadState: \"failed\"\n          }\n        };\n        this.client.notifications.addError({\n          message: \"Error uploading attachment\",\n          origin: {\n            emitter: \"AttachmentManager\",\n            context: {\n              attachment,\n              failedAttachment\n            }\n          },\n          options: {\n            type: \"api:attachment:upload:failed\",\n            metadata: {\n              reason\n            },\n            originalError: error instanceof Error ? error : void 0\n          }\n        });\n        this.updateAttachment(failedAttachment);\n        return failedAttachment;\n      }\n      if (!response) {\n        this.removeAttachments([attachment.localMetadata.id]);\n        return;\n      }\n      const uploadedAttachment = {\n        ...attachment,\n        localMetadata: {\n          ...attachment.localMetadata,\n          uploadState: \"finished\"\n        }\n      };\n      if (isLocalImageAttachment(uploadedAttachment)) {\n        if (uploadedAttachment.localMetadata.previewUri) {\n          URL.revokeObjectURL(uploadedAttachment.localMetadata.previewUri);\n          delete uploadedAttachment.localMetadata.previewUri;\n        }\n        uploadedAttachment.image_url = response.file;\n      } else {\n        uploadedAttachment.asset_url = response.file;\n      }\n      if (response.thumb_url) {\n        uploadedAttachment.thumb_url = response.thumb_url;\n      }\n      this.updateAttachment(uploadedAttachment);\n      return uploadedAttachment;\n    };\n    this.uploadFiles = async files => {\n      if (!this.isUploadEnabled) return;\n      const iterableFiles = isFileList2(files) ? Array.from(files) : files;\n      const attachments = await Promise.all(iterableFiles.map(this.fileToLocalUploadAttachment));\n      return Promise.all(attachments.filter(this.fileUploadFilter).slice(0, this.availableUploadSlots).map(this.uploadAttachment));\n    };\n    this.composer = composer;\n    this.state = new StateStore(initState({\n      message\n    }));\n    this.attachmentsByIdGetterCache = {\n      attachmentsById: {},\n      attachments: []\n    };\n  }\n  get attachmentsById() {\n    const {\n      attachments\n    } = this.state.getLatestValue();\n    if (attachments !== this.attachmentsByIdGetterCache.attachments) {\n      this.attachmentsByIdGetterCache.attachments = attachments;\n      this.attachmentsByIdGetterCache.attachmentsById = attachments.reduce((newAttachmentsById, attachment) => {\n        var _a;\n        if (!attachment.localMetadata.id) return newAttachmentsById;\n        newAttachmentsById[_a = attachment.localMetadata.id] ?? (newAttachmentsById[_a] = attachment);\n        return newAttachmentsById;\n      }, {});\n    }\n    return this.attachmentsByIdGetterCache.attachmentsById;\n  }\n  get client() {\n    return this.composer.client;\n  }\n  get channel() {\n    return this.composer.channel;\n  }\n  get config() {\n    return this.composer.config.attachments;\n  }\n  get acceptedFiles() {\n    return this.config.acceptedFiles;\n  }\n  set acceptedFiles(acceptedFiles) {\n    this.composer.updateConfig({\n      attachments: {\n        acceptedFiles\n      }\n    });\n  }\n  get fileUploadFilter() {\n    return this.config.fileUploadFilter;\n  }\n  set fileUploadFilter(fileUploadFilter) {\n    this.composer.updateConfig({\n      attachments: {\n        fileUploadFilter\n      }\n    });\n  }\n  get maxNumberOfFilesPerMessage() {\n    return this.config.maxNumberOfFilesPerMessage;\n  }\n  set maxNumberOfFilesPerMessage(maxNumberOfFilesPerMessage) {\n    if (maxNumberOfFilesPerMessage === this.maxNumberOfFilesPerMessage) return;\n    this.composer.updateConfig({\n      attachments: {\n        maxNumberOfFilesPerMessage\n      }\n    });\n  }\n  get attachments() {\n    return this.state.getLatestValue().attachments;\n  }\n  get hasUploadPermission() {\n    return !!this.channel.data?.own_capabilities?.includes(\"upload-file\");\n  }\n  get isUploadEnabled() {\n    return this.hasUploadPermission && this.availableUploadSlots > 0;\n  }\n  get successfulUploads() {\n    return this.getUploadsByState(\"finished\");\n  }\n  get successfulUploadsCount() {\n    return this.successfulUploads.length;\n  }\n  get uploadsInProgressCount() {\n    return this.getUploadsByState(\"uploading\").length;\n  }\n  get failedUploadsCount() {\n    return this.getUploadsByState(\"failed\").length;\n  }\n  get blockedUploadsCount() {\n    return this.getUploadsByState(\"blocked\").length;\n  }\n  get pendingUploadsCount() {\n    return this.getUploadsByState(\"pending\").length;\n  }\n  get availableUploadSlots() {\n    return this.config.maxNumberOfFilesPerMessage - this.successfulUploadsCount - this.uploadsInProgressCount;\n  }\n  getUploadsByState(state) {\n    return Object.values(this.attachments).filter(({\n      localMetadata\n    }) => localMetadata.uploadState === state);\n  }\n};\n\n// node_modules/linkifyjs/dist/linkify.es.js\nvar encodedTlds = \"aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster6d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5m\\xF6gensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2\";\nvar encodedUtlds = \"\\u03B5\\u03BB1\\u03C52\\u0431\\u04331\\u0435\\u043B3\\u0434\\u0435\\u0442\\u04384\\u0435\\u044E2\\u043A\\u0430\\u0442\\u043E\\u043B\\u0438\\u043A6\\u043E\\u043C3\\u043C\\u043A\\u04342\\u043E\\u043D1\\u0441\\u043A\\u0432\\u04306\\u043E\\u043D\\u043B\\u0430\\u0439\\u043D5\\u0440\\u04333\\u0440\\u0443\\u04412\\u04442\\u0441\\u0430\\u0439\\u04423\\u0440\\u04313\\u0443\\u043A\\u04403\\u049B\\u0430\\u04373\\u0570\\u0561\\u05753\\u05D9\\u05E9\\u05E8\\u05D0\\u05DC5\\u05E7\\u05D5\\u05DD3\\u0627\\u0628\\u0648\\u0638\\u0628\\u064A5\\u0631\\u0627\\u0645\\u0643\\u06485\\u0644\\u0627\\u0631\\u062F\\u06464\\u0628\\u062D\\u0631\\u064A\\u06465\\u062C\\u0632\\u0627\\u0626\\u06315\\u0633\\u0639\\u0648\\u062F\\u064A\\u06296\\u0639\\u0644\\u064A\\u0627\\u06465\\u0645\\u063A\\u0631\\u06285\\u0645\\u0627\\u0631\\u0627\\u062A5\\u06CC\\u0631\\u0627\\u06465\\u0628\\u0627\\u0631\\u062A2\\u0632\\u0627\\u06314\\u064A\\u062A\\u06433\\u06BE\\u0627\\u0631\\u062A5\\u062A\\u0648\\u0646\\u06334\\u0633\\u0648\\u062F\\u0627\\u06463\\u0631\\u064A\\u06295\\u0634\\u0628\\u0643\\u06294\\u0639\\u0631\\u0627\\u06422\\u06282\\u0645\\u0627\\u06464\\u0641\\u0644\\u0633\\u0637\\u064A\\u06466\\u0642\\u0637\\u06313\\u0643\\u0627\\u062B\\u0648\\u0644\\u064A\\u06436\\u0648\\u06453\\u0645\\u0635\\u06312\\u0644\\u064A\\u0633\\u064A\\u06275\\u0648\\u0631\\u064A\\u062A\\u0627\\u0646\\u064A\\u06277\\u0642\\u06394\\u0647\\u0645\\u0631\\u0627\\u06475\\u067E\\u0627\\u06A9\\u0633\\u062A\\u0627\\u06467\\u0680\\u0627\\u0631\\u062A4\\u0915\\u0949\\u092E3\\u0928\\u0947\\u091F3\\u092D\\u093E\\u0930\\u09240\\u092E\\u094D3\\u094B\\u09245\\u0938\\u0902\\u0917\\u0920\\u09285\\u09AC\\u09BE\\u0982\\u09B2\\u09BE5\\u09AD\\u09BE\\u09B0\\u09A42\\u09F0\\u09A44\\u0A2D\\u0A3E\\u0A30\\u0A244\\u0AAD\\u0ABE\\u0AB0\\u0AA44\\u0B2D\\u0B3E\\u0B30\\u0B244\\u0B87\\u0BA8\\u0BCD\\u0BA4\\u0BBF\\u0BAF\\u0BBE6\\u0BB2\\u0B99\\u0BCD\\u0B95\\u0BC86\\u0B9A\\u0BBF\\u0B99\\u0BCD\\u0B95\\u0BAA\\u0BCD\\u0BAA\\u0BC2\\u0BB0\\u0BCD11\\u0C2D\\u0C3E\\u0C30\\u0C24\\u0C4D5\\u0CAD\\u0CBE\\u0CB0\\u0CA44\\u0D2D\\u0D3E\\u0D30\\u0D24\\u0D025\\u0DBD\\u0D82\\u0D9A\\u0DCF4\\u0E04\\u0E2D\\u0E213\\u0E44\\u0E17\\u0E223\\u0EA5\\u0EB2\\u0EA73\\u10D2\\u10D42\\u307F\\u3093\\u306A3\\u30A2\\u30DE\\u30BE\\u30F34\\u30AF\\u30E9\\u30A6\\u30C94\\u30B0\\u30FC\\u30B0\\u30EB4\\u30B3\\u30E02\\u30B9\\u30C8\\u30A23\\u30BB\\u30FC\\u30EB3\\u30D5\\u30A1\\u30C3\\u30B7\\u30E7\\u30F36\\u30DD\\u30A4\\u30F3\\u30C84\\u4E16\\u754C2\\u4E2D\\u4FE11\\u56FD1\\u570B1\\u6587\\u7F513\\u4E9A\\u9A6C\\u900A3\\u4F01\\u4E1A2\\u4F5B\\u5C712\\u4FE1\\u606F2\\u5065\\u5EB72\\u516B\\u53662\\u516C\\u53F81\\u76CA2\\u53F0\\u6E7E1\\u70632\\u5546\\u57CE1\\u5E971\\u68072\\u5609\\u91CC0\\u5927\\u9152\\u5E975\\u5728\\u7EBF2\\u5927\\u62FF2\\u5929\\u4E3B\\u65593\\u5A31\\u4E502\\u5BB6\\u96FB2\\u5E7F\\u4E1C2\\u5FAE\\u535A2\\u6148\\u55842\\u6211\\u7231\\u4F603\\u624B\\u673A2\\u62DB\\u80582\\u653F\\u52A11\\u5E9C2\\u65B0\\u52A0\\u57612\\u95FB2\\u65F6\\u5C1A2\\u66F8\\u7C4D2\\u673A\\u67842\\u6DE1\\u9A6C\\u95213\\u6E38\\u620F2\\u6FB3\\u95802\\u70B9\\u770B2\\u79FB\\u52A82\\u7EC4\\u7EC7\\u673A\\u67844\\u7F51\\u57401\\u5E971\\u7AD91\\u7EDC2\\u8054\\u901A2\\u8C37\\u6B4C2\\u8D2D\\u72692\\u901A\\u8CA92\\u96C6\\u56E22\\u96FB\\u8A0A\\u76C8\\u79D14\\u98DE\\u5229\\u6D663\\u98DF\\u54C12\\u9910\\u53852\\u9999\\u683C\\u91CC\\u62C93\\u6E2F2\\uB2F7\\uB1371\\uCEF42\\uC0BC\\uC1312\\uD55C\\uAD6D2\";\nvar assign = (target, properties) => {\n  for (const key in properties) {\n    target[key] = properties[key];\n  }\n  return target;\n};\nvar numeric = \"numeric\";\nvar ascii = \"ascii\";\nvar alpha = \"alpha\";\nvar asciinumeric = \"asciinumeric\";\nvar alphanumeric = \"alphanumeric\";\nvar domain = \"domain\";\nvar emoji = \"emoji\";\nvar scheme = \"scheme\";\nvar slashscheme = \"slashscheme\";\nvar whitespace = \"whitespace\";\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\nfunction State(token = null) {\n  this.j = {};\n  this.jr = [];\n  this.jd = null;\n  this.t = token;\n}\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState2 = state.jr[i][1];\n      if (nextState2 && regex.test(input)) {\n        return nextState2;\n      }\n    }\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly = false) {\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      if (groups) {\n        if (nextState.t && typeof nextState.t === \"string\") {\n          const allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t;\n    }\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\nvar ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\nvar tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\nvar ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\nvar tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\nvar WORD = \"WORD\";\nvar UWORD = \"UWORD\";\nvar ASCIINUMERICAL = \"ASCIINUMERICAL\";\nvar ALPHANUMERICAL = \"ALPHANUMERICAL\";\nvar LOCALHOST = \"LOCALHOST\";\nvar TLD = \"TLD\";\nvar UTLD = \"UTLD\";\nvar SCHEME = \"SCHEME\";\nvar SLASH_SCHEME = \"SLASH_SCHEME\";\nvar NUM = \"NUM\";\nvar WS = \"WS\";\nvar NL = \"NL\";\nvar OPENBRACE = \"OPENBRACE\";\nvar CLOSEBRACE = \"CLOSEBRACE\";\nvar OPENBRACKET = \"OPENBRACKET\";\nvar CLOSEBRACKET = \"CLOSEBRACKET\";\nvar OPENPAREN = \"OPENPAREN\";\nvar CLOSEPAREN = \"CLOSEPAREN\";\nvar OPENANGLEBRACKET = \"OPENANGLEBRACKET\";\nvar CLOSEANGLEBRACKET = \"CLOSEANGLEBRACKET\";\nvar FULLWIDTHLEFTPAREN = \"FULLWIDTHLEFTPAREN\";\nvar FULLWIDTHRIGHTPAREN = \"FULLWIDTHRIGHTPAREN\";\nvar LEFTCORNERBRACKET = \"LEFTCORNERBRACKET\";\nvar RIGHTCORNERBRACKET = \"RIGHTCORNERBRACKET\";\nvar LEFTWHITECORNERBRACKET = \"LEFTWHITECORNERBRACKET\";\nvar RIGHTWHITECORNERBRACKET = \"RIGHTWHITECORNERBRACKET\";\nvar FULLWIDTHLESSTHAN = \"FULLWIDTHLESSTHAN\";\nvar FULLWIDTHGREATERTHAN = \"FULLWIDTHGREATERTHAN\";\nvar AMPERSAND = \"AMPERSAND\";\nvar APOSTROPHE = \"APOSTROPHE\";\nvar ASTERISK = \"ASTERISK\";\nvar AT = \"AT\";\nvar BACKSLASH = \"BACKSLASH\";\nvar BACKTICK = \"BACKTICK\";\nvar CARET = \"CARET\";\nvar COLON = \"COLON\";\nvar COMMA = \"COMMA\";\nvar DOLLAR = \"DOLLAR\";\nvar DOT = \"DOT\";\nvar EQUALS = \"EQUALS\";\nvar EXCLAMATION = \"EXCLAMATION\";\nvar HYPHEN = \"HYPHEN\";\nvar PERCENT = \"PERCENT\";\nvar PIPE = \"PIPE\";\nvar PLUS = \"PLUS\";\nvar POUND = \"POUND\";\nvar QUERY = \"QUERY\";\nvar QUOTE = \"QUOTE\";\nvar FULLWIDTHMIDDLEDOT = \"FULLWIDTHMIDDLEDOT\";\nvar SEMI = \"SEMI\";\nvar SLASH = \"SLASH\";\nvar TILDE = \"TILDE\";\nvar UNDERSCORE = \"UNDERSCORE\";\nvar EMOJI$1 = \"EMOJI\";\nvar SYM = \"SYM\";\nvar tk = /* @__PURE__ */Object.freeze({\n  __proto__: null,\n  WORD,\n  UWORD,\n  ASCIINUMERICAL,\n  ALPHANUMERICAL,\n  LOCALHOST,\n  TLD,\n  UTLD,\n  SCHEME,\n  SLASH_SCHEME,\n  NUM,\n  WS,\n  NL,\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENANGLEBRACKET,\n  CLOSEANGLEBRACKET,\n  FULLWIDTHLEFTPAREN,\n  FULLWIDTHRIGHTPAREN,\n  LEFTCORNERBRACKET,\n  RIGHTCORNERBRACKET,\n  LEFTWHITECORNERBRACKET,\n  RIGHTWHITECORNERBRACKET,\n  FULLWIDTHLESSTHAN,\n  FULLWIDTHGREATERTHAN,\n  AMPERSAND,\n  APOSTROPHE,\n  ASTERISK,\n  AT,\n  BACKSLASH,\n  BACKTICK,\n  CARET,\n  COLON,\n  COMMA,\n  DOLLAR,\n  DOT,\n  EQUALS,\n  EXCLAMATION,\n  HYPHEN,\n  PERCENT,\n  PIPE,\n  PLUS,\n  POUND,\n  QUERY,\n  QUOTE,\n  FULLWIDTHMIDDLEDOT,\n  SEMI,\n  SLASH,\n  TILDE,\n  UNDERSCORE,\n  EMOJI: EMOJI$1,\n  SYM\n});\nvar ASCII_LETTER = /[a-z]/;\nvar LETTER = /\\p{L}/u;\nvar EMOJI = /\\p{Emoji}/u;\nvar DIGIT2 = /\\d/;\nvar SPACE = /\\s/;\nvar CR = \"\\r\";\nvar LF = \"\\n\";\nvar EMOJI_VARIATION = \"\\uFE0F\";\nvar EMOJI_JOINER = \"\\u200D\";\nvar OBJECT_REPLACEMENT = \"\\uFFFC\";\nvar tlds = null;\nvar utlds = null;\nfunction init$2(customSchemes = []) {\n  const groups = {};\n  State.groups = groups;\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, \"{\", OPENBRACE);\n  tt(Start, \"}\", CLOSEBRACE);\n  tt(Start, \"[\", OPENBRACKET);\n  tt(Start, \"]\", CLOSEBRACKET);\n  tt(Start, \"(\", OPENPAREN);\n  tt(Start, \")\", CLOSEPAREN);\n  tt(Start, \"<\", OPENANGLEBRACKET);\n  tt(Start, \">\", CLOSEANGLEBRACKET);\n  tt(Start, \"\\uFF08\", FULLWIDTHLEFTPAREN);\n  tt(Start, \"\\uFF09\", FULLWIDTHRIGHTPAREN);\n  tt(Start, \"\\u300C\", LEFTCORNERBRACKET);\n  tt(Start, \"\\u300D\", RIGHTCORNERBRACKET);\n  tt(Start, \"\\u300E\", LEFTWHITECORNERBRACKET);\n  tt(Start, \"\\u300F\", RIGHTWHITECORNERBRACKET);\n  tt(Start, \"\\uFF1C\", FULLWIDTHLESSTHAN);\n  tt(Start, \"\\uFF1E\", FULLWIDTHGREATERTHAN);\n  tt(Start, \"&\", AMPERSAND);\n  tt(Start, \"*\", ASTERISK);\n  tt(Start, \"@\", AT);\n  tt(Start, \"`\", BACKTICK);\n  tt(Start, \"^\", CARET);\n  tt(Start, \":\", COLON);\n  tt(Start, \",\", COMMA);\n  tt(Start, \"$\", DOLLAR);\n  tt(Start, \".\", DOT);\n  tt(Start, \"=\", EQUALS);\n  tt(Start, \"!\", EXCLAMATION);\n  tt(Start, \"-\", HYPHEN);\n  tt(Start, \"%\", PERCENT);\n  tt(Start, \"|\", PIPE);\n  tt(Start, \"+\", PLUS);\n  tt(Start, \"#\", POUND);\n  tt(Start, \"?\", QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, \"/\", SLASH);\n  tt(Start, \";\", SEMI);\n  tt(Start, \"~\", TILDE);\n  tt(Start, \"_\", UNDERSCORE);\n  tt(Start, \"\\\\\", BACKSLASH);\n  tt(Start, \"\\u30FB\", FULLWIDTHMIDDLEDOT);\n  const Num = tr(Start, DIGIT2, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT2, Num);\n  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {\n    [asciinumeric]: true\n  });\n  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {\n    [alphanumeric]: true\n  });\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, DIGIT2, Asciinumeric);\n  tr(Word, ASCII_LETTER, Word);\n  tr(Asciinumeric, DIGIT2, Asciinumeric);\n  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER);\n  tr(UWord, DIGIT2, Alphanumeric);\n  tr(UWord, LETTER, UWord);\n  tr(Alphanumeric, DIGIT2, Alphanumeric);\n  tr(Alphanumeric, ASCII_LETTER);\n  tr(Alphanumeric, LETTER, Alphanumeric);\n  const Nl2 = tt(Start, LF, NL, {\n    [whitespace]: true\n  });\n  const Cr = tt(Start, CR, WS, {\n    [whitespace]: true\n  });\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, OBJECT_REPLACEMENT, Ws);\n  tt(Cr, LF, Nl2);\n  tt(Cr, OBJECT_REPLACEMENT, Ws);\n  tr(Cr, SPACE, Ws);\n  tt(Ws, CR);\n  tt(Ws, LF);\n  tr(Ws, SPACE, Ws);\n  tt(Ws, OBJECT_REPLACEMENT, Ws);\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tt(Emoji, \"#\");\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tt(EmojiJoiner, \"#\");\n  tr(EmojiJoiner, EMOJI, Emoji);\n  const wordjr = [[ASCII_LETTER, Word], [DIGIT2, Asciinumeric]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT2, Alphanumeric]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n  fastts(Start, \"file\", SCHEME, WORD, wordjr);\n  fastts(Start, \"mailto\", SCHEME, WORD, wordjr);\n  fastts(Start, \"http\", SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, \"https\", SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, \"ftp\", SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, \"ftps\", SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf(\"-\") >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true;\n    } else if (DIGIT2.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n  ts(Start, \"localhost\", LOCALHOST, {\n    ascii: true\n  });\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups\n    }, tk)\n  };\n}\nfunction run$1(start, str) {\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length;\n  const tokens = [];\n  let cursor = 0;\n  let charCursor = 0;\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor\n      // end index (excluding)\n    });\n  }\n  return tokens;\n}\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 55296 || first > 56319 || index + 1 === len || (second = str.charCodeAt(index + 1)) < 56320 || second > 57343 ? str[index] : str.slice(index, index + 2);\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = \"0123456789\";\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++;\n    }\n    if (popDigitCount > 0) {\n      words.push(stack.join(\"\"));\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]);\n      i++;\n    }\n  }\n  return words;\n}\nvar defaults2 = {\n  defaultProtocol: \"http\",\n  events: null,\n  format: noop3,\n  formatHref: noop3,\n  nl2br: false,\n  tagName: \"a\",\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\nfunction Options(opts, defaultRender = null) {\n  let o = assign({}, defaults2);\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  }\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults2,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get(\"validate\", token.toString(), token);\n  },\n  // Private methods\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === \"object\") {\n      option = token.t in option ? option[token.t] : defaults2[key];\n      if (typeof option === \"function\" && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === \"function\" && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === \"function\" && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this);\n    const renderFn = this.get(\"render\", null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop3(val) {\n  return val;\n}\nfunction MultiToken(value, tokens) {\n  this.t = \"token\";\n  this.v = value;\n  this.tk = tokens;\n}\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n   */\n  toHref(scheme2) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get(\"truncate\", val, this);\n    const formatted = options.get(\"format\", val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + \"\\u2026\" : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get(\"formatHref\", this.toHref(options.get(\"defaultProtocol\")), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol = defaults2.defaultProtocol) {\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get(\"validate\", this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get(\"defaultProtocol\"));\n    const formattedHref = options.get(\"formatHref\", href, this);\n    const tagName = options.get(\"tagName\", href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get(\"className\", href, token);\n    const target = options.get(\"target\", href, token);\n    const rel = options.get(\"rel\", href, token);\n    const attrs = options.getObj(\"attributes\", href, token);\n    const eventListeners = options.getObj(\"events\", href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\nvar Email = createTokenClass(\"email\", {\n  isLink: true,\n  toHref() {\n    return \"mailto:\" + this.toString();\n  }\n});\nvar Text = createTokenClass(\"text\");\nvar Nl = createTokenClass(\"nl\");\nvar Url = createTokenClass(\"url\", {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme2 = defaults2.defaultProtocol) {\n    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\nvar makeState = arg => new State(arg);\nfunction init$1({\n  groups\n}) {\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n  const qsNonAccepting = [COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE);\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain);\n  ta(Start, groups.scheme, Scheme);\n  ta(Start, groups.slashscheme, SlashScheme);\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT);\n  tt(Localpart, AT, LocalpartAt);\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT);\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain);\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT);\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email);\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN);\n  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n  const EmailColon = tt(Email$1, COLON);\n  ta(EmailColon, groups.numeric, Email);\n  const DomainHyphen = tt(Domain, HYPHEN);\n  const DomainDot = tt(Domain, DOT);\n  tt(DomainHyphen, HYPHEN, DomainHyphen);\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url);\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON);\n  const DomainDotTldColonPort = makeState(Url);\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n  const Url$1 = makeState(Url);\n  const UrlNonaccept = makeState();\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n  const SchemeColon = tt(Scheme, COLON);\n  const SlashSchemeColon = tt(SlashScheme, COLON);\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH);\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH);\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  tt(SchemeColon, QUERY, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n  const bracketPairs = [[OPENBRACE, CLOSEBRACE],\n  // {}\n  [OPENBRACKET, CLOSEBRACKET],\n  // []\n  [OPENPAREN, CLOSEPAREN],\n  // ()\n  [OPENANGLEBRACKET, CLOSEANGLEBRACKET],\n  // <>\n  [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],\n  // （）\n  [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],\n  // 「」\n  [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],\n  // 『』\n  [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN]\n  // ＜＞\n  ];\n  for (let i = 0; i < bracketPairs.length; i++) {\n    const [OPEN, CLOSE] = bracketPairs[i];\n    const UrlOpen = tt(Url$1, OPEN);\n    tt(UrlNonaccept, OPEN, UrlOpen);\n    tt(UrlOpen, CLOSE, Url$1);\n    const UrlOpenQ = makeState(Url);\n    ta(UrlOpen, qsAccepting, UrlOpenQ);\n    const UrlOpenSyms = makeState();\n    ta(UrlOpen, qsNonAccepting);\n    ta(UrlOpenQ, qsAccepting, UrlOpenQ);\n    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);\n    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);\n    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);\n    tt(UrlOpenQ, CLOSE, Url$1);\n    tt(UrlOpenSyms, CLOSE, Url$1);\n  }\n  tt(Start, LOCALHOST, DomainDotTld);\n  tt(Start, NL, Nl);\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      secondState = null;\n      state = nextState;\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\nvar INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\nfunction init() {\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n  return INIT;\n}\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\ntokenize.scan = run$1;\nfunction find(str, type = null, opts = null) {\n  if (type && typeof type === \"object\") {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type) && options.check(token)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n// src/messageComposer/configuration/configuration.ts\nvar DEFAULT_LINK_PREVIEW_MANAGER_CONFIG = {\n  debounceURLEnrichmentMs: 1500,\n  enabled: false,\n  findURLFn: text => find(text, \"url\", {\n    defaultProtocol: \"https\"\n  }).reduce((acc, link) => {\n    try {\n      const url = new URL(link.href);\n      if (link.isLink && /^[a-zA-Z0-9-.]+\\.[a-zA-Z]{2,}$/.test(url.hostname)) {\n        acc.push(link.href);\n      }\n    } catch {}\n    return acc;\n  }, [])\n};\nvar DEFAULT_ATTACHMENT_MANAGER_CONFIG = {\n  acceptedFiles: [],\n  // an empty array means all files are accepted\n  fileUploadFilter: () => true,\n  maxNumberOfFilesPerMessage: API_MAX_FILES_ALLOWED_PER_MESSAGE\n};\nvar DEFAULT_TEXT_COMPOSER_CONFIG = {\n  enabled: true,\n  publishTypingEvents: true\n};\nvar DEFAULT_COMPOSER_CONFIG = {\n  attachments: DEFAULT_ATTACHMENT_MANAGER_CONFIG,\n  drafts: {\n    enabled: false\n  },\n  linkPreviews: DEFAULT_LINK_PREVIEW_MANAGER_CONFIG,\n  text: DEFAULT_TEXT_COMPOSER_CONFIG\n};\n\n// src/messageComposer/CustomDataManager.ts\nvar initState2 = options => {\n  if (!options) return {\n    message: {},\n    custom: {}\n  };\n  return {\n    message: {},\n    custom: {}\n  };\n};\nvar CustomDataManager = class {\n  constructor({\n    composer,\n    message\n  }) {\n    this.isMessageDataEqual = (nextState, previousState) => JSON.stringify(nextState.message) === JSON.stringify(previousState?.message);\n    this.initState = ({\n      message\n    } = {}) => {\n      this.state.next(initState2({\n        composer: this.composer,\n        message\n      }));\n    };\n    this.composer = composer;\n    this.state = new StateStore(initState2({\n      composer,\n      message\n    }));\n  }\n  get customMessageData() {\n    return this.state.getLatestValue().message;\n  }\n  get customComposerData() {\n    return this.state.getLatestValue().custom;\n  }\n  setMessageData(data) {\n    this.state.partialNext({\n      message: {\n        ...this.state.getLatestValue().message,\n        ...data\n      }\n    });\n  }\n  setCustomData(data) {\n    this.state.partialNext({\n      custom: {\n        ...this.state.getLatestValue().custom,\n        ...data\n      }\n    });\n  }\n};\n\n// src/messageComposer/linkPreviewsManager.ts\nvar LinkPreviewStatus = /* @__PURE__ */(LinkPreviewStatus2 => {\n  LinkPreviewStatus2[\"DISMISSED\"] = \"dismissed\";\n  LinkPreviewStatus2[\"FAILED\"] = \"failed\";\n  LinkPreviewStatus2[\"LOADED\"] = \"loaded\";\n  LinkPreviewStatus2[\"LOADING\"] = \"loading\";\n  LinkPreviewStatus2[\"PENDING\"] = \"pending\";\n  return LinkPreviewStatus2;\n})(LinkPreviewStatus || {});\nvar linkPreviewArrayToMap = linkPreviews => new Map(linkPreviews.map(linkPreview => [linkPreview.og_scrape_url, linkPreview]));\nvar initState3 = ({\n  message\n}) => message ? {\n  previews: message.attachments?.reduce((acc, attachment) => {\n    if (!attachment.og_scrape_url) return acc;\n    acc.set(attachment.og_scrape_url, {\n      ...attachment,\n      status: \"loaded\" /* LOADED */\n    });\n    return acc;\n  }, /* @__PURE__ */new Map()) ?? /* @__PURE__ */new Map()\n} : {\n  previews: /* @__PURE__ */new Map()\n};\nvar _LinkPreviewsManager = class _LinkPreviewsManager {\n  constructor({\n    composer,\n    message\n  }) {\n    this.shouldDiscardEnrichQueries = false;\n    this.initState = ({\n      message\n    } = {}) => {\n      this.state.next(initState3({\n        message: this.enabled ? message : void 0\n      }));\n    };\n    this._findAndEnrichUrls = async text => {\n      if (!this.enabled) return;\n      const urls = this.config.findURLFn(text);\n      this.shouldDiscardEnrichQueries = !urls.length;\n      if (this.shouldDiscardEnrichQueries) {\n        this.state.next({\n          previews: /* @__PURE__ */new Map()\n        });\n        return;\n      }\n      const keptPreviews = new Map(Array.from(this.previews).filter(([previewUrl]) => urls.includes(previewUrl) || urls.includes(previewUrl + \"/\")));\n      const newLinkPreviews = urls.filter(url => {\n        const existingPreviews = this.previews;\n        const existingPreviewLink = existingPreviews.get(url) || existingPreviews.get(url + \"/\");\n        return !existingPreviewLink;\n      }).map(url => ({\n        og_scrape_url: url.trim(),\n        status: \"loading\" /* LOADING */\n      }));\n      if (!newLinkPreviews.length) return;\n      this.state.partialNext({\n        previews: new Map([...keptPreviews, ...linkPreviewArrayToMap(newLinkPreviews)])\n      });\n      await Promise.all(newLinkPreviews.map(async linkPreview => {\n        try {\n          const {\n            duration,\n            ...ogAttachment\n          } = await this.client.enrichURL(linkPreview.og_scrape_url);\n          if (this.shouldDiscardEnrichQueries) return;\n          if (this.previews.has(linkPreview.og_scrape_url)) {\n            this.updatePreview(linkPreview.og_scrape_url, {\n              status: \"loaded\" /* LOADED */,\n              ...ogAttachment\n            });\n          }\n        } catch (error) {\n          if (this.previews.has(linkPreview.og_scrape_url)) {\n            this.updatePreview(linkPreview.og_scrape_url, {\n              status: \"failed\" /* FAILED */\n            });\n          }\n        }\n        return linkPreview;\n      }));\n    };\n    this.cancelURLEnrichment = () => {\n      this.findAndEnrichUrls.cancel();\n      this.findAndEnrichUrls.flush();\n    };\n    /**\n     * Clears all non-dismissed previews when the text composer is cleared.\n     * This ensures that dismissed previews are not re-enriched in the future.\n     */\n    this.clearPreviews = () => {\n      const currentPreviews = this.previews;\n      const newPreviews = /* @__PURE__ */new Map();\n      currentPreviews.forEach((preview, url) => {\n        if (_LinkPreviewsManager.previewIsDismissed(preview)) {\n          newPreviews.set(url, preview);\n        }\n      });\n      this.state.partialNext({\n        previews: newPreviews\n      });\n    };\n    this.updatePreview = (url, preview) => {\n      if (!url) return;\n      const existingPreview = this.previews.get(url);\n      const status = preview.status ?? this.previews.get(url)?.status ?? \"pending\" /* PENDING */;\n      let finalPreview = preview;\n      if (existingPreview) {\n        const merged = mergeWithDiff(existingPreview, preview);\n        const isSame = !merged.diff || Object.keys(merged.diff).length === 0;\n        if (isSame) return;\n        finalPreview = merged.result;\n      }\n      this.state.partialNext({\n        previews: new Map(this.previews).set(url, {\n          ...finalPreview,\n          og_scrape_url: url,\n          status\n        })\n      });\n    };\n    this.dismissPreview = url => {\n      const preview = this.previews.get(url);\n      if (preview) {\n        this.onLinkPreviewDismissed?.(preview);\n        this.updatePreview(url, {\n          status: \"dismissed\" /* DISMISSED */\n        });\n      }\n    };\n    this.composer = composer;\n    this.state = new StateStore(initState3({\n      message: this.enabled ? message : void 0\n    }));\n    this.findAndEnrichUrls = debounce(this._findAndEnrichUrls.bind(this), this.config.debounceURLEnrichmentMs);\n  }\n  get client() {\n    return this.composer.client;\n  }\n  get channel() {\n    return this.composer.channel;\n  }\n  get previews() {\n    return this.state.getLatestValue().previews;\n  }\n  get loadingPreviews() {\n    return Array.from(this.previews.values()).filter(linkPreview => _LinkPreviewsManager.previewIsLoading(linkPreview));\n  }\n  get loadedPreviews() {\n    return Array.from(this.previews.values()).filter(linkPreview => _LinkPreviewsManager.previewIsLoaded(linkPreview));\n  }\n  get dismissedPreviews() {\n    return Array.from(this.previews.values()).filter(linkPreview => _LinkPreviewsManager.previewIsDismissed(linkPreview));\n  }\n  get failedPreviews() {\n    return Array.from(this.previews.values()).filter(linkPreview => _LinkPreviewsManager.previewIsFailed(linkPreview));\n  }\n  get pendingPreviews() {\n    return Array.from(this.previews.values()).filter(linkPreview => _LinkPreviewsManager.previewIsPending(linkPreview));\n  }\n  get config() {\n    return this.composer.config.linkPreviews;\n  }\n  get debounceURLEnrichmentMs() {\n    return this.config.debounceURLEnrichmentMs;\n  }\n  set debounceURLEnrichmentMs(debounceURLEnrichmentMs) {\n    this.cancelURLEnrichment();\n    this.findAndEnrichUrls = debounce(this._findAndEnrichUrls.bind(this), this.config.debounceURLEnrichmentMs);\n    this.composer.updateConfig({\n      linkPreviews: {\n        debounceURLEnrichmentMs\n      }\n    });\n  }\n  get enabled() {\n    return !!this.channel.getConfig()?.url_enrichment && this.composer.config.linkPreviews.enabled;\n  }\n  set enabled(enabled) {\n    if (enabled === this.enabled) return;\n    this.composer.updateConfig({\n      linkPreviews: {\n        enabled\n      }\n    });\n  }\n  get findURLFn() {\n    return this.config.findURLFn;\n  }\n  set findURLFn(fn) {\n    this.composer.updateConfig({\n      linkPreviews: {\n        findURLFn: fn\n      }\n    });\n  }\n  get onLinkPreviewDismissed() {\n    return this.config.onLinkPreviewDismissed;\n  }\n  set onLinkPreviewDismissed(fn) {\n    this.composer.updateConfig({\n      linkPreviews: {\n        onLinkPreviewDismissed: fn\n      }\n    });\n  }\n};\n_LinkPreviewsManager.previewIsLoading = preview => preview.status === \"loading\" /* LOADING */;\n_LinkPreviewsManager.previewIsLoaded = preview => preview.status === \"loaded\" /* LOADED */;\n_LinkPreviewsManager.previewIsDismissed = preview => preview.status === \"dismissed\" /* DISMISSED */;\n_LinkPreviewsManager.previewIsFailed = preview => preview.status === \"failed\" /* FAILED */;\n_LinkPreviewsManager.previewIsPending = preview => preview.status === \"pending\" /* PENDING */;\n_LinkPreviewsManager.getPreviewData = preview => {\n  const {\n    status,\n    ...data\n  } = preview;\n  return data;\n};\nvar LinkPreviewsManager = _LinkPreviewsManager;\n\n// src/utils/concurrency.ts\nvar withoutConcurrency = createRunner(wrapWithContinuationTracking);\nvar withCancellation = createRunner(wrapWithCancellation);\nvar pendingPromises = /* @__PURE__ */new Map();\nfunction createRunner(wrapper) {\n  return function run2(tag, cb) {\n    const {\n      cb: wrapped,\n      onContinued\n    } = wrapper(tag, cb);\n    const pending = pendingPromises.get(tag);\n    pending?.onContinued();\n    const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n    pendingPromises.set(tag, {\n      promise,\n      onContinued\n    });\n    return promise;\n  };\n}\nfunction wrapWithContinuationTracking(tag, cb) {\n  let hasContinuation = false;\n  const wrapped = () => cb().finally(() => {\n    if (!hasContinuation) {\n      pendingPromises.delete(tag);\n    }\n  });\n  const onContinued = () => hasContinuation = true;\n  return {\n    cb: wrapped,\n    onContinued\n  };\n}\nfunction wrapWithCancellation(tag, cb) {\n  const ac = new AbortController();\n  const wrapped = () => {\n    if (ac.signal.aborted) {\n      return Promise.resolve(\"canceled\");\n    }\n    return cb(ac.signal).finally(() => {\n      if (!ac.signal.aborted) {\n        pendingPromises.delete(tag);\n      }\n    });\n  };\n  const onContinued = () => ac.abort();\n  return {\n    cb: wrapped,\n    onContinued\n  };\n}\n\n// src/middleware.ts\nvar MiddlewareExecutor = class {\n  constructor() {\n    this.middleware = [];\n    this.id = generateUUIDv4();\n  }\n  use(middleware) {\n    this.middleware = this.middleware.concat(middleware);\n    return this;\n  }\n  // todo: document how to re-arrange the order of middleware using replace\n  replace(middleware) {\n    const newMiddleware = [...this.middleware];\n    middleware.forEach(upserted => {\n      const existingIndex = this.middleware.findIndex(existing => existing.id === upserted.id);\n      if (existingIndex >= 0) {\n        newMiddleware.splice(existingIndex, 1, upserted);\n      } else {\n        newMiddleware.push(upserted);\n      }\n    });\n    this.middleware = newMiddleware;\n    return this;\n  }\n  insert({\n    middleware,\n    position,\n    unique\n  }) {\n    if (unique) {\n      middleware.forEach(md => {\n        const existingMiddlewareIndex = this.middleware.findIndex(m => m.id === md.id);\n        if (existingMiddlewareIndex >= 0) {\n          this.middleware.splice(existingMiddlewareIndex, 1);\n        }\n      });\n    }\n    const targetId = position.after || position.before;\n    const targetIndex = this.middleware.findIndex(m => m.id === targetId);\n    const insertionIndex = position.after ? targetIndex + 1 : targetIndex;\n    this.middleware.splice(insertionIndex, 0, ...middleware);\n    return this;\n  }\n  setOrder(order) {\n    this.middleware = order.map(id => this.middleware.find(middleware => middleware.id === id)).filter(Boolean);\n  }\n  async executeMiddlewareChain({\n    eventName,\n    initialValue\n  }) {\n    let index = -1;\n    const execute = async (i, state, status) => {\n      if (i <= index) {\n        throw new Error(\"next() called multiple times\");\n      }\n      index = i;\n      const returnFromChain = i === this.middleware.length || status && [\"complete\", \"discard\"].includes(status);\n      if (returnFromChain) return {\n        state,\n        status\n      };\n      const middleware = this.middleware[i];\n      const handler = middleware.handlers[eventName];\n      if (!handler) {\n        return execute(i + 1, state, status);\n      }\n      const next = adjustedState => execute(i + 1, adjustedState);\n      const complete = adjustedState => execute(i + 1, adjustedState, \"complete\");\n      const discard = () => execute(i + 1, state, \"discard\");\n      const forward = () => execute(i + 1, state);\n      return await handler({\n        state,\n        next,\n        complete,\n        discard,\n        forward\n      });\n    };\n    const result = await withCancellation(`middleware-execution-${this.id}-${eventName}`, async abortSignal => {\n      const result2 = await execute(0, initialValue);\n      if (abortSignal.aborted) {\n        return \"canceled\";\n      }\n      return result2;\n    });\n    return result === \"canceled\" ? {\n      state: initialValue,\n      status: \"discard\"\n    } : result;\n  }\n  async execute({\n    eventName,\n    initialValue: initialState\n  }) {\n    return await this.executeMiddlewareChain({\n      eventName,\n      initialValue: initialState\n    });\n  }\n};\n\n// src/messageComposer/middleware/pollComposer/state.ts\nvar VALID_MAX_VOTES_VALUE_REGEX = /^([2-9]|10)$/;\nvar MAX_POLL_OPTIONS = 100;\nvar textFieldIsEmpty = text => !text.trim();\nvar pollStateChangeValidators = {\n  enforce_unique_vote: () => ({\n    max_votes_allowed: void 0\n  }),\n  max_votes_allowed: ({\n    data,\n    value\n  }) => {\n    if (data.enforce_unique_vote && value) return {\n      max_votes_allowed: \"Enforce unique vote is enabled\"\n    };\n    const numericMatch = value.match(/^[0-9]+$/);\n    if (!numericMatch && value) {\n      return {\n        max_votes_allowed: \"Only numbers are allowed\"\n      };\n    }\n    if (value?.length > 1 && !value.match(VALID_MAX_VOTES_VALUE_REGEX)) return {\n      max_votes_allowed: \"Type a number from 2 to 10\"\n    };\n    return {\n      max_votes_allowed: void 0\n    };\n  },\n  options: ({\n    value: options\n  }) => {\n    const errors = {};\n    const seenOptions = /* @__PURE__ */new Set();\n    options.forEach(option => {\n      if (seenOptions.has(option.text) && option.text.length) {\n        errors[option.id] = \"Option already exists\";\n      } else {\n        seenOptions.add(option.text);\n      }\n    });\n    return Object.keys(errors).length > 0 ? {\n      options: errors\n    } : {\n      options: void 0\n    };\n  }\n};\nvar defaultPollFieldChangeEventValidators = {\n  name: ({\n    currentError,\n    value\n  }) => value && currentError ? {\n    name: void 0\n  } : {\n    name: typeof currentError === \"string\" ? currentError : void 0\n  }\n};\nvar defaultPollFieldBlurEventValidators = {\n  max_votes_allowed: ({\n    value\n  }) => {\n    if (value && !value.match(VALID_MAX_VOTES_VALUE_REGEX)) return {\n      max_votes_allowed: \"Type a number from 2 to 10\"\n    };\n    return {\n      max_votes_allowed: void 0\n    };\n  },\n  name: ({\n    value\n  }) => {\n    if (textFieldIsEmpty(value)) return {\n      name: \"Question is required\"\n    };\n    return {\n      name: void 0\n    };\n  },\n  options: params => {\n    const defaultResult = pollStateChangeValidators.options?.(params);\n    const errors = defaultResult?.options ?? {};\n    params.value.forEach((option, index) => {\n      const isTheLastOption = index === params.value.length - 1;\n      if (textFieldIsEmpty(option.text) && !isTheLastOption) {\n        errors[option.id] = \"Option is empty\";\n      }\n    });\n    return Object.keys(errors).length > 0 ? {\n      options: errors\n    } : {\n      options: void 0\n    };\n  }\n};\nvar isTargetedOptionTextUpdate = value => !Array.isArray(value) && typeof value?.index === \"number\" && typeof value?.text === \"string\";\nvar pollCompositionStateProcessors = {\n  enforce_unique_vote: ({\n    value\n  }) => ({\n    enforce_unique_vote: value,\n    max_votes_allowed: \"\"\n  }),\n  options: ({\n    value,\n    data\n  }) => {\n    if (Array.isArray(value)) {\n      return {\n        options: value.map(option => ({\n          id: option.id,\n          text: option.text.trim()\n        }))\n      };\n    }\n    const {\n      index,\n      text\n    } = value;\n    const prevOptions = data.options || [];\n    const shouldRemoveOption = prevOptions && prevOptions.slice(index + 1).length > 0 && !text;\n    const optionListHead = prevOptions.slice(0, index);\n    const optionListTail = prevOptions.slice(index + 1);\n    const newOptions = [...optionListHead, ...(shouldRemoveOption ? [] : [{\n      ...prevOptions[index],\n      text\n    }]), ...optionListTail];\n    const shouldAddNewOption = prevOptions.length < MAX_POLL_OPTIONS && !newOptions.some(option => !option.text.trim());\n    if (shouldAddNewOption) {\n      newOptions.push({\n        id: generateUUIDv4(),\n        text: \"\"\n      });\n    }\n    return {\n      options: newOptions\n    };\n  }\n};\nvar createPollComposerStateMiddleware = ({\n  processors: customProcessors,\n  validators: customValidators\n} = {}) => {\n  const universalHandler = ({\n    state,\n    validators: validators3,\n    processors\n  }) => {\n    const {\n      previousState,\n      targetFields\n    } = state;\n    let newData;\n    if (!processors && isTargetedOptionTextUpdate(targetFields.options)) {\n      const options = [...previousState.data.options];\n      const targetOption = previousState.data.options[targetFields.options.index];\n      if (targetOption) {\n        targetOption.text = targetFields.options.text;\n        options.splice(targetFields.options.index, 1, targetOption);\n      }\n      newData = {\n        ...targetFields,\n        options\n      };\n    } else if (!processors) {\n      newData = targetFields;\n    } else {\n      newData = Object.entries(targetFields).reduce((acc, [key, value]) => {\n        const processor = processors[key];\n        acc = {\n          ...acc,\n          ...(processor ? processor({\n            data: previousState.data,\n            value\n          }) : {\n            [key]: value\n          })\n        };\n        return acc;\n      }, {});\n    }\n    const newErrors = Object.keys(targetFields).reduce((acc, key) => {\n      const validator = validators3[key];\n      if (validator) {\n        const error = validator({\n          currentError: previousState.errors[key],\n          data: previousState.data,\n          value: newData[key]\n        });\n        acc = {\n          ...acc,\n          ...error\n        };\n      }\n      return acc;\n    }, {});\n    return {\n      newData,\n      newErrors\n    };\n  };\n  return {\n    id: \"stream-io/poll-composer-state-processing\",\n    handlers: {\n      handleFieldChange: ({\n        state,\n        next,\n        forward\n      }) => {\n        if (!state.targetFields) return forward();\n        const {\n          previousState,\n          injectedFieldErrors\n        } = state;\n        const {\n          newData,\n          newErrors\n        } = universalHandler({\n          processors: {\n            ...pollCompositionStateProcessors,\n            ...customProcessors?.handleFieldChange\n          },\n          state,\n          validators: {\n            ...pollStateChangeValidators,\n            ...defaultPollFieldChangeEventValidators,\n            ...customValidators?.handleFieldChange\n          }\n        });\n        return next({\n          ...state,\n          nextState: {\n            ...previousState,\n            data: {\n              ...previousState.data,\n              ...newData\n            },\n            errors: {\n              ...previousState.errors,\n              ...newErrors,\n              ...injectedFieldErrors\n            }\n          }\n        });\n      },\n      handleFieldBlur: ({\n        state,\n        next,\n        forward\n      }) => {\n        if (!state.targetFields) return forward();\n        const {\n          previousState\n        } = state;\n        const {\n          newData,\n          newErrors\n        } = universalHandler({\n          processors: customProcessors?.handleFieldBlur,\n          state,\n          validators: {\n            ...pollStateChangeValidators,\n            ...defaultPollFieldBlurEventValidators,\n            ...customValidators?.handleFieldBlur\n          }\n        });\n        return next({\n          ...state,\n          nextState: {\n            ...previousState,\n            data: {\n              ...previousState.data,\n              ...newData\n            },\n            errors: {\n              ...previousState.errors,\n              ...newErrors,\n              ...state.injectedFieldErrors\n            }\n          }\n        });\n      }\n    }\n  };\n};\n\n// src/messageComposer/middleware/pollComposer/composition.ts\nvar createPollCompositionValidationMiddleware = composer => ({\n  id: \"stream-io/poll-composer-composition\",\n  handlers: {\n    compose: ({\n      discard,\n      forward\n    }) => {\n      if (composer.pollComposer.canCreatePoll) return forward();\n      return discard();\n    }\n  }\n});\n\n// src/messageComposer/middleware/pollComposer/PollComposerMiddlewareExecutor.ts\nvar PollComposerCompositionMiddlewareExecutor = class extends MiddlewareExecutor {\n  constructor({\n    composer\n  }) {\n    super();\n    this.use([createPollCompositionValidationMiddleware(composer)]);\n  }\n};\nvar PollComposerStateMiddlewareExecutor = class extends MiddlewareExecutor {\n  constructor() {\n    super();\n    this.use([createPollComposerStateMiddleware()]);\n  }\n};\n\n// src/types.ts\nvar ErrorFromResponse = class extends Error {\n  constructor(message, {\n    code,\n    status,\n    response\n  }) {\n    super(message);\n    this.name = \"ErrorFromResponse\";\n    this.code = code;\n    this.response = response;\n    this.status = status;\n  }\n  // Vitest helper (serialized errors are too large to read)\n  // https://github.com/vitest-dev/vitest/blob/v3.1.3/packages/utils/src/error.ts#L60-L62\n  toJSON() {\n    const extra = [[\"status\", this.status], [\"code\", this.code]];\n    const joinable = [];\n    for (const [key, value] of extra) {\n      if (typeof value !== \"undefined\" && value !== null) {\n        joinable.push(`${key}: ${value}`);\n      }\n    }\n    return {\n      message: `(${joinable.join(\", \")}) - ${this.message}`,\n      stack: this.stack,\n      name: this.name,\n      code: this.code,\n      status: this.status\n    };\n  }\n};\nvar VotingVisibility = /* @__PURE__ */(VotingVisibility2 => {\n  VotingVisibility2[\"anonymous\"] = \"anonymous\";\n  VotingVisibility2[\"public\"] = \"public\";\n  return VotingVisibility2;\n})(VotingVisibility || {});\n\n// src/messageComposer/pollComposer.ts\nvar PollComposer = class {\n  constructor({\n    composer\n  }) {\n    this.initState = () => {\n      this.state.next(this.initialState);\n    };\n    /**\n     * Updates specified fields and generates relevant errors\n     * @param data\n     * @param injectedFieldErrors - errors produced externally that will take precedence over the errors generated in the middleware chaing\n     */\n    // FIXME: change method params to a single object with the next major release\n    this.updateFields = async (data, injectedFieldErrors) => {\n      const {\n        state,\n        status\n      } = await this.stateMiddlewareExecutor.execute({\n        eventName: \"handleFieldChange\",\n        initialValue: {\n          nextState: {\n            ...this.state.getLatestValue()\n          },\n          previousState: {\n            ...this.state.getLatestValue()\n          },\n          targetFields: data,\n          injectedFieldErrors\n        }\n      });\n      if (status === \"discard\") return;\n      this.state.next(state.nextState);\n    };\n    this.handleFieldBlur = async field => {\n      const result = await this.stateMiddlewareExecutor.execute({\n        eventName: \"handleFieldBlur\",\n        initialValue: {\n          nextState: {\n            ...this.state.getLatestValue()\n          },\n          previousState: {\n            ...this.state.getLatestValue()\n          },\n          targetFields: {\n            [field]: this.state.getLatestValue().data[field]\n          }\n        }\n      });\n      if (result.status === \"discard\") return;\n      this.state.next(result.state.nextState);\n    };\n    this.compose = async () => {\n      const {\n        data,\n        errors\n      } = this.state.getLatestValue();\n      const result = await this.compositionMiddlewareExecutor.execute({\n        eventName: \"compose\",\n        initialValue: {\n          data: {\n            ...data,\n            max_votes_allowed: data.max_votes_allowed ? parseInt(data.max_votes_allowed) : void 0,\n            options: data.options?.filter(o => o.text.trim()).map(o => ({\n              text: o.text\n            }))\n          },\n          errors\n        }\n      });\n      if (result.status === \"discard\") return;\n      return result.state;\n    };\n    this.composer = composer;\n    this.state = new StateStore(this.initialState);\n    this.compositionMiddlewareExecutor = new PollComposerCompositionMiddlewareExecutor({\n      composer\n    });\n    this.stateMiddlewareExecutor = new PollComposerStateMiddlewareExecutor();\n  }\n  get initialState() {\n    return {\n      data: {\n        allow_answers: false,\n        allow_user_suggested_options: false,\n        description: \"\",\n        enforce_unique_vote: true,\n        id: generateUUIDv4(),\n        max_votes_allowed: \"\",\n        name: \"\",\n        options: [{\n          id: generateUUIDv4(),\n          text: \"\"\n        }],\n        user_id: this.composer.client.user?.id,\n        voting_visibility: \"public\" /* public */\n      },\n      errors: {}\n    };\n  }\n  get allow_answers() {\n    return this.state.getLatestValue().data.allow_answers;\n  }\n  get allow_user_suggested_options() {\n    return this.state.getLatestValue().data.allow_user_suggested_options;\n  }\n  get description() {\n    return this.state.getLatestValue().data.description;\n  }\n  get enforce_unique_vote() {\n    return this.state.getLatestValue().data.enforce_unique_vote;\n  }\n  get id() {\n    return this.state.getLatestValue().data.id;\n  }\n  get max_votes_allowed() {\n    return this.state.getLatestValue().data.max_votes_allowed;\n  }\n  get name() {\n    return this.state.getLatestValue().data.name;\n  }\n  get options() {\n    return this.state.getLatestValue().data.options;\n  }\n  get user_id() {\n    return this.state.getLatestValue().data.user_id;\n  }\n  get voting_visibility() {\n    return this.state.getLatestValue().data.voting_visibility;\n  }\n  get canCreatePoll() {\n    const {\n      data,\n      errors\n    } = this.state.getLatestValue();\n    const hasAtLeastOneNonEmptyOption = data.options.filter(o => !!o.text.trim()).length > 0;\n    const hasName = !!data.name;\n    const maxVotesAllowedNumber = parseInt(data.max_votes_allowed?.match(VALID_MAX_VOTES_VALUE_REGEX)?.[0] || \"\");\n    const validMaxVotesAllowed = data.max_votes_allowed === \"\" || !!maxVotesAllowedNumber && (2 <= maxVotesAllowedNumber || maxVotesAllowedNumber <= 10);\n    return hasAtLeastOneNonEmptyOption && hasName && validMaxVotesAllowed && Object.values(errors).filter(errorText => !!errorText).length === 0;\n  }\n};\n\n// src/messageComposer/middleware/messageComposer/attachments.ts\nvar localAttachmentToAttachment = localAttachment => {\n  const {\n    localMetadata,\n    ...attachment\n  } = localAttachment;\n  return attachment;\n};\nvar createAttachmentsCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/attachments\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      discard,\n      forward\n    }) => {\n      const {\n        attachmentManager\n      } = composer;\n      if (!attachmentManager) return forward();\n      if (attachmentManager.uploadsInProgressCount > 0) {\n        composer.client.notifications.addWarning({\n          message: \"Wait until all attachments have uploaded\",\n          origin: {\n            emitter: \"MessageComposer\",\n            context: {\n              composer\n            }\n          }\n        });\n        return discard();\n      }\n      const attachments = (state.message.attachments ?? []).concat(attachmentManager.successfulUploads.map(localAttachmentToAttachment));\n      if (!attachments.length) return forward();\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          attachments\n        },\n        message: {\n          ...state.message,\n          attachments\n        }\n      });\n    }\n  }\n});\nvar createDraftAttachmentsCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-attachments\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      const {\n        attachmentManager\n      } = composer;\n      if (!attachmentManager) return forward();\n      const successfulUploads = attachmentManager.successfulUploads;\n      const attachments = successfulUploads.length ? (state.draft.attachments ?? []).concat(successfulUploads.map(localAttachmentToAttachment)) : void 0;\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          attachments\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/cleanData.ts\nvar createCompositionDataCleanupMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/data-cleanup\",\n  handlers: {\n    compose: ({\n      state,\n      next\n    }) => {\n      const common = {\n        type: composer.editedMessage?.type ?? \"regular\"\n      };\n      const editedMessagePayloadToBeSent = composer.editedMessage ? toUpdatedMessagePayload(composer.editedMessage) : void 0;\n      return next({\n        ...state,\n        localMessage: formatMessage({\n          ...composer.editedMessage,\n          ...state.localMessage,\n          ...common\n        }),\n        message: {\n          ...editedMessagePayloadToBeSent,\n          ...state.message,\n          ...common\n        },\n        sendOptions: composer.editedMessage && state.sendOptions?.skip_enrich_url ? {\n          skip_enrich_url: state.sendOptions?.skip_enrich_url\n        } : state.sendOptions\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/customData.ts\nvar createCustomDataCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/custom-data\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      const data = composer.customDataManager.customMessageData;\n      if (!data) return forward();\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...data\n        },\n        message: {\n          ...state.message,\n          ...data\n        }\n      });\n    }\n  }\n});\nvar createDraftCustomDataCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-custom-data\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      const data = composer.customDataManager.customMessageData;\n      if (!data) return forward();\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          ...data\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/compositionValidation.ts\nvar createCompositionValidationMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/data-validation\",\n  handlers: {\n    compose: async ({\n      state,\n      discard,\n      forward\n    }) => {\n      const {\n        maxLengthOnSend\n      } = composer.config.text ?? {};\n      const inputText = state.message.text ?? \"\";\n      const isEmptyMessage = textIsEmpty(inputText) && !state.message.attachments?.length && !state.message.poll_id;\n      const hasExceededMaxLength = typeof maxLengthOnSend === \"number\" && inputText.length > maxLengthOnSend;\n      const editedMessageIsUnchanged = composer.editedMessage && !composer.lastChangeOriginIsLocal;\n      if (isEmptyMessage || editedMessageIsUnchanged || hasExceededMaxLength) {\n        return await discard();\n      }\n      return await forward();\n    }\n  }\n});\nvar createDraftCompositionValidationMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-data-validation\",\n  handlers: {\n    compose: async ({\n      state,\n      discard,\n      forward\n    }) => {\n      const hasData = !textIsEmpty(state.draft.text ?? \"\") || state.draft.attachments?.length || state.draft.poll_id || state.draft.quoted_message_id;\n      const shouldCreateDraft = composer.lastChangeOriginIsLocal && hasData;\n      if (!shouldCreateDraft) {\n        return await discard();\n      }\n      return await forward();\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/linkPreviews.ts\nvar createLinkPreviewsCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/link-previews\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      const {\n        linkPreviewsManager\n      } = composer;\n      if (!linkPreviewsManager) return forward();\n      linkPreviewsManager.cancelURLEnrichment();\n      const someLinkPreviewsLoading = linkPreviewsManager.loadingPreviews.length > 0;\n      const someLinkPreviewsDismissed = linkPreviewsManager.dismissedPreviews.length > 0;\n      const linkPreviews = linkPreviewsManager.loadingPreviews.length > 0 ? [] : linkPreviewsManager.loadedPreviews.map(preview => LinkPreviewsManager.getPreviewData(preview));\n      const attachments = (state.message.attachments ?? []).concat(linkPreviews);\n      if (!attachments.length) return forward();\n      const sendOptions = {\n        ...state.sendOptions\n      };\n      const skip_enrich_url = !someLinkPreviewsLoading && linkPreviews.length > 0 || someLinkPreviewsDismissed;\n      if (skip_enrich_url) {\n        sendOptions.skip_enrich_url = true;\n      }\n      return next({\n        ...state,\n        message: {\n          ...state.message,\n          attachments\n        },\n        localMessage: {\n          ...state.localMessage,\n          attachments\n        },\n        sendOptions\n      });\n    }\n  }\n});\nvar createDraftLinkPreviewsCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-link-previews\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      const {\n        linkPreviewsManager\n      } = composer;\n      if (!linkPreviewsManager) return forward();\n      linkPreviewsManager.cancelURLEnrichment();\n      const linkPreviews = linkPreviewsManager.loadedPreviews.map(preview => LinkPreviewsManager.getPreviewData(preview));\n      if (!linkPreviews.length) return forward();\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          attachments: (state.draft.attachments ?? []).concat(linkPreviews)\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/textComposer.ts\nvar createTextComposerCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/text-composition\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      if (!composer.textComposer) return forward();\n      const {\n        mentionedUsers,\n        text\n      } = composer.textComposer;\n      const mentioned_users = Array.from(new Set(mentionedUsers.filter(({\n        id,\n        name\n      }) => text.includes(`@${id}`) || text.includes(`@${name}`))));\n      if (!text && mentioned_users.length === 0) return forward();\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          mentioned_users,\n          text\n        },\n        message: {\n          ...state.message,\n          mentioned_users: mentioned_users.map(u => u.id),\n          text\n        }\n      });\n    }\n  }\n});\nvar createDraftTextComposerCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-text-composition\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      if (!composer.textComposer) return forward();\n      const {\n        maxLengthOnSend\n      } = composer.config.text ?? {};\n      const {\n        mentionedUsers,\n        text: inputText\n      } = composer.textComposer;\n      const mentioned_users = mentionedUsers.length ? Array.from(new Set(mentionedUsers.filter(({\n        id,\n        name\n      }) => inputText.includes(`@${id}`) || inputText.includes(`@${name}`)))) : void 0;\n      const text = typeof maxLengthOnSend === \"number\" && inputText.length > maxLengthOnSend ? inputText.slice(0, maxLengthOnSend) : inputText;\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          mentioned_users: mentioned_users?.map(u => u.id),\n          text\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/messageComposerState.ts\nvar createMessageComposerStateCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/own-state\",\n  handlers: {\n    compose: ({\n      state,\n      next\n    }) => {\n      const payload = {};\n      if (composer.quotedMessage) {\n        payload.quoted_message_id = composer.quotedMessage.id;\n      }\n      if (composer.pollId) {\n        payload.poll_id = composer.pollId;\n      }\n      if (composer.showReplyInChannel) {\n        payload.show_in_channel = true;\n      }\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...payload,\n          quoted_message: composer.quotedMessage ?? void 0\n        },\n        message: {\n          ...state.message,\n          ...payload\n        }\n      });\n    }\n  }\n});\nvar createDraftMessageComposerStateCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/draft-own-state\",\n  handlers: {\n    compose: ({\n      state,\n      next\n    }) => {\n      const payload = {};\n      if (composer.quotedMessage) {\n        payload.quoted_message_id = composer.quotedMessage.id;\n      }\n      if (composer.pollId) {\n        payload.poll_id = composer.pollId;\n      }\n      if (composer.showReplyInChannel) {\n        payload.show_in_channel = true;\n      }\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          ...payload\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/userDataInjection.ts\nvar createUserDataInjectionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/user-data-injection\",\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward\n    }) => {\n      if (!composer.client.user) {\n        return forward();\n      }\n      const {\n        channel_mutes,\n        devices,\n        mutes,\n        ...messageUser\n      } = composer.client.user;\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          user: messageUser,\n          user_id: messageUser.id\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/pollOnly.ts\nvar pollLocalMessageNullifiedFields = {\n  attachments: [],\n  mentioned_users: [],\n  parent_id: void 0,\n  quoted_message: void 0,\n  text: \"\"\n};\nvar createPollOnlyCompositionMiddleware = composer => ({\n  id: \"stream-io/message-composer-middleware/poll-only\",\n  handlers: {\n    compose: ({\n      state,\n      complete,\n      forward\n    }) => {\n      const pollId = composer.pollId;\n      const isEditingMessage = !!composer.editedMessage;\n      const isComposingThreadReply = !!composer.threadId;\n      if (!pollId || isComposingThreadReply || isEditingMessage) return forward();\n      return complete({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...pollLocalMessageNullifiedFields,\n          poll_id: pollId\n        },\n        message: {\n          id: state.localMessage.id,\n          poll_id: pollId\n        }\n      });\n    }\n  }\n});\n\n// src/messageComposer/middleware/messageComposer/MessageComposerMiddlewareExecutor.ts\nvar MessageComposerMiddlewareExecutor = class extends MiddlewareExecutor {\n  constructor({\n    composer\n  }) {\n    super();\n    this.use([createUserDataInjectionMiddleware(composer), createPollOnlyCompositionMiddleware(composer), createTextComposerCompositionMiddleware(composer), createAttachmentsCompositionMiddleware(composer), createLinkPreviewsCompositionMiddleware(composer), createMessageComposerStateCompositionMiddleware(composer), createCustomDataCompositionMiddleware(composer), createCompositionValidationMiddleware(composer), createCompositionDataCleanupMiddleware(composer)]);\n  }\n};\nvar MessageDraftComposerMiddlewareExecutor = class extends MiddlewareExecutor {\n  constructor({\n    composer\n  }) {\n    super();\n    this.use([createDraftTextComposerCompositionMiddleware(composer), createDraftAttachmentsCompositionMiddleware(composer), createDraftLinkPreviewsCompositionMiddleware(composer), createDraftMessageComposerStateCompositionMiddleware(composer), createDraftCustomDataCompositionMiddleware(composer), createDraftCompositionValidationMiddleware(composer)]);\n  }\n};\n\n// src/messageComposer/middleware/messageComposer/commandInjection.ts\nvar createCommandInjectionMiddleware = composer => ({\n  handlers: {\n    compose: ({\n      forward,\n      next,\n      state\n    }) => {\n      const command = composer.textComposer.command;\n      if (!command) {\n        return forward();\n      }\n      const {\n        text\n      } = state.localMessage;\n      const injection = `/${command?.name}`;\n      const enrichedText = `${injection} ${text}`;\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          text: enrichedText\n        },\n        message: {\n          ...state.message,\n          text: enrichedText\n        }\n      });\n    }\n  },\n  id: \"stream-io/message-composer-middleware/command-string-injection\"\n});\nvar createDraftCommandInjectionMiddleware = composer => ({\n  handlers: {\n    compose: ({\n      forward,\n      next,\n      state\n    }) => {\n      const command = composer.textComposer.command;\n      if (!command) {\n        return forward();\n      }\n      const {\n        text\n      } = state.draft;\n      const injection = `/${command?.name}`;\n      const enrichedText = `${injection} ${text}`;\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          text: enrichedText\n        }\n      });\n    }\n  },\n  id: \"stream-io/message-composer-middleware/draft-command-string-injection\"\n});\n\n// src/messageComposer/middleware/textComposer/activeCommandGuard.ts\nvar createActiveCommandGuardMiddleware = () => ({\n  handlers: {\n    onChange: ({\n      complete,\n      forward,\n      state\n    }) => {\n      if (state.command) {\n        return complete(state);\n      }\n      return forward();\n    },\n    onSuggestionItemSelect: ({\n      forward\n    }) => forward()\n  },\n  id: \"stream-io/text-composer/active-command-guard\"\n});\n\n// src/search/BaseSearchSource.ts\nvar DEFAULT_SEARCH_SOURCE_OPTIONS = {\n  debounceMs: 300,\n  pageSize: 10\n};\nvar BaseSearchSourceBase = class {\n  constructor(options) {\n    this.activate = () => {\n      if (this.isActive) return;\n      this.state.partialNext({\n        isActive: true\n      });\n    };\n    this.deactivate = () => {\n      if (!this.isActive) return;\n      this.state.partialNext({\n        isActive: false\n      });\n    };\n    this.canExecuteQuery = newSearchString => {\n      const hasNewSearchQuery = typeof newSearchString !== \"undefined\";\n      const searchString = newSearchString ?? this.searchQuery;\n      return !!(this.isActive && !this.isLoading && (this.hasNext || hasNewSearchQuery) && searchString);\n    };\n    const {\n      pageSize\n    } = {\n      ...DEFAULT_SEARCH_SOURCE_OPTIONS,\n      ...options\n    };\n    this.pageSize = pageSize;\n    this.state = new StateStore(this.initialState);\n  }\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n  get initialState() {\n    return {\n      hasNext: true,\n      isActive: false,\n      isLoading: false,\n      items: void 0,\n      lastQueryError: void 0,\n      next: void 0,\n      offset: 0,\n      searchQuery: \"\"\n    };\n  }\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n  get next() {\n    return this.state.getLatestValue().next;\n  }\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n  getStateBeforeFirstQuery(newSearchString) {\n    return {\n      ...this.initialState,\n      isActive: this.isActive,\n      isLoading: true,\n      searchQuery: newSearchString\n    };\n  }\n  getStateAfterQuery(stateUpdate, isFirstPage) {\n    const current = this.state.getLatestValue();\n    return {\n      ...current,\n      lastQueryError: void 0,\n      // reset lastQueryError that can be overridden by the stateUpdate\n      ...stateUpdate,\n      isLoading: false,\n      items: isFirstPage ? stateUpdate.items : [...(this.items ?? []), ...(stateUpdate.items || [])]\n    };\n  }\n  prepareStateForQuery(newSearchString) {\n    const hasNewSearchQuery = typeof newSearchString !== \"undefined\";\n    const searchString = newSearchString ?? this.searchQuery;\n    if (hasNewSearchQuery) {\n      this.state.next(this.getStateBeforeFirstQuery(newSearchString ?? \"\"));\n    } else {\n      this.state.partialNext({\n        isLoading: true\n      });\n    }\n    return {\n      searchString,\n      hasNewSearchQuery\n    };\n  }\n  updatePaginationStateFromQuery(result) {\n    const {\n      items,\n      next\n    } = result;\n    const stateUpdate = {};\n    if (next || next === null) {\n      stateUpdate.next = next;\n      stateUpdate.hasNext = !!next;\n    } else {\n      stateUpdate.offset = (this.offset ?? 0) + items.length;\n      stateUpdate.hasNext = items.length === this.pageSize;\n    }\n    return stateUpdate;\n  }\n  resetState() {\n    this.state.next(this.initialState);\n  }\n  resetStateAndActivate() {\n    this.resetState();\n    this.activate();\n  }\n};\nvar BaseSearchSource = class extends BaseSearchSourceBase {\n  constructor(options) {\n    const {\n      debounceMs\n    } = {\n      ...DEFAULT_SEARCH_SOURCE_OPTIONS,\n      ...options\n    };\n    super(options);\n    this.setDebounceOptions = ({\n      debounceMs\n    }) => {\n      this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n    };\n    this.search = searchQuery => this.searchDebounced(searchQuery);\n    this.setDebounceOptions({\n      debounceMs\n    });\n  }\n  async executeQuery(newSearchString) {\n    if (!this.canExecuteQuery(newSearchString)) return;\n    const {\n      hasNewSearchQuery,\n      searchString\n    } = this.prepareStateForQuery(newSearchString);\n    let stateUpdate = {};\n    try {\n      const results = await this.query(searchString);\n      if (!results) return;\n      const {\n        items\n      } = results;\n      stateUpdate = this.updatePaginationStateFromQuery(results);\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, hasNewSearchQuery));\n    }\n  }\n  cancelScheduledQuery() {\n    this.searchDebounced.cancel();\n  }\n};\nvar BaseSearchSourceSync = class extends BaseSearchSourceBase {\n  constructor(options) {\n    const {\n      debounceMs\n    } = {\n      ...DEFAULT_SEARCH_SOURCE_OPTIONS,\n      ...options\n    };\n    super(options);\n    this.setDebounceOptions = ({\n      debounceMs\n    }) => {\n      this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n    };\n    this.search = searchQuery => this.searchDebounced(searchQuery);\n    this.setDebounceOptions({\n      debounceMs\n    });\n  }\n  executeQuery(newSearchString) {\n    if (!this.canExecuteQuery(newSearchString)) return;\n    const {\n      hasNewSearchQuery,\n      searchString\n    } = this.prepareStateForQuery(newSearchString);\n    let stateUpdate = {};\n    try {\n      const results = this.query(searchString);\n      if (!results) return;\n      const {\n        items\n      } = results;\n      stateUpdate = this.updatePaginationStateFromQuery(results);\n      stateUpdate.items = this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, hasNewSearchQuery));\n    }\n  }\n  cancelScheduledQuery() {\n    this.searchDebounced.cancel();\n  }\n};\n\n// src/search/SearchController.ts\nvar SearchController = class {\n  constructor({\n    config,\n    sources\n  } = {}) {\n    this.addSource = source => {\n      this.state.partialNext({\n        sources: [...this.sources, source]\n      });\n    };\n    this.getSource = sourceType => this.sources.find(s => s.type === sourceType);\n    this.removeSource = sourceType => {\n      const newSources = this.sources.filter(s => s.type !== sourceType);\n      if (newSources.length === this.sources.length) return;\n      this.state.partialNext({\n        sources: newSources\n      });\n    };\n    this.activateSource = sourceType => {\n      const source = this.getSource(sourceType);\n      if (!source || source.isActive) return;\n      if (this.config.keepSingleActiveSource) {\n        this.sources.forEach(s => {\n          if (s.type !== sourceType) {\n            s.deactivate();\n          }\n        });\n      }\n      source.activate();\n      this.state.partialNext({\n        sources: [...this.sources]\n      });\n    };\n    this.deactivateSource = sourceType => {\n      const source = this.getSource(sourceType);\n      if (!source?.isActive) return;\n      if (this.activeSources.length === 1) return;\n      source.deactivate();\n      this.state.partialNext({\n        sources: [...this.sources]\n      });\n    };\n    this.activate = () => {\n      if (!this.activeSources.length) {\n        const sourcesToActivate = this.config.keepSingleActiveSource ? this.sources.slice(0, 1) : this.sources;\n        sourcesToActivate.forEach(s => s.activate());\n      }\n      if (this.isActive) return;\n      this.state.partialNext({\n        isActive: true\n      });\n    };\n    this.search = async searchQuery => {\n      const searchedSources = this.activeSources;\n      this.state.partialNext({\n        searchQuery\n      });\n      await Promise.all(searchedSources.map(source => source.search(searchQuery)));\n    };\n    this.cancelSearchQueries = () => {\n      this.activeSources.forEach(s => s.cancelScheduledQuery());\n    };\n    this.clear = () => {\n      this.cancelSearchQueries();\n      this.sources.forEach(source => source.state.next({\n        ...source.initialState,\n        isActive: source.isActive\n      }));\n      this.state.next(current => ({\n        ...current,\n        isActive: true,\n        queriesInProgress: [],\n        searchQuery: \"\"\n      }));\n    };\n    this.exit = () => {\n      this.cancelSearchQueries();\n      this.sources.forEach(source => source.state.next({\n        ...source.initialState,\n        isActive: source.isActive\n      }));\n      this.state.next(current => ({\n        ...current,\n        isActive: false,\n        queriesInProgress: [],\n        searchQuery: \"\"\n      }));\n    };\n    this.state = new StateStore({\n      isActive: false,\n      searchQuery: \"\",\n      sources: sources ?? []\n    });\n    this._internalState = new StateStore({});\n    this.config = {\n      keepSingleActiveSource: true,\n      ...config\n    };\n  }\n  get hasNext() {\n    return this.sources.some(source => source.hasNext);\n  }\n  get sources() {\n    return this.state.getLatestValue().sources;\n  }\n  get activeSources() {\n    return this.state.getLatestValue().sources.filter(s => s.isActive);\n  }\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n  get searchSourceTypes() {\n    return this.sources.map(s => s.type);\n  }\n};\n\n// src/search/UserSearchSource.ts\nvar UserSearchSource = class extends BaseSearchSource {\n  constructor(client, options) {\n    super(options);\n    this.type = \"users\";\n    this.client = client;\n  }\n  async query(searchQuery) {\n    const filters = {\n      $or: [{\n        id: {\n          $autocomplete: searchQuery\n        }\n      }, {\n        name: {\n          $autocomplete: searchQuery\n        }\n      }],\n      ...this.filters\n    };\n    const sort = {\n      id: 1,\n      ...this.sort\n    };\n    const options = {\n      ...this.searchOptions,\n      limit: this.pageSize,\n      offset: this.offset\n    };\n    const {\n      users\n    } = await this.client.queryUsers(filters, sort, options);\n    return {\n      items: users\n    };\n  }\n  filterQueryResults(items) {\n    return items.filter(u => u.id !== this.client.user?.id);\n  }\n};\n\n// src/search/ChannelSearchSource.ts\nvar ChannelSearchSource = class extends BaseSearchSource {\n  constructor(client, options) {\n    super(options);\n    this.type = \"channels\";\n    this.client = client;\n  }\n  async query(searchQuery) {\n    const filters = {\n      members: {\n        $in: [this.client.userID]\n      },\n      name: {\n        $autocomplete: searchQuery\n      },\n      ...this.filters\n    };\n    const sort = this.sort ?? {};\n    const options = {\n      ...this.searchOptions,\n      limit: this.pageSize,\n      offset: this.offset\n    };\n    const items = await this.client.queryChannels(filters, sort, options);\n    return {\n      items\n    };\n  }\n  filterQueryResults(items) {\n    return items;\n  }\n};\n\n// src/search/MessageSearchSource.ts\nvar MessageSearchSource = class extends BaseSearchSource {\n  constructor(client, options) {\n    super(options);\n    this.type = \"messages\";\n    this.client = client;\n  }\n  async query(searchQuery) {\n    if (!this.client.userID) return {\n      items: []\n    };\n    const channelFilters = {\n      members: {\n        $in: [this.client.userID]\n      },\n      ...this.messageSearchChannelFilters\n    };\n    const messageFilters = {\n      text: searchQuery,\n      type: \"regular\",\n      // FIXME: type: 'reply' resp. do not filter by type and allow to jump to a message in a thread - missing support\n      ...this.messageSearchFilters\n    };\n    const sort = {\n      created_at: -1,\n      ...this.messageSearchSort\n    };\n    const options = {\n      limit: this.pageSize,\n      next: this.next,\n      sort\n    };\n    const {\n      next,\n      results\n    } = await this.client.search(channelFilters, messageFilters, options);\n    const items = results.map(({\n      message\n    }) => message);\n    const cids = Array.from(items.reduce((acc, message) => {\n      if (message.cid && !this.client.activeChannels[message.cid]) acc.add(message.cid);\n      return acc;\n    }, /* @__PURE__ */new Set())\n    // keep the cids unique\n    );\n    const allChannelsLoadedLocally = cids.length === 0;\n    if (!allChannelsLoadedLocally) {\n      await this.client.queryChannels({\n        cid: {\n          $in: cids\n        },\n        ...this.channelQueryFilters\n      }, {\n        last_message_at: -1,\n        ...this.channelQuerySort\n      }, this.channelQueryOptions);\n    }\n    return {\n      items,\n      next\n    };\n  }\n  filterQueryResults(items) {\n    return items;\n  }\n};\n\n// src/messageComposer/middleware/textComposer/textMiddlewareUtils.ts\nvar getTriggerCharWithToken = ({\n  trigger,\n  text,\n  isCommand = false,\n  acceptTrailingSpaces = true\n}) => {\n  const triggerNorWhitespace = `[^\\\\s${trigger}]*`;\n  const match = text.match(new RegExp(isCommand ? `^[${trigger}]${triggerNorWhitespace}$` : acceptTrailingSpaces ? `(?!^|\\\\W)?[${trigger}]${triggerNorWhitespace}\\\\s?${triggerNorWhitespace}$` : `(?!^|\\\\W)?[${trigger}]${triggerNorWhitespace}$`, \"g\"));\n  return match && match[match.length - 1].trim();\n};\nvar getCompleteCommandInString = text => {\n  const match = text.match(/^\\/(\\S+)\\s+.*/);\n  const commandName = match && match[1];\n  return commandName;\n};\nvar insertItemWithTrigger = ({\n  insertText,\n  selection,\n  text,\n  trigger\n}) => {\n  const beforeCursor = text.slice(0, selection.end);\n  const afterCursor = text.slice(selection.end);\n  const lastIndex = beforeCursor.lastIndexOf(trigger);\n  const newText = beforeCursor.slice(0, lastIndex) + insertText + afterCursor;\n  return {\n    text: newText,\n    selection: {\n      start: lastIndex + insertText.length,\n      end: lastIndex + insertText.length\n    }\n  };\n};\nvar replaceWordWithEntity = async ({\n  caretPosition,\n  getEntityString,\n  text\n}) => {\n  const lastWordRegex = /([^\\s]+)(\\s*)$/;\n  const match = lastWordRegex.exec(text.slice(0, caretPosition));\n  if (!match) return text;\n  const lastWord = match[1];\n  if (!lastWord) return text;\n  const spaces = match[2];\n  const newWord = await getEntityString(lastWord);\n  if (newWord == null) return text;\n  const textBeforeWord = text.slice(0, caretPosition - match[0].length);\n  const textAfterCaret = text.slice(caretPosition, -1);\n  return textBeforeWord + newWord + spaces + textAfterCaret;\n};\nfunction escapeRegExp(text) {\n  return text.replace(/[-[\\]{}()*+?.,/\\\\^$|#]/g, \"\\\\$&\");\n}\nvar getTokenizedSuggestionDisplayName = ({\n  displayName,\n  searchToken\n}) => ({\n  tokenizedDisplayName: {\n    token: searchToken,\n    parts: searchToken ? displayName.split(new RegExp(`(${escapeRegExp(searchToken)})`, \"gi\")).filter(Boolean) : [displayName]\n  }\n});\n\n// src/messageComposer/middleware/textComposer/commands.ts\nvar CommandSearchSource = class extends BaseSearchSourceSync {\n  constructor(channel, options) {\n    super(options);\n    this.type = \"commands\";\n    this.canExecuteQuery = newSearchString => {\n      const hasNewSearchQuery = typeof newSearchString !== \"undefined\";\n      return this.isActive && !this.isLoading && (this.hasNext || hasNewSearchQuery);\n    };\n    this.channel = channel;\n  }\n  getStateBeforeFirstQuery(newSearchString) {\n    const newState = super.getStateBeforeFirstQuery(newSearchString);\n    const {\n      items\n    } = this.state.getLatestValue();\n    return {\n      ...newState,\n      items\n      // preserve items to avoid flickering\n    };\n  }\n  query(searchQuery) {\n    const channelConfig = this.channel.getConfig();\n    const commands = channelConfig?.commands || [];\n    const selectedCommands = commands.filter(command => !!(command.name && command.name.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1));\n    selectedCommands.sort((a, b) => {\n      let nameA = a.name?.toLowerCase();\n      let nameB = b.name?.toLowerCase();\n      if (nameA?.indexOf(searchQuery) === 0) {\n        nameA = `0${nameA}`;\n      }\n      if (nameB?.indexOf(searchQuery) === 0) {\n        nameB = `0${nameB}`;\n      }\n      if (nameA != null && nameB != null) {\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n      }\n      return 0;\n    });\n    return {\n      items: selectedCommands.map(c => ({\n        ...c,\n        id: c.name\n      })),\n      next: null\n    };\n  }\n  filterQueryResults(items) {\n    return items;\n  }\n};\nvar DEFAULT_OPTIONS = {\n  minChars: 1,\n  trigger: \"/\"\n};\nvar createCommandsMiddleware = (channel, options) => {\n  const finalOptions = mergeWith(DEFAULT_OPTIONS, options ?? {});\n  let searchSource = new CommandSearchSource(channel);\n  if (options?.searchSource) {\n    searchSource = options.searchSource;\n    searchSource.resetState();\n  }\n  searchSource.activate();\n  return {\n    id: \"stream-io/text-composer/commands-middleware\",\n    handlers: {\n      onChange: ({\n        state,\n        next,\n        complete,\n        forward\n      }) => {\n        if (!state.selection) return forward();\n        const finalText = state.text.slice(0, state.selection.end);\n        const commandName = getCompleteCommandInString(finalText);\n        if (commandName) {\n          const command = searchSource?.query(commandName).items[0];\n          if (command) {\n            return next({\n              ...state,\n              command,\n              suggestions: void 0\n            });\n          }\n        }\n        const triggerWithToken = getTriggerCharWithToken({\n          trigger: finalOptions.trigger,\n          text: finalText,\n          acceptTrailingSpaces: false,\n          isCommand: true\n        });\n        const newSearchTriggerred = triggerWithToken && triggerWithToken.length === finalOptions.minChars;\n        if (newSearchTriggerred) {\n          searchSource.resetStateAndActivate();\n        }\n        const triggerWasRemoved = !triggerWithToken || triggerWithToken.length < finalOptions.minChars;\n        if (triggerWasRemoved) {\n          const hasStaleSuggestions = state.suggestions?.trigger === finalOptions.trigger;\n          const newState = {\n            ...state\n          };\n          if (hasStaleSuggestions) {\n            delete newState.suggestions;\n          }\n          return next(newState);\n        }\n        return complete({\n          ...state,\n          command: null,\n          suggestions: {\n            query: triggerWithToken.slice(1),\n            searchSource,\n            trigger: finalOptions.trigger\n          }\n        });\n      },\n      onSuggestionItemSelect: ({\n        state,\n        next,\n        forward\n      }) => {\n        const {\n          selectedSuggestion\n        } = state.change ?? {};\n        if (!selectedSuggestion || state.suggestions?.trigger !== finalOptions.trigger) return forward();\n        searchSource.resetStateAndActivate();\n        return next({\n          ...state,\n          ...insertItemWithTrigger({\n            insertText: `/${selectedSuggestion.name} `,\n            selection: state.selection,\n            text: state.text,\n            trigger: finalOptions.trigger\n          }),\n          command: selectedSuggestion,\n          suggestions: void 0\n        });\n      }\n    }\n  };\n};\n\n// src/messageComposer/middleware/textComposer/commandStringExtraction.ts\nvar stripCommandFromText = (text, commandName) => text.replace(new RegExp(`^${escapeRegExp(`/${commandName}`)}\\\\s*`), \"\");\nvar createCommandStringExtractionMiddleware = () => ({\n  handlers: {\n    onChange: ({\n      complete,\n      forward,\n      state\n    }) => {\n      const {\n        command\n      } = state;\n      if (!command?.name) {\n        return forward();\n      }\n      const newText = stripCommandFromText(state.text, command.name);\n      return complete({\n        ...state,\n        selection: {\n          end: newText.length,\n          start: newText.length\n        },\n        text: newText\n      });\n    },\n    onSuggestionItemSelect: ({\n      next,\n      forward,\n      state\n    }) => {\n      const {\n        command\n      } = state;\n      if (!command) {\n        return forward();\n      }\n      const triggerWithCommand = `/${command?.name} `;\n      const newText = state.text.slice(triggerWithCommand.length);\n      return next({\n        ...state,\n        selection: {\n          end: newText.length,\n          start: newText.length\n        },\n        text: newText\n      });\n    }\n  },\n  id: \"stream-io/text-composer/command-string-extraction\"\n});\n\n// src/messageComposer/middleware/textComposer/mentions.ts\nvar accentsMap = {\n  a: \"\\xE1|\\xE0|\\xE3|\\xE2|\\xC0|\\xC1|\\xC3|\\xC2\",\n  c: \"\\xE7|\\xC7\",\n  e: \"\\xE9|\\xE8|\\xEA|\\xC9|\\xC8|\\xCA\",\n  i: \"\\xED|\\xEC|\\xEE|\\xCD|\\xCC|\\xCE\",\n  n: \"\\xF1|\\xD1\",\n  o: \"\\xF3|\\xF2|\\xF4|\\u0151|\\xF5|\\xD3|\\xD2|\\xD4|\\xD5\",\n  u: \"\\xFA|\\xF9|\\xFB|\\xFC|\\xDA|\\xD9|\\xDB|\\xDC\"\n};\nvar removeDiacritics = text => {\n  if (!text) return \"\";\n  return Object.keys(accentsMap).reduce((acc, current) => acc.replace(new RegExp(accentsMap[current], \"g\"), current), text);\n};\nvar calculateLevenshtein = (query, name) => {\n  if (query.length === 0) return name.length;\n  if (name.length === 0) return query.length;\n  const matrix = [];\n  let i;\n  for (i = 0; i <= name.length; i++) {\n    matrix[i] = [i];\n  }\n  let j;\n  for (j = 0; j <= query.length; j++) {\n    matrix[0][j] = j;\n  }\n  for (i = 1; i <= name.length; i++) {\n    for (j = 1; j <= query.length; j++) {\n      if (name.charAt(i - 1) === query.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1,\n        // substitution\n        Math.min(matrix[i][j - 1] + 1,\n        // insertion\n        matrix[i - 1][j] + 1));\n      }\n    }\n  }\n  return matrix[name.length][query.length];\n};\nvar MentionsSearchSource = class extends BaseSearchSource {\n  constructor(channel, options) {\n    const {\n      mentionAllAppUsers,\n      textComposerText,\n      transliterate,\n      ...restOptions\n    } = options || {};\n    super(restOptions);\n    this.type = \"mentions\";\n    this.canExecuteQuery = newSearchString => {\n      const hasNewSearchQuery = typeof newSearchString !== \"undefined\";\n      return this.isActive && !this.isLoading && (hasNewSearchQuery || this.hasNext);\n    };\n    this.transliterate = text => text;\n    this.getMembersAndWatchers = () => {\n      const memberUsers = Object.values(this.channel.state.members ?? {}).map(({\n        user\n      }) => user);\n      const watcherUsers = Object.values(this.channel.state.watchers ?? {});\n      const users = [...memberUsers, ...watcherUsers];\n      const uniqueUsers = {};\n      users.forEach(user => {\n        if (user && !uniqueUsers[user.id]) {\n          uniqueUsers[user.id] = user;\n        }\n      });\n      return Object.values(uniqueUsers);\n    };\n    this.searchMembersLocally = searchQuery => {\n      const {\n        textComposerText\n      } = this.config;\n      if (!textComposerText) return [];\n      return this.getMembersAndWatchers().filter(user => {\n        if (user.id === this.client.userID) return false;\n        if (!searchQuery) return true;\n        const updatedId = this.transliterate(removeDiacritics(user.id)).toLowerCase();\n        const updatedName = this.transliterate(removeDiacritics(user.name)).toLowerCase();\n        const updatedQuery = this.transliterate(removeDiacritics(searchQuery)).toLowerCase();\n        const maxDistance = 3;\n        const lastDigits = textComposerText.slice(-(maxDistance + 1)).includes(\"@\");\n        if (updatedName) {\n          const levenshtein2 = calculateLevenshtein(updatedQuery, updatedName);\n          if (updatedName.includes(updatedQuery) || levenshtein2 <= maxDistance && lastDigits) {\n            return true;\n          }\n        }\n        const levenshtein = calculateLevenshtein(updatedQuery, updatedId);\n        return updatedId.includes(updatedQuery) || levenshtein <= maxDistance && lastDigits;\n      }).sort((a, b) => {\n        if (!this.memberSort) return (a.name || \"\").localeCompare(b.name || \"\");\n        for (const [field, direction] of Object.entries(this.memberSort)) {\n          const aValue = a[field];\n          const bValue = b[field];\n          if (aValue === bValue) continue;\n          return direction === 1 ? String(aValue || \"\").localeCompare(String(bValue || \"\")) : String(bValue || \"\").localeCompare(String(aValue || \"\"));\n        }\n        return 0;\n      });\n    };\n    this.prepareQueryUsersParams = searchQuery => ({\n      filters: {\n        $or: [{\n          id: {\n            $autocomplete: searchQuery\n          }\n        }, {\n          name: {\n            $autocomplete: searchQuery\n          }\n        }],\n        ...this.userFilters\n      },\n      sort: this.userSort ?? [{\n        name: 1\n      }, {\n        id: 1\n      }],\n      // todo: document the change - the sort is overridden, not merged\n      options: {\n        ...this.searchOptions,\n        limit: this.pageSize,\n        offset: this.offset\n      }\n    });\n    this.prepareQueryMembersParams = searchQuery => {\n      const maxSortParamsCount = 1;\n      let sort = [{\n        user_id: 1\n      }];\n      if (!this.memberSort) {\n        sort = [{\n          user_id: 1\n        }];\n      } else if (Array.isArray(this.memberSort)) {\n        sort = this.memberSort[0];\n      } else if (Object.keys(this.memberSort).length === maxSortParamsCount) {\n        sort = this.memberSort;\n      }\n      return {\n        // todo: document the change - the filter is overridden, not merged\n        filters: this.memberFilters ?? {\n          name: {\n            $autocomplete: searchQuery\n          }\n        },\n        // autocomplete possible only for name\n        sort,\n        options: {\n          ...this.searchOptions,\n          limit: this.pageSize,\n          offset: this.offset\n        }\n      };\n    };\n    this.queryUsers = async searchQuery => {\n      const {\n        filters,\n        sort,\n        options\n      } = this.prepareQueryUsersParams(searchQuery);\n      const {\n        users\n      } = await this.client.queryUsers(filters, sort, options);\n      return users;\n    };\n    this.queryMembers = async searchQuery => {\n      const {\n        filters,\n        sort,\n        options\n      } = this.prepareQueryMembersParams(searchQuery);\n      const response = await this.channel.queryMembers(filters, sort, options);\n      return response.members.map(member => member.user);\n    };\n    this.filterMutes = data => {\n      const {\n        textComposerText\n      } = this.config;\n      if (!textComposerText) return [];\n      const {\n        mutedUsers\n      } = this.client;\n      if (textComposerText.includes(\"/unmute\") && !mutedUsers.length) {\n        return [];\n      }\n      if (!mutedUsers.length) return data;\n      if (textComposerText.includes(\"/unmute\")) {\n        return data.filter(suggestion => mutedUsers.some(mute => mute.target.id === suggestion.id));\n      }\n      return data.filter(suggestion => mutedUsers.every(mute => mute.target.id !== suggestion.id));\n    };\n    this.client = channel.getClient();\n    this.channel = channel;\n    this.config = {\n      mentionAllAppUsers,\n      textComposerText\n    };\n    if (transliterate) {\n      this.transliterate = transliterate;\n    }\n  }\n  get allMembersLoadedWithInitialChannelQuery() {\n    const countLoadedMembers = Object.keys(this.channel.state.members || {}).length;\n    return countLoadedMembers < MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY;\n  }\n  getStateBeforeFirstQuery(newSearchString) {\n    const newState = super.getStateBeforeFirstQuery(newSearchString);\n    const {\n      items\n    } = this.state.getLatestValue();\n    return {\n      ...newState,\n      items\n      // preserve items to avoid flickering\n    };\n  }\n  async query(searchQuery) {\n    let users;\n    const shouldSearchLocally = this.allMembersLoadedWithInitialChannelQuery || !searchQuery;\n    if (this.config.mentionAllAppUsers) {\n      users = await this.queryUsers(searchQuery);\n    } else if (shouldSearchLocally) {\n      users = this.searchMembersLocally(searchQuery);\n    } else {\n      users = await this.queryMembers(searchQuery);\n    }\n    return {\n      items: users.map(user => ({\n        ...user,\n        ...getTokenizedSuggestionDisplayName({\n          displayName: user.name || user.id,\n          searchToken: this.searchQuery\n        })\n      }))\n    };\n  }\n  filterQueryResults(items) {\n    return this.filterMutes(items);\n  }\n};\nvar DEFAULT_OPTIONS2 = {\n  minChars: 1,\n  trigger: \"@\"\n};\nvar userSuggestionToUserResponse = suggestion => {\n  const {\n    tokenizedDisplayName,\n    ...userResponse\n  } = suggestion;\n  return userResponse;\n};\nvar createMentionsMiddleware = (channel, options) => {\n  const finalOptions = mergeWith(DEFAULT_OPTIONS2, options ?? {});\n  let searchSource;\n  if (options?.searchSource) {\n    searchSource = options.searchSource;\n    searchSource.resetState();\n  } else {\n    searchSource = new MentionsSearchSource(channel);\n  }\n  searchSource.activate();\n  return {\n    id: \"stream-io/text-composer/mentions-middleware\",\n    handlers: {\n      onChange: ({\n        state,\n        next,\n        complete,\n        forward\n      }) => {\n        if (!state.selection) return forward();\n        const triggerWithToken = getTriggerCharWithToken({\n          trigger: finalOptions.trigger,\n          text: state.text.slice(0, state.selection.end)\n        });\n        const newSearchTriggered = triggerWithToken && triggerWithToken.length === finalOptions.minChars;\n        if (newSearchTriggered) {\n          searchSource.resetStateAndActivate();\n        }\n        const triggerWasRemoved = !triggerWithToken || triggerWithToken.length < finalOptions.minChars;\n        if (triggerWasRemoved) {\n          const hasStaleSuggestions = state.suggestions?.trigger === finalOptions.trigger;\n          const newState = {\n            ...state\n          };\n          if (hasStaleSuggestions) {\n            delete newState.suggestions;\n          }\n          return next(newState);\n        }\n        searchSource.config.textComposerText = state.text;\n        return complete({\n          ...state,\n          suggestions: {\n            query: triggerWithToken.slice(1),\n            searchSource,\n            trigger: finalOptions.trigger\n          }\n        });\n      },\n      onSuggestionItemSelect: ({\n        state,\n        complete,\n        forward\n      }) => {\n        const {\n          selectedSuggestion\n        } = state.change ?? {};\n        if (!selectedSuggestion || state.suggestions?.trigger !== finalOptions.trigger) return forward();\n        searchSource.resetStateAndActivate();\n        return complete({\n          ...state,\n          ...insertItemWithTrigger({\n            insertText: `@${selectedSuggestion.name || selectedSuggestion.id} `,\n            selection: state.selection,\n            text: state.text,\n            trigger: finalOptions.trigger\n          }),\n          mentionedUsers: state.mentionedUsers.concat(userSuggestionToUserResponse(selectedSuggestion)),\n          suggestions: void 0\n        });\n      }\n    }\n  };\n};\n\n// src/messageComposer/middleware/textComposer/validation.ts\nvar createTextComposerPreValidationMiddleware = composer => ({\n  id: \"stream-io/text-composer/pre-validation-middleware\",\n  handlers: {\n    onChange: ({\n      state,\n      next,\n      forward\n    }) => {\n      const {\n        maxLengthOnEdit\n      } = composer.config.text ?? {};\n      if (typeof maxLengthOnEdit === \"number\" && state.text.length > maxLengthOnEdit) {\n        state.text = state.text.slice(0, maxLengthOnEdit);\n        return next({\n          ...state,\n          text: state.text\n        });\n      }\n      return forward();\n    },\n    onSuggestionItemSelect: ({\n      forward\n    }) => forward()\n  }\n});\n\n// src/messageComposer/middleware/textComposer/TextComposerMiddlewareExecutor.ts\nvar TextComposerMiddlewareExecutor = class extends MiddlewareExecutor {\n  constructor({\n    composer\n  }) {\n    super();\n    this.use([createTextComposerPreValidationMiddleware(composer), createMentionsMiddleware(composer.channel), createCommandsMiddleware(composer.channel)]);\n  }\n  async execute({\n    eventName,\n    initialValue: initialState\n  }) {\n    const result = await this.executeMiddlewareChain({\n      eventName,\n      initialValue: initialState\n    });\n    const {\n      query,\n      searchSource\n    } = result.state.suggestions ?? {};\n    searchSource?.search(query)?.catch(console.error);\n    return result;\n  }\n};\n\n// src/messageComposer/textComposer.ts\nvar textIsEmpty = text => {\n  const trimmedText = text.trim();\n  return trimmedText === \"\" || trimmedText === \">\" || trimmedText === \"``````\" || trimmedText === \"``\" || trimmedText === \"**\" || trimmedText === \"____\" || trimmedText === \"__\" || trimmedText === \"****\";\n};\nvar initState4 = ({\n  composer,\n  message\n}) => {\n  if (!message) {\n    const text2 = composer.config.text.defaultValue ?? \"\";\n    return {\n      command: null,\n      mentionedUsers: [],\n      text: text2,\n      selection: {\n        start: text2.length,\n        end: text2.length\n      }\n    };\n  }\n  const text = message.text ?? \"\";\n  return {\n    mentionedUsers: (message.mentioned_users ?? []).map(item => typeof item === \"string\" ? {\n      id: item\n    } : item),\n    text,\n    selection: {\n      start: text.length,\n      end: text.length\n    }\n  };\n};\nvar TextComposer = class {\n  constructor({\n    composer,\n    message\n  }) {\n    this.initState = ({\n      message\n    } = {}) => {\n      this.state.next(initState4({\n        composer: this.composer,\n        message\n      }));\n    };\n    this.upsertMentionedUser = user => {\n      const mentionedUsers = [...this.mentionedUsers];\n      const existingUserIndex = mentionedUsers.findIndex(u => u.id === user.id);\n      if (existingUserIndex >= 0) {\n        mentionedUsers.splice(existingUserIndex, 1, user);\n        this.state.partialNext({\n          mentionedUsers\n        });\n      } else {\n        mentionedUsers.push(user);\n        this.state.partialNext({\n          mentionedUsers\n        });\n      }\n    };\n    this.getMentionedUser = userId => this.state.getLatestValue().mentionedUsers.find(u => u.id === userId);\n    this.removeMentionedUser = userId => {\n      const existingUserIndex = this.mentionedUsers.findIndex(u => u.id === userId);\n      if (existingUserIndex === -1) return;\n      const mentionedUsers = [...this.mentionedUsers];\n      mentionedUsers.splice(existingUserIndex, 1);\n      this.state.partialNext({\n        mentionedUsers\n      });\n    };\n    this.setCommand = command => {\n      if (command?.name === this.command?.name) return;\n      this.state.partialNext({\n        command\n      });\n    };\n    this.setText = text => {\n      if (!this.enabled || text === this.text) return;\n      this.state.partialNext({\n        text\n      });\n    };\n    this.setSelection = selection => {\n      const selectionChanged = selection.start !== this.selection.start || selection.end !== this.selection.end;\n      if (!this.enabled || !selectionChanged) return;\n      this.state.partialNext({\n        selection\n      });\n    };\n    this.insertText = async ({\n      text,\n      selection\n    }) => {\n      if (!this.enabled) return;\n      const finalSelection = selection ?? this.selection;\n      const {\n        maxLengthOnEdit\n      } = this.composer.config.text ?? {};\n      const currentText = this.text;\n      const textBeforeTrim = [currentText.slice(0, finalSelection.start), text, currentText.slice(finalSelection.end)].join(\"\");\n      const finalText = textBeforeTrim.slice(0, typeof maxLengthOnEdit === \"number\" ? maxLengthOnEdit : textBeforeTrim.length);\n      const expectedCursorPosition = currentText.slice(0, finalSelection.start).length + text.length;\n      const cursorPosition = expectedCursorPosition >= finalText.length ? finalText.length : currentText.slice(0, expectedCursorPosition).length;\n      await this.handleChange({\n        text: finalText,\n        selection: {\n          start: cursorPosition,\n          end: cursorPosition\n        }\n      });\n    };\n    this.wrapSelection = ({\n      head = \"\",\n      selection,\n      tail = \"\"\n    }) => {\n      if (!this.enabled) return;\n      const currentSelection = selection ?? this.selection;\n      const prependedText = this.text.slice(0, currentSelection.start);\n      const selectedText = this.text.slice(currentSelection.start, currentSelection.end);\n      const appendedText = this.text.slice(currentSelection.end);\n      const finalSelection = {\n        start: prependedText.length + head.length,\n        end: prependedText.length + head.length + selectedText.length\n      };\n      this.state.partialNext({\n        text: [prependedText, head, selectedText, tail, appendedText].join(\"\"),\n        selection: finalSelection\n      });\n    };\n    this.setSuggestions = suggestions => {\n      this.state.partialNext({\n        suggestions\n      });\n    };\n    this.closeSuggestions = () => {\n      const {\n        suggestions\n      } = this.state.getLatestValue();\n      if (!suggestions) return;\n      this.state.partialNext({\n        suggestions: void 0\n      });\n    };\n    // --- END STATE API ---\n    // --- START TEXT PROCESSING ----\n    this.handleChange = async ({\n      text,\n      selection\n    }) => {\n      if (!this.enabled) return;\n      const output = await this.middlewareExecutor.execute({\n        eventName: \"onChange\",\n        initialValue: {\n          ...this.state.getLatestValue(),\n          text,\n          selection\n        }\n      });\n      if (output.status === \"discard\") return;\n      this.state.next(output.state);\n      if (this.config.publishTypingEvents && text) {\n        logChatPromiseExecution(this.channel.keystroke(this.composer.threadId ?? void 0), \"start typing event\");\n      }\n    };\n    // todo: document how to register own middleware handler to simulate onSelectUser prop\n    this.handleSelect = async target => {\n      if (!this.enabled) return;\n      const output = await this.middlewareExecutor.execute({\n        eventName: \"onSuggestionItemSelect\",\n        initialValue: {\n          ...this.state.getLatestValue(),\n          change: {\n            selectedSuggestion: target\n          }\n        }\n      });\n      if (output?.status === \"discard\") return;\n      this.state.next(output.state);\n    };\n    this.composer = composer;\n    this.state = new StateStore(initState4({\n      composer,\n      message\n    }));\n    this.middlewareExecutor = new TextComposerMiddlewareExecutor({\n      composer\n    });\n  }\n  get channel() {\n    return this.composer.channel;\n  }\n  get config() {\n    return this.composer.config.text;\n  }\n  get enabled() {\n    return this.composer.config.text.enabled;\n  }\n  set enabled(enabled) {\n    if (enabled === this.enabled) return;\n    this.composer.updateConfig({\n      text: {\n        enabled\n      }\n    });\n  }\n  get defaultValue() {\n    return this.composer.config.text.defaultValue;\n  }\n  set defaultValue(defaultValue) {\n    if (defaultValue === this.defaultValue) return;\n    this.composer.updateConfig({\n      text: {\n        defaultValue\n      }\n    });\n  }\n  get maxLengthOnEdit() {\n    return this.composer.config.text.maxLengthOnEdit;\n  }\n  set maxLengthOnEdit(maxLengthOnEdit) {\n    if (maxLengthOnEdit === this.maxLengthOnEdit) return;\n    this.composer.updateConfig({\n      text: {\n        maxLengthOnEdit\n      }\n    });\n  }\n  get maxLengthOnSend() {\n    return this.composer.config.text.maxLengthOnSend;\n  }\n  set maxLengthOnSend(maxLengthOnSend) {\n    if (maxLengthOnSend === this.maxLengthOnSend) return;\n    this.composer.updateConfig({\n      text: {\n        maxLengthOnSend\n      }\n    });\n  }\n  get publishTypingEvents() {\n    return this.composer.config.text.publishTypingEvents;\n  }\n  set publishTypingEvents(publishTypingEvents) {\n    if (publishTypingEvents === this.publishTypingEvents) return;\n    this.composer.updateConfig({\n      text: {\n        publishTypingEvents\n      }\n    });\n  }\n  // --- START STATE API ---\n  get command() {\n    return this.state.getLatestValue().command;\n  }\n  get mentionedUsers() {\n    return this.state.getLatestValue().mentionedUsers;\n  }\n  get selection() {\n    return this.state.getLatestValue().selection;\n  }\n  get suggestions() {\n    return this.state.getLatestValue().suggestions;\n  }\n  get text() {\n    return this.state.getLatestValue().text;\n  }\n  get textIsEmpty() {\n    return textIsEmpty(this.text);\n  }\n  setMentionedUsers(users) {\n    this.state.partialNext({\n      mentionedUsers: users\n    });\n  }\n  clearCommand() {\n    this.state.partialNext({\n      command: null\n    });\n  }\n  // --- END TEXT PROCESSING ----\n};\n\n// src/utils/WithSubscriptions.ts\nvar _WithSubscriptions = class _WithSubscriptions {\n  constructor() {\n    this.unsubscribeFunctions = /* @__PURE__ */new Set();\n    this.refCount = 0;\n  }\n  /**\n   * Returns a boolean, provides information of whether `registerSubscriptions`\n   * method has already been called for this instance.\n   */\n  get hasSubscriptions() {\n    return this.unsubscribeFunctions.size > 0;\n  }\n  addUnsubscribeFunction(unsubscribeFunction) {\n    this.unsubscribeFunctions.add(unsubscribeFunction);\n  }\n  /**\n   * Increments `refCount` by one and returns new value.\n   */\n  incrementRefCount() {\n    return ++this.refCount;\n  }\n  /**\n   * If you re-declare `unregisterSubscriptions` method within your class\n   * make sure to run the original too.\n   *\n   * @example\n   * ```ts\n   * class T extends WithSubscriptions {\n   *  ...\n   *  public unregisterSubscriptions = () => {\n   *    this.customThing();\n   *    return super.unregisterSubscriptions();\n   *  }\n   * }\n   * ```\n   */\n  unregisterSubscriptions() {\n    if (this.refCount > 1) {\n      this.refCount--;\n      return _WithSubscriptions.symbol;\n    }\n    this.unsubscribeFunctions.forEach(unsubscribe => unsubscribe());\n    this.unsubscribeFunctions.clear();\n    this.refCount = 0;\n    return _WithSubscriptions.symbol;\n  }\n};\n/**\n * Workaround for the missing TS keyword - ensures that inheritants\n * overriding `unregisterSubscriptions` call the base method and return\n * its unique symbol value.\n */\n_WithSubscriptions.symbol = Symbol(_WithSubscriptions.name);\nvar WithSubscriptions = _WithSubscriptions;\n\n// src/thread.ts\nvar DEFAULT_PAGE_LIMIT = 50;\nvar DEFAULT_SORT = [{\n  created_at: -1\n}];\nvar MARK_AS_READ_THROTTLE_TIMEOUT = 1e3;\nvar THREAD_RESPONSE_RESERVED_KEYS = {\n  active_participant_count: true,\n  channel: true,\n  channel_cid: true,\n  created_at: true,\n  created_by: true,\n  created_by_user_id: true,\n  deleted_at: true,\n  draft: true,\n  last_message_at: true,\n  latest_replies: true,\n  parent_message: true,\n  parent_message_id: true,\n  participant_count: true,\n  read: true,\n  reply_count: true,\n  thread_participants: true,\n  title: true,\n  updated_at: true\n};\nvar constructCustomDataObject = threadData => {\n  const custom = {};\n  for (const key in threadData) {\n    if (THREAD_RESPONSE_RESERVED_KEYS[key]) {\n      continue;\n    }\n    const customKey = key;\n    custom[customKey] = threadData[customKey];\n  }\n  return custom;\n};\nvar Thread = class extends WithSubscriptions {\n  constructor({\n    client,\n    threadData\n  }) {\n    super();\n    this.failedRepliesMap = /* @__PURE__ */new Map();\n    this.activate = () => {\n      this.state.partialNext({\n        active: true\n      });\n    };\n    this.deactivate = () => {\n      this.state.partialNext({\n        active: false\n      });\n    };\n    this.reload = async () => {\n      if (this.state.getLatestValue().isLoading) {\n        return;\n      }\n      this.state.partialNext({\n        isLoading: true\n      });\n      try {\n        const thread = await this.client.getThread(this.id, {\n          watch: true\n        });\n        this.hydrateState(thread);\n      } finally {\n        this.state.partialNext({\n          isLoading: false\n        });\n      }\n    };\n    this.hydrateState = thread => {\n      if (thread === this) {\n        return;\n      }\n      if (thread.id !== this.id) {\n        throw new Error(\"Cannot hydrate thread's state using thread with different threadId\");\n      }\n      const {\n        createdAt,\n        custom,\n        title,\n        deletedAt,\n        parentMessage,\n        participants,\n        read,\n        replyCount,\n        replies,\n        updatedAt\n      } = thread.state.getLatestValue();\n      const pendingReplies = Array.from(this.failedRepliesMap.values());\n      this.state.partialNext({\n        title,\n        createdAt,\n        custom,\n        deletedAt,\n        parentMessage,\n        participants,\n        read,\n        replyCount,\n        replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,\n        updatedAt,\n        isStateStale: false\n      });\n    };\n    this.registerSubscriptions = () => {\n      if (this.hasSubscriptions) {\n        return;\n      }\n      this.addUnsubscribeFunction(this.subscribeThreadUpdated());\n      this.addUnsubscribeFunction(this.subscribeMarkActiveThreadRead());\n      this.addUnsubscribeFunction(this.subscribeReloadActiveStaleThread());\n      this.addUnsubscribeFunction(this.subscribeMarkThreadStale());\n      this.addUnsubscribeFunction(this.subscribeNewReplies());\n      this.addUnsubscribeFunction(this.subscribeRepliesRead());\n      this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n      this.addUnsubscribeFunction(this.subscribeMessageUpdated());\n    };\n    this.subscribeThreadUpdated = () => this.client.on(\"thread.updated\", event => {\n      if (!event.thread || event.thread.parent_message_id !== this.id) {\n        return;\n      }\n      const threadData = event.thread;\n      this.state.partialNext({\n        title: threadData.title,\n        updatedAt: new Date(threadData.updated_at),\n        deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n        // TODO: use threadData.custom once we move to API v2\n        custom: constructCustomDataObject(threadData)\n      });\n    }).unsubscribe;\n    this.subscribeMarkActiveThreadRead = () => this.state.subscribeWithSelector(nextValue => ({\n      active: nextValue.active,\n      unreadMessageCount: ownUnreadCountSelector(this.client.userID)(nextValue)\n    }), ({\n      active,\n      unreadMessageCount\n    }) => {\n      if (!active || !unreadMessageCount) return;\n      this.throttledMarkAsRead();\n    });\n    this.subscribeReloadActiveStaleThread = () => this.state.subscribeWithSelector(nextValue => ({\n      active: nextValue.active,\n      isStateStale: nextValue.isStateStale\n    }), ({\n      active,\n      isStateStale\n    }) => {\n      if (active && isStateStale) {\n        this.reload();\n      }\n    });\n    this.subscribeMarkThreadStale = () => this.client.on(\"user.watching.stop\", event => {\n      const {\n        channel\n      } = this.state.getLatestValue();\n      if (!this.client.userID || this.client.userID !== event.user?.id || event.channel?.cid !== channel.cid) {\n        return;\n      }\n      this.state.partialNext({\n        isStateStale: true\n      });\n    }).unsubscribe;\n    this.subscribeNewReplies = () => this.client.on(\"message.new\", event => {\n      if (!this.client.userID || event.message?.parent_id !== this.id) {\n        return;\n      }\n      const isOwnMessage = event.message.user?.id === this.client.userID;\n      const {\n        active,\n        read\n      } = this.state.getLatestValue();\n      this.upsertReplyLocally({\n        message: event.message,\n        // Message from current user could have been added optimistically,\n        // so the actual timestamp might differ in the event\n        timestampChanged: isOwnMessage\n      });\n      if (active) {\n        this.throttledMarkAsRead();\n      }\n      const nextRead = {};\n      for (const userId of Object.keys(read)) {\n        const userRead = read[userId];\n        if (userRead) {\n          let nextUserRead = userRead;\n          if (userId === event.user?.id) {\n            nextUserRead = {\n              ...nextUserRead,\n              lastReadAt: event.created_at ? new Date(event.created_at) : /* @__PURE__ */new Date(),\n              user: event.user,\n              unreadMessageCount: 0\n            };\n          } else if (active && userId === this.client.userID) {} else {\n            nextUserRead = {\n              ...nextUserRead,\n              unreadMessageCount: userRead.unreadMessageCount + 1\n            };\n          }\n          nextRead[userId] = nextUserRead;\n        }\n      }\n      this.state.partialNext({\n        read: nextRead\n      });\n    }).unsubscribe;\n    this.subscribeRepliesRead = () => this.client.on(\"message.read\", event => {\n      if (!event.user || !event.created_at || !event.thread) return;\n      if (event.thread.parent_message_id !== this.id) return;\n      const userId = event.user.id;\n      const createdAt = event.created_at;\n      const user = event.user;\n      this.state.next(current => ({\n        ...current,\n        read: {\n          ...current.read,\n          [userId]: {\n            lastReadAt: new Date(createdAt),\n            user,\n            lastReadMessageId: event.last_read_message_id,\n            unreadMessageCount: 0\n          }\n        }\n      }));\n    }).unsubscribe;\n    this.subscribeMessageDeleted = () => this.client.on(\"message.deleted\", event => {\n      if (!event.message) return;\n      if (event.message.parent_id === this.id) {\n        if (event.hard_delete) {\n          this.deleteReplyLocally({\n            message: event.message\n          });\n        } else {\n          this.upsertReplyLocally({\n            message: event.message\n          });\n        }\n      }\n      if (event.message.id === this.id) {\n        this.updateParentMessageLocally({\n          message: event.message\n        });\n      }\n    }).unsubscribe;\n    this.subscribeMessageUpdated = () => {\n      const eventTypes = [\"message.updated\", \"reaction.new\", \"reaction.deleted\", \"reaction.updated\"];\n      const unsubscribeFunctions = eventTypes.map(eventType => this.client.on(eventType, event => {\n        if (event.message) {\n          this.updateParentMessageOrReplyLocally(event.message);\n        }\n      }).unsubscribe);\n      return () => unsubscribeFunctions.forEach(unsubscribe => unsubscribe());\n    };\n    this.unregisterSubscriptions = () => {\n      const symbol = super.unregisterSubscriptions();\n      this.state.partialNext({\n        isStateStale: true\n      });\n      return symbol;\n    };\n    this.deleteReplyLocally = ({\n      message\n    }) => {\n      const {\n        replies\n      } = this.state.getLatestValue();\n      const index = findIndexInSortedArray({\n        needle: formatMessage(message),\n        sortedArray: replies,\n        sortDirection: \"ascending\",\n        selectValueToCompare: reply => reply.created_at.getTime(),\n        selectKey: reply => reply.id\n      });\n      if (replies[index]?.id !== message.id) {\n        return;\n      }\n      const updatedReplies = [...replies];\n      updatedReplies.splice(index, 1);\n      this.state.partialNext({\n        replies: updatedReplies\n      });\n    };\n    this.upsertReplyLocally = ({\n      message,\n      timestampChanged = false\n    }) => {\n      if (message.parent_id !== this.id) {\n        throw new Error(\"Reply does not belong to this thread\");\n      }\n      const formattedMessage = formatMessage(message);\n      if (message.status === \"failed\") {\n        this.failedRepliesMap.set(formattedMessage.id, formattedMessage);\n      } else if (this.failedRepliesMap.has(message.id)) {\n        this.failedRepliesMap.delete(message.id);\n      }\n      this.state.next(current => ({\n        ...current,\n        replies: addToMessageList(current.replies, formattedMessage, timestampChanged)\n      }));\n    };\n    this.updateParentMessageLocally = ({\n      message\n    }) => {\n      if (message.id !== this.id) {\n        throw new Error(\"Message does not belong to this thread\");\n      }\n      this.state.next(current => {\n        const formattedMessage = formatMessage(message);\n        return {\n          ...current,\n          deletedAt: formattedMessage.deleted_at,\n          parentMessage: formattedMessage,\n          replyCount: message.reply_count ?? current.replyCount\n        };\n      });\n    };\n    this.updateParentMessageOrReplyLocally = message => {\n      if (message.parent_id === this.id) {\n        this.upsertReplyLocally({\n          message\n        });\n      }\n      if (!message.parent_id && message.id === this.id) {\n        this.updateParentMessageLocally({\n          message\n        });\n      }\n    };\n    this.markAsRead = async ({\n      force = false\n    } = {}) => {\n      if (this.ownUnreadCount === 0 && !force) {\n        return null;\n      }\n      return await this.channel.markRead({\n        thread_id: this.id\n      });\n    };\n    this.throttledMarkAsRead = throttle(() => this.markAsRead(), MARK_AS_READ_THROTTLE_TIMEOUT, {\n      trailing: true\n    });\n    this.queryReplies = ({\n      limit = DEFAULT_PAGE_LIMIT,\n      sort = DEFAULT_SORT,\n      ...otherOptions\n    } = {}) => this.channel.getReplies(this.id, {\n      limit,\n      ...otherOptions\n    }, sort);\n    this.loadNextPage = ({\n      limit = DEFAULT_PAGE_LIMIT\n    } = {}) => this.loadPage(limit);\n    this.loadPrevPage = ({\n      limit = DEFAULT_PAGE_LIMIT\n    } = {}) => this.loadPage(-limit);\n    this.loadPage = async count => {\n      const {\n        pagination\n      } = this.state.getLatestValue();\n      const [loadingKey, cursorKey, insertionMethodKey] = count > 0 ? [\"isLoadingNext\", \"nextCursor\", \"push\"] : [\"isLoadingPrev\", \"prevCursor\", \"unshift\"];\n      if (pagination[loadingKey] || pagination[cursorKey] === null) return;\n      const queryOptions = {\n        [count > 0 ? \"id_gt\" : \"id_lt\"]: pagination[cursorKey]\n      };\n      const limit = Math.abs(count);\n      this.state.partialNext({\n        pagination: {\n          ...pagination,\n          [loadingKey]: true\n        }\n      });\n      try {\n        const data = await this.queryReplies({\n          ...queryOptions,\n          limit\n        });\n        const replies = data.messages.map(formatMessage);\n        const maybeNextCursor = replies.at(count > 0 ? -1 : 0)?.id ?? null;\n        this.state.next(current => {\n          let nextReplies = current.replies;\n          if (replies.length > 0) {\n            nextReplies = [...current.replies];\n            nextReplies[insertionMethodKey](...replies);\n          }\n          return {\n            ...current,\n            replies: nextReplies,\n            pagination: {\n              ...current.pagination,\n              [cursorKey]: data.messages.length < limit ? null : maybeNextCursor,\n              [loadingKey]: false\n            }\n          };\n        });\n      } catch (error) {\n        this.client.logger(\"error\", error.message);\n        this.state.next(current => ({\n          ...current,\n          pagination: {\n            ...current.pagination,\n            [loadingKey]: false\n          }\n        }));\n      }\n    };\n    const channel = client.channel(threadData.channel.type, threadData.channel.id, {\n      // @ts-expect-error name is a \"custom\" property\n      name: threadData.channel.name\n    });\n    channel._hydrateMembers({\n      members: threadData.channel.members ?? [],\n      overrideCurrentState: false\n    });\n    const placeholderReadResponse = client.userID ? [{\n      user: {\n        id: client.userID\n      },\n      unread_messages: 0,\n      last_read: (/* @__PURE__ */new Date()).toISOString()\n    }] : [];\n    this.state = new StateStore({\n      // local only\n      active: false,\n      isLoading: false,\n      isStateStale: false,\n      // 99.9% should never change\n      channel,\n      createdAt: new Date(threadData.created_at),\n      // rest\n      deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n      pagination: repliesPaginationFromInitialThread(threadData),\n      parentMessage: formatMessage(threadData.parent_message),\n      participants: threadData.thread_participants,\n      read: formatReadState(!threadData.read || threadData.read.length === 0 ? placeholderReadResponse : threadData.read),\n      replies: threadData.latest_replies.map(formatMessage),\n      replyCount: threadData.reply_count ?? 0,\n      updatedAt: threadData.updated_at ? new Date(threadData.updated_at) : null,\n      title: threadData.title,\n      custom: constructCustomDataObject(threadData)\n    });\n    this.id = threadData.parent_message_id;\n    this.client = client;\n    this.messageComposer = new MessageComposer({\n      client,\n      composition: threadData.draft,\n      compositionContext: this\n    });\n  }\n  get channel() {\n    return this.state.getLatestValue().channel;\n  }\n  get hasStaleState() {\n    return this.state.getLatestValue().isStateStale;\n  }\n  get ownUnreadCount() {\n    return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());\n  }\n};\nvar formatReadState = read => read.reduce((state, userRead) => {\n  state[userRead.user.id] = {\n    user: userRead.user,\n    lastReadMessageId: userRead.last_read_message_id,\n    unreadMessageCount: userRead.unread_messages ?? 0,\n    lastReadAt: new Date(userRead.last_read)\n  };\n  return state;\n}, {});\nvar repliesPaginationFromInitialThread = thread => {\n  const latestRepliesContainsAllReplies = thread.latest_replies.length === thread.reply_count;\n  return {\n    nextCursor: null,\n    prevCursor: latestRepliesContainsAllReplies ? null : thread.latest_replies.at(0)?.id ?? null,\n    isLoadingNext: false,\n    isLoadingPrev: false\n  };\n};\nvar ownUnreadCountSelector = currentUserId => state => currentUserId && state.read[currentUserId]?.unreadMessageCount || 0;\n\n// src/messageComposer/messageComposer.ts\nvar compositionIsDraftResponse = composition => !!composition?.message;\nvar initEditingAuditState = composition => {\n  let draftUpdate = null;\n  let stateUpdate = (/* @__PURE__ */new Date()).getTime();\n  if (compositionIsDraftResponse(composition)) {\n    stateUpdate = draftUpdate = new Date(composition.created_at).getTime();\n  } else if (composition && isLocalMessage(composition)) {\n    stateUpdate = new Date(composition.updated_at).getTime();\n  }\n  return {\n    lastChange: {\n      draftUpdate,\n      stateUpdate\n    }\n  };\n};\nvar initState5 = composition => {\n  if (!composition) {\n    return {\n      draftId: null,\n      id: MessageComposer.generateId(),\n      pollId: null,\n      quotedMessage: null,\n      showReplyInChannel: false\n    };\n  }\n  const quotedMessage = composition.quoted_message;\n  let message;\n  let draftId = null;\n  let id = MessageComposer.generateId();\n  if (compositionIsDraftResponse(composition)) {\n    message = composition.message;\n    draftId = composition.message.id;\n  } else {\n    message = composition;\n    id = composition.id;\n  }\n  return {\n    draftId,\n    id,\n    pollId: message.poll_id ?? null,\n    quotedMessage: quotedMessage ? formatMessage(quotedMessage) : null,\n    showReplyInChannel: false\n  };\n};\nvar _MessageComposer = class _MessageComposer extends WithSubscriptions {\n  // todo: mediaRecorder: MediaRecorderController;\n  constructor({\n    composition,\n    config,\n    compositionContext,\n    client\n  }) {\n    super();\n    this.initState = ({\n      composition\n    } = {}) => {\n      this.editingAuditState.partialNext(this.initEditingAuditState(composition));\n      const message = typeof composition === \"undefined\" ? composition : compositionIsDraftResponse(composition) ? composition.message : formatMessage(composition);\n      this.attachmentManager.initState({\n        message\n      });\n      this.linkPreviewsManager.initState({\n        message\n      });\n      this.textComposer.initState({\n        message\n      });\n      this.pollComposer.initState();\n      this.customDataManager.initState({\n        message\n      });\n      this.state.next(initState5(composition));\n      if (composition && !compositionIsDraftResponse(composition) && message && isLocalMessage(message)) {\n        this.editedMessage = message;\n      }\n    };\n    this.initStateFromChannelResponse = channelApiResponse => {\n      if (this.channel.cid !== channelApiResponse.channel.cid) {\n        return;\n      }\n      if (channelApiResponse.draft) {\n        this.initState({\n          composition: channelApiResponse.draft\n        });\n      } else if (this.state.getLatestValue().draftId) {\n        this.clear();\n        this.client.offlineDb?.executeQuerySafely(db => db.deleteDraft({\n          cid: this.channel.cid,\n          parent_id: void 0\n          // makes sure that we don't delete thread drafts while upserting channels\n        }), {\n          method: \"deleteDraft\"\n        });\n      }\n    };\n    this.initEditingAuditState = composition => initEditingAuditState(composition);\n    this.registerDraftEventSubscriptions = () => {\n      const unsubscribeDraftUpdated = this.subscribeDraftUpdated();\n      const unsubscribeDraftDeleted = this.subscribeDraftDeleted();\n      return () => {\n        unsubscribeDraftUpdated();\n        unsubscribeDraftDeleted();\n      };\n    };\n    this.registerSubscriptions = () => {\n      if (!this.hasSubscriptions) {\n        this.addUnsubscribeFunction(this.subscribeMessageComposerSetupStateChange());\n        this.addUnsubscribeFunction(this.subscribeMessageUpdated());\n        this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n        this.addUnsubscribeFunction(this.subscribeTextComposerStateChanged());\n        this.addUnsubscribeFunction(this.subscribeAttachmentManagerStateChanged());\n        this.addUnsubscribeFunction(this.subscribeLinkPreviewsManagerStateChanged());\n        this.addUnsubscribeFunction(this.subscribePollComposerStateChanged());\n        this.addUnsubscribeFunction(this.subscribeCustomDataManagerStateChanged());\n        this.addUnsubscribeFunction(this.subscribeMessageComposerStateChanged());\n        this.addUnsubscribeFunction(this.subscribeMessageComposerConfigStateChanged());\n      }\n      this.incrementRefCount();\n      return () => this.unregisterSubscriptions();\n    };\n    this.subscribeMessageUpdated = () => {\n      const eventTypes = [\"message.updated\", \"reaction.new\", \"reaction.deleted\",\n      // todo: do we need to subscribe to this especially when the whole state is overriden?\n      \"reaction.updated\"\n      // todo: do we need to subscribe to this especially when the whole state is overriden?\n      ];\n      const unsubscribeFunctions = eventTypes.map(eventType => this.client.on(eventType, event => {\n        if (!event.message) return;\n        if (event.message.id === this.id) {\n          this.initState({\n            composition: event.message\n          });\n        }\n        if (this.quotedMessage?.id && event.message.id === this.quotedMessage.id) {\n          this.setQuotedMessage(formatMessage(event.message));\n        }\n      }).unsubscribe);\n      return () => unsubscribeFunctions.forEach(unsubscribe => unsubscribe());\n    };\n    this.subscribeMessageComposerSetupStateChange = () => {\n      let tearDown = null;\n      const unsubscribe = this.client._messageComposerSetupState.subscribeWithSelector(({\n        setupFunction: setup\n      }) => ({\n        setup\n      }), ({\n        setup\n      }) => {\n        tearDown?.();\n        tearDown = setup?.({\n          composer: this\n        }) ?? null;\n      });\n      return () => {\n        tearDown?.();\n        unsubscribe();\n      };\n    };\n    this.subscribeMessageDeleted = () => this.client.on(\"message.deleted\", event => {\n      if (!event.message) return;\n      if (event.message.id === this.id) {\n        this.clear();\n      } else if (this.quotedMessage && event.message.id === this.quotedMessage.id) {\n        this.setQuotedMessage(null);\n      }\n    }).unsubscribe;\n    this.subscribeDraftUpdated = () => this.client.on(\"draft.updated\", event => {\n      const draft = event.draft;\n      if (!draft || (draft.parent_id ?? null) !== (this.threadId ?? null) || draft.channel_cid !== this.channel.cid) return;\n      this.initState({\n        composition: draft\n      });\n    }).unsubscribe;\n    this.subscribeDraftDeleted = () => this.client.on(\"draft.deleted\", event => {\n      const draft = event.draft;\n      if (!draft || (draft.parent_id ?? null) !== (this.threadId ?? null) || draft.channel_cid !== this.channel.cid) {\n        return;\n      }\n      this.logDraftUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        return;\n      }\n      this.clear();\n    }).unsubscribe;\n    this.subscribeTextComposerStateChanged = () => this.textComposer.state.subscribeWithSelector(({\n      text\n    }) => [text], ([currentText], previousSelection) => {\n      if (typeof previousSelection === \"undefined\") return;\n      this.logStateUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n      if (!this.linkPreviewsManager.enabled) return;\n      if (!currentText) {\n        this.linkPreviewsManager.clearPreviews();\n      } else {\n        this.linkPreviewsManager.findAndEnrichUrls(currentText);\n      }\n    });\n    this.subscribeAttachmentManagerStateChanged = () => this.attachmentManager.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === \"undefined\") return;\n      this.logStateUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n    this.subscribeLinkPreviewsManagerStateChanged = () => this.linkPreviewsManager.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === \"undefined\") return;\n      this.logStateUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n    this.subscribePollComposerStateChanged = () => this.pollComposer.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === \"undefined\") return;\n      this.logStateUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n    this.subscribeCustomDataManagerStateChanged = () => this.customDataManager.state.subscribe((nextValue, previousValue) => {\n      if (typeof previousValue !== \"undefined\" &&\n      // FIXME: is this check really necessary?\n      !this.customDataManager.isMessageDataEqual(nextValue, previousValue)) {\n        this.logStateUpdateTimestamp();\n      }\n    });\n    this.subscribeMessageComposerStateChanged = () => this.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === \"undefined\") return;\n      this.logStateUpdateTimestamp();\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n      }\n    });\n    this.subscribeMessageComposerConfigStateChanged = () => {\n      let draftUnsubscribeFunction;\n      const unsubscribe = this.configState.subscribeWithSelector(currentValue => ({\n        textDefaultValue: currentValue.text.defaultValue,\n        draftsEnabled: currentValue.drafts.enabled\n      }), ({\n        textDefaultValue,\n        draftsEnabled\n      }) => {\n        if (this.textComposer.text === \"\" && textDefaultValue) {\n          this.textComposer.insertText({\n            text: textDefaultValue,\n            selection: {\n              start: 0,\n              end: 0\n            }\n          });\n        }\n        if (draftsEnabled && !draftUnsubscribeFunction) {\n          draftUnsubscribeFunction = this.registerDraftEventSubscriptions();\n        } else if (!draftsEnabled && draftUnsubscribeFunction) {\n          draftUnsubscribeFunction();\n          draftUnsubscribeFunction = null;\n        }\n      });\n      return () => {\n        draftUnsubscribeFunction?.();\n        unsubscribe();\n      };\n    };\n    this.setQuotedMessage = quotedMessage => {\n      this.state.partialNext({\n        quotedMessage\n      });\n    };\n    this.toggleShowReplyInChannel = () => {\n      this.state.partialNext({\n        showReplyInChannel: !this.showReplyInChannel\n      });\n    };\n    this.clear = () => {\n      this.initState();\n    };\n    this.restore = () => {\n      const {\n        editedMessage\n      } = this;\n      if (editedMessage) {\n        this.initState({\n          composition: editedMessage\n        });\n        return;\n      }\n      this.clear();\n    };\n    this.compose = async () => {\n      const created_at = this.editedMessage?.created_at ?? /* @__PURE__ */new Date();\n      const text = \"\";\n      const result = await this.compositionMiddlewareExecutor.execute({\n        eventName: \"compose\",\n        initialValue: {\n          message: {\n            id: this.id,\n            parent_id: this.threadId ?? void 0,\n            type: \"regular\"\n          },\n          localMessage: {\n            attachments: [],\n            created_at,\n            // only assigned to localMessage as this is used for optimistic update\n            deleted_at: null,\n            error: void 0,\n            id: this.id,\n            mentioned_users: [],\n            parent_id: this.threadId ?? void 0,\n            pinned_at: null,\n            reaction_groups: null,\n            status: this.editedMessage ? this.editedMessage.status : \"sending\",\n            text,\n            type: \"regular\",\n            updated_at: created_at\n          },\n          sendOptions: {}\n        }\n      });\n      if (result.status === \"discard\") return;\n      return result.state;\n    };\n    this.composeDraft = async () => {\n      const {\n        state,\n        status\n      } = await this.draftCompositionMiddlewareExecutor.execute({\n        eventName: \"compose\",\n        initialValue: {\n          draft: {\n            id: this.id,\n            parent_id: this.threadId ?? void 0,\n            text: \"\"\n          }\n        }\n      });\n      if (status === \"discard\") return;\n      return state;\n    };\n    this.createDraft = async () => {\n      if (this.editedMessage || !this.config.drafts.enabled) return;\n      const composition = await this.composeDraft();\n      if (!composition) return;\n      const {\n        draft\n      } = composition;\n      this.state.partialNext({\n        draftId: draft.id\n      });\n      if (this.client.offlineDb) {\n        try {\n          const optimisticDraftResponse = {\n            channel_cid: this.channel.cid,\n            created_at: (/* @__PURE__ */new Date()).toISOString(),\n            message: draft,\n            parent_id: draft.parent_id,\n            quoted_message: this.quotedMessage ? unformatMessage(this.quotedMessage) : void 0\n          };\n          await this.client.offlineDb.upsertDraft({\n            draft: optimisticDraftResponse\n          });\n        } catch (error) {\n          this.client.logger(\"error\", `offlineDb:upsertDraft`, {\n            tags: [\"channel\", \"offlineDb\"],\n            error\n          });\n        }\n      }\n      this.logDraftUpdateTimestamp();\n      await this.channel.createDraft(draft);\n    };\n    this.deleteDraft = async () => {\n      if (this.editedMessage || !this.config.drafts.enabled || !this.draftId) return;\n      this.state.partialNext({\n        draftId: null\n      });\n      const parentId = this.threadId ?? void 0;\n      if (this.client.offlineDb) {\n        try {\n          await this.client.offlineDb.deleteDraft({\n            cid: this.channel.cid,\n            parent_id: parentId\n          });\n        } catch (error) {\n          this.client.logger(\"error\", `offlineDb:deleteDraft`, {\n            tags: [\"channel\", \"offlineDb\"],\n            error\n          });\n        }\n      }\n      this.logDraftUpdateTimestamp();\n      await this.channel.deleteDraft({\n        parent_id: parentId\n      });\n    };\n    this.getDraft = async () => {\n      if (this.editedMessage || !this.config.drafts.enabled || !this.client.userID) return;\n      const draftFromOfflineDB = await this.client.offlineDb?.getDraft({\n        cid: this.channel.cid,\n        userId: this.client.userID,\n        parent_id: this.threadId ?? void 0\n      });\n      if (draftFromOfflineDB) {\n        this.initState({\n          composition: draftFromOfflineDB\n        });\n      }\n      try {\n        const response = await this.channel.getDraft({\n          parent_id: this.threadId ?? void 0\n        });\n        const {\n          draft\n        } = response;\n        if (!draft) return;\n        this.client.offlineDb?.executeQuerySafely(db => db.upsertDraft({\n          draft\n        }), {\n          method: \"upsertDraft\"\n        });\n        this.initState({\n          composition: draft\n        });\n      } catch (error) {\n        this.client.notifications.add({\n          message: \"Failed to get the draft\",\n          origin: {\n            emitter: \"MessageComposer\",\n            context: {\n              composer: this\n            }\n          }\n        });\n      }\n    };\n    this.createPoll = async () => {\n      const composition = await this.pollComposer.compose();\n      if (!composition || !composition.data.id) return;\n      try {\n        const poll = await this.client.polls.createPoll(composition.data);\n        this.state.partialNext({\n          pollId: poll?.id\n        });\n      } catch (error) {\n        this.client.notifications.addError({\n          message: \"Failed to create the poll\",\n          origin: {\n            emitter: \"MessageComposer\",\n            context: {\n              composer: this\n            }\n          },\n          options: {\n            type: \"api:poll:create:failed\",\n            metadata: {\n              reason: error.message\n            },\n            originalError: error instanceof Error ? error : void 0\n          }\n        });\n        throw error;\n      }\n    };\n    this.compositionContext = compositionContext;\n    this.configState = new StateStore(mergeWith(DEFAULT_COMPOSER_CONFIG, config ?? {}));\n    if (compositionContext instanceof Channel) {\n      this.channel = compositionContext;\n    } else if (compositionContext instanceof Thread) {\n      this.channel = compositionContext.channel;\n    } else if (compositionContext.cid) {\n      const [type, id] = compositionContext.cid.split(\":\");\n      this.channel = client.channel(type, id);\n    } else {\n      throw new Error(\"MessageComposer requires composition context pointing to channel (channel or context.cid)\");\n    }\n    let message = void 0;\n    if (compositionIsDraftResponse(composition)) {\n      message = composition.message;\n    } else if (composition) {\n      message = formatMessage(composition);\n      this.editedMessage = message;\n    }\n    this.attachmentManager = new AttachmentManager({\n      composer: this,\n      message\n    });\n    this.linkPreviewsManager = new LinkPreviewsManager({\n      composer: this,\n      message\n    });\n    this.textComposer = new TextComposer({\n      composer: this,\n      message\n    });\n    this.pollComposer = new PollComposer({\n      composer: this\n    });\n    this.customDataManager = new CustomDataManager({\n      composer: this,\n      message\n    });\n    this.editingAuditState = new StateStore(this.initEditingAuditState(composition));\n    this.state = new StateStore(initState5(composition));\n    this.compositionMiddlewareExecutor = new MessageComposerMiddlewareExecutor({\n      composer: this\n    });\n    this.draftCompositionMiddlewareExecutor = new MessageDraftComposerMiddlewareExecutor({\n      composer: this\n    });\n  }\n  static evaluateContextType(compositionContext) {\n    if (compositionContext instanceof Channel) {\n      return \"channel\";\n    }\n    if (compositionContext instanceof Thread) {\n      return \"thread\";\n    }\n    if (typeof compositionContext.legacyThreadId === \"string\") {\n      return \"legacy_thread\";\n    }\n    return \"message\";\n  }\n  static constructTag(compositionContext) {\n    return `${this.evaluateContextType(compositionContext)}_${compositionContext.id}`;\n  }\n  get config() {\n    return this.configState.getLatestValue();\n  }\n  updateConfig(config) {\n    this.configState.partialNext(mergeWith(this.config, config));\n  }\n  get contextType() {\n    return _MessageComposer.evaluateContextType(this.compositionContext);\n  }\n  get tag() {\n    return _MessageComposer.constructTag(this.compositionContext);\n  }\n  get threadId() {\n    if (this.compositionContext instanceof Channel) {\n      return null;\n    }\n    if (this.compositionContext instanceof Thread) {\n      return this.compositionContext.id;\n    }\n    if (typeof this.compositionContext.legacyThreadId === \"string\") {\n      return this.compositionContext.legacyThreadId;\n    }\n    if (typeof this.compositionContext.parent_id === \"string\") {\n      return this.compositionContext.parent_id;\n    }\n    return null;\n  }\n  get client() {\n    return this.channel.getClient();\n  }\n  get id() {\n    return this.state.getLatestValue().id;\n  }\n  get draftId() {\n    return this.state.getLatestValue().draftId;\n  }\n  get lastChange() {\n    return this.editingAuditState.getLatestValue().lastChange;\n  }\n  get quotedMessage() {\n    return this.state.getLatestValue().quotedMessage;\n  }\n  get pollId() {\n    return this.state.getLatestValue().pollId;\n  }\n  get showReplyInChannel() {\n    return this.state.getLatestValue().showReplyInChannel;\n  }\n  get hasSendableData() {\n    if (this.client.offlineDb) {\n      return !this.compositionIsEmpty;\n    }\n    return !!(!this.attachmentManager.uploadsInProgressCount && (!this.textComposer.textIsEmpty || this.attachmentManager.successfulUploadsCount > 0) || this.pollId);\n  }\n  get compositionIsEmpty() {\n    return !this.quotedMessage && this.textComposer.textIsEmpty && !this.attachmentManager.attachments.length && !this.pollId;\n  }\n  get lastChangeOriginIsLocal() {\n    const initiatedWithoutDraft = this.lastChange.draftUpdate === null;\n    const composingMessageFromScratch = initiatedWithoutDraft && !this.editedMessage;\n    const editedMessageWasUpdated = !!this.editedMessage?.updated_at && new Date(this.editedMessage.updated_at).getTime() < this.lastChange.stateUpdate;\n    const draftWasChanged = !!this.lastChange.draftUpdate && this.lastChange.draftUpdate < this.lastChange.stateUpdate;\n    return editedMessageWasUpdated || draftWasChanged || composingMessageFromScratch;\n  }\n  logStateUpdateTimestamp() {\n    this.editingAuditState.partialNext({\n      lastChange: {\n        ...this.lastChange,\n        stateUpdate: (/* @__PURE__ */new Date()).getTime()\n      }\n    });\n  }\n  logDraftUpdateTimestamp() {\n    if (!this.config.drafts.enabled) return;\n    const timestamp = (/* @__PURE__ */new Date()).getTime();\n    this.editingAuditState.partialNext({\n      lastChange: {\n        draftUpdate: timestamp,\n        stateUpdate: timestamp\n      }\n    });\n  }\n};\n_MessageComposer.generateId = generateUUIDv4;\nvar MessageComposer = _MessageComposer;\n\n// src/channel.ts\nvar Channel = class {\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData} data any additional custom params\n   *\n   * @return {Channel} Returns a new uninitialized channel\n   */\n  constructor(client, type, id, data) {\n    /**\n     * create - Creates a new channel\n     *\n     * @return {Promise<QueryChannelAPIResponse>} The Server Response\n     *\n     */\n    this.create = async options => {\n      const defaultOptions = {\n        ...options,\n        watch: false,\n        state: false,\n        presence: false\n      };\n      return await this.query(defaultOptions, \"latest\");\n    };\n    this._callChannelListeners = event => {\n      const channel = this;\n      const listeners = [];\n      if (channel.listeners.all) {\n        listeners.push(...channel.listeners.all);\n      }\n      if (channel.listeners[event.type]) {\n        listeners.push(...channel.listeners[event.type]);\n      }\n      for (const listener of listeners) {\n        if (typeof listener !== \"string\") {\n          listener(event);\n        }\n      }\n    };\n    /**\n     * _channelURL - Returns the channel url\n     *\n     * @return {string} The channel url\n     */\n    this._channelURL = () => {\n      if (!this.id) {\n        throw new Error(\"channel id is not defined\");\n      }\n      return `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}/${encodeURIComponent(this.id)}`;\n    };\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === \"string\" && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n    this._data = {\n      ...data\n    };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    this.state = new ChannelState(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n    this.messageComposer = new MessageComposer({\n      client: this._client,\n      compositionContext: this\n    });\n  }\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat}\n   */\n  getClient() {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n  /**\n   * getConfig - Get the config for this channel id (cid)\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.cid];\n  }\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message} message The Message object\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   * @param {boolean} [options.skip_push] Skip sending push notifications\n   * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.\n   * @param {boolean} [options.pending] Make this message pending\n   * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n   * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests\n   *\n   * @return {Promise<SendMessageAPIResponse>} The Server Response\n   */\n  async _sendMessage(message, options) {\n    return await this.getClient().post(this._channelURL() + \"/message\", {\n      message,\n      ...options\n    });\n  }\n  async sendMessage(message, options) {\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        const messageId = message.id;\n        if (messageId) {\n          return await offlineDb.queueTask({\n            task: {\n              channelId: this.id,\n              channelType: this.type,\n              messageId,\n              payload: [message, options],\n              type: \"send-message\"\n            }\n          });\n        }\n      }\n    } catch (error) {\n      this._client.logger(\"error\", `offlineDb:send-message`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return await this._sendMessage(message, options);\n  }\n  sendFile(uri, name, contentType, user) {\n    return this.getClient().sendFile(`${this._channelURL()}/file`, uri, name, contentType, user);\n  }\n  sendImage(uri, name, contentType, user) {\n    return this.getClient().sendFile(`${this._channelURL()}/image`, uri, name, contentType, user);\n  }\n  deleteFile(url) {\n    return this.getClient().delete(`${this._channelURL()}/file`, {\n      url\n    });\n  }\n  deleteImage(url) {\n    return this.getClient().delete(`${this._channelURL()}/image`, {\n      url\n    });\n  }\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse>} The Server Response\n   */\n  async sendEvent(event) {\n    this._checkInitialized();\n    return await this.getClient().post(this._channelURL() + \"/event\", {\n      event\n    });\n  }\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse>} search messages response\n   */\n  async search(query, options = {}) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    const payload = {\n      filter_conditions: {\n        cid: this.cid\n      },\n      ...options,\n      sort: options.sort ? normalizeQuerySort(options.sort) : void 0\n    };\n    if (typeof query === \"string\") {\n      payload.query = query;\n    } else if (typeof query === \"object\") {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    await this.getClient().wsPromise;\n    return await this.getClient().get(this.getClient().baseURL + \"/search\", {\n      payload\n    });\n  }\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {MemberFilters}  filterConditions object MongoDB style filters\n   * @param {MemberSort} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse>} Query Members response\n   */\n  async queryMembers(filterConditions, sort = [], options = {}) {\n    let id;\n    const type = this.type;\n    let members;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    return await this.getClient().get(this.getClient().baseURL + \"/members\", {\n      payload: {\n        type,\n        id,\n        members,\n        sort: normalizeQuerySort(sort),\n        filter_conditions: filterConditions,\n        ...options\n      }\n    });\n  }\n  /**\n     * updateMemberPartial - Partial update a member\n     *\n     * @param {PartialUpdateMember}  updates\n     * @param {{ user_id?: string }} [options] Option object, {user_id: 'jane'} to optionally specify the user id\n  \n     * @return {Promise<ChannelMemberResponse>} Updated member\n     */\n  async updateMemberPartial(updates, options) {\n    const url = new URL(`${this._channelURL()}/member`);\n    if (options?.userId) {\n      url.searchParams.append(\"user_id\", options.userId);\n    }\n    return await this.getClient().patch(url.toString(), updates);\n  }\n  /**\n   * @deprecated Use `updateMemberPartial` instead\n   * partialUpdateMember - Partial update a member\n   *\n   * @param {string} user_id member user id\n   * @param {PartialUpdateMember}  updates\n   *\n   * @return {Promise<ChannelMemberResponse>} Updated member\n   */\n  async partialUpdateMember(user_id, updates) {\n    if (!user_id) {\n      throw Error(\"Please specify the user id\");\n    }\n    return await this.getClient().patch(this._channelURL() + `/member/${encodeURIComponent(user_id)}`, updates);\n  }\n  /**\n   * sendReaction - Sends a reaction to a message. If offline support is enabled, it will make sure\n   * that sending the reaction is queued up if it fails due to bad internet conditions and executed\n   * later.\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async sendReaction(messageID, reaction, options) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask({\n          task: {\n            channelId: this.id,\n            channelType: this.type,\n            messageId: messageID,\n            payload: [messageID, reaction, options],\n            type: \"send-reaction\"\n          }\n        });\n      }\n    } catch (error) {\n      this._client.logger(\"error\", `offlineDb:send-reaction`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return this._sendReaction(messageID, reaction, options);\n  }\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async _sendReaction(messageID, reaction, options) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post(this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/reaction`, {\n      reaction,\n      ...options\n    });\n  }\n  async deleteReaction(messageID, reactionType, user_id) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\"Deleting a reaction requires specifying both the message and reaction type\");\n    }\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        const message = this.state.messages.find(({\n          id\n        }) => id === messageID);\n        const reaction = {\n          created_at: \"\",\n          updated_at: \"\",\n          message_id: messageID,\n          type: reactionType,\n          user_id: this.getClient().userID ?? user_id\n        };\n        if (message) {\n          await offlineDb.deleteReaction({\n            message,\n            reaction\n          });\n        }\n        return await offlineDb.queueTask({\n          task: {\n            channelId: this.id,\n            channelType: this.type,\n            messageId: messageID,\n            payload: [messageID, reactionType],\n            type: \"delete-reaction\"\n          }\n        });\n      }\n    } catch (error) {\n      this._client.logger(\"error\", `offlineDb:delete-reaction`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return await this._deleteReaction(messageID, reactionType, user_id);\n  }\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async _deleteReaction(messageID, reactionType, user_id) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\"Deleting a reaction requires specifying both the message and reaction type\");\n    }\n    const url = this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/reaction/${encodeURIComponent(reactionType)}`;\n    if (user_id) {\n      return await this.getClient().delete(url, {\n        user_id\n      });\n    }\n    return await this.getClient().delete(url, {});\n  }\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData} channelData The object to update the custom properties of this channel with\n   * @param {Message} [updateMessage] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async update(channelData = {}, updateMessage, options) {\n    const reserved = [\"config\", \"cid\", \"created_by\", \"id\", \"member_count\", \"type\", \"created_at\", \"updated_at\", \"last_message_at\", \"own_capabilities\"];\n    reserved.forEach(key => {\n      delete channelData[key];\n    });\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options\n    });\n  }\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse>}\n   */\n  async updatePartial(update) {\n    const data = await this.getClient().patch(this._channelURL(), update);\n    const areCapabilitiesChanged = [...(data.channel.own_capabilities || [])].sort().join() !== [...(Array.isArray(this.data?.own_capabilities) ? this.data?.own_capabilities : [])].sort().join();\n    this.data = data.channel;\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: \"capabilities.changed\",\n        cid: this.cid,\n        own_capabilities: data.channel.own_capabilities\n      });\n    }\n    return data;\n  }\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async enableSlowMode(coolDownInterval) {\n    const data = await this.getClient().post(this._channelURL(), {\n      cooldown: coolDownInterval\n    });\n    this.data = data.channel;\n    return data;\n  }\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post(this._channelURL(), {\n      cooldown: 0\n    });\n    this.data = data.channel;\n    return data;\n  }\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {Promise<DeleteChannelAPIResponse>} The server response\n   */\n  async delete(options = {}) {\n    return await this.getClient().delete(this._channelURL(), {\n      ...options\n    });\n  }\n  /**\n   * truncate - Removes all messages from the channel\n   * @param {TruncateOptions} [options] Defines truncation options\n   * @return {Promise<TruncateChannelAPIResponse>} The server response\n   */\n  async truncate(options = {}) {\n    return await this.getClient().post(this._channelURL() + \"/truncate\", options);\n  }\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {UpdateChannelOptions} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async acceptInvite(options = {}) {\n    return await this._update({\n      accept_invite: true,\n      ...options\n    });\n  }\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {UpdateChannelOptions} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async rejectInvite(options = {}) {\n    return await this._update({\n      reject_invite: true,\n      ...options\n    });\n  }\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload>} members An array of members to add to the channel\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async addMembers(members, message, options = {}) {\n    return await this._update({\n      add_members: members,\n      message,\n      ...options\n    });\n  }\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async addModerators(members, message, options = {}) {\n    return await this._update({\n      add_moderators: members,\n      message,\n      ...options\n    });\n  }\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async assignRoles(roles, message, options = {}) {\n    return await this._update({\n      assign_roles: roles,\n      message,\n      ...options\n    });\n  }\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload>} members An array of members to invite to the channel\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async inviteMembers(members, message, options = {}) {\n    return await this._update({\n      invites: members,\n      message,\n      ...options\n    });\n  }\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async removeMembers(members, message, options = {}) {\n    return await this._update({\n      remove_members: members,\n      message,\n      ...options\n    });\n  }\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async demoteModerators(members, message, options = {}) {\n    return await this._update({\n      demote_moderators: members,\n      message,\n      ...options\n    });\n  }\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload) {\n    const data = await this.getClient().post(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts = {}) {\n    return await this.getClient().post(this.getClient().baseURL + \"/moderation/mute/channel\", {\n      channel_cid: this.cid,\n      ...opts\n    });\n  }\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts = {}) {\n    return await this.getClient().post(this.getClient().baseURL + \"/moderation/unmute/channel\", {\n      channel_cid: this.cid,\n      ...opts\n    });\n  }\n  /**\n   * archive - archives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.archives();\n   *\n   * example server side:\n   * await channel.archive({user_id: userId});\n   *\n   */\n  async archive(opts = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error(\"A user_id is required for archiving a channel\");\n    }\n    const resp = await this.partialUpdateMember(uid, {\n      set: {\n        archived: true\n      }\n    });\n    return resp.channel_member;\n  }\n  /**\n   * unarchive - unarchives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.unarchive();\n   *\n   * example server side:\n   * await channel.unarchive({user_id: userId});\n   *\n   */\n  async unarchive(opts = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error(\"A user_id is required for unarchiving a channel\");\n    }\n    const resp = await this.partialUpdateMember(uid, {\n      set: {\n        archived: false\n      }\n    });\n    return resp.channel_member;\n  }\n  /**\n   * pin - pins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.pin();\n   *\n   * example server side:\n   * await channel.pin({user_id: userId});\n   *\n   */\n  async pin(opts = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error(\"A user_id is required for pinning a channel\");\n    }\n    const resp = await this.partialUpdateMember(uid, {\n      set: {\n        pinned: true\n      }\n    });\n    return resp.channel_member;\n  }\n  /**\n   * unpin - unpins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.unpin();\n   *\n   * example server side:\n   * await channel.unpin({user_id: userId});\n   *\n   */\n  async unpin(opts = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error(\"A user_id is required for unpinning a channel\");\n    }\n    const resp = await this.partialUpdateMember(uid, {\n      set: {\n        pinned: false\n      }\n    });\n    return resp.channel_member;\n  }\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus() {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n  sendAction(messageID, formData) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post(this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/action`, {\n      message_id: messageID,\n      form_data: formData,\n      id: this.id,\n      type: this.type\n    });\n  }\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id, options) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    const now = /* @__PURE__ */new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    if (diff === null || diff > 2e3) {\n      this.lastTypingEvent = /* @__PURE__ */new Date();\n      await this.sendEvent({\n        type: \"typing.start\",\n        parent_id,\n        ...(options || {})\n      });\n    }\n  }\n  /**\n   * Sends an event to update the AI state for a specific message.\n   * Typically used by the server connected to the AI service to notify clients of state changes.\n   *\n   * @param messageId - The ID of the message associated with the AI state.\n   * @param state - The new state of the AI process (e.g., thinking, generating).\n   * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.\n   */\n  async updateAIState(messageId, state, options = {}) {\n    await this.sendEvent({\n      ...options,\n      type: \"ai_indicator.update\",\n      message_id: messageId,\n      ai_state: state\n    });\n  }\n  /**\n   * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.\n   * Typically used by the server connected to the AI service to inform clients that the AI response has started.\n   */\n  async clearAIIndicator() {\n    await this.sendEvent({\n      type: \"ai_indicator.clear\"\n    });\n  }\n  /**\n   * Sends an event to stop AI response generation, leaving the message in its current state.\n   * Triggered by the user to halt the AI response process.\n   */\n  async stopAIResponse() {\n    await this.sendEvent({\n      type: \"ai_indicator.stop\"\n    });\n  }\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id, options) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: \"typing.stop\",\n      parent_id,\n      ...(options || {})\n    });\n  }\n  _isTypingIndicatorsEnabled() {\n    if (!this.getConfig()?.typing_events || !this.getClient().wsConnection?.isHealthy) {\n      return false;\n    }\n    return this.getClient().user?.privacy_settings?.typing_indicators?.enabled ?? true;\n  }\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState['formatMessage']> | undefined} Description\n   */\n  lastMessage() {\n    let min = this.state.latestMessages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.latestMessages.length + 1;\n    const messageSlice = this.state.latestMessages.slice(min, max);\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n    return messageSlice[0];\n  }\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions} data\n   * @return {Promise<EventAPIResponse | null>} Description\n   */\n  async markRead(data = {}) {\n    this._checkInitialized();\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n    return await this.getClient().post(this._channelURL() + \"/read\", {\n      ...data\n    });\n  }\n  /**\n   * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkUnreadOptions} data\n   * @return {APIResponse} An API response\n   */\n  async markUnread(data) {\n    this._checkInitialized();\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n    return await this.getClient().post(this._channelURL() + \"/unread\", {\n      ...data\n    });\n  }\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = /* @__PURE__ */new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1e3 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), \"stop typing event\");\n      }\n    }\n    this.state.clean();\n  }\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions} options additional options for the query endpoint\n   *\n   * @return {Promise<QueryChannelAPIResponse>} The server response\n   */\n  async watch(options) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false\n    };\n    await this.getClient().wsPromise;\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n    const combined = {\n      ...defaultOptions,\n      ...options\n    };\n    const state = await this.query(combined, \"latest\");\n    this.initialized = true;\n    this.data = state.channel;\n    this._client.logger(\"info\", `channel:watch() - started watching channel ${this.cid}`, {\n      tags: [\"channel\"],\n      channel: this\n    });\n    return state;\n  }\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post(this._channelURL() + \"/stop-watching\", {});\n    this._client.logger(\"info\", `channel:watch() - stopped watching channel ${this.cid}`, {\n      tags: [\"channel\"],\n      channel: this\n    });\n    return response;\n  }\n  /**\n   * getReplies - List the message replies for a parent message.\n   *\n   * The recommended way of working with threads is to use the Thread class.\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {MessagePaginationOptions & { user?: UserResponse; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse>} A response with a list of messages\n   */\n  async getReplies(parent_id, options, sort) {\n    const normalizedSort = sort ? normalizeQuerySort(sort) : void 0;\n    const data = await this.getClient().get(this.getClient().baseURL + `/messages/${encodeURIComponent(parent_id)}/replies`, {\n      sort: normalizedSort,\n      ...options\n    });\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n    return data;\n  }\n  /**\n   * getPinnedMessages - List list pinned messages of the channel\n   *\n   * @param {PinnedMessagePaginationOptions & { user?: UserResponse; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n   *\n   * @return {Promise<GetRepliesAPIResponse>} A response with a list of messages\n   */\n  async getPinnedMessages(options, sort = []) {\n    return await this.getClient().get(this._channelURL() + \"/pinned_messages\", {\n      payload: {\n        ...options,\n        sort: normalizeQuerySort(sort)\n      }\n    });\n  }\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse>} Server response\n   */\n  getReactions(message_id, options) {\n    return this.getClient().get(this.getClient().baseURL + `/messages/${encodeURIComponent(message_id)}/reactions`, {\n      ...options\n    });\n  }\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse>} Server response\n   */\n  getMessagesById(messageIds) {\n    return this.getClient().get(this._channelURL() + \"/messages\", {\n      ids: messageIds.join(\",\")\n    });\n  }\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    const {\n      userID\n    } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n  _countMessageAsUnread(message) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.parent_id && !message.show_in_channel) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id)) return false;\n    if (Array.isArray(this.data?.own_capabilities) && !this.data?.own_capabilities.includes(\"read-events\")) {\n      return false;\n    }\n    if (this.muteStatus().muted) return false;\n    return true;\n  }\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead) {\n    if (!lastRead) return this.state.unreadCount;\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n  /**\n   * countUnreadMentions - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (this._countMessageAsUnread(message) && (!lastRead || message.created_at > lastRead) && message.mentioned_users?.some(user => user.id === userID)) {\n        count++;\n      }\n    }\n    return count;\n  }\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions} options The query options\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n   *\n   * @return {Promise<QueryChannelAPIResponse>} Returns a query response\n   */\n  async query(options = {}, messageSetToAddToIfDoesNotExist = \"current\") {\n    await this.getClient().wsPromise;\n    const createdById = options.created_by?.id ?? options.created_by_id ?? this._data?.created_by?.id ?? this._data?.created_by_id;\n    if (this.getClient()._isUsingServerAuth() && typeof createdById !== \"string\") {\n      this.getClient().logger(\"warn\", \"Either `created_by` (with `id` property) or `created_by_id` are missing from both `Channel._data` and `options` parameter\");\n    }\n    let queryURL = `${this.getClient().baseURL}/channels/${encodeURIComponent(this.type)}`;\n    if (this.id) {\n      queryURL += `/${encodeURIComponent(this.id)}`;\n    }\n    const state = await this.getClient().post(queryURL + \"/query\", {\n      data: this._data,\n      state: true,\n      ...options\n    });\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      const tempChannelCid = generateChannelTempCid(this.type, state.members.map(member => member.user_id || member.user?.id || \"\"));\n      if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n      if (!(this.cid in this.getClient().activeChannels) && this.getClient()._cacheEnabled()) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n    this.getClient()._addChannelConfig(state.channel);\n    const {\n      messageSet\n    } = this._initializeState(state, messageSetToAddToIfDoesNotExist);\n    messageSet.pagination = {\n      ...messageSet.pagination,\n      ...messageSetPagination({\n        parentSet: messageSet,\n        messagePaginationOptions: options?.messages,\n        requestedPageSize: options?.messages?.limit ?? DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,\n        returnedPage: state.messages,\n        logger: this.getClient().logger\n      })\n    };\n    this.getClient().polls.hydratePollCache(state.messages, true);\n    this.getClient().reminders.hydrateState(state.messages);\n    this.messageComposer.initStateFromChannelResponse(state);\n    const areCapabilitiesChanged = [...(state.channel.own_capabilities || [])].sort().join() !== [...(this.data && Array.isArray(this.data?.own_capabilities) ? this.data.own_capabilities : [])].sort().join();\n    this.data = state.channel;\n    this.offlineMode = false;\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: \"capabilities.changed\",\n        cid: this.cid,\n        own_capabilities: state.channel.own_capabilities\n      });\n    }\n    this.getClient().dispatchEvent({\n      type: \"channels.queried\",\n      queriedChannels: {\n        channels: [state],\n        isLatestMessageSet: messageSet.isLatest\n      }\n    });\n    this.getClient().offlineDb?.executeQuerySafely(db => db.upsertChannels?.({\n      channels: [state],\n      isLatestMessagesSet: messageSet.isLatest\n    }), {\n      method: \"upsertChannels\"\n    });\n    return state;\n  }\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID, options) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id\n    });\n  }\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId = null, clearHistory = false) {\n    this._checkInitialized();\n    return await this.getClient().post(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory\n    });\n  }\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId = null) {\n    this._checkInitialized();\n    return await this.getClient().post(`${this._channelURL()}/show`, {\n      user_id: userId\n    });\n  }\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id\n    });\n  }\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID, options) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id\n    });\n  }\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id\n    });\n  }\n  /**\n   * Cast or cancel one or more votes on a poll\n   * @param pollId string The poll id\n   * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)\n   * @returns {APIResponse & PollVoteResponse} The poll votes\n   */\n  async vote(messageId, pollId, vote) {\n    return await this.getClient().castPollVote(messageId, pollId, vote);\n  }\n  async removeVote(messageId, pollId, voteId) {\n    return await this.getClient().removePollVote(messageId, pollId, voteId);\n  }\n  /**\n   * createDraft - Creates or updates a draft message in a channel\n   *\n   * @param {DraftMessagePayload} message The draft message to create or update\n   *\n   * @return {Promise<CreateDraftResponse>} Response containing the created draft\n   */\n  async _createDraft(message) {\n    return await this.getClient().post(this._channelURL() + \"/draft\", {\n      message\n    });\n  }\n  /**\n   * createDraft - Creates or updates a draft message in a channel. If offline support is\n   * enabled, it will make sure that creating the draft is queued up if it fails due to\n   * bad internet conditions and executed later.\n   *\n   * @param {DraftMessagePayload} message The draft message to create or update\n   *\n   * @return {Promise<CreateDraftResponse>} Response containing the created draft\n   */\n  async createDraft(message) {\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask({\n          task: {\n            channelId: this.id,\n            channelType: this.type,\n            threadId: message.parent_id,\n            payload: [message],\n            type: \"create-draft\"\n          }\n        });\n      }\n    } catch (error) {\n      this._client.logger(\"error\", `offlineDb:create-draft`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return this._createDraft(message);\n  }\n  /**\n   * deleteDraft - Deletes a draft message from a channel or a thread.\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<APIResponse>} API response\n   */\n  async _deleteDraft({\n    parent_id\n  } = {}) {\n    return await this.getClient().delete(this._channelURL() + \"/draft\", {\n      parent_id\n    });\n  }\n  /**\n   * deleteDraft - Deletes a draft message from a channel or a thread. If offline support is\n   * enabled, it will make sure that deleting the draft is queued up if it fails due to\n   * bad internet conditions and executed later.\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<APIResponse>} API response\n   */\n  async deleteDraft(options = {}) {\n    const {\n      parent_id\n    } = options;\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask({\n          task: {\n            channelId: this.id,\n            channelType: this.type,\n            threadId: parent_id,\n            payload: [options],\n            type: \"delete-draft\"\n          }\n        });\n      }\n    } catch (error) {\n      this._client.logger(\"error\", `offlineDb:delete-draft`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return this._deleteDraft(options);\n  }\n  /**\n   * getDraft - Retrieves a draft message from a channel\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<GetDraftResponse>} Response containing the draft\n   */\n  async getDraft({\n    parent_id\n  } = {}) {\n    return await this.getClient().get(this._channelURL() + \"/draft\", {\n      parent_id\n    });\n  }\n  on(callbackOrString, callbackOrNothing) {\n    const key = callbackOrNothing ? callbackOrString : \"all\";\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\"info\", `Attaching listener for ${key} event on channel ${this.cid}`, {\n      tags: [\"event\", \"channel\"],\n      channel: this\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this._client.logger(\"info\", `Removing listener for ${key} event from channel ${this.cid}`, {\n          tags: [\"event\", \"channel\"],\n          channel: this\n        });\n        this.listeners[key] = this.listeners[key].filter(el => el !== callback);\n      }\n    };\n  }\n  off(callbackOrString, callbackOrNothing) {\n    const key = callbackOrNothing ? callbackOrString : \"all\";\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\"info\", `Removing listener for ${key} event from channel ${this.cid}`, {\n      tags: [\"event\", \"channel\"],\n      channel: this\n    });\n    this.listeners[key] = this.listeners[key].filter(value => value !== callback);\n  }\n  _handleChannelEvent(event) {\n    const channel = this;\n    this._client.logger(\"info\", `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`, {\n      tags: [\"event\", \"channel\"],\n      channel: this\n    });\n    const channelState = channel.state;\n    switch (event.type) {\n      case \"typing.start\":\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case \"typing.stop\":\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case \"message.read\":\n        if (event.user?.id && event.created_at) {\n          channelState.read[event.user.id] = {\n            last_read: new Date(event.created_at),\n            last_read_message_id: event.last_read_message_id,\n            user: event.user,\n            unread_messages: 0\n          };\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case \"user.watching.start\":\n      case \"user.updated\":\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case \"user.watching.stop\":\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case \"message.deleted\":\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          if (event.hard_delete) channelState.removeMessage(event.message);else channelState.addMessageSorted(event.message, false, false);\n          channelState.removeQuotedMessageReferences(event.message);\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case \"message.new\":\n        if (event.message) {\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n          const preventUnreadCountUpdate = ownMessage || isThreadMessage;\n          if (preventUnreadCountUpdate) break;\n          if (event.user?.id) {\n            for (const userId in channelState.read) {\n              if (userId === event.user.id) {\n                channelState.read[event.user.id] = {\n                  last_read: new Date(event.created_at),\n                  user: event.user,\n                  unread_messages: 0\n                };\n              } else {\n                channelState.read[userId].unread_messages += 1;\n              }\n            }\n          }\n          if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case \"message.updated\":\n      case \"message.undeleted\":\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          channelState.addMessageSorted(event.message, false, false);\n          channelState._updateQuotedMessageReferences({\n            message: event.message\n          });\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case \"channel.truncated\":\n        if (event.channel?.truncated_at) {\n          const truncatedAt = +new Date(event.channel.truncated_at);\n          channelState.messageSets.forEach((messageSet, messageSetIndex) => {\n            messageSet.messages.forEach(({\n              created_at: createdAt,\n              id\n            }) => {\n              if (truncatedAt > +createdAt) channelState.removeMessage({\n                id,\n                messageSetIndex\n              });\n            });\n          });\n          channelState.pinnedMessages.forEach(({\n            id,\n            created_at: createdAt\n          }) => {\n            if (truncatedAt > +createdAt) channelState.removePinnedMessage({\n              id\n            });\n          });\n          channelState.unreadCount = this.countUnread(new Date(event.channel.truncated_at));\n        } else {\n          channelState.clearMessages();\n          channelState.unreadCount = 0;\n        }\n        if (event.message) {\n          channelState.addMessageSorted(event.message);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n        }\n        break;\n      case \"member.added\":\n      case \"member.updated\":\n        {\n          const memberCopy = {\n            ...event.member\n          };\n          if (memberCopy.pinned_at === null) {\n            delete memberCopy.pinned_at;\n          }\n          if (memberCopy.archived_at === null) {\n            delete memberCopy.archived_at;\n          }\n          if (memberCopy?.user) {\n            channelState.members = {\n              ...channelState.members,\n              [memberCopy.user.id]: memberCopy\n            };\n            if (channel.data?.member_count && event.type === \"member.added\") {\n              channel.data.member_count += 1;\n            }\n          }\n          const currentUserId = this.getClient().userID;\n          if (typeof currentUserId === \"string\" && typeof memberCopy?.user?.id === \"string\" && memberCopy.user.id === currentUserId) {\n            channelState.membership = memberCopy;\n          }\n          break;\n        }\n      case \"member.removed\":\n        if (event.user?.id) {\n          const newMembers = {\n            ...channelState.members\n          };\n          delete newMembers[event.user.id];\n          channelState.members = newMembers;\n          if (channel.data?.member_count) {\n            channel.data.member_count = Math.max(channel.data.member_count - 1, 0);\n          }\n        }\n        break;\n      case \"notification.mark_unread\":\n        {\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          if (!(ownMessage && event.user)) break;\n          const unreadCount = event.unread_messages ?? 0;\n          channelState.read[event.user.id] = {\n            first_unread_message_id: event.first_unread_message_id,\n            last_read: new Date(event.last_read_at),\n            last_read_message_id: event.last_read_message_id,\n            user: event.user,\n            unread_messages: unreadCount\n          };\n          channelState.unreadCount = unreadCount;\n          break;\n        }\n      case \"channel.updated\":\n        if (event.channel) {\n          const isFrozenChanged = event.channel?.frozen !== void 0 && event.channel.frozen !== channel.data?.frozen;\n          if (isFrozenChanged) {\n            this.query({\n              state: false,\n              messages: {\n                limit: 0\n              },\n              watchers: {\n                limit: 0\n              }\n            });\n          }\n          const newChannelData = {\n            ...event.channel,\n            hidden: event.channel?.hidden ?? channel.data?.hidden,\n            own_capabilities: event.channel?.own_capabilities ?? channel.data?.own_capabilities\n          };\n          channel.data = newChannelData;\n        }\n        break;\n      case \"reaction.new\":\n        if (event.message && event.reaction) {\n          const {\n            message,\n            reaction\n          } = event;\n          event.message = channelState.addReaction(reaction, message);\n        }\n        break;\n      case \"reaction.deleted\":\n        if (event.message && event.reaction) {\n          const {\n            message,\n            reaction\n          } = event;\n          event.message = channelState.removeReaction(reaction, message);\n        }\n        break;\n      case \"reaction.updated\":\n        if (event.message && event.reaction) {\n          const {\n            message,\n            reaction\n          } = event;\n          event.message = channelState.addReaction(reaction, message, true);\n        }\n        break;\n      case \"channel.hidden\":\n        channel.data = {\n          ...channel.data,\n          hidden: true\n        };\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      case \"channel.visible\":\n        channel.data = {\n          ...channel.data,\n          hidden: false\n        };\n        this.getClient().offlineDb?.handleChannelVisibilityEvent({\n          event\n        });\n        break;\n      case \"user.banned\":\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: !!event.shadow,\n          banned: !event.shadow,\n          user: {\n            ...(channelState.members[event.user.id]?.user || {}),\n            ...event.user\n          }\n        };\n        break;\n      case \"user.unbanned\":\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: false,\n          banned: false,\n          user: {\n            ...(channelState.members[event.user.id]?.user || {}),\n            ...event.user\n          }\n        };\n        break;\n      default:\n    }\n    if (event.watcher_count !== void 0) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n  _checkInitialized() {\n    if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n      throw Error(`Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`);\n    }\n  }\n  _initializeState(state, messageSetToAddToIfDoesNotExist = \"latest\") {\n    const {\n      state: clientState,\n      user,\n      userID\n    } = this.getClient();\n    if (state.members) {\n      this._hydrateMembers({\n        members: state.members\n      });\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n    this.state.membership = state.membership || {};\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.initMessages();\n    }\n    const {\n      messageSet\n    } = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist);\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    if (state.pending_messages) {\n      this.state.pending_messages = state.pending_messages;\n    }\n    if (state.watcher_count !== void 0) {\n      this.state.watcher_count = state.watcher_count;\n    }\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n    if (userID != null) {\n      const last_read = this.state.last_message_at || /* @__PURE__ */new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n          unread_messages: 0\n        };\n      }\n    }\n    if (state.read) {\n      for (const read of state.read) {\n        this.state.read[read.user.id] = {\n          last_read: new Date(read.last_read),\n          last_read_message_id: read.last_read_message_id,\n          unread_messages: read.unread_messages ?? 0,\n          user: read.user\n        };\n        if (read.user.id === user?.id) {\n          this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n        }\n      }\n    }\n    return {\n      messageSet\n    };\n  }\n  _extendEventWithOwnReactions(event) {\n    if (!event.message) {\n      return;\n    }\n    const message = this.state.findMessage(event.message.id, event.message.parent_id);\n    if (message) {\n      event.message.own_reactions = message.own_reactions;\n    }\n  }\n  _hydrateMembers({\n    members,\n    overrideCurrentState = true\n  }) {\n    const newMembersById = members.reduce((membersById, member) => {\n      if (member.user) {\n        membersById[member.user.id] = member;\n      }\n      return membersById;\n    }, {});\n    if (overrideCurrentState) {\n      this.state.members = newMembersById;\n    } else if (!overrideCurrentState && members.length) {\n      this.state.members = {\n        ...this.state.members,\n        ...newMembersById\n      };\n    }\n  }\n  _disconnect() {\n    this._client.logger(\"info\", `channel:disconnect() - Disconnecting the channel ${this.cid}`, {\n      tags: [\"connection\", \"channel\"],\n      channel: this\n    });\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n};\n\n// src/client_state.ts\nvar ClientState = class {\n  constructor({\n    client\n  }) {\n    this.client = client;\n    this.users = {};\n    this.userChannelReferences = {};\n  }\n  updateUsers(users) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n  updateUser(user) {\n    if (user != null && this.client._cacheEnabled()) {\n      this.users[user.id] = user;\n    }\n  }\n  updateUserReference(user, channelID) {\n    if (user == null || !this.client._cacheEnabled()) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n  deleteAllChannelReference(channelID) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n};\n\n// node_modules/isomorphic-ws/browser.js\nvar ws = null;\nif (typeof WebSocket !== \"undefined\") {\n  ws = WebSocket;\n} else if (typeof MozWebSocket !== \"undefined\") {\n  ws = MozWebSocket;\n} else if (typeof global !== \"undefined\") {\n  ws = global.WebSocket || global.MozWebSocket;\n} else if (typeof window !== \"undefined\") {\n  ws = window.WebSocket || window.MozWebSocket;\n} else if (typeof self !== \"undefined\") {\n  ws = self.WebSocket || self.MozWebSocket;\n}\nvar browser_default2 = ws;\n\n// src/insights.ts\nvar InsightMetrics = class {\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n};\nvar postInsights = async (insightType, insights) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios_default.post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n    } catch (e) {\n      await sleep((i + 1) * 3e3);\n      continue;\n    }\n    break;\n  }\n};\nfunction buildWsFatalInsight(connection, event) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection)\n  };\n}\nfunction buildWsBaseInsight(connection) {\n  const {\n    client\n  } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: (/* @__PURE__ */new Date()).getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== \"undefined\" ? navigator?.onLine : null,\n    user_agent: typeof navigator !== \"undefined\" ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId\n  };\n}\nfunction buildWsSuccessAfterFailureInsight(connection) {\n  return buildWsBaseInsight(connection);\n}\n\n// src/connection.ts\nvar isCloseEvent = res => res.code !== void 0;\nvar isErrorEvent = res => res.error !== void 0;\nvar StableWSConnection = class {\n  constructor({\n    client\n  }) {\n    /**\n     * Builds and returns the url for websocket.\n     * @private\n     * @returns url string\n     */\n    this._buildUrl = () => {\n      const qs = this.client._buildWSPayload(this.requestID);\n      const token = this.client.tokenManager.getToken();\n      const wsUrlParams = this.client.options.wsUrlParams;\n      const params = new URLSearchParams(wsUrlParams);\n      params.set(\"json\", qs);\n      params.set(\"api_key\", this.client.key);\n      params.set(\"authorization\", `${token}`);\n      params.set(\"stream-auth-type\", this.client.getAuthType());\n      params.set(\"X-Stream-Client\", this.client.getUserAgent());\n      return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n    };\n    /**\n     * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n     *\n     * @param {Event} event Event with type online or offline\n     *\n     */\n    this.onlineStatusChanged = event => {\n      if (event.type === \"offline\") {\n        this._log(\"onlineStatusChanged() - Status changing to offline\");\n        this._setHealth(false);\n      } else if (event.type === \"online\") {\n        this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n        if (!this.isHealthy) {\n          this._reconnect({\n            interval: 10\n          });\n        }\n      }\n    };\n    this.onopen = wsID => {\n      if (this.wsID !== wsID) return;\n      this._log(\"onopen() - onopen callback\", {\n        wsID\n      });\n    };\n    this.onmessage = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this._log(\"onmessage() - onmessage callback\", {\n        event,\n        wsID\n      });\n      const data = typeof event.data === \"string\" ? JSON.parse(event.data) : null;\n      if (!this.isResolved && data) {\n        this.isResolved = true;\n        if (data.error) {\n          this.rejectPromise?.(this._errorFromWSEvent(data, false));\n          return;\n        }\n        this.resolvePromise?.(data);\n        this._setHealth(true);\n      }\n      this.lastEvent = /* @__PURE__ */new Date();\n      if (data && data.type === \"health.check\") {\n        this.scheduleNextPing();\n      }\n      this.client.handleEvent(event);\n      this.scheduleConnectionCheck();\n    };\n    this.onclose = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this._log(\"onclose() - onclose callback - \" + event.code, {\n        event,\n        wsID\n      });\n      if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n        const error = new Error(`WS connection reject with error ${event.reason}`);\n        error.reason = event.reason;\n        error.code = event.code;\n        error.wasClean = event.wasClean;\n        error.target = event.target;\n        this.rejectPromise?.(error);\n        this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n          event\n        });\n      } else {\n        this.consecutiveFailures += 1;\n        this.totalFailures += 1;\n        this._setHealth(false);\n        this.isConnecting = false;\n        this.rejectPromise?.(this._errorFromWSEvent(event));\n        this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n          event\n        });\n        this._reconnect();\n      }\n    };\n    this.onerror = (wsID, event) => {\n      if (this.wsID !== wsID) return;\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n      this._log(`onerror() - WS connection resulted into error`, {\n        event\n      });\n      this._reconnect();\n    };\n    /**\n     * _setHealth - Sets the connection to healthy or unhealthy.\n     * Broadcasts an event in case the connection status changed.\n     *\n     * @param {boolean} healthy boolean indicating if the connection is healthy or not\n     *\n     */\n    this._setHealth = healthy => {\n      if (healthy === this.isHealthy) return;\n      this.isHealthy = healthy;\n      if (this.isHealthy) {\n        this.client.dispatchEvent({\n          type: \"connection.changed\",\n          online: this.isHealthy\n        });\n        return;\n      }\n      setTimeout(() => {\n        if (this.isHealthy) return;\n        this.client.dispatchEvent({\n          type: \"connection.changed\",\n          online: this.isHealthy\n        });\n      }, 5e3);\n    };\n    /**\n     * _errorFromWSEvent - Creates an error object for the WS event\n     *\n     */\n    this._errorFromWSEvent = (event, isWSFailure2 = true) => {\n      let code;\n      let statusCode;\n      let message;\n      if (isCloseEvent(event)) {\n        code = event.code;\n        statusCode = \"unknown\";\n        message = event.reason;\n      }\n      if (isErrorEvent(event)) {\n        code = event.error.code;\n        statusCode = event.error.StatusCode;\n        message = event.error.message;\n      }\n      this._log(`_errorFromWSEvent() - WS failed with code ${code}`, {\n        event\n      }, \"warn\");\n      const error = new Error(`WS failed with code ${code} and reason - ${message}`);\n      error.code = code;\n      error.StatusCode = statusCode;\n      error.isWSFailure = isWSFailure2;\n      return error;\n    };\n    /**\n     * _setupPromise - sets up the this.connectOpen promise\n     */\n    this._setupConnectionPromise = () => {\n      this.isResolved = false;\n      this.connectionOpen = new Promise((resolve, reject) => {\n        this.resolvePromise = resolve;\n        this.rejectPromise = reject;\n      });\n    };\n    /**\n     * Schedules a next health check ping for websocket.\n     */\n    this.scheduleNextPing = () => {\n      if (this.healthCheckTimeoutRef) {\n        clearTimeout(this.healthCheckTimeoutRef);\n      }\n      this.healthCheckTimeoutRef = setTimeout(() => {\n        const data = [{\n          type: \"health.check\",\n          client_id: this.client.clientID\n        }];\n        try {\n          this.ws?.send(JSON.stringify(data));\n        } catch (e) {}\n      }, this.pingInterval);\n    };\n    /**\n     * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n     * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n     * to be reconnected.\n     */\n    this.scheduleConnectionCheck = () => {\n      if (this.connectionCheckTimeoutRef) {\n        clearTimeout(this.connectionCheckTimeoutRef);\n      }\n      this.connectionCheckTimeoutRef = setTimeout(() => {\n        const now = /* @__PURE__ */new Date();\n        if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n          this._log(\"scheduleConnectionCheck - going to reconnect\");\n          this._setHealth(false);\n          this._reconnect();\n        }\n      }, this.connectionCheckTimeout);\n    };\n    this.client = client;\n    this.consecutiveFailures = 0;\n    this.totalFailures = 0;\n    this.isConnecting = false;\n    this.isDisconnected = false;\n    this.isResolved = false;\n    this.isHealthy = false;\n    this.wsID = 1;\n    this.lastEvent = null;\n    this.pingInterval = 25 * 1e3;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1e3;\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n  _log(msg, extra = {}, level = \"info\") {\n    this.client.logger(level, \"connection:\" + msg, {\n      tags: [\"connection\"],\n      ...extra\n    });\n  }\n  setClient(client) {\n    this.client = client;\n  }\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15e3) {\n    if (this.isConnecting) {\n      throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n    }\n    this.isDisconnected = false;\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      const e = error;\n      if (e.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log(\"connect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n        this._reconnect({\n          refreshToken: true\n        });\n      } else if (!e.isWSFailure) {\n        throw new Error(JSON.stringify({\n          code: e.code,\n          StatusCode: e.StatusCode,\n          message: e.message,\n          isWSFailure: e.isWSFailure\n        }));\n      }\n    }\n    return await this._waitForHealthy(timeout);\n  }\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  _waitForHealthy(timeout = 15e3) {\n    return Promise.race([(async () => {\n      const interval = 50;\n      for (let i = 0; i <= timeout; i += interval) {\n        try {\n          return await this.connectionOpen;\n        } catch (error) {\n          if (i === timeout) {\n            throw new Error(JSON.stringify({\n              code: error.code,\n              StatusCode: error.StatusCode,\n              message: error.message,\n              isWSFailure: error.isWSFailure\n            }));\n          }\n          await sleep(interval);\n        }\n      }\n    })(), (async () => {\n      await sleep(timeout);\n      this.isConnecting = false;\n      throw new Error(JSON.stringify({\n        code: \"\",\n        StatusCode: \"\",\n        message: \"initial WS connection could not be established\",\n        isWSFailure: true\n      }));\n    })()]);\n  }\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n    removeConnectionEventListeners(this.onlineStatusChanged);\n    this.isHealthy = false;\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n    let isClosedPromise;\n    const {\n      ws: ws2\n    } = this;\n    if (ws2 && ws2.close && ws2.readyState === ws2.OPEN) {\n      isClosedPromise = new Promise(resolve => {\n        const onclose = event => {\n          this._log(`disconnect() - resolving isClosedPromise ${event ? \"with\" : \"without\"} close frame`, {\n            event\n          });\n          resolve();\n        };\n        ws2.onclose = onclose;\n        setTimeout(onclose, timeout != null ? timeout : 1e3);\n      });\n      this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n      ws2.close(chatCodes.WS_CLOSED_SUCCESS, \"Manually closed connection by calling client.disconnect()\");\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n    delete this.ws;\n    return isClosedPromise;\n  }\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting || this.isDisconnected && this.client.options.enableWSFallback) return;\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = (/* @__PURE__ */new Date()).getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {}\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, {\n        wsURL,\n        requestID: this.requestID\n      });\n      this.ws = new browser_default2(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n      if (response) {\n        this.connectionID = response.connection_id;\n        if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n          postInsights(\"ws_success_after_failure\", buildWsSuccessAfterFailureInsight(this));\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n    } catch (error) {\n      this.isConnecting = false;\n      this._log(`_connect() - Error - `, error);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n        const insights = buildWsFatalInsight(this, convertErrorToJson(error));\n        postInsights?.(\"ws_fatal\", insights);\n      }\n      throw error;\n    }\n  }\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(options = {}) {\n    this._log(\"_reconnect() - Initiating the reconnect\");\n    if (this.isConnecting || this.isHealthy) {\n      this._log(\"_reconnect() - Abort (1) since already connecting or healthy\");\n      return;\n    }\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    await sleep(interval);\n    if (this.isConnecting || this.isHealthy) {\n      this._log(\"_reconnect() - Abort (2) since already connecting or healthy\");\n      return;\n    }\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log(\"_reconnect() - Abort (3) since disconnect() is called\");\n      return;\n    }\n    this._log(\"_reconnect() - Destroying current WS connection\");\n    this._destroyCurrentWSConnection();\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n    try {\n      await this._connect();\n      this._log(\"_reconnect() - Waiting for recoverCallBack\");\n      await this.client.recoverState();\n      this._log(\"_reconnect() - Finished recoverCallBack\");\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log(\"_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect\");\n        return this._reconnect({\n          refreshToken: true\n        });\n      }\n      if (error.isWSFailure) {\n        this._log(\"_reconnect() - WS failure, so going to try to reconnect\");\n        this._reconnect();\n      }\n    }\n    this._log(\"_reconnect() - == END ==\");\n  }\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    this.wsID += 1;\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {}\n  }\n};\n\n// src/signing.ts\nvar import_jsonwebtoken = __toESM(require_jsonwebtoken());\nvar import_crypto = __toESM(require_crypto());\nfunction JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n  if (typeof userId !== \"string\") {\n    throw new TypeError(\"userId should be a string\");\n  }\n  const payload = {\n    user_id: userId,\n    ...extraData\n  };\n  if (import_jsonwebtoken.default == null || import_jsonwebtoken.default.sign == null) {\n    throw Error(`Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`);\n  }\n  const opts = Object.assign({\n    algorithm: \"HS256\",\n    noTimestamp: true\n  }, jwtOptions);\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return import_jsonwebtoken.default.sign(payload, apiSecret, opts);\n}\nfunction JWTServerToken(apiSecret, jwtOptions = {}) {\n  const payload = {\n    server: true\n  };\n  const opts = Object.assign({\n    algorithm: \"HS256\",\n    noTimestamp: true\n  }, jwtOptions);\n  return import_jsonwebtoken.default.sign(payload, apiSecret, opts);\n}\nfunction UserFromToken(token) {\n  const fragments = token.split(\".\");\n  if (fragments.length !== 3) {\n    return \"\";\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id;\n}\nfunction DevToken(userId) {\n  return [\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n  //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n  encodeBase64(JSON.stringify({\n    user_id: userId\n  })), \"devtoken\"\n  // hardcoded signature\n  ].join(\".\");\n}\nfunction CheckSignature(body, secret, signature) {\n  const key = Buffer.from(secret, \"utf8\");\n  const hash = import_crypto.default.createHmac(\"sha256\", key).update(body).digest(\"hex\");\n  try {\n    return import_crypto.default.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n  } catch {\n    return false;\n  }\n}\n\n// src/token_manager.ts\nvar TokenManager = class {\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret) {\n    /**\n     * Set the static string token or token provider.\n     * Token provider should return a token string or a promise which resolves to string token.\n     *\n     * @param {TokenOrProvider} tokenOrProvider\n     * @param {UserResponse} user\n     */\n    this.setTokenOrProvider = async (tokenOrProvider, user) => {\n      this.validateToken(tokenOrProvider, user);\n      this.user = user;\n      if (isFunction2(tokenOrProvider)) {\n        this.tokenProvider = tokenOrProvider;\n        this.type = \"provider\";\n      }\n      if (typeof tokenOrProvider === \"string\") {\n        this.token = tokenOrProvider;\n        this.type = \"static\";\n      }\n      if (!tokenOrProvider && this.user && this.secret) {\n        this.token = JWTUserToken(this.secret, user.id, {}, {});\n        this.type = \"static\";\n      }\n      await this.loadToken();\n    };\n    /**\n     * Resets the token manager.\n     * Useful for client disconnection or switching user.\n     */\n    this.reset = () => {\n      this.token = void 0;\n      this.tokenProvider = void 0;\n      this.type = \"static\";\n      this.user = void 0;\n      this.loadTokenPromise = null;\n    };\n    // Validates the user token.\n    this.validateToken = (tokenOrProvider, user) => {\n      if (user && user.anon && !tokenOrProvider) return;\n      if (!this.secret && !tokenOrProvider) {\n        throw new Error(\"User token can not be empty\");\n      }\n      if (tokenOrProvider && typeof tokenOrProvider !== \"string\" && !isFunction2(tokenOrProvider)) {\n        throw new Error(\"user token should either be a string or a function\");\n      }\n      if (typeof tokenOrProvider === \"string\") {\n        if (user.anon && tokenOrProvider === \"\") return;\n        const tokenUserId = UserFromToken(tokenOrProvider);\n        if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === \"\" || tokenUserId !== user.id)) {\n          throw new Error(\"userToken does not have a user_id or is not matching with user.id\");\n        }\n      }\n    };\n    // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n    // case a function should wait.\n    this.tokenReady = () => this.loadTokenPromise;\n    // Fetches a token from tokenProvider function and sets in tokenManager.\n    // In case of static token, it will simply resolve to static token.\n    this.loadToken = () => {\n      this.loadTokenPromise = new Promise(async (resolve, reject) => {\n        if (this.type === \"static\") {\n          return resolve(this.token);\n        }\n        if (this.tokenProvider && typeof this.tokenProvider !== \"string\") {\n          try {\n            this.token = await this.tokenProvider();\n          } catch (e) {\n            return reject(new Error(`Call to tokenProvider failed with message: ${e}`, {\n              cause: e\n            }));\n          }\n          resolve(this.token);\n        }\n      });\n      return this.loadTokenPromise;\n    };\n    // Returns a current token\n    this.getToken = () => {\n      if (this.token) {\n        return this.token;\n      }\n      if (this.user && this.user.anon && !this.token) {\n        return this.token;\n      }\n      if (this.secret) {\n        return JWTServerToken(this.secret);\n      }\n      throw new Error(`Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`);\n    };\n    this.isStatic = () => this.type === \"static\";\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n    this.type = \"static\";\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n};\n\n// src/errors.ts\nvar APIErrorCodes = {\n  \"-1\": {\n    name: \"InternalSystemError\",\n    retryable: true\n  },\n  \"2\": {\n    name: \"AccessKeyError\",\n    retryable: false\n  },\n  \"3\": {\n    name: \"AuthenticationFailedError\",\n    retryable: true\n  },\n  \"4\": {\n    name: \"InputError\",\n    retryable: false\n  },\n  \"6\": {\n    name: \"DuplicateUsernameError\",\n    retryable: false\n  },\n  \"9\": {\n    name: \"RateLimitError\",\n    retryable: true\n  },\n  \"16\": {\n    name: \"DoesNotExistError\",\n    retryable: false\n  },\n  \"17\": {\n    name: \"NotAllowedError\",\n    retryable: false\n  },\n  \"18\": {\n    name: \"EventNotSupportedError\",\n    retryable: false\n  },\n  \"19\": {\n    name: \"ChannelFeatureNotSupportedError\",\n    retryable: false\n  },\n  \"20\": {\n    name: \"MessageTooLongError\",\n    retryable: false\n  },\n  \"21\": {\n    name: \"MultipleNestingLevelError\",\n    retryable: false\n  },\n  \"22\": {\n    name: \"PayloadTooBigError\",\n    retryable: false\n  },\n  \"23\": {\n    name: \"RequestTimeoutError\",\n    retryable: true\n  },\n  \"24\": {\n    name: \"MaxHeaderSizeExceededError\",\n    retryable: false\n  },\n  \"40\": {\n    name: \"AuthErrorTokenExpired\",\n    retryable: false\n  },\n  \"41\": {\n    name: \"AuthErrorTokenNotValidYet\",\n    retryable: false\n  },\n  \"42\": {\n    name: \"AuthErrorTokenUsedBeforeIssuedAt\",\n    retryable: false\n  },\n  \"43\": {\n    name: \"AuthErrorTokenSignatureInvalid\",\n    retryable: false\n  },\n  \"44\": {\n    name: \"CustomCommandEndpointMissingError\",\n    retryable: false\n  },\n  \"45\": {\n    name: \"CustomCommandEndpointCallError\",\n    retryable: true\n  },\n  \"46\": {\n    name: \"ConnectionIDNotFoundError\",\n    retryable: false\n  },\n  \"60\": {\n    name: \"CoolDownError\",\n    retryable: true\n  },\n  \"69\": {\n    name: \"ErrWrongRegion\",\n    retryable: false\n  },\n  \"70\": {\n    name: \"ErrQueryChannelPermissions\",\n    retryable: false\n  },\n  \"71\": {\n    name: \"ErrTooManyConnections\",\n    retryable: true\n  },\n  \"99\": {\n    name: \"AppSuspendedError\",\n    retryable: false\n  }\n};\nfunction isAPIError(error) {\n  return error.code !== void 0;\n}\nfunction isErrorRetryable(error) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\nfunction isConnectionIDError(error) {\n  return error.code === 46;\n}\nfunction isWSFailure(err) {\n  if (typeof err.isWSFailure === \"boolean\") {\n    return err.isWSFailure;\n  }\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\nfunction isErrorResponse(res) {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n\n// src/connection_fallback.ts\nvar WSConnectionFallback = class {\n  constructor({\n    client\n  }) {\n    /** @private */\n    this._onlineStatusChanged = event => {\n      this._log(`_onlineStatusChanged() - ${event.type}`);\n      if (event.type === \"offline\") {\n        this._setState(\"CLOSED\" /* Closed */);\n        this.cancelToken?.cancel(\"disconnect() is called\");\n        this.cancelToken = void 0;\n        return;\n      }\n      if (event.type === \"online\" && this.state === \"CLOSED\" /* Closed */) {\n        this.connect(true);\n      }\n    };\n    /** @private */\n    this._req = async (params, config, retry) => {\n      if (!this.cancelToken && !params.close) {\n        this.cancelToken = axios_default.CancelToken.source();\n      }\n      try {\n        const res = await this.client.doAxiosRequest(\"get\", this.client.baseURL.replace(\":3030\", \":8900\") + \"/longpoll\",\n        // replace port if present for testing with local API\n        void 0, {\n          config: {\n            ...config,\n            cancelToken: this.cancelToken?.token\n          },\n          params\n        });\n        this.consecutiveFailures = 0;\n        return res;\n      } catch (error) {\n        this.consecutiveFailures += 1;\n        if (retry && isErrorRetryable(error)) {\n          this._log(`_req() - Retryable error, retrying request`);\n          await sleep(retryInterval(this.consecutiveFailures));\n          return this._req(params, config, retry);\n        }\n        throw error;\n      }\n    };\n    /** @private */\n    this._poll = async () => {\n      while (this.state === \"CONNECTED\" /* Connected */) {\n        try {\n          const data = await this._req({}, {\n            timeout: 3e4\n          }, true);\n          if (data.events?.length) {\n            for (let i = 0; i < data.events.length; i++) {\n              this.client.dispatchEvent(data.events[i]);\n            }\n          }\n        } catch (error) {\n          if (axios_default.isCancel(error)) {\n            this._log(`_poll() - axios canceled request`);\n            return;\n          }\n          if (isConnectionIDError(error)) {\n            this._log(`_poll() - ConnectionID error, connecting without ID...`);\n            this._setState(\"DISCONNECTED\" /* Disconnected */);\n            this.connect(true);\n            return;\n          }\n          if (isAPIError(error) && !isErrorRetryable(error)) {\n            this._setState(\"CLOSED\" /* Closed */);\n            return;\n          }\n          await sleep(retryInterval(this.consecutiveFailures));\n        }\n      }\n    };\n    /**\n     * connect try to open a longpoll request\n     * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n     */\n    this.connect = async (reconnect = false) => {\n      if (this.state === \"CONNECTING\" /* Connecting */) {\n        this._log(\"connect() - connecting already in progress\", {\n          reconnect\n        }, \"warn\");\n        return;\n      }\n      if (this.state === \"CONNECTED\" /* Connected */) {\n        this._log(\"connect() - already connected and polling\", {\n          reconnect\n        }, \"warn\");\n        return;\n      }\n      this._setState(\"CONNECTING\" /* Connecting */);\n      this.connectionID = void 0;\n      try {\n        const {\n          event\n        } = await this._req({\n          json: this.client._buildWSPayload()\n        }, {\n          timeout: 8e3\n        },\n        // 8s\n        reconnect);\n        this._setState(\"CONNECTED\" /* Connected */);\n        this.connectionID = event.connection_id;\n        this.client.dispatchEvent(event);\n        this._poll();\n        if (reconnect) {\n          this.client.recoverState();\n        }\n        return event;\n      } catch (err) {\n        this._setState(\"CLOSED\" /* Closed */);\n        throw err;\n      }\n    };\n    /**\n     * isHealthy checks if there is a connectionID and connection is in Connected state\n     */\n    this.isHealthy = () => !!this.connectionID && this.state === \"CONNECTED\" /* Connected */;\n    this.disconnect = async (timeout = 2e3) => {\n      removeConnectionEventListeners(this._onlineStatusChanged);\n      this._setState(\"DISCONNECTED\" /* Disconnected */);\n      this.cancelToken?.cancel(\"disconnect() is called\");\n      this.cancelToken = void 0;\n      const connection_id = this.connectionID;\n      this.connectionID = void 0;\n      try {\n        await this._req({\n          close: true,\n          connection_id\n        }, {\n          timeout\n        }, false);\n        this._log(`disconnect() - Closed connectionID`);\n      } catch (err) {\n        this._log(`disconnect() - Failed`, {\n          err\n        }, \"error\");\n      }\n    };\n    this.client = client;\n    this.state = \"INIT\" /* Init */;\n    this.consecutiveFailures = 0;\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n  _log(msg, extra = {}, level = \"info\") {\n    this.client.logger(level, \"WSConnectionFallback:\" + msg, {\n      tags: [\"connection_fallback\", \"connection\"],\n      ...extra\n    });\n  }\n  _setState(state) {\n    this._log(`_setState() - ${state}`);\n    if (this.state === \"CONNECTING\" /* Connecting */ && state === \"CONNECTED\" /* Connected */) {\n      this.client.dispatchEvent({\n        type: \"connection.changed\",\n        online: true\n      });\n    }\n    if (state === \"CLOSED\" /* Closed */ || state === \"DISCONNECTED\" /* Disconnected */) {\n      this.client.dispatchEvent({\n        type: \"connection.changed\",\n        online: false\n      });\n    }\n    this.state = state;\n  }\n};\n\n// src/segment.ts\nvar Segment = class {\n  constructor(client, type, id, data) {\n    this.client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n  }\n  create() {\n    const body = {\n      name: this.data?.name,\n      filter: this.data?.filter,\n      description: this.data?.description,\n      all_sender_channels: this.data?.all_sender_channels,\n      all_users: this.data?.all_users\n    };\n    return this.client.createSegment(this.type, this.id, body);\n  }\n  verifySegmentId() {\n    if (!this.id) {\n      throw new Error(\"Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)\");\n    }\n  }\n  get() {\n    this.verifySegmentId();\n    return this.client.getSegment(this.id);\n  }\n  update(data) {\n    this.verifySegmentId();\n    return this.client.updateSegment(this.id, data);\n  }\n  addTargets(targets) {\n    this.verifySegmentId();\n    return this.client.addSegmentTargets(this.id, targets);\n  }\n  removeTargets(targets) {\n    this.verifySegmentId();\n    return this.client.removeSegmentTargets(this.id, targets);\n  }\n  delete() {\n    this.verifySegmentId();\n    return this.client.deleteSegment(this.id);\n  }\n  targetExists(targetId) {\n    this.verifySegmentId();\n    return this.client.segmentTargetExists(this.id, targetId);\n  }\n  queryTargets(filter2 = {}, sort = [], options = {}) {\n    this.verifySegmentId();\n    return this.client.querySegmentTargets(this.id, filter2, sort, options);\n  }\n};\n\n// src/moderation.ts\nvar MODERATION_ENTITY_TYPES = {\n  user: \"stream:user\",\n  message: \"stream:chat:v1:message\",\n  userprofile: \"stream:v1:user_profile\"\n};\nvar Moderation = class {\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Flag a user\n   *\n   * @param {string} flaggedUserID User ID to be flagged\n   * @param {string} reason Reason for flagging the user\n   * @param {Object} options Additional options for flagging the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  flagUser(flaggedUserID, reason, options = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, \"\", reason, options);\n  }\n  /**\n   * Flag a message\n   *\n   * @param {string} messageID Message ID to be flagged\n   * @param {string} reason Reason for flagging the message\n   * @param {Object} options Additional options for flagging the message\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  flagMessage(messageID, reason, options = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.message, messageID, \"\", reason, options);\n  }\n  /**\n   * Flag a user\n   *\n   * @param {string} entityType Entity type to be flagged\n   * @param {string} entityId Entity ID to be flagged\n   * @param {string} entityCreatorID User ID of the entity creator\n   * @param {string} reason Reason for flagging the entity\n   * @param {Object} options Additional options for flagging the entity\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity\n   * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flag(entityType, entityId, entityCreatorID, reason, options = {}) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/flag\", {\n      entity_type: entityType,\n      entity_id: entityId,\n      entity_creator_id: entityCreatorID,\n      reason,\n      ...options\n    });\n  }\n  /**\n   * Mute a user\n   * @param {string} targetID  User ID to be muted\n   * @param {Object} options Additional options for muting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user\n   * @param {number} options.timeout Timeout for the mute in minutes\n   * @returns\n   */\n  async muteUser(targetID, options = {}) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/mute\", {\n      target_ids: [targetID],\n      ...options\n    });\n  }\n  /**\n   * Unmute a user\n   * @param {string} targetID  User ID to be unmuted\n   * @param {Object} options Additional options for unmuting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user\n   * @returns\n   */\n  async unmuteUser(targetID, options) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/unmute\", {\n      target_ids: [targetID],\n      ...options\n    });\n  }\n  /**\n   * Get moderation report for a user\n   * @param {string} userID User ID for which moderation report is to be fetched\n   * @param {Object} options Additional options for fetching the moderation report\n   * @param {boolean} options.create_user_if_not_exists Create user if not exists\n   * @param {boolean} options.include_user_blocks Include user blocks\n   * @param {boolean} options.include_user_mutes Include user mutes\n   */\n  async getUserModerationReport(userID, options = {}) {\n    return await this.client.get(this.client.baseURL + `/api/v2/moderation/user_report`, {\n      user_id: userID,\n      ...options\n    });\n  }\n  /**\n   * Query review queue\n   * @param {Object} filterConditions Filter conditions for querying review queue\n   * @param {Object} sort Sort conditions for querying review queue\n   * @param {Object} options Pagination options for querying review queue\n   */\n  async queryReviewQueue(filterConditions = {}, sort = [], options = {}) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/review_queue\", {\n      filter: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...options\n    });\n  }\n  /**\n   * Upsert moderation config\n   * @param {Object} config Moderation config to be upserted\n   */\n  async upsertConfig(config) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/config\", config);\n  }\n  /**\n   * Get moderation config\n   * @param {string} key Key for which moderation config is to be fetched\n   */\n  async getConfig(key, data) {\n    return await this.client.get(this.client.baseURL + \"/api/v2/moderation/config/\" + key, data);\n  }\n  async deleteConfig(key, data) {\n    return await this.client.delete(this.client.baseURL + \"/api/v2/moderation/config/\" + key, data);\n  }\n  /**\n   * Query moderation configs\n   * @param {Object} filterConditions Filter conditions for querying moderation configs\n   * @param {Object} sort Sort conditions for querying moderation configs\n   * @param {Object} options Additional options for querying moderation configs\n   */\n  async queryConfigs(filterConditions, sort, options = {}) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/configs\", {\n      filter: filterConditions,\n      sort,\n      ...options\n    });\n  }\n  async submitAction(actionType, itemID, options = {}) {\n    return await this.client.post(this.client.baseURL + \"/api/v2/moderation/submit_action\", {\n      action_type: actionType,\n      item_id: itemID,\n      ...options\n    });\n  }\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param configKey\n   * @param options\n   * @returns\n   */\n  async check(entityType, entityID, entityCreatorID, moderationPayload, configKey, options) {\n    return await this.client.post(this.client.baseURL + `/api/v2/moderation/check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      config_key: configKey,\n      options\n    });\n  }\n  /**\n   * Experimental: Check user profile\n   *\n   * Warning: This is an experimental feature and the API is subject to change.\n   *\n   * This function is used to check a user profile for moderation.\n   * This will not create any review queue items for the user profile.\n   * You can just use this to check whether to allow a certain user profile to be created or not.\n   *\n   * Example:\n   *\n   * ```ts\n   * const res = await client.moderation.checkUserProfile(userId, { username: \"fuck_boy_001\", image: \"https://example.com/profile.jpg\" });\n   * if (res.recommended_action === \"remove\") {\n   *   // Block the user profile from being created\n   * } else {\n   *   // Allow the user profile to be created\n   * }\n   * ```\n   *\n   * @param userId\n   * @param profile.username\n   * @param profile.image\n   * @returns\n   */\n  async checkUserProfile(userId, profile) {\n    if (!profile.username && !profile.image) {\n      throw new Error(\"Either username or image must be provided\");\n    }\n    const moderationPayload = {};\n    if (profile.username) {\n      moderationPayload.texts = [profile.username];\n    }\n    if (profile.image) {\n      moderationPayload.images = [profile.image];\n    }\n    return await this.check(MODERATION_ENTITY_TYPES.userprofile, userId, userId, moderationPayload, \"user_profile:default\", {\n      force_sync: true,\n      test_mode: true\n    });\n  }\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity\n   * @returns\n   */\n  async addCustomFlags(entityType, entityID, entityCreatorID, moderationPayload, flags) {\n    return await this.client.post(this.client.baseURL + `/api/v2/moderation/custom_check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      flags\n    });\n  }\n  /**\n   * Add custom flags to a message\n   * @param {string} messageID Message ID to be flagged\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message\n   * @returns\n   */\n  async addCustomMessageFlags(messageID, flags) {\n    return await this.addCustomFlags(MODERATION_ENTITY_TYPES.message, messageID, \"\", {}, flags);\n  }\n};\n\n// src/thread_manager.ts\nvar DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1e3;\nvar MAX_QUERY_THREADS_LIMIT = 25;\nvar THREAD_MANAGER_INITIAL_STATE = {\n  active: false,\n  isThreadOrderStale: false,\n  threads: [],\n  unreadThreadCount: 0,\n  unseenThreadIds: [],\n  lastConnectionDropAt: null,\n  pagination: {\n    isLoading: false,\n    isLoadingNext: false,\n    nextCursor: null\n  },\n  ready: false\n};\nvar ThreadManager = class extends WithSubscriptions {\n  // cache used in combination with threadsById\n  // used for threads which are not stored in the list\n  // private threadCache: Record<string, Thread | undefined> = {};\n  constructor({\n    client\n  }) {\n    super();\n    this.resetState = () => {\n      this.state.next(THREAD_MANAGER_INITIAL_STATE);\n    };\n    this.activate = () => {\n      this.state.partialNext({\n        active: true\n      });\n    };\n    this.deactivate = () => {\n      this.state.partialNext({\n        active: false\n      });\n    };\n    this.registerSubscriptions = () => {\n      if (this.hasSubscriptions) return;\n      this.addUnsubscribeFunction(this.subscribeUnreadThreadsCountChange());\n      this.addUnsubscribeFunction(this.subscribeManageThreadSubscriptions());\n      this.addUnsubscribeFunction(this.subscribeReloadOnActivation());\n      this.addUnsubscribeFunction(this.subscribeNewReplies());\n      this.addUnsubscribeFunction(this.subscribeRecoverAfterConnectionDrop());\n      this.addUnsubscribeFunction(this.subscribeChannelDeleted());\n    };\n    this.subscribeUnreadThreadsCountChange = () => {\n      const {\n        unread_threads: unreadThreadCount = 0\n      } = this.client.user ?? {};\n      this.state.partialNext({\n        unreadThreadCount\n      });\n      const unsubscribeFunctions = [\"health.check\", \"notification.mark_read\", \"notification.thread_message_new\", \"notification.channel_deleted\"].map(eventType => this.client.on(eventType, event => {\n        const {\n          unread_threads: unreadThreadCount2\n        } = event.me ?? event;\n        if (typeof unreadThreadCount2 === \"number\") {\n          this.state.partialNext({\n            unreadThreadCount: unreadThreadCount2\n          });\n        }\n      }).unsubscribe);\n      return () => unsubscribeFunctions.forEach(unsubscribe => unsubscribe());\n    };\n    this.subscribeChannelDeleted = () => this.client.on(\"notification.channel_deleted\", event => {\n      const {\n        cid\n      } = event;\n      const {\n        threads\n      } = this.state.getLatestValue();\n      const newThreads = threads.filter(thread => thread.channel.cid !== cid);\n      this.state.partialNext({\n        threads: newThreads\n      });\n    }).unsubscribe;\n    this.subscribeManageThreadSubscriptions = () => this.state.subscribeWithSelector(nextValue => ({\n      threads: nextValue.threads\n    }), ({\n      threads: nextThreads\n    }, prev) => {\n      const {\n        threads: prevThreads = []\n      } = prev ?? {};\n      const removedThreads = prevThreads.filter(thread => thread !== this.threadsById[thread.id]);\n      nextThreads.forEach(thread => thread.registerSubscriptions());\n      removedThreads.forEach(thread => thread.unregisterSubscriptions());\n    });\n    this.subscribeReloadOnActivation = () => this.state.subscribeWithSelector(nextValue => ({\n      active: nextValue.active\n    }), ({\n      active\n    }) => {\n      if (active) this.reload();\n    });\n    this.subscribeNewReplies = () => this.client.on(\"notification.thread_message_new\", event => {\n      const parentId = event.message?.parent_id;\n      if (!parentId) return;\n      const {\n        unseenThreadIds,\n        ready\n      } = this.state.getLatestValue();\n      if (!ready) return;\n      if (this.threadsById[parentId]) {\n        this.state.partialNext({\n          isThreadOrderStale: true\n        });\n      } else if (!unseenThreadIds.includes(parentId)) {\n        this.state.partialNext({\n          unseenThreadIds: unseenThreadIds.concat(parentId)\n        });\n      }\n    }).unsubscribe;\n    this.subscribeRecoverAfterConnectionDrop = () => {\n      const unsubscribeConnectionDropped = this.client.on(\"connection.changed\", event => {\n        if (event.online === false) {\n          this.state.next(current => current.lastConnectionDropAt ? current : {\n            ...current,\n            lastConnectionDropAt: /* @__PURE__ */new Date()\n          });\n        }\n      }).unsubscribe;\n      const throttledHandleConnectionRecovered = throttle(() => {\n        const {\n          lastConnectionDropAt\n        } = this.state.getLatestValue();\n        if (!lastConnectionDropAt) return;\n        this.reload({\n          force: true\n        });\n      }, DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION, {\n        trailing: true\n      });\n      const unsubscribeConnectionRecovered = this.client.on(\"connection.recovered\", throttledHandleConnectionRecovered).unsubscribe;\n      return () => {\n        unsubscribeConnectionDropped();\n        unsubscribeConnectionRecovered();\n      };\n    };\n    this.unregisterSubscriptions = () => {\n      this.state.getLatestValue().threads.forEach(thread => thread.unregisterSubscriptions());\n      return super.unregisterSubscriptions();\n    };\n    this.reload = async ({\n      force = false\n    } = {}) => {\n      const {\n        threads,\n        unseenThreadIds,\n        isThreadOrderStale,\n        pagination,\n        ready\n      } = this.state.getLatestValue();\n      if (pagination.isLoading) return;\n      if (!force && ready && !unseenThreadIds.length && !isThreadOrderStale) return;\n      const limit = threads.length + unseenThreadIds.length;\n      try {\n        this.state.next(current => ({\n          ...current,\n          pagination: {\n            ...current.pagination,\n            isLoading: true\n          }\n        }));\n        const response = await this.queryThreads({\n          limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT\n        });\n        const nextThreads = [];\n        for (const incomingThread of response.threads) {\n          const existingThread = this.threadsById[incomingThread.id];\n          if (existingThread) {\n            nextThreads.push(existingThread);\n            if (existingThread.hasStaleState) {\n              existingThread.hydrateState(incomingThread);\n            }\n          } else {\n            nextThreads.push(incomingThread);\n          }\n        }\n        this.state.next(current => ({\n          ...current,\n          threads: nextThreads,\n          unseenThreadIds: [],\n          isThreadOrderStale: false,\n          pagination: {\n            ...current.pagination,\n            isLoading: false,\n            nextCursor: response.next ?? null\n          },\n          ready: true\n        }));\n      } catch (error) {\n        this.client.logger(\"error\", error.message);\n        this.state.next(current => ({\n          ...current,\n          pagination: {\n            ...current.pagination,\n            isLoading: false\n          }\n        }));\n      }\n    };\n    this.queryThreads = (options = {}) => this.client.queryThreads({\n      limit: 25,\n      participant_limit: 10,\n      reply_limit: 10,\n      watch: true,\n      ...options\n    });\n    this.loadNextPage = async (options = {}) => {\n      const {\n        pagination\n      } = this.state.getLatestValue();\n      if (pagination.isLoadingNext || !pagination.nextCursor) return;\n      try {\n        this.state.partialNext({\n          pagination: {\n            ...pagination,\n            isLoadingNext: true\n          }\n        });\n        const response = await this.queryThreads({\n          ...options,\n          next: pagination.nextCursor\n        });\n        this.state.next(current => ({\n          ...current,\n          threads: response.threads.length ? current.threads.concat(response.threads) : current.threads,\n          pagination: {\n            ...current.pagination,\n            nextCursor: response.next ?? null,\n            isLoadingNext: false\n          }\n        }));\n      } catch (error) {\n        this.client.logger(\"error\", error.message);\n        this.state.next(current => ({\n          ...current,\n          pagination: {\n            ...current.pagination,\n            isLoadingNext: false\n          }\n        }));\n      }\n    };\n    this.client = client;\n    this.state = new StateStore(THREAD_MANAGER_INITIAL_STATE);\n    this.threadsByIdGetterCache = {\n      threads: [],\n      threadsById: {}\n    };\n  }\n  get threadsById() {\n    const {\n      threads\n    } = this.state.getLatestValue();\n    if (threads === this.threadsByIdGetterCache.threads) {\n      return this.threadsByIdGetterCache.threadsById;\n    }\n    const threadsById = threads.reduce((newThreadsById, thread) => {\n      newThreadsById[thread.id] = thread;\n      return newThreadsById;\n    }, {});\n    this.threadsByIdGetterCache.threads = threads;\n    this.threadsByIdGetterCache.threadsById = threadsById;\n    return threadsById;\n  }\n};\n\n// src/poll.ts\nvar isPollUpdatedEvent = e => e.type === \"poll.updated\";\nvar isPollClosedEventEvent = e => e.type === \"poll.closed\";\nvar isPollVoteCastedEvent = e => e.type === \"poll.vote_casted\";\nvar isPollVoteChangedEvent = e => e.type === \"poll.vote_changed\";\nvar isPollVoteRemovedEvent = e => e.type === \"poll.vote_removed\";\nvar isVoteAnswer = vote => !!vote?.answer_text;\nvar Poll = class {\n  constructor({\n    client,\n    poll\n  }) {\n    this.getInitialStateFromPollResponse = poll => {\n      const {\n        own_votes,\n        id,\n        ...pollResponseForState\n      } = poll;\n      const {\n        ownAnswer,\n        ownVotes\n      } = own_votes?.reduce((acc, voteOrAnswer) => {\n        if (isVoteAnswer(voteOrAnswer)) {\n          acc.ownAnswer = voteOrAnswer;\n        } else {\n          acc.ownVotes.push(voteOrAnswer);\n        }\n        return acc;\n      }, {\n        ownVotes: []\n      }) ?? {\n        ownVotes: []\n      };\n      return {\n        ...pollResponseForState,\n        lastActivityAt: /* @__PURE__ */new Date(),\n        maxVotedOptionIds: getMaxVotedOptionIds(pollResponseForState.vote_counts_by_option),\n        ownAnswer,\n        ownVotesByOptionId: getOwnVotesByOptionId(ownVotes)\n      };\n    };\n    this.upsertOfflineDb = () => {\n      this.client.offlineDb?.executeQuerySafely(db => db.upsertPoll({\n        poll: mapPollStateToResponse(this)\n      }), {\n        method: \"upsertPoll\"\n      });\n    };\n    this.reinitializeState = poll => {\n      this.state.partialNext(this.getInitialStateFromPollResponse(poll));\n    };\n    this.handlePollUpdated = event => {\n      if (event.poll?.id && event.poll.id !== this.id) return;\n      if (!isPollUpdatedEvent(event)) return;\n      const {\n        id,\n        ...pollData\n      } = extractPollData(event.poll);\n      this.state.partialNext({\n        ...pollData,\n        lastActivityAt: new Date(event.created_at)\n      });\n      this.upsertOfflineDb();\n    };\n    this.handlePollClosed = event => {\n      if (event.poll?.id && event.poll.id !== this.id) return;\n      if (!isPollClosedEventEvent(event)) return;\n      this.state.partialNext({\n        is_closed: true,\n        lastActivityAt: new Date(event.created_at)\n      });\n      this.upsertOfflineDb();\n    };\n    this.handleVoteCasted = event => {\n      if (event.poll?.id && event.poll.id !== this.id) return;\n      if (!isPollVoteCastedEvent(event)) return;\n      const currentState = this.data;\n      const isOwnVote = event.poll_vote.user_id === this.client.userID;\n      let latestAnswers = [...currentState.latest_answers];\n      let ownAnswer = currentState.ownAnswer;\n      const ownVotesByOptionId = currentState.ownVotesByOptionId;\n      let maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isOwnVote) {\n        if (isVoteAnswer(event.poll_vote)) {\n          ownAnswer = event.poll_vote;\n        } else if (event.poll_vote.option_id) {\n          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n        }\n      }\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote, ...latestAnswers];\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n      const pollEnrichData = extractPollEnrichedData(event.poll);\n      this.state.partialNext({\n        ...pollEnrichData,\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer,\n        ownVotesByOptionId,\n        maxVotedOptionIds\n      });\n      this.upsertOfflineDb();\n    };\n    this.handleVoteChanged = event => {\n      if (event.poll?.id && event.poll.id !== this.id) return;\n      if (!isPollVoteChangedEvent(event)) return;\n      const currentState = this.data;\n      const isOwnVote = event.poll_vote.user_id === this.client.userID;\n      let latestAnswers = [...currentState.latest_answers];\n      let ownAnswer = currentState.ownAnswer;\n      let ownVotesByOptionId = currentState.ownVotesByOptionId;\n      let maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isOwnVote) {\n        if (isVoteAnswer(event.poll_vote)) {\n          latestAnswers = [event.poll_vote, ...latestAnswers.filter(answer => answer.id !== event.poll_vote.id)];\n          ownAnswer = event.poll_vote;\n        } else if (event.poll_vote.option_id) {\n          if (event.poll.enforce_unique_vote) {\n            ownVotesByOptionId = {\n              [event.poll_vote.option_id]: event.poll_vote\n            };\n          } else {\n            ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce((acc, [optionId, vote]) => {\n              if (optionId !== event.poll_vote.option_id && vote.id === event.poll_vote.id) {\n                return acc;\n              }\n              acc[optionId] = vote;\n              return acc;\n            }, {});\n            ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n          }\n          if (ownAnswer?.id === event.poll_vote.id) {\n            ownAnswer = void 0;\n          }\n          maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n        }\n      } else if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [event.poll_vote, ...latestAnswers];\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n      const pollEnrichData = extractPollEnrichedData(event.poll);\n      this.state.partialNext({\n        ...pollEnrichData,\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer,\n        ownVotesByOptionId,\n        maxVotedOptionIds\n      });\n      this.upsertOfflineDb();\n    };\n    this.handleVoteRemoved = event => {\n      if (event.poll?.id && event.poll.id !== this.id) return;\n      if (!isPollVoteRemovedEvent(event)) return;\n      const currentState = this.data;\n      const isOwnVote = event.poll_vote.user_id === this.client.userID;\n      let latestAnswers = [...currentState.latest_answers];\n      let ownAnswer = currentState.ownAnswer;\n      const ownVotesByOptionId = {\n        ...currentState.ownVotesByOptionId\n      };\n      let maxVotedOptionIds = currentState.maxVotedOptionIds;\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = latestAnswers.filter(answer => answer.id !== event.poll_vote.id);\n        if (isOwnVote) {\n          ownAnswer = void 0;\n        }\n      } else {\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n        if (isOwnVote && event.poll_vote.option_id) {\n          delete ownVotesByOptionId[event.poll_vote.option_id];\n        }\n      }\n      const pollEnrichData = extractPollEnrichedData(event.poll);\n      this.state.partialNext({\n        ...pollEnrichData,\n        latest_answers: latestAnswers,\n        lastActivityAt: new Date(event.created_at),\n        ownAnswer,\n        ownVotesByOptionId,\n        maxVotedOptionIds\n      });\n      this.upsertOfflineDb();\n    };\n    this.query = async id => {\n      const {\n        poll\n      } = await this.client.getPoll(id);\n      this.state.partialNext({\n        ...poll,\n        lastActivityAt: /* @__PURE__ */new Date()\n      });\n      return poll;\n    };\n    this.update = async data => await this.client.updatePoll({\n      ...data,\n      id: this.id\n    });\n    this.partialUpdate = async partialPollObject => await this.client.partialUpdatePoll(this.id, partialPollObject);\n    this.close = async () => await this.client.closePoll(this.id);\n    this.delete = async () => await this.client.deletePoll(this.id);\n    this.createOption = async option => await this.client.createPollOption(this.id, option);\n    this.updateOption = async option => await this.client.updatePollOption(this.id, option);\n    this.deleteOption = async optionId => await this.client.deletePollOption(this.id, optionId);\n    this.castVote = async (optionId, messageId) => {\n      const {\n        max_votes_allowed,\n        ownVotesByOptionId\n      } = this.data;\n      const reachedVoteLimit = max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;\n      if (reachedVoteLimit) {\n        let oldestVote = Object.values(ownVotesByOptionId)[0];\n        Object.values(ownVotesByOptionId).slice(1).forEach(vote => {\n          if (!oldestVote?.created_at || new Date(vote.created_at) < new Date(oldestVote.created_at)) {\n            oldestVote = vote;\n          }\n        });\n        if (oldestVote?.id) {\n          await this.removeVote(oldestVote.id, messageId);\n        }\n      }\n      return await this.client.castPollVote(messageId, this.id, {\n        option_id: optionId\n      });\n    };\n    this.removeVote = async (voteId, messageId) => await this.client.removePollVote(messageId, this.id, voteId);\n    this.addAnswer = async (answerText, messageId) => await this.client.addPollAnswer(messageId, this.id, answerText);\n    this.removeAnswer = async (answerId, messageId) => await this.client.removePollVote(messageId, this.id, answerId);\n    this.queryAnswers = async params => await this.client.queryPollAnswers(this.id, params.filter, params.sort, params.options);\n    this.queryOptionVotes = async params => await this.client.queryPollVotes(this.id, params.filter, params.sort, params.options);\n    this.client = client;\n    this.id = poll.id;\n    this.state = new StateStore(this.getInitialStateFromPollResponse(poll));\n  }\n  get data() {\n    return this.state.getLatestValue();\n  }\n};\nfunction getMaxVotedOptionIds(voteCountsByOption) {\n  let maxVotes = 0;\n  let winningOptions = [];\n  for (const [id, count] of Object.entries(voteCountsByOption ?? {})) {\n    if (count > maxVotes) {\n      winningOptions = [id];\n      maxVotes = count;\n    } else if (count === maxVotes) {\n      winningOptions.push(id);\n    }\n  }\n  return winningOptions;\n}\nfunction getOwnVotesByOptionId(ownVotes) {\n  return !ownVotes ? {} : ownVotes.reduce((acc, vote) => {\n    if (isVoteAnswer(vote) || !vote.option_id) return acc;\n    acc[vote.option_id] = vote;\n    return acc;\n  }, {});\n}\nfunction extractPollData(pollResponse) {\n  return {\n    allow_answers: pollResponse.allow_answers,\n    allow_user_suggested_options: pollResponse.allow_user_suggested_options,\n    description: pollResponse.description,\n    enforce_unique_vote: pollResponse.enforce_unique_vote,\n    id: pollResponse.id,\n    is_closed: pollResponse.is_closed,\n    max_votes_allowed: pollResponse.max_votes_allowed,\n    name: pollResponse.name,\n    options: pollResponse.options,\n    voting_visibility: pollResponse.voting_visibility\n  };\n}\nfunction mapPollStateToResponse(poll) {\n  const {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    lastActivityAt,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    maxVotedOptionIds,\n    ownVotesByOptionId,\n    ownAnswer,\n    ...restState\n  } = poll.data;\n  const ownVotes = [...Object.values(ownVotesByOptionId), ...(ownAnswer ? [ownAnswer] : [])].sort((a, b) => Date.parse(a.created_at) - Date.parse(b.created_at));\n  return {\n    ...restState,\n    own_votes: ownVotes,\n    id: poll.id\n  };\n}\nfunction extractPollEnrichedData(pollResponse) {\n  return {\n    answers_count: pollResponse.answers_count,\n    latest_votes_by_option: pollResponse.latest_votes_by_option,\n    vote_count: pollResponse.vote_count,\n    vote_counts_by_option: pollResponse.vote_counts_by_option\n  };\n}\n\n// src/poll_manager.ts\nvar PollManager = class extends WithSubscriptions {\n  constructor({\n    client\n  }) {\n    super();\n    // The pollCache contains only polls that have been created and sent as messages\n    // (i.e only polls that are coupled with a message, can be voted on and require a\n    // reactive state). It shall work as a basic look-up table for our SDK to be able\n    // to quickly consume poll state that will be reactive even without the polls being\n    // rendered within the UI.\n    this.pollCache = /* @__PURE__ */new Map();\n    this.fromState = id => this.pollCache.get(id);\n    this.registerSubscriptions = () => {\n      if (this.hasSubscriptions) {\n        return;\n      }\n      this.addUnsubscribeFunction(this.subscribeMessageNew());\n      this.addUnsubscribeFunction(this.subscribePollUpdated());\n      this.addUnsubscribeFunction(this.subscribePollClosed());\n      this.addUnsubscribeFunction(this.subscribeVoteCasted());\n      this.addUnsubscribeFunction(this.subscribeVoteChanged());\n      this.addUnsubscribeFunction(this.subscribeVoteRemoved());\n    };\n    this.createPoll = async poll => {\n      const {\n        poll: createdPoll\n      } = await this.client.createPoll(poll);\n      if (!createdPoll.vote_counts_by_option) {\n        createdPoll.vote_counts_by_option = {};\n      }\n      this.setOrOverwriteInCache(createdPoll);\n      return this.fromState(createdPoll.id);\n    };\n    this.getPoll = async id => {\n      const cachedPoll = this.fromState(id);\n      if (cachedPoll) {\n        this.client.getPoll(id).then(({\n          poll: poll2\n        }) => this.setOrOverwriteInCache(poll2, true));\n        return cachedPoll;\n      }\n      const {\n        poll\n      } = await this.client.getPoll(id);\n      this.setOrOverwriteInCache(poll);\n      return this.fromState(id);\n    };\n    this.queryPolls = async (filter2, sort = [], options = {}) => {\n      const {\n        polls,\n        next\n      } = await this.client.queryPolls(filter2, sort, options);\n      const pollInstances = polls.map(poll => {\n        this.setOrOverwriteInCache(poll, true);\n        return this.fromState(poll.id);\n      });\n      return {\n        polls: pollInstances,\n        next\n      };\n    };\n    this.hydratePollCache = (messages, overwriteState) => {\n      for (const message of messages) {\n        if (!message.poll) {\n          continue;\n        }\n        const pollResponse = message.poll;\n        this.setOrOverwriteInCache(pollResponse, overwriteState);\n      }\n    };\n    this.setOrOverwriteInCache = (pollResponse, overwriteState) => {\n      if (!this.client._cacheEnabled()) {\n        return;\n      }\n      const pollFromCache = this.fromState(pollResponse.id);\n      if (!pollFromCache) {\n        const poll = new Poll({\n          client: this.client,\n          poll: pollResponse\n        });\n        this.pollCache.set(poll.id, poll);\n      } else if (overwriteState) {\n        pollFromCache.reinitializeState(pollResponse);\n      }\n    };\n    this.subscribePollUpdated = () => this.client.on(\"poll.updated\", event => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollUpdated(event);\n      }\n    }).unsubscribe;\n    this.subscribePollClosed = () => this.client.on(\"poll.closed\", event => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollClosed(event);\n      }\n    }).unsubscribe;\n    this.subscribeVoteCasted = () => this.client.on(\"poll.vote_casted\", event => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteCasted(event);\n      }\n    }).unsubscribe;\n    this.subscribeVoteChanged = () => this.client.on(\"poll.vote_changed\", event => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteChanged(event);\n      }\n    }).unsubscribe;\n    this.subscribeVoteRemoved = () => this.client.on(\"poll.vote_removed\", event => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteRemoved(event);\n      }\n    }).unsubscribe;\n    this.subscribeMessageNew = () => this.client.on(\"message.new\", event => {\n      const {\n        message\n      } = event;\n      if (message) {\n        const formattedMessage = formatMessage(message);\n        this.hydratePollCache([formattedMessage]);\n      }\n    }).unsubscribe;\n    this.client = client;\n  }\n  get data() {\n    return this.pollCache;\n  }\n};\n\n// src/channel_manager.ts\nvar channelManagerEventToHandlerMapping = {\n  \"channel.deleted\": \"channelDeletedHandler\",\n  \"channel.hidden\": \"channelHiddenHandler\",\n  \"channel.truncated\": \"channelTruncatedHandler\",\n  \"channel.updated\": \"channelUpdatedHandler\",\n  \"channel.visible\": \"channelVisibleHandler\",\n  \"message.new\": \"newMessageHandler\",\n  \"member.updated\": \"memberUpdatedHandler\",\n  \"notification.added_to_channel\": \"notificationAddedToChannelHandler\",\n  \"notification.message_new\": \"notificationNewMessageHandler\",\n  \"notification.removed_from_channel\": \"notificationRemovedFromChannelHandler\"\n};\nvar DEFAULT_CHANNEL_MANAGER_OPTIONS = {\n  abortInFlightQuery: false,\n  allowNotLoadedChannelPromotionForEvent: {\n    \"channel.visible\": true,\n    \"message.new\": true,\n    \"notification.added_to_channel\": true,\n    \"notification.message_new\": true\n  },\n  lockChannelOrder: false\n};\nvar DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {\n  limit: 10,\n  offset: 0\n};\nvar ChannelManager = class extends WithSubscriptions {\n  constructor({\n    client,\n    eventHandlerOverrides = {},\n    options = {}\n  }) {\n    super();\n    this.eventHandlers = /* @__PURE__ */new Map();\n    this.eventHandlerOverrides = /* @__PURE__ */new Map();\n    this.options = {};\n    this.stateOptions = {};\n    this.setChannels = valueOrFactory => {\n      this.state.next(current => {\n        const {\n          channels: currentChannels\n        } = current;\n        const newChannels = isPatch(valueOrFactory) ? valueOrFactory(currentChannels) : valueOrFactory;\n        if (currentChannels === newChannels) {\n          return current;\n        }\n        return {\n          ...current,\n          channels: newChannels\n        };\n      });\n      const {\n        channels,\n        pagination: {\n          filters,\n          sort\n        }\n      } = this.state.getLatestValue();\n      this.client.offlineDb?.executeQuerySafely(db => db.upsertCidsForQuery({\n        cids: channels.map(channel => channel.cid),\n        filters,\n        sort\n      }), {\n        method: \"upsertCidsForQuery\"\n      });\n    };\n    this.setEventHandlerOverrides = (eventHandlerOverrides = {}) => {\n      const truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce((acc, [key, value]) => {\n        if (value) {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n      this.eventHandlerOverrides = new Map(Object.entries(truthyEventHandlerOverrides));\n    };\n    this.setOptions = (options = {}) => {\n      this.options = {\n        ...DEFAULT_CHANNEL_MANAGER_OPTIONS,\n        ...options\n      };\n    };\n    this.executeChannelsQuery = async (payload, retryCount = 0) => {\n      const {\n        filters,\n        sort,\n        options,\n        stateOptions\n      } = payload;\n      const {\n        offset,\n        limit\n      } = {\n        ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n        ...options\n      };\n      try {\n        const channels = await this.client.queryChannels(filters, sort, options, stateOptions);\n        const newOffset = offset + (channels?.length ?? 0);\n        const newOptions = {\n          ...options,\n          offset: newOffset\n        };\n        const {\n          pagination\n        } = this.state.getLatestValue();\n        this.state.partialNext({\n          channels,\n          pagination: {\n            ...pagination,\n            hasNext: (channels?.length ?? 0) >= limit,\n            isLoading: false,\n            options: newOptions\n          },\n          initialized: true,\n          error: void 0\n        });\n        this.client.offlineDb?.executeQuerySafely(db => db.upsertCidsForQuery({\n          cids: channels.map(channel => channel.cid),\n          filters: pagination.filters,\n          sort: pagination.sort\n        }), {\n          method: \"upsertCidsForQuery\"\n        });\n      } catch (err) {\n        if (retryCount >= DEFAULT_QUERY_CHANNELS_RETRY_COUNT) {\n          console.warn(err);\n          const wrappedError = new Error(`Maximum number of retries reached in queryChannels. Last error message is: ${err}`);\n          this.state.partialNext({\n            error: wrappedError\n          });\n          return;\n        }\n        await sleep(DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES);\n        return this.executeChannelsQuery(payload, retryCount + 1);\n      }\n    };\n    this.queryChannels = async (filters, sort = [], options = {}, stateOptions = {}) => {\n      const {\n        pagination: {\n          isLoading,\n          filters: filtersFromState\n        },\n        initialized\n      } = this.state.getLatestValue();\n      if (isLoading && !this.options.abortInFlightQuery &&\n      // TODO: Figure a proper way to either deeply compare these or\n      //       create hashes from each.\n      JSON.stringify(filtersFromState) === JSON.stringify(filters)) {\n        return;\n      }\n      const executeChannelsQueryPayload = {\n        filters,\n        sort,\n        options,\n        stateOptions\n      };\n      try {\n        this.stateOptions = stateOptions;\n        this.state.next(currentState => ({\n          ...currentState,\n          pagination: {\n            ...currentState.pagination,\n            isLoading: true,\n            isLoadingNext: false,\n            filters,\n            sort,\n            options\n          },\n          error: void 0\n        }));\n        if (this.client.offlineDb?.getChannelsForQuery && this.client.user?.id) {\n          if (!initialized) {\n            const channelsFromDB = await this.client.offlineDb.getChannelsForQuery({\n              userId: this.client.user.id,\n              filters,\n              sort\n            });\n            if (channelsFromDB) {\n              const offlineChannels = this.client.hydrateActiveChannels(channelsFromDB, {\n                offlineMode: true,\n                skipInitialization: []\n                // passing empty array will clear out the existing messages from channel state, this removes the possibility of duplicate messages\n              });\n              this.state.partialNext({\n                channels: offlineChannels\n              });\n            }\n          }\n          if (!this.client.offlineDb.syncManager.syncStatus) {\n            this.client.offlineDb.syncManager.scheduleSyncStatusChangeCallback(this.id, async () => {\n              await this.executeChannelsQuery(executeChannelsQueryPayload);\n            });\n            return;\n          }\n        }\n        await this.executeChannelsQuery(executeChannelsQueryPayload);\n      } catch (error) {\n        this.client.logger(\"error\", error.message);\n        this.state.next(currentState => ({\n          ...currentState,\n          pagination: {\n            ...currentState.pagination,\n            isLoading: false\n          }\n        }));\n        throw error;\n      }\n    };\n    this.loadNext = async () => {\n      const {\n        pagination,\n        initialized\n      } = this.state.getLatestValue();\n      const {\n        filters,\n        sort,\n        options,\n        isLoadingNext,\n        hasNext\n      } = pagination;\n      if (!initialized || isLoadingNext || !hasNext) {\n        return;\n      }\n      try {\n        const {\n          offset,\n          limit\n        } = {\n          ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n          ...options\n        };\n        this.state.partialNext({\n          pagination: {\n            ...pagination,\n            isLoading: false,\n            isLoadingNext: true\n          }\n        });\n        const nextChannels = await this.client.queryChannels(filters, sort, options, this.stateOptions);\n        const {\n          channels\n        } = this.state.getLatestValue();\n        const newOffset = offset + (nextChannels?.length ?? 0);\n        const newOptions = {\n          ...options,\n          offset: newOffset\n        };\n        this.state.partialNext({\n          channels: uniqBy([...(channels || []), ...nextChannels], \"cid\"),\n          pagination: {\n            ...pagination,\n            hasNext: (nextChannels?.length ?? 0) >= limit,\n            isLoading: false,\n            isLoadingNext: false,\n            options: newOptions\n          }\n        });\n      } catch (error) {\n        this.client.logger(\"error\", error.message);\n        this.state.next(currentState => ({\n          ...currentState,\n          pagination: {\n            ...currentState.pagination,\n            isLoadingNext: false\n          }\n        }));\n        throw error;\n      }\n    };\n    this.notificationAddedToChannelHandler = async event => {\n      const {\n        id,\n        type,\n        members\n      } = event?.channel ?? {};\n      if (!type || !this.options.allowNotLoadedChannelPromotionForEvent?.[\"notification.added_to_channel\"]) {\n        return;\n      }\n      const channel = await getAndWatchChannel({\n        client: this.client,\n        id,\n        members: members?.reduce((acc, {\n          user,\n          user_id\n        }) => {\n          const userId = user_id || user?.id;\n          if (userId) {\n            acc.push(userId);\n          }\n          return acc;\n        }, []),\n        type\n      });\n      const {\n        pagination,\n        channels\n      } = this.state.getLatestValue();\n      if (!channels) {\n        return;\n      }\n      const {\n        sort\n      } = pagination ?? {};\n      this.setChannels(promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort\n      }));\n    };\n    this.channelDeletedHandler = event => {\n      const {\n        channels\n      } = this.state.getLatestValue();\n      if (!channels) {\n        return;\n      }\n      const newChannels = [...channels];\n      const channelIndex = newChannels.findIndex(channel => channel.cid === (event.cid || event.channel?.cid));\n      if (channelIndex < 0) {\n        return;\n      }\n      newChannels.splice(channelIndex, 1);\n      this.setChannels(newChannels);\n    };\n    this.channelHiddenHandler = this.channelDeletedHandler;\n    this.newMessageHandler = event => {\n      const {\n        pagination,\n        channels\n      } = this.state.getLatestValue();\n      if (!channels) {\n        return;\n      }\n      const {\n        filters,\n        sort\n      } = pagination ?? {};\n      const channelType = event.channel_type;\n      const channelId = event.channel_id;\n      if (!channelType || !channelId) {\n        return;\n      }\n      const targetChannel = this.client.channel(channelType, channelId);\n      const targetChannelIndex = channels.indexOf(targetChannel);\n      const targetChannelExistsWithinList = targetChannelIndex >= 0;\n      const isTargetChannelPinned = isChannelPinned(targetChannel);\n      const isTargetChannelArchived = isChannelArchived(targetChannel);\n      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n      const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n      if (\n      // filter is defined, target channel is archived and filter option is set to false\n      considerArchivedChannels && isTargetChannelArchived && !filters.archived ||\n      // filter is defined, target channel isn't archived and filter option is set to true\n      considerArchivedChannels && !isTargetChannelArchived && filters.archived ||\n      // sort option is defined, target channel is pinned\n      considerPinnedChannels && isTargetChannelPinned ||\n      // list order is locked\n      this.options.lockChannelOrder ||\n      // target channel is not within the loaded list and loading from cache is disallowed\n      !targetChannelExistsWithinList && !this.options.allowNotLoadedChannelPromotionForEvent?.[\"message.new\"]) {\n        return;\n      }\n      this.setChannels(promoteChannel({\n        channels,\n        channelToMove: targetChannel,\n        channelToMoveIndexWithinChannels: targetChannelIndex,\n        sort\n      }));\n    };\n    this.notificationNewMessageHandler = async event => {\n      const {\n        id,\n        type\n      } = event?.channel ?? {};\n      if (!id || !type) {\n        return;\n      }\n      const channel = await getAndWatchChannel({\n        client: this.client,\n        id,\n        type\n      });\n      const {\n        channels,\n        pagination\n      } = this.state.getLatestValue();\n      const {\n        filters,\n        sort\n      } = pagination ?? {};\n      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n      const isTargetChannelArchived = isChannelArchived(channel);\n      if (!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !this.options.allowNotLoadedChannelPromotionForEvent?.[\"notification.message_new\"]) {\n        return;\n      }\n      this.setChannels(promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort\n      }));\n    };\n    this.channelVisibleHandler = async event => {\n      const {\n        channel_type: channelType,\n        channel_id: channelId\n      } = event;\n      if (!channelType || !channelId) {\n        return;\n      }\n      const channel = await getAndWatchChannel({\n        client: this.client,\n        id: event.channel_id,\n        type: event.channel_type\n      });\n      const {\n        channels,\n        pagination\n      } = this.state.getLatestValue();\n      const {\n        sort,\n        filters\n      } = pagination ?? {};\n      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n      const isTargetChannelArchived = isChannelArchived(channel);\n      if (!channels || considerArchivedChannels && isTargetChannelArchived && !filters.archived || considerArchivedChannels && !isTargetChannelArchived && filters.archived || !this.options.allowNotLoadedChannelPromotionForEvent?.[\"channel.visible\"]) {\n        return;\n      }\n      this.setChannels(promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort\n      }));\n    };\n    this.notificationRemovedFromChannelHandler = this.channelDeletedHandler;\n    this.memberUpdatedHandler = event => {\n      const {\n        pagination,\n        channels\n      } = this.state.getLatestValue();\n      const {\n        filters,\n        sort\n      } = pagination;\n      if (!event.member?.user || event.member.user.id !== this.client.userID || !event.channel_type || !event.channel_id) {\n        return;\n      }\n      const channelType = event.channel_type;\n      const channelId = event.channel_id;\n      const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n      const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n      const pinnedAtSort = extractSortValue({\n        atIndex: 0,\n        sort,\n        targetKey: \"pinned_at\"\n      });\n      if (!channels || !considerPinnedChannels && !considerArchivedChannels || this.options.lockChannelOrder) {\n        return;\n      }\n      const targetChannel = this.client.channel(channelType, channelId);\n      const targetChannelIndex = channels.indexOf(targetChannel);\n      const targetChannelExistsWithinList = targetChannelIndex >= 0;\n      const isTargetChannelPinned = isChannelPinned(targetChannel);\n      const isTargetChannelArchived = isChannelArchived(targetChannel);\n      const newChannels = [...channels];\n      if (targetChannelExistsWithinList) {\n        newChannels.splice(targetChannelIndex, 1);\n      }\n      if (\n      // When archived filter true, and channel is unarchived\n      considerArchivedChannels && !isTargetChannelArchived && filters?.archived ||\n      // When archived filter false, and channel is archived\n      considerArchivedChannels && isTargetChannelArchived && !filters?.archived) {\n        this.setChannels(newChannels);\n        return;\n      }\n      let lastPinnedChannelIndex = null;\n      if (pinnedAtSort === 1 || pinnedAtSort === -1 && !isTargetChannelPinned) {\n        lastPinnedChannelIndex = findLastPinnedChannelIndex({\n          channels: newChannels\n        });\n      }\n      const newTargetChannelIndex = typeof lastPinnedChannelIndex === \"number\" ? lastPinnedChannelIndex + 1 : 0;\n      if (channels[newTargetChannelIndex] === targetChannel) {\n        return;\n      }\n      newChannels.splice(newTargetChannelIndex, 0, targetChannel);\n      this.setChannels(newChannels);\n    };\n    this.subscriptionOrOverride = event => {\n      const handlerName = channelManagerEventToHandlerMapping[event.type];\n      const defaultEventHandler = this.eventHandlers.get(handlerName);\n      const eventHandlerOverride = this.eventHandlerOverrides.get(handlerName);\n      if (eventHandlerOverride && typeof eventHandlerOverride === \"function\") {\n        eventHandlerOverride(this.setChannels, event);\n        return;\n      }\n      if (defaultEventHandler && typeof defaultEventHandler === \"function\") {\n        defaultEventHandler(event);\n      }\n    };\n    this.registerSubscriptions = () => {\n      if (this.hasSubscriptions) {\n        return;\n      }\n      for (const eventType of Object.keys(channelManagerEventToHandlerMapping)) {\n        this.addUnsubscribeFunction(this.client.on(eventType, this.subscriptionOrOverride).unsubscribe);\n      }\n    };\n    this.id = `channel-manager-${generateUUIDv4()}`;\n    this.client = client;\n    this.state = new StateStore({\n      channels: [],\n      pagination: {\n        isLoading: false,\n        isLoadingNext: false,\n        hasNext: false,\n        filters: {},\n        sort: {},\n        options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS\n      },\n      initialized: false,\n      error: void 0\n    });\n    this.setEventHandlerOverrides(eventHandlerOverrides);\n    this.setOptions(options);\n    this.eventHandlers = new Map(Object.entries({\n      channelDeletedHandler: this.channelDeletedHandler,\n      channelHiddenHandler: this.channelHiddenHandler,\n      channelVisibleHandler: this.channelVisibleHandler,\n      memberUpdatedHandler: this.memberUpdatedHandler,\n      newMessageHandler: this.newMessageHandler,\n      notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,\n      notificationNewMessageHandler: this.notificationNewMessageHandler,\n      notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler\n    }));\n  }\n};\n\n// src/notifications/configuration.ts\nvar DURATION_MS = 3e3;\nvar DEFAULT_NOTIFICATION_MANAGER_CONFIG = {\n  durations: {\n    error: DURATION_MS,\n    info: DURATION_MS,\n    success: DURATION_MS,\n    warning: DURATION_MS\n  }\n};\n\n// src/notifications/NotificationManager.ts\nvar NotificationManager = class {\n  constructor(config = {}) {\n    this.timeouts = /* @__PURE__ */new Map();\n    this.store = new StateStore({\n      notifications: []\n    });\n    this.config = mergeWith(DEFAULT_NOTIFICATION_MANAGER_CONFIG, config);\n  }\n  get notifications() {\n    return this.store.getLatestValue().notifications;\n  }\n  get warning() {\n    return this.notifications.filter(n => n.severity === \"warning\");\n  }\n  get error() {\n    return this.notifications.filter(n => n.severity === \"error\");\n  }\n  get info() {\n    return this.notifications.filter(n => n.severity === \"info\");\n  }\n  get success() {\n    return this.notifications.filter(n => n.severity === \"success\");\n  }\n  add({\n    message,\n    origin,\n    options = {}\n  }) {\n    const id = generateUUIDv4();\n    const now = Date.now();\n    const severity = options.severity || \"info\";\n    const duration = options.duration ?? this.config.durations[severity];\n    const notification = {\n      id,\n      message,\n      origin,\n      type: options?.type,\n      severity,\n      createdAt: now,\n      expiresAt: now + duration,\n      actions: options.actions,\n      metadata: options.metadata,\n      originalError: options.originalError\n    };\n    this.store.partialNext({\n      notifications: [...this.store.getLatestValue().notifications, notification]\n    });\n    if (notification.expiresAt) {\n      const timeout = setTimeout(() => {\n        this.remove(id);\n      }, options.duration || this.config.durations[notification.severity]);\n      this.timeouts.set(id, timeout);\n    }\n    return id;\n  }\n  addError({\n    message,\n    origin,\n    options\n  }) {\n    return this.add({\n      message,\n      origin,\n      options: {\n        ...options,\n        severity: \"error\"\n      }\n    });\n  }\n  addWarning({\n    message,\n    origin,\n    options\n  }) {\n    return this.add({\n      message,\n      origin,\n      options: {\n        ...options,\n        severity: \"warning\"\n      }\n    });\n  }\n  addInfo({\n    message,\n    origin,\n    options\n  }) {\n    return this.add({\n      message,\n      origin,\n      options: {\n        ...options,\n        severity: \"info\"\n      }\n    });\n  }\n  addSuccess({\n    message,\n    origin,\n    options\n  }) {\n    return this.add({\n      message,\n      origin,\n      options: {\n        ...options,\n        severity: \"success\"\n      }\n    });\n  }\n  remove(id) {\n    const timeout = this.timeouts.get(id);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.timeouts.delete(id);\n    }\n    this.store.partialNext({\n      notifications: this.store.getLatestValue().notifications.filter(n => n.id !== id)\n    });\n  }\n  clear() {\n    this.timeouts.forEach(timeout => clearTimeout(timeout));\n    this.timeouts.clear();\n    this.store.partialNext({\n      notifications: []\n    });\n  }\n};\n\n// src/reminders/ReminderTimer.ts\nvar oneMinute = 60 * 1e3;\nvar oneHour = 60 * oneMinute;\nvar oneDay = 24 * oneHour;\nvar oneWeek = 7 * oneDay;\nvar GROUP_BOUNDS = {\n  minute: {\n    lower: oneMinute,\n    upper: oneHour\n  },\n  hour: {\n    lower: oneHour,\n    upper: oneDay\n  },\n  day: {\n    lower: oneDay,\n    upper: oneWeek\n  }\n};\nvar DEFAULT_STOP_REFRESH_BOUNDARY_MS = 2 * oneWeek;\nvar ReminderTimer = class {\n  constructor({\n    reminder,\n    config\n  }) {\n    this.timeout = null;\n    this.stopRefreshBoundaryMs = DEFAULT_STOP_REFRESH_BOUNDARY_MS;\n    this.getRefreshIntervalLength = () => {\n      if (!this.reminder.remindAt) return null;\n      const distanceFromDeadlineMs = Math.abs(timeLeftMs(this.reminder.remindAt.getTime()));\n      let refreshInterval;\n      if (distanceFromDeadlineMs === 0) {\n        refreshInterval = oneMinute;\n      } else if (distanceFromDeadlineMs < GROUP_BOUNDS.minute.lower) {\n        refreshInterval = distanceFromDeadlineMs;\n      } else if (distanceFromDeadlineMs <= GROUP_BOUNDS.minute.upper) {\n        refreshInterval = oneMinute;\n      } else if (distanceFromDeadlineMs <= GROUP_BOUNDS.hour.upper) {\n        refreshInterval = oneHour;\n      } else {\n        refreshInterval = oneDay;\n      }\n      return refreshInterval;\n    };\n    this.init = () => {\n      if (!this.reminder.remindAt) return null;\n      const timeoutLength = this.getRefreshIntervalLength();\n      if (timeoutLength === null) return null;\n      const boundaryTimestamp = this.reminder.remindAt?.getTime() + this.stopRefreshBoundaryMs;\n      const timeLeftToBoundary = boundaryTimestamp - Date.now();\n      if (timeLeftToBoundary <= 0) {\n        this.timeout = null;\n        return;\n      }\n      if (this.timeout) clearTimeout(this.timeout);\n      this.timeout = setTimeout(() => {\n        this.reminder.refreshTimeLeft();\n        this.init();\n      }, timeoutLength);\n    };\n    this.clear = () => {\n      if (this.timeout) {\n        clearInterval(this.timeout);\n        this.timeout = null;\n      }\n    };\n    this.reminder = reminder;\n    if (typeof config?.stopRefreshBoundaryMs === \"number\") {\n      this.stopRefreshBoundaryMs = config.stopRefreshBoundaryMs;\n    }\n  }\n};\n\n// src/reminders/Reminder.ts\nvar timeLeftMs = remindAt => remindAt - (/* @__PURE__ */new Date()).getTime();\nvar _Reminder = class _Reminder {\n  constructor({\n    data,\n    config\n  }) {\n    this.setState = data => {\n      this.state.next(current => {\n        const newState = {\n          ...current,\n          ..._Reminder.toStateValue(data)\n        };\n        if (newState.remind_at) {\n          newState.timeLeftMs = timeLeftMs(newState.remind_at.getTime());\n        }\n        return newState;\n      });\n      if (data.remind_at) {\n        this.initTimer();\n      } else if (!data.remind_at) {\n        this.clearTimer();\n      }\n    };\n    this.refreshTimeLeft = () => {\n      if (!this.remindAt) return;\n      this.state.partialNext({\n        timeLeftMs: timeLeftMs(this.remindAt.getTime())\n      });\n    };\n    this.initTimer = () => {\n      this.timer.init();\n    };\n    this.clearTimer = () => {\n      this.timer.clear();\n    };\n    this.state = new StateStore(_Reminder.toStateValue(data));\n    this.timer = new ReminderTimer({\n      reminder: this,\n      config\n    });\n    this.initTimer();\n  }\n  get id() {\n    return this.state.getLatestValue().message_id;\n  }\n  get remindAt() {\n    return this.state.getLatestValue().remind_at;\n  }\n  get timeLeftMs() {\n    return this.state.getLatestValue().timeLeftMs;\n  }\n};\n_Reminder.toStateValue = data => ({\n  ...data,\n  created_at: new Date(data.created_at),\n  message: data.message || null,\n  remind_at: data.remind_at ? new Date(data.remind_at) : null,\n  timeLeftMs: data.remind_at ? timeLeftMs(new Date(data.remind_at).getTime()) : null,\n  updated_at: new Date(data.updated_at),\n  user: data.user || null\n});\nvar Reminder = _Reminder;\n\n// src/pagination/BasePaginator.ts\nvar DEFAULT_PAGINATION_OPTIONS = {\n  debounceMs: 300,\n  pageSize: 10\n};\nvar BasePaginator = class {\n  constructor(options) {\n    this._isCursorPagination = false;\n    this.setDebounceOptions = ({\n      debounceMs\n    }) => {\n      this._executeQueryDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n    };\n    this.canExecuteQuery = direction => !this.isLoading && direction === \"next\" && this.hasNext || direction === \"prev\" && this.hasPrev;\n    this.next = () => this.executeQuery({\n      direction: \"next\"\n    });\n    this.prev = () => this.executeQuery({\n      direction: \"prev\"\n    });\n    this.nextDebounced = () => {\n      this._executeQueryDebounced({\n        direction: \"next\"\n      });\n    };\n    this.prevDebounced = () => {\n      this._executeQueryDebounced({\n        direction: \"prev\"\n      });\n    };\n    const {\n      debounceMs,\n      pageSize\n    } = {\n      ...DEFAULT_PAGINATION_OPTIONS,\n      ...options\n    };\n    this.pageSize = pageSize;\n    this.state = new StateStore(this.initialState);\n    this.setDebounceOptions({\n      debounceMs\n    });\n  }\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n  get hasPrev() {\n    return this.state.getLatestValue().hasPrev;\n  }\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n  get initialState() {\n    return {\n      hasNext: true,\n      hasPrev: true,\n      //todo: check if optimistic value does not cause problems in UI\n      isLoading: false,\n      items: void 0,\n      lastQueryError: void 0,\n      cursor: void 0,\n      offset: 0\n    };\n  }\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n  get cursor() {\n    return this.state.getLatestValue().cursor;\n  }\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n  getStateBeforeFirstQuery() {\n    return {\n      ...this.initialState,\n      isLoading: true\n    };\n  }\n  getStateAfterQuery(stateUpdate, isFirstPage) {\n    const current = this.state.getLatestValue();\n    return {\n      ...current,\n      lastQueryError: void 0,\n      // reset lastQueryError that can be overridden by the stateUpdate\n      ...stateUpdate,\n      isLoading: false,\n      items: isFirstPage ? stateUpdate.items : [...(this.items ?? []), ...(stateUpdate.items || [])]\n    };\n  }\n  async executeQuery({\n    direction\n  }) {\n    if (!this.canExecuteQuery(direction)) return;\n    const isFirstPage = typeof this.items === \"undefined\";\n    if (isFirstPage) {\n      this.state.next(this.getStateBeforeFirstQuery());\n    } else {\n      this.state.partialNext({\n        isLoading: true\n      });\n    }\n    const stateUpdate = {};\n    try {\n      const results = await this.query({\n        direction\n      });\n      if (!results) return;\n      const {\n        items,\n        next,\n        prev\n      } = results;\n      if (isFirstPage && (next || prev)) {\n        this._isCursorPagination = true;\n      }\n      if (this._isCursorPagination) {\n        stateUpdate.cursor = {\n          next: next || null,\n          prev: prev || null\n        };\n        stateUpdate.hasNext = !!next;\n        stateUpdate.hasPrev = !!prev;\n      } else {\n        stateUpdate.offset = (this.offset ?? 0) + items.length;\n        stateUpdate.hasNext = items.length === this.pageSize;\n      }\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, isFirstPage));\n    }\n  }\n  cancelScheduledQuery() {\n    this._executeQueryDebounced.cancel();\n  }\n  resetState() {\n    this.state.next(this.initialState);\n  }\n};\n\n// src/pagination/ReminderPaginator.ts\nvar ReminderPaginator = class extends BasePaginator {\n  constructor(client, options) {\n    super(options);\n    this.query = async ({\n      direction\n    }) => {\n      const cursor = this.cursor?.[direction];\n      const {\n        reminders: items,\n        next,\n        prev\n      } = await this.client.queryReminders({\n        filter: this.filters,\n        sort: this.sort,\n        limit: this.pageSize,\n        [direction]: cursor\n      });\n      return {\n        items,\n        next,\n        prev\n      };\n    };\n    this.filterQueryResults = items => items;\n    this.client = client;\n  }\n  get filters() {\n    return this._filters;\n  }\n  get sort() {\n    return this._sort;\n  }\n  set filters(filters) {\n    this._filters = filters;\n    this.resetState();\n  }\n  set sort(sort) {\n    this._sort = sort;\n    this.resetState();\n  }\n};\n\n// src/reminders/ReminderManager.ts\nvar oneMinute2 = 60 * 1e3;\nvar oneHour2 = 60 * oneMinute2;\nvar oneDay2 = 24 * oneHour2;\nvar DEFAULT_REMINDER_MANAGER_CONFIG = {\n  scheduledOffsetsMs: [2 * oneMinute2, 30 * oneMinute2, oneHour2, 2 * oneHour2, 8 * oneHour2, oneDay2],\n  stopTimerRefreshBoundaryMs: DEFAULT_STOP_REFRESH_BOUNDARY_MS\n};\nvar isReminderExistsError = error => error.message.match(\"already has reminder created for this message_id\");\nvar isReminderDoesNotExistError = error => error.message.match(\"reminder does not exist\");\nvar _ReminderManager = class _ReminderManager extends WithSubscriptions {\n  constructor({\n    client,\n    config\n  }) {\n    super();\n    this.upsertToState = ({\n      data,\n      overwrite = true\n    }) => {\n      if (!this.client._cacheEnabled()) {\n        return;\n      }\n      const cachedReminder = this.getFromState(data.message_id);\n      if (!cachedReminder) {\n        const reminder = new Reminder({\n          data,\n          config: {\n            stopRefreshBoundaryMs: this.stopTimerRefreshBoundaryMs\n          }\n        });\n        this.state.partialNext({\n          reminders: new Map(this.reminders.set(data.message_id, reminder))\n        });\n      } else if (overwrite) {\n        cachedReminder.setState(data);\n      }\n      return cachedReminder;\n    };\n    this.removeFromState = messageId => {\n      const cachedReminder = this.getFromState(messageId);\n      if (!cachedReminder) return;\n      cachedReminder.clearTimer();\n      const reminders = this.reminders;\n      reminders.delete(messageId);\n      this.state.partialNext({\n        reminders: new Map(reminders)\n      });\n    };\n    this.hydrateState = messages => {\n      messages.forEach(({\n        reminder\n      }) => {\n        if (reminder) {\n          this.upsertToState({\n            data: reminder\n          });\n        }\n      });\n    };\n    // State API END //\n    // Timers API START //\n    this.initTimers = () => {\n      this.reminders.forEach(reminder => reminder.initTimer());\n    };\n    this.clearTimers = () => {\n      this.reminders.forEach(reminder => reminder.clearTimer());\n    };\n    this.registerSubscriptions = () => {\n      if (this.hasSubscriptions) return;\n      this.addUnsubscribeFunction(this.subscribeReminderCreated());\n      this.addUnsubscribeFunction(this.subscribeReminderUpdated());\n      this.addUnsubscribeFunction(this.subscribeReminderDeleted());\n      this.addUnsubscribeFunction(this.subscribeNotificationReminderDue());\n      this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n      this.addUnsubscribeFunction(this.subscribeMessageUndeleted());\n      this.addUnsubscribeFunction(this.subscribePaginatorStateUpdated());\n      this.addUnsubscribeFunction(this.subscribeConfigStateUpdated());\n    };\n    this.subscribeReminderCreated = () => this.client.on(\"reminder.created\", event => {\n      if (!_ReminderManager.isReminderWsEventPayload(event)) return;\n      const {\n        reminder\n      } = event;\n      this.upsertToState({\n        data: reminder\n      });\n    }).unsubscribe;\n    this.subscribeReminderUpdated = () => this.client.on(\"reminder.updated\", event => {\n      if (!_ReminderManager.isReminderWsEventPayload(event)) return;\n      const {\n        reminder\n      } = event;\n      this.upsertToState({\n        data: reminder\n      });\n    }).unsubscribe;\n    this.subscribeReminderDeleted = () => this.client.on(\"reminder.deleted\", event => {\n      if (!_ReminderManager.isReminderWsEventPayload(event)) return;\n      this.removeFromState(event.message_id);\n    }).unsubscribe;\n    this.subscribeMessageDeleted = () => this.client.on(\"message.deleted\", event => {\n      if (!event.message?.id) return;\n      this.removeFromState(event.message.id);\n    }).unsubscribe;\n    this.subscribeMessageUndeleted = () => this.client.on(\"message.undeleted\", event => {\n      if (!event.message?.reminder) return;\n      this.upsertToState({\n        data: event.message.reminder\n      });\n    }).unsubscribe;\n    this.subscribeNotificationReminderDue = () => this.client.on(\"notification.reminder_due\", () => null).unsubscribe;\n    // todo: what should be performed on this event?\n    this.subscribePaginatorStateUpdated = () => this.paginator.state.subscribeWithSelector(({\n      items\n    }) => [items], ([items]) => {\n      if (!items) return;\n      for (const reminder of items) {\n        this.upsertToState({\n          data: reminder\n        });\n      }\n    });\n    this.subscribeConfigStateUpdated = () => this.configState.subscribeWithSelector(({\n      stopTimerRefreshBoundaryMs\n    }) => ({\n      stopTimerRefreshBoundaryMs\n    }), ({\n      stopTimerRefreshBoundaryMs\n    }, previousValue) => {\n      if (typeof stopTimerRefreshBoundaryMs === \"number\" && stopTimerRefreshBoundaryMs !== previousValue?.stopTimerRefreshBoundaryMs) {\n        this.reminders.forEach(reminder => {\n          if (reminder.timer) {\n            reminder.timer.stopRefreshBoundaryMs = stopTimerRefreshBoundaryMs;\n          }\n        });\n      }\n    });\n    // WS event handling END //\n    // API calls START //\n    this.upsertReminder = async options => {\n      const {\n        messageId\n      } = options;\n      if (this.getFromState(messageId)) {\n        try {\n          return await this.updateReminder(options);\n        } catch (error) {\n          if (isReminderDoesNotExistError(error)) {\n            return await this.createReminder(options);\n          }\n          throw error;\n        }\n      } else {\n        try {\n          return await this.createReminder(options);\n        } catch (error) {\n          if (isReminderExistsError(error)) {\n            return await this.updateReminder(options);\n          }\n          throw error;\n        }\n      }\n    };\n    this.createReminder = async options => {\n      const {\n        reminder\n      } = await this.client.createReminder(options);\n      return this.upsertToState({\n        data: reminder,\n        overwrite: false\n      });\n    };\n    this.updateReminder = async options => {\n      const {\n        reminder\n      } = await this.client.updateReminder(options);\n      return this.upsertToState({\n        data: reminder\n      });\n    };\n    this.deleteReminder = async messageId => {\n      await this.client.deleteReminder(messageId);\n      this.removeFromState(messageId);\n    };\n    this.queryNextReminders = async () => {\n      await this.paginator.next();\n    };\n    this.queryPreviousReminders = async () => {\n      await this.paginator.prev();\n    };\n    this.client = client;\n    this.configState = new StateStore({\n      scheduledOffsetsMs: config?.scheduledOffsetsMs ?? DEFAULT_REMINDER_MANAGER_CONFIG.scheduledOffsetsMs,\n      stopTimerRefreshBoundaryMs: config?.stopTimerRefreshBoundaryMs ?? DEFAULT_REMINDER_MANAGER_CONFIG.stopTimerRefreshBoundaryMs\n    });\n    this.state = new StateStore({\n      reminders: /* @__PURE__ */new Map()\n    });\n    this.paginator = new ReminderPaginator(client);\n  }\n  // Config API START //\n  updateConfig(config) {\n    if (typeof config.stopTimerRefreshBoundaryMs === \"number\" && config.stopTimerRefreshBoundaryMs !== this.stopTimerRefreshBoundaryMs) {\n      this.reminders.forEach(reminder => {\n        reminder.timer.stopRefreshBoundaryMs = config?.stopTimerRefreshBoundaryMs;\n      });\n    }\n    this.configState.partialNext(config);\n  }\n  get stopTimerRefreshBoundaryMs() {\n    return this.configState.getLatestValue().stopTimerRefreshBoundaryMs;\n  }\n  get scheduledOffsetsMs() {\n    return this.configState.getLatestValue().scheduledOffsetsMs;\n  }\n  // Config API END //\n  // State API START //\n  get reminders() {\n    return this.state.getLatestValue().reminders;\n  }\n  getFromState(messageId) {\n    return this.reminders.get(messageId);\n  }\n  // API calls END //\n};\n// Timers API END //\n// WS event handling START //\n_ReminderManager.isReminderWsEventPayload = event => !!event.reminder && (event.type.startsWith(\"reminder.\") || event.type === \"notification.reminder_due\");\nvar ReminderManager = _ReminderManager;\n\n// src/client.ts\nfunction isString3(x) {\n  return typeof x === \"string\" || x instanceof String;\n}\nvar StreamChat = class _StreamChat {\n  constructor(key, secretOrOptions, options) {\n    this.nextRequestAbortController = null;\n    /**\n     * @private\n     */\n    this._messageComposerSetupState = new StateStore({\n      setupFunction: null\n    });\n    this._getConnectionID = () => this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n    this._hasConnectionID = () => Boolean(this._getConnectionID());\n    this.setMessageComposerSetupFunction = setupFunction => {\n      this._messageComposerSetupState.partialNext({\n        setupFunction\n      });\n    };\n    /**\n     * connectUser - Set the current user and open a WebSocket connection\n     *\n     * @param {OwnUserResponse | UserResponse} user Data about this user. IE {name: \"john\"}\n     * @param {TokenOrProvider} userTokenOrProvider Token or provider\n     *\n     * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n     */\n    this.connectUser = async (user, userTokenOrProvider) => {\n      if (!user.id) {\n        throw new Error('The \"id\" field on the user is missing');\n      }\n      if (this.userID === user.id && this.setUserPromise) {\n        console.warn(\"Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.\");\n        return this.setUserPromise;\n      }\n      if (this.userID) {\n        throw new Error(\"Use client.disconnect() before trying to connect as a different user. connectUser was called twice.\");\n      }\n      if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n      }\n      this.userID = user.id;\n      this.anonymous = false;\n      const setTokenPromise = this._setToken(user, userTokenOrProvider);\n      this._setUser(user);\n      const wsPromise = this.openConnection();\n      this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(result => result[1]\n      // We only return connection promise;\n      );\n      try {\n        return await this.setUserPromise;\n      } catch (err) {\n        if (this.persistUserOnConnectionFailure) {\n          this.closeConnection();\n        } else {\n          this.disconnectUser();\n        }\n        throw err;\n      }\n    };\n    /**\n     * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n     *\n     * setUser - Set the current user and open a WebSocket connection\n     *\n     * @param {OwnUserResponse | UserResponse} user Data about this user. IE {name: \"john\"}\n     * @param {TokenOrProvider} userTokenOrProvider Token or provider\n     *\n     * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n     */\n    this.setUser = this.connectUser;\n    this._setToken = (user, userTokenOrProvider) => this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n    /**\n     * Disconnects the websocket connection, without removing the user set on client.\n     * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n     * to call client.openConnection to reconnect to websocket.\n     *\n     * This is mainly useful on mobile side. You can only receive push notifications\n     * if you don't have active websocket connection.\n     * So when your app goes to background, you can call `client.closeConnection`.\n     * And when app comes back to foreground, call `client.openConnection`.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    this.closeConnection = async timeout => {\n      if (this.cleaningIntervalRef != null) {\n        clearInterval(this.cleaningIntervalRef);\n        this.cleaningIntervalRef = void 0;\n      }\n      await Promise.all([this.wsConnection?.disconnect(timeout), this.wsFallback?.disconnect(timeout)]);\n      this.offlineDb?.executeQuerySafely(async db => {\n        if (this.userID) {\n          await db.upsertUserSyncStatus({\n            userId: this.userID,\n            lastSyncedAt: (/* @__PURE__ */new Date()).toString()\n          });\n        }\n      }, {\n        method: \"upsertUserSyncStatus\"\n      });\n      return Promise.resolve();\n    };\n    /**\n     * Creates an instance of ChannelManager.\n     *\n     * @internal\n     *\n     * @param eventHandlerOverrides - the overrides for event handlers to be used\n     * @param options - the options used for the channel manager\n     */\n    this.createChannelManager = ({\n      eventHandlerOverrides = {},\n      options = {}\n    }) => new ChannelManager({\n      client: this,\n      eventHandlerOverrides,\n      options\n    });\n    /**\n     * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n     */\n    this.openConnection = () => {\n      if (!this.userID) {\n        throw Error(\"User is not set on client, use client.connectUser or client.connectAnonymousUser instead\");\n      }\n      if (this.wsConnection?.isConnecting && this.wsPromise) {\n        this.logger(\"info\", \"client:openConnection() - connection already in progress\", {\n          tags: [\"connection\", \"client\"]\n        });\n        return this.wsPromise;\n      }\n      if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n        this.logger(\"info\", \"client:openConnection() - openConnection called twice, healthy connection already exists\", {\n          tags: [\"connection\", \"client\"]\n        });\n        return;\n      }\n      this.clientID = `${this.userID}--${randomId()}`;\n      this.wsPromise = this.connect();\n      this._startCleaning();\n      return this.wsPromise;\n    };\n    /**\n     * @deprecated Please use client.openConnction instead.\n     * @private\n     *\n     * Creates a new websocket connection with current user.\n     */\n    this._setupConnection = this.openConnection;\n    this._normalizeDate = before => {\n      if (before instanceof Date) {\n        before = before.toISOString();\n      }\n      if (before === \"\") {\n        throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n      }\n      return before;\n    };\n    /**\n     * Disconnects the websocket and removes the user from client.\n     *\n     * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n     *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n     */\n    this.disconnectUser = timeout => {\n      this.logger(\"info\", \"client:disconnect() - Disconnecting the client\", {\n        tags: [\"connection\", \"client\"]\n      });\n      delete this.user;\n      delete this._user;\n      delete this.userID;\n      this.anonymous = false;\n      const closePromise = this.closeConnection(timeout);\n      for (const channel of Object.values(this.activeChannels)) {\n        channel._disconnect();\n      }\n      this.activeChannels = {};\n      this.state = new ClientState({\n        client: this\n      });\n      this.threads.resetState();\n      setTimeout(this.tokenManager.reset);\n      return closePromise;\n    };\n    /**\n     *\n     * @deprecated Please use client.disconnectUser instead.\n     *\n     * Disconnects the websocket and removes the user from client.\n     */\n    this.disconnect = this.disconnectUser;\n    /**\n     * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n     */\n    this.connectAnonymousUser = () => {\n      if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n        console.warn('Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.');\n      }\n      this.anonymous = true;\n      this.userID = randomId();\n      const anonymousUser = {\n        id: this.userID,\n        anon: true\n      };\n      this._setToken(anonymousUser, \"\");\n      this._setUser(anonymousUser);\n      return this._setupConnection();\n    };\n    /**\n     * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n     */\n    this.setAnonymousUser = this.connectAnonymousUser;\n    this.doAxiosRequest = async (type, url, data, options = {}) => {\n      await this.tokenManager.tokenReady();\n      const requestConfig = this._enrichAxiosOptions(options);\n      try {\n        let response;\n        this._logApiRequest(type, url, data, requestConfig);\n        switch (type) {\n          case \"get\":\n            response = await this.axiosInstance.get(url, requestConfig);\n            break;\n          case \"delete\":\n            response = await this.axiosInstance.delete(url, requestConfig);\n            break;\n          case \"post\":\n            response = await this.axiosInstance.post(url, data, requestConfig);\n            break;\n          case \"postForm\":\n            response = await this.axiosInstance.postForm(url, data, requestConfig);\n            break;\n          case \"put\":\n            response = await this.axiosInstance.put(url, data, requestConfig);\n            break;\n          case \"patch\":\n            response = await this.axiosInstance.patch(url, data, requestConfig);\n            break;\n          case \"options\":\n            response = await this.axiosInstance.options(url, requestConfig);\n            break;\n          default:\n            throw new Error(\"Invalid request type\");\n        }\n        this._logApiResponse(type, url, response);\n        this.consecutiveFailures = 0;\n        return this.handleResponse(response);\n      } catch (e) {\n        e.client_request_id = requestConfig.headers?.[\"x-client-request-id\"];\n        this._logApiError(type, url, e);\n        this.consecutiveFailures += 1;\n        if (e.response) {\n          if (e.response.data.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n            if (this.consecutiveFailures > 1) {\n              await sleep(retryInterval(this.consecutiveFailures));\n            }\n            this.tokenManager.loadToken();\n            return await this.doAxiosRequest(type, url, data, options);\n          }\n          return this.handleResponse(e.response);\n        } else {\n          throw e;\n        }\n      }\n    };\n    this.dispatchEvent = event => {\n      if (!event.received_at) event.received_at = /* @__PURE__ */new Date();\n      const postListenerCallbacks = this._handleClientEvent(event);\n      const cid = event.cid;\n      const channel = cid ? this.activeChannels[cid] : void 0;\n      if (channel) {\n        channel._handleChannelEvent(event);\n      }\n      this._callClientListeners(event);\n      if (channel) {\n        channel._callChannelListeners(event);\n      }\n      postListenerCallbacks.forEach(c => c());\n      this.offlineDb?.executeQuerySafely(db => db.handleEvent({\n        event\n      }), {\n        method: `handleEvent;${event.type}`\n      });\n    };\n    this.handleEvent = messageEvent => {\n      const jsonString = messageEvent.data;\n      const event = JSON.parse(jsonString);\n      this.dispatchEvent(event);\n    };\n    /**\n     * Updates the members, watchers and read references of the currently active channels that contain this user\n     *\n     * @param {UserResponse} user\n     */\n    this._updateMemberWatcherReferences = user => {\n      const refMap = this.state.userChannelReferences[user.id] || {};\n      for (const channelID in refMap) {\n        const channel = this.activeChannels[channelID];\n        if (channel?.state) {\n          if (channel.state.members[user.id]) {\n            channel.state.members[user.id].user = user;\n          }\n          if (channel.state.watchers[user.id]) {\n            channel.state.watchers[user.id] = user;\n          }\n          if (channel.state.read[user.id]) {\n            channel.state.read[user.id].user = user;\n          }\n        }\n      }\n    };\n    /**\n     * @deprecated Please _updateMemberWatcherReferences instead.\n     * @private\n     */\n    this._updateUserReferences = this._updateMemberWatcherReferences;\n    /**\n     * @private\n     *\n     * Updates the messages from the currently active channels that contain this user,\n     * with updated user object.\n     *\n     * @param {UserResponse} user\n     */\n    this._updateUserMessageReferences = user => {\n      const refMap = this.state.userChannelReferences[user.id] || {};\n      for (const channelID in refMap) {\n        const channel = this.activeChannels[channelID];\n        if (!channel) continue;\n        const state = channel.state;\n        state?.updateUserMessages(user);\n      }\n    };\n    /**\n     * @private\n     *\n     * Deletes the messages from the currently active channels that contain this user\n     *\n     * If hardDelete is true, all the content of message will be stripped down.\n     * Otherwise, only 'message.type' will be set as 'deleted'.\n     *\n     * @param {UserResponse} user\n     * @param {boolean} hardDelete\n     */\n    this._deleteUserMessageReference = (user, hardDelete = false) => {\n      const refMap = this.state.userChannelReferences[user.id] || {};\n      for (const channelID in refMap) {\n        const channel = this.activeChannels[channelID];\n        if (channel) {\n          const state = channel.state;\n          state?.deleteUserMessages(user, hardDelete);\n        }\n      }\n    };\n    /**\n     * @private\n     *\n     * Handle following user related events:\n     * - user.presence.changed\n     * - user.updated\n     * - user.deleted\n     *\n     * @param {Event} event\n     */\n    this._handleUserEvent = event => {\n      if (!event.user) {\n        return;\n      }\n      if (event.type === \"user.presence.changed\" || event.type === \"user.updated\") {\n        if (event.user.id === this.userID) {\n          const user = {\n            ...this.user\n          };\n          const _user = {\n            ...this._user\n          };\n          for (const key in this.user) {\n            if (key in event.user || isOwnUserBaseProperty(key)) {\n              continue;\n            }\n            const deleteKey = key;\n            delete user[deleteKey];\n            delete _user[deleteKey];\n          }\n          for (const key in _user) {\n            const updateKey = key;\n            if (updateKey in event.user) {\n              _user[updateKey] = event.user[updateKey];\n            }\n          }\n          this._user = _user;\n          this.user = {\n            ...user,\n            ...event.user\n          };\n        }\n        this.state.updateUser(event.user);\n        this._updateMemberWatcherReferences(event.user);\n      }\n      if (event.type === \"user.updated\") {\n        this._updateUserMessageReferences(event.user);\n      }\n      if (event.type === \"user.deleted\" && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n        this._deleteUserMessageReference(event.user, event.hard_delete);\n      }\n    };\n    this._callClientListeners = event => {\n      const client = this;\n      const listeners = [];\n      if (client.listeners.all) {\n        listeners.push(...client.listeners.all);\n      }\n      if (client.listeners[event.type]) {\n        listeners.push(...client.listeners[event.type]);\n      }\n      for (const listener of listeners) {\n        listener(event);\n      }\n    };\n    this.recoverState = async () => {\n      this.logger(\"info\", `client:recoverState() - Start of recoverState with connectionID ${this._getConnectionID()}`, {\n        tags: [\"connection\"]\n      });\n      const cids = Object.keys(this.activeChannels);\n      if (cids.length && this.recoverStateOnReconnect) {\n        this.logger(\"info\", `client:recoverState() - Start the querying of ${cids.length} channels`, {\n          tags: [\"connection\", \"client\"]\n        });\n        await this.queryChannels({\n          cid: {\n            $in: cids\n          }\n        }, {\n          last_message_at: -1\n        }, {\n          limit: 30\n        });\n        this.logger(\"info\", \"client:recoverState() - Querying channels finished\", {\n          tags: [\"connection\", \"client\"]\n        });\n        this.dispatchEvent({\n          type: \"connection.recovered\"\n        });\n      } else {\n        this.dispatchEvent({\n          type: \"connection.recovered\"\n        });\n      }\n      this.wsPromise = Promise.resolve();\n      this.setUserPromise = Promise.resolve();\n    };\n    /**\n     * It's a helper method for `client.channel()` method, used to create unique conversation or\n     * channel based on member list instead of id.\n     *\n     * If the channel already exists in `activeChannels` list, then we simply return it, since that\n     * means the same channel was already requested or created.\n     *\n     * Otherwise we create a new instance of Channel class and return it.\n     *\n     * @private\n     *\n     * @param {string} channelType The channel type\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n    this.getChannelByMembers = (channelType, custom) => {\n      const memberIds = (custom.members ?? []).map(member => typeof member === \"string\" ? member : member.user_id ?? \"\");\n      const membersStr = memberIds.sort().join(\",\");\n      const tempCid = generateChannelTempCid(channelType, memberIds);\n      if (!tempCid) {\n        throw Error(\"Please specify atleast one member when creating unique conversation\");\n      }\n      for (const key in this.activeChannels) {\n        const channel2 = this.activeChannels[key];\n        if (channel2.disconnected) {\n          continue;\n        }\n        if (key === tempCid) {\n          return channel2;\n        }\n        if (key.indexOf(`${channelType}:!members-`) === 0) {\n          const membersStrInExistingChannel = Object.keys(channel2.state.members).sort().join(\",\");\n          if (membersStrInExistingChannel === membersStr) {\n            return channel2;\n          }\n        }\n      }\n      const channel = new Channel(this, channelType, void 0, custom);\n      if (this._cacheEnabled()) {\n        this.activeChannels[tempCid] = channel;\n      }\n      return channel;\n    };\n    /**\n     * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n     *\n     * If the channel already exists in `activeChannels` list, then we simply return it, since that\n     * means the same channel was already requested or created.\n     *\n     * Otherwise we create a new instance of Channel class and return it.\n     *\n     * @private\n     *\n     * @param {string} channelType The channel type\n     * @param {string} [channelID] The channel ID\n     * @param {object} [custom]    Custom data to attach to the channel\n     *\n     * @return {channel} The channel object, initialize it using channel.watch()\n     */\n    this.getChannelById = (channelType, channelID, custom) => {\n      if (typeof channelID === \"string\" && ~channelID.indexOf(\":\")) {\n        throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n      }\n      const cid = `${channelType}:${channelID}`;\n      if (cid in this.activeChannels && this.activeChannels[cid] && !this.activeChannels[cid].disconnected) {\n        const channel2 = this.activeChannels[cid];\n        if (Object.keys(custom).length > 0) {\n          channel2.data = {\n            ...channel2.data,\n            ...custom\n          };\n          channel2._data = {\n            ...channel2._data,\n            ...custom\n          };\n        }\n        return channel2;\n      }\n      const channel = new Channel(this, channelType, channelID, custom);\n      if (this._cacheEnabled()) {\n        this.activeChannels[channel.cid] = channel;\n      }\n      return channel;\n    };\n    /**\n     * @deprecated Please use upsertUsers() function instead.\n     *\n     * updateUsers - Batch update the list of users\n     *\n     * @param {UserResponse[]} users list of users\n     * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n     */\n    this.updateUsers = this.upsertUsers;\n    /**\n     * @deprecated Please use upsertUser() function instead.\n     *\n     * updateUser - Update or Create the given user object\n     *\n     * @param {UserResponse} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n     * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n     */\n    this.updateUser = this.upsertUser;\n    // alias for backwards compatibility\n    this._unblockMessage = this.unblockMessage;\n    /**\n     * @deprecated use markChannelsRead instead\n     *\n     * markAllRead - marks all channels for this user as read\n     * @param {MarkAllReadOptions} [data]\n     *\n     * @return {Promise<APIResponse>}\n     */\n    this.markAllRead = this.markChannelsRead;\n    /**\n     * _isUsingServerAuth - Returns true if we're using server side auth\n     */\n    this._isUsingServerAuth = () => !!this.secret;\n    this._cacheEnabled = () => !this._isUsingServerAuth() || !this.options.disableCache;\n    /**\n     * encode ws url payload\n     * @private\n     * @returns json string\n     */\n    this._buildWSPayload = client_request_id => JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      device: this.options.device,\n      client_request_id\n    });\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState({\n      client: this\n    });\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n    this.moderation = new Moderation(this);\n    this.notifications = options?.notifications ?? new NotificationManager();\n    if (secretOrOptions && isString3(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n    const inputOptions = options ? options : secretOrOptions && !isString3(secretOrOptions) ? secretOrOptions : {};\n    this.browser = typeof inputOptions.browser !== \"undefined\" ? inputOptions.browser : typeof window !== \"undefined\";\n    this.node = !this.browser;\n    this.options = {\n      timeout: 3e3,\n      withCredentials: false,\n      // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      disableCache: false,\n      wsUrlParams: new URLSearchParams({}),\n      ...inputOptions\n    };\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new import_https.default.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3e3\n      });\n    }\n    this.axiosInstance = axios_default.create(this.options);\n    this.setBaseURL(this.options.baseURL || \"https://chat.stream-io-api.com\");\n    if (typeof process !== \"undefined\" && \"env\" in process && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL(\"http://localhost:3030\");\n    }\n    if (typeof process !== \"undefined\" && \"env\" in process && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL(\"http://\" + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    this.activeChannels = {};\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n    this.defaultWSTimeoutWithFallback = 6 * 1e3;\n    this.defaultWSTimeout = 15 * 1e3;\n    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n    this.logger = isFunction2(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    this.threads = new ThreadManager({\n      client: this\n    });\n    this.polls = new PollManager({\n      client: this\n    });\n    this.reminders = new ReminderManager({\n      client: this\n    });\n  }\n  static getInstance(key, secretOrOptions, options) {\n    if (!_StreamChat._instance) {\n      if (typeof secretOrOptions === \"string\") {\n        _StreamChat._instance = new _StreamChat(key, secretOrOptions, options);\n      } else {\n        _StreamChat._instance = new _StreamChat(key, secretOrOptions);\n      }\n    }\n    return _StreamChat._instance;\n  }\n  setOfflineDBApi(offlineDBInstance) {\n    if (this.offlineDb) {\n      return;\n    }\n    this.offlineDb = offlineDBInstance;\n  }\n  devToken(userID) {\n    return DevToken(userID);\n  }\n  getAuthType() {\n    return this.anonymous ? \"anonymous\" : \"jwt\";\n  }\n  setBaseURL(baseURL) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace(\"http\", \"ws\").replace(\":3030\", \":8800\");\n  }\n  _setUser(user) {\n    this.user = user;\n    this.userID = user.id;\n    this._user = {\n      ...user\n    };\n  }\n  /**\n   * updateAppSettings - updates application settings\n   *\n   * @param {AppSettings} options App settings.\n   * IE: {\n      'apn_config': {\n        'auth_type': 'token',\n        'auth_key\": fs.readFileSync(\n          './apn-push-auth-key.p8',\n          'utf-8',\n        ),\n        'key_id': 'keyid',\n        'team_id': 'teamid',\n        'notification_template\": 'notification handlebars template',\n        'bundle_id': 'com.apple.your.app',\n        'development': true\n      },\n      'firebase_config': {\n        'server_key': 'server key from fcm',\n        'notification_template': 'notification handlebars template',\n        'data_template': 'data handlebars template',\n        'apn_template': 'apn notification handlebars template under v2'\n      },\n      'webhook_url': 'https://acme.com/my/awesome/webhook/',\n      'event_hooks': [\n        {\n          'hook_type': 'webhook',\n          'enabled': true,\n          'event_types': ['message.new'],\n          'webhook_url': 'https://acme.com/my/awesome/webhook/'\n        },\n        {\n          'hook_type': 'sqs',\n          'enabled': true,\n          'event_types': ['message.new'],\n          'sqs_url': 'https://sqs.us-east-1.amazonaws.com/1234567890/my-queue',\n          'sqs_auth_type': 'key',\n          'sqs_key': 'my-access-key',\n          'sqs_secret': 'my-secret-key'\n        }\n      ]\n    }\n   */\n  async updateAppSettings(options) {\n    const apn_config = options.apn_config;\n    if (apn_config?.p12_cert) {\n      options = {\n        ...options,\n        apn_config: {\n          ...apn_config,\n          p12_cert: Buffer.from(apn_config.p12_cert).toString(\"base64\")\n        }\n      };\n    }\n    return await this.patch(this.baseURL + \"/app\", options);\n  }\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before)\n    });\n  }\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID, before) {\n    return await this.revokeUsersToken([userID], before);\n  }\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs, before) {\n    if (before === void 0) {\n      before = (/* @__PURE__ */new Date()).toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n    const users = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: {\n          revoke_tokens_issued_before: before\n        }\n      });\n    }\n    return await this.partialUpdateUsers(users);\n  }\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    this.appSettingsPromise = this.get(this.baseURL + \"/app\");\n    return await this.appSettingsPromise;\n  }\n  /**\n   * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   *  IE: {\n   messageID: 'id-of-message', // will error if message does not exist\n   apnTemplate: '{}', // if app doesn't have apn configured it will error\n   firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n   firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n   skipDevices: true, // skip config/device checks and sending to real devices\n   pushProviderName: 'staging' // one of your configured push providers\n   pushProviderType: 'apn' // one of supported provider types\n   }\n   */\n  async testPushSettings(userID, data = {}) {\n    return await this.post(this.baseURL + \"/check_push\", {\n      user_id: userID,\n      ...(data.messageID ? {\n        message_id: data.messageID\n      } : {}),\n      ...(data.apnTemplate ? {\n        apn_template: data.apnTemplate\n      } : {}),\n      ...(data.firebaseTemplate ? {\n        firebase_template: data.firebaseTemplate\n      } : {}),\n      ...(data.firebaseDataTemplate ? {\n        firebase_data_template: data.firebaseDataTemplate\n      } : {}),\n      ...(data.skipDevices ? {\n        skip_devices: true\n      } : {}),\n      ...(data.pushProviderName ? {\n        push_provider_name: data.pushProviderName\n      } : {}),\n      ...(data.pushProviderType ? {\n        push_provider_type: data.pushProviderType\n      } : {})\n    });\n  }\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n   *  IE: {\n   sqs_key: 'auth_key',\n   sqs_secret: 'auth_secret',\n   sqs_url: 'url_to_queue',\n   }\n   */\n  async testSQSSettings(data = {}) {\n    return await this.post(this.baseURL + \"/check_sqs\", data);\n  }\n  /**\n   * testSNSSettings - Tests that the given or configured SNS configuration is valid\n   *\n   * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed\n   *  IE: {\n   sns_key: 'auth_key',\n   sns_secret: 'auth_secret',\n   sns_topic_arn: 'topic_to_publish_to',\n   }\n   */\n  async testSNSSettings(data = {}) {\n    return await this.post(this.baseURL + \"/check_sns\", data);\n  }\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user) {\n    let response;\n    this.anonymous = true;\n    try {\n      response = await this.post(this.baseURL + \"/guest\", {\n        user\n      });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    const {\n      created_at,\n      updated_at,\n      last_active,\n      online,\n      ...guestUser\n    } = response.user;\n    return await this.connectUser(guestUser, response.access_token);\n  }\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in.\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID, exp, iat) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra = {};\n    if (exp) {\n      extra.exp = exp;\n    }\n    if (iat) {\n      extra.iat = iat;\n    }\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n  on(callbackOrString, callbackOrNothing) {\n    const key = callbackOrNothing ? callbackOrString : \"all\";\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger(\"info\", `Attaching listener for ${key} event`, {\n      tags: [\"event\", \"client\"]\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger(\"info\", `Removing listener for ${key} event`, {\n          tags: [\"event\", \"client\"]\n        });\n        this.listeners[key] = this.listeners[key].filter(el => el !== callback);\n      }\n    };\n  }\n  off(callbackOrString, callbackOrNothing) {\n    const key = callbackOrNothing ? callbackOrString : \"all\";\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger(\"info\", `Removing listener for ${key} event`, {\n      tags: [\"event\", \"client\"]\n    });\n    this.listeners[key] = this.listeners[key].filter(value => value !== callback);\n  }\n  _logApiRequest(type, url, data, config) {\n    this.logger(\"info\", `client: ${type} - Request - ${url}`, {\n      tags: [\"api\", \"api_request\", \"client\"],\n      url,\n      payload: data,\n      config\n    });\n  }\n  _logApiResponse(type, url, response) {\n    this.logger(\"info\", `client:${type} - Response - url: ${url} > status ${response.status}`, {\n      tags: [\"api\", \"api_response\", \"client\"],\n      url,\n      response\n    });\n  }\n  _logApiError(type, url, error) {\n    this.logger(\"error\", `client:${type} - Error - url: ${url}`, {\n      tags: [\"api\", \"api_response\", \"client\"],\n      url,\n      error\n    });\n  }\n  get(url, params) {\n    return this.doAxiosRequest(\"get\", url, null, {\n      params\n    });\n  }\n  put(url, data) {\n    return this.doAxiosRequest(\"put\", url, data);\n  }\n  post(url, data) {\n    return this.doAxiosRequest(\"post\", url, data);\n  }\n  patch(url, data) {\n    return this.doAxiosRequest(\"patch\", url, data);\n  }\n  delete(url, params) {\n    return this.doAxiosRequest(\"delete\", url, null, {\n      params\n    });\n  }\n  sendFile(url, uri, name, contentType, user) {\n    const data = addFileToFormData(uri, name, contentType || \"multipart/form-data\");\n    if (user != null) data.append(\"user\", JSON.stringify(user));\n    return this.doAxiosRequest(\"postForm\", url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {},\n      // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity\n      }\n    });\n  }\n  errorFromResponse(response) {\n    const message = typeof response.data.code !== \"undefined\" ? `StreamChat error code ${response.data.code}: ${response.data.message}` : `StreamChat error HTTP code: ${response.status}`;\n    return new ErrorFromResponse(message, {\n      code: response.data.code ?? null,\n      response,\n      status: response.status\n    });\n  }\n  handleResponse(response) {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  }\n  _handleClientEvent(event) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger(\"info\", `client:_handleClientEvent - Received event of type { ${event.type} }`, {\n      tags: [\"event\", \"client\"],\n      event\n    });\n    if (event.type === \"user.presence.changed\" || event.type === \"user.updated\" || event.type === \"user.deleted\") {\n      this._handleUserEvent(event);\n    }\n    if (event.type === \"health.check\" && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n    if (event.channel && event.type === \"notification.message_new\") {\n      const {\n        channel\n      } = event;\n      this._addChannelConfig(channel);\n    }\n    if (event.type === \"notification.channel_mutes_updated\" && event.me?.channel_mutes) {\n      this.mutedChannels = event.me.channel_mutes;\n    }\n    if (event.type === \"notification.mutes_updated\" && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n    if (event.type === \"notification.mark_read\" && event.unread_channels === 0) {\n      const activeChannelKeys = Object.keys(this.activeChannels);\n      activeChannelKeys.forEach(activeChannelKey => this.activeChannels[activeChannelKey].state.unreadCount = 0);\n    }\n    if ((event.type === \"channel.deleted\" || event.type === \"notification.channel_deleted\") && event.cid) {\n      const {\n        cid\n      } = event;\n      client.state.deleteAllChannelReference(cid);\n      this.activeChannels[event.cid]?._disconnect();\n      postListenerCallbacks.push(() => {\n        if (!cid) return;\n        delete this.activeChannels[cid];\n      });\n    }\n    return postListenerCallbacks;\n  }\n  _muteStatus(cid) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires ? new Date(mute.expires).getTime() > (/* @__PURE__ */new Date()).getTime() : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : /* @__PURE__ */new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null\n        };\n        break;\n      }\n    }\n    if (muteStatus) {\n      return muteStatus;\n    }\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null\n    };\n  }\n  /**\n   * @private\n   */\n  async connect() {\n    if (!this.userID || !this._user) {\n      throw Error(\"Call connectUser or connectAnonymousUser before starting the connection\");\n    }\n    if (!this.wsBaseURL) {\n      throw Error(\"Websocket base url not set\");\n    }\n    if (!this.clientID) {\n      throw Error(\"clientID is not set\");\n    }\n    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n      this._sayHi();\n    }\n    if (this.options.wsConnection && this.node) {\n      this.options.wsConnection.setClient(this);\n      this.wsConnection = this.options.wsConnection;\n    } else {\n      this.wsConnection = new StableWSConnection({\n        client: this\n      });\n    }\n    try {\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n      return await this.wsConnection.connect(this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout);\n    } catch (error) {\n      if (this.options.enableWSFallback && isWSFailure(error) && isOnline()) {\n        this.logger(\"info\", \"client:connect() - WS failed, fallback to longpoll\", {\n          tags: [\"connection\", \"client\"]\n        });\n        this.dispatchEvent({\n          type: \"transport.changed\",\n          mode: \"longpoll\"\n        });\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then();\n        this.wsFallback = new WSConnectionFallback({\n          client: this\n        });\n        return await this.wsFallback.connect();\n      }\n      throw error;\n    }\n  }\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi() {\n    const client_request_id = randomId();\n    const opts = {\n      headers: {\n        \"x-client-request-id\": client_request_id\n      }\n    };\n    this.doAxiosRequest(\"get\", this.baseURL + \"/hi\", null, opts).catch(e => {\n      if (this.options.enableInsights) {\n        postInsights(\"http_hi_failed\", {\n          api_key: this.key,\n          err: e,\n          client_request_id\n        });\n      }\n    });\n  }\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters} filterConditions MongoDB style filter conditions\n   * @param {UserSort} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<{ users: Array<UserResponse> }>} User Query Response\n   */\n  async queryUsers(filterConditions, sort = [], options = {}) {\n    const defaultOptions = {\n      presence: false\n    };\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n    const data = await this.get(this.baseURL + \"/users\", {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...defaultOptions,\n        ...options\n      }\n    });\n    this.state.updateUsers(data.users);\n    return data;\n  }\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}\n   *\n   * @return {Promise<BannedUsersResponse>} Ban Query Response\n   */\n  async queryBannedUsers(filterConditions = {}, sort = [], options = {}) {\n    return await this.get(this.baseURL + \"/query_banned_users\", {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options\n      }\n    });\n  }\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse>} Message Flags Response\n   */\n  async queryMessageFlags(filterConditions = {}, options = {}) {\n    return await this.get(this.baseURL + \"/moderation/flags/message\", {\n      payload: {\n        filter_conditions: filterConditions,\n        ...options\n      }\n    });\n  }\n  /**\n   * queryChannelsRequest - Queries channels and returns the raw response\n   *\n   * @param {ChannelFilters} filterConditions object MongoDB style filters\n   * @param {ChannelSort} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   *\n   * @return {Promise<Array<ChannelAPIResponse>>} search channels response\n   */\n  async queryChannelsRequest(filterConditions, sort = [], options = {}) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false\n    };\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options\n    };\n    const data = await this.post(this.baseURL + \"/channels\", payload);\n    return data.channels;\n  }\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters} filterConditions object MongoDB style filters\n   * @param {ChannelSort} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   * - stateOptions.skipHydration - Skips returning the channels as instances of the Channel class and rather returns the raw query response.\n   *\n   * @return {Promise<Array<Channel>>} search channels response\n   */\n  async queryChannels(filterConditions, sort = [], options = {}, stateOptions = {}) {\n    const channels = await this.queryChannelsRequest(filterConditions, sort, options);\n    this.dispatchEvent({\n      type: \"channels.queried\",\n      queriedChannels: {\n        channels,\n        isLatestMessageSet: true\n      }\n    });\n    if (channels?.length && this.offlineDb?.upsertChannels) {\n      await this.offlineDb.upsertChannels({\n        channels,\n        isLatestMessagesSet: true\n      });\n    }\n    return this.hydrateActiveChannels(channels, stateOptions, options);\n  }\n  /**\n   * queryReactions - Query reactions\n   *\n   * @param {ReactionFilters} filter object MongoDB style filters\n   * @param {ReactionSort} [sort] Sort options, for instance {created_at: -1}.\n   * @param {QueryReactionsOptions} [options] Pagination object\n   *\n   * @return {Promise<{ QueryReactionsAPIResponse } search channels response\n   */\n  async queryReactions(messageID, filter2, sort = [], options = {}) {\n    const payload = {\n      filter: filter2,\n      sort: normalizeQuerySort(sort),\n      ...options\n    };\n    if (this.offlineDb?.getReactions && !options.next) {\n      try {\n        const reactionsFromDb = await this.offlineDb.getReactions({\n          messageId: messageID,\n          filters: filter2,\n          sort,\n          limit: options.limit\n        });\n        if (reactionsFromDb) {\n          this.dispatchEvent({\n            type: \"offline_reactions.queried\",\n            offlineReactions: reactionsFromDb\n          });\n        }\n      } catch (e) {\n        this.logger(\"warn\", \"An error has occurred while querying offline reactions\", {\n          error: e\n        });\n      }\n    }\n    await this.wsPromise;\n    return await this.post(this.baseURL + \"/messages/\" + encodeURIComponent(messageID) + \"/reactions\", payload);\n  }\n  hydrateActiveChannels(channelsFromApi = [], stateOptions = {}, queryChannelsOptions) {\n    const {\n      skipInitialization,\n      offlineMode = false\n    } = stateOptions;\n    const channels = [];\n    for (const channelState of channelsFromApi) {\n      this._addChannelConfig(channelState.channel);\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.offlineMode = offlineMode;\n      c.initialized = !offlineMode;\n      c.push_preferences = channelState.push_preferences;\n      let updatedMessagesSet;\n      if (skipInitialization === void 0) {\n        const {\n          messageSet\n        } = c._initializeState(channelState, \"latest\");\n        updatedMessagesSet = messageSet;\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        const {\n          messageSet\n        } = c._initializeState(channelState, \"latest\");\n        updatedMessagesSet = messageSet;\n      }\n      if (updatedMessagesSet) {\n        updatedMessagesSet.pagination = {\n          ...updatedMessagesSet.pagination,\n          ...messageSetPagination({\n            parentSet: updatedMessagesSet,\n            requestedPageSize: queryChannelsOptions?.message_limit || DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,\n            returnedPage: channelState.messages,\n            logger: this.logger\n          })\n        };\n        this.polls.hydratePollCache(channelState.messages, true);\n        this.reminders.hydrateState(channelState.messages);\n      }\n      c.messageComposer.initStateFromChannelResponse(channelState);\n      channels.push(c);\n    }\n    return channels;\n  }\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters | string} query search query or object MongoDB style filters\n   * @param {SearchOptions} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse>} search messages response\n   */\n  async search(filterConditions, query, options = {}) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    const payload = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort ? normalizeQuerySort(options.sort) : void 0\n    };\n    if (typeof query === \"string\") {\n      payload.query = query;\n    } else if (typeof query === \"object\") {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    await this.wsPromise;\n    return await this.get(this.baseURL + \"/search\", {\n      payload\n    });\n  }\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider\n   *\n   */\n  setLocalDevice(device) {\n    if (this.wsConnection?.isConnecting && this.wsPromise || (this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n      throw new Error(\"you can only set device before opening a websocket connection\");\n    }\n    this.options.device = device;\n  }\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {PushProvider} push_provider the push provider\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n   *\n   */\n  async addDevice(id, push_provider, userID, push_provider_name) {\n    return await this.post(this.baseURL + \"/devices\", {\n      id,\n      push_provider,\n      ...(userID != null ? {\n        user_id: userID\n      } : {}),\n      ...(push_provider_name != null ? {\n        push_provider_name\n      } : {})\n    });\n  }\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {Device[]} Array of devices\n   */\n  async getDevices(userID) {\n    return await this.get(this.baseURL + \"/devices\", userID ? {\n      user_id: userID\n    } : {});\n  }\n  /**\n   * getUnreadCount - Returns unread counts for a single user\n   *\n   * @param {string} [userID] User ID.\n   *\n   * @return {<GetUnreadCountAPIResponse>}\n   */\n  async getUnreadCount(userID) {\n    return await this.get(this.baseURL + \"/unread\", userID ? {\n      user_id: userID\n    } : {});\n  }\n  /**\n   * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.\n   *\n   * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.\n   *\n   * @return {<GetUnreadCountBatchAPIResponse>}\n   */\n  async getUnreadCountBatch(userIDs) {\n    return await this.post(this.baseURL + \"/unread_batch\", {\n      user_ids: userIDs\n    });\n  }\n  /**\n   * setPushPreferences - Applies the list of push preferences.\n   *\n   * @param {PushPreference[]} A list of push preferences.\n   *\n   * @return {<UpsertPushPreferencesResponse>}\n   */\n  async setPushPreferences(preferences) {\n    return await this.post(this.baseURL + \"/push_preferences\", {\n      preferences\n    });\n  }\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id, userID) {\n    return await this.delete(this.baseURL + \"/devices\", {\n      id,\n      ...(userID ? {\n        user_id: userID\n      } : {})\n    });\n  }\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  getRateLimits(params) {\n    const {\n      serverSide,\n      web,\n      android,\n      ios,\n      endpoints\n    } = params || {};\n    return this.get(this.baseURL + \"/rate_limits\", {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(\",\") : void 0\n    });\n  }\n  _addChannelConfig({\n    cid,\n    config\n  }) {\n    if (this._cacheEnabled()) {\n      this.configs[cid] = config;\n    }\n  }\n  channel(channelType, channelIDOrCustom, custom = {}) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error(\"Call connectUser or connectAnonymousUser before creating a channel\");\n    }\n    if (~channelType.indexOf(\":\")) {\n      throw new Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n    if (channelIDOrCustom && typeof channelIDOrCustom === \"object\") {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n    if (!channelIDOrCustom && typeof custom === \"object\" && custom.members?.length) {\n      return this.getChannelByMembers(channelType, custom);\n    }\n    if (!channelIDOrCustom) {\n      return new Channel(this, channelType, void 0, custom);\n    }\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse[]} users list of users\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  async upsertUsers(users) {\n    const userMap = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error(\"User ID is required when updating a user\");\n      }\n      userMap[userObject.id] = userObject;\n    }\n    return await this.post(this.baseURL + \"/users\", {\n      users: userMap\n    });\n  }\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  upsertUser(userObject) {\n    return this.upsertUsers([userObject]);\n  }\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate[]} users list of partial update requests\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  async partialUpdateUsers(users) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error(\"User ID is required when updating a user\");\n      }\n    }\n    return await this.patch(this.baseURL + \"/users\", {\n      users\n    });\n  }\n  async deleteUser(userID, params) {\n    return await this.delete(this.baseURL + `/users/${encodeURIComponent(userID)}`, params);\n  }\n  /**\n   * restoreUsers - Restore soft deleted users\n   *\n   * @param {string[]} user_ids which users to restore\n   *\n   * @return {APIResponse} An API response\n   */\n  async restoreUsers(user_ids) {\n    return await this.post(this.baseURL + `/users/restore`, {\n      user_ids\n    });\n  }\n  /**\n   * reactivateUser - Reactivate one user\n   *\n   * @param {string} userID which user to reactivate\n   * @param {ReactivateUserOptions} [options]\n   *\n   * @return {UserResponse} Reactivated user\n   */\n  async reactivateUser(userID, options) {\n    return await this.post(this.baseURL + `/users/${encodeURIComponent(userID)}/reactivate`, {\n      ...options\n    });\n  }\n  /**\n   * reactivateUsers - Reactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to reactivate\n   * @param {ReactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async reactivateUsers(user_ids, options) {\n    return await this.post(this.baseURL + `/users/reactivate`, {\n      user_ids,\n      ...options\n    });\n  }\n  /**\n   * deactivateUser - Deactivate one user\n   *\n   * @param {string} userID which user to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {UserResponse} Deactivated user\n   */\n  async deactivateUser(userID, options) {\n    return await this.post(this.baseURL + `/users/${encodeURIComponent(userID)}/deactivate`, {\n      ...options\n    });\n  }\n  /**\n   * deactivateUsers - Deactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deactivateUsers(user_ids, options) {\n    return await this.post(this.baseURL + `/users/deactivate`, {\n      user_ids,\n      ...options\n    });\n  }\n  async exportUser(userID, options) {\n    return await this.get(this.baseURL + `/users/${encodeURIComponent(userID)}/export`, {\n      ...options\n    });\n  }\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID, options) {\n    return await this.post(this.baseURL + \"/moderation/ban\", {\n      target_user_id: targetUserID,\n      ...options\n    });\n  }\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID, options) {\n    return await this.delete(this.baseURL + \"/moderation/ban\", {\n      target_user_id: targetUserID,\n      ...options\n    });\n  }\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID, options) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options\n    });\n  }\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID, options) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options\n    });\n  }\n  async blockUser(blockedUserID, user_id) {\n    return await this.post(this.baseURL + \"/users/block\", {\n      blocked_user_id: blockedUserID,\n      ...(user_id ? {\n        user_id\n      } : {})\n    });\n  }\n  async getBlockedUsers(user_id) {\n    return await this.get(this.baseURL + \"/users/block\", {\n      ...(user_id ? {\n        user_id\n      } : {})\n    });\n  }\n  async unBlockUser(blockedUserID, userID) {\n    return await this.post(this.baseURL + \"/users/unblock\", {\n      blocked_user_id: blockedUserID,\n      ...(userID ? {\n        user_id: userID\n      } : {})\n    });\n  }\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions} [options]\n   * @returns {Promise<MuteUserResponse>}\n   */\n  async muteUser(targetID, userID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/mute\", {\n      target_id: targetID,\n      ...(userID ? {\n        user_id: userID\n      } : {}),\n      ...options\n    });\n  }\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID, currentUserID) {\n    return await this.post(this.baseURL + \"/moderation/unmute\", {\n      target_id: targetID,\n      ...(currentUserID ? {\n        user_id: currentUserID\n      } : {})\n    });\n  }\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error(\"Make sure to await connectUser() first.\");\n    }\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/flag\", {\n      target_message_id: targetMessageID,\n      ...options\n    });\n  }\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/flag\", {\n      target_user_id: targetID,\n      ...options\n    });\n  }\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/unflag\", {\n      target_message_id: targetMessageID,\n      ...options\n    });\n  }\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/unflag\", {\n      target_user_id: targetID,\n      ...options\n    });\n  }\n  /**\n   * _queryFlags - Query flags.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagsResponse>} Flags Response\n   */\n  async _queryFlags(filterConditions = {}, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/flags\", {\n      filter_conditions: filterConditions,\n      ...options\n    });\n  }\n  /**\n   * _queryFlagReports - Query flag reports.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagReportsResponse>} Flag Reports Response\n   */\n  async _queryFlagReports(filterConditions = {}, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/reports\", {\n      filter_conditions: filterConditions,\n      ...options\n    });\n  }\n  /**\n   * _reviewFlagReport - review flag report\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} [id] flag report to review\n   * @param {string} [reviewResult] flag report review result\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @param {string} [options.review_details] custom information about review result\n   * @returns {Promise<ReviewFlagReportResponse>>}\n   */\n  async _reviewFlagReport(id, reviewResult, options = {}) {\n    return await this.patch(this.baseURL + `/moderation/reports/${encodeURIComponent(id)}`, {\n      review_result: reviewResult,\n      ...options\n    });\n  }\n  /**\n   * unblockMessage - unblocks message blocked by automod\n   *\n   *\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unblockMessage(targetMessageID, options = {}) {\n    return await this.post(this.baseURL + \"/moderation/unblock_message\", {\n      target_message_id: targetMessageID,\n      ...options\n    });\n  }\n  /**\n   * markChannelsRead - marks channels read -\n   * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n   *\n   * @param {MarkChannelsReadOptions } [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markChannelsRead(data = {}) {\n    await this.post(this.baseURL + \"/channels/read\", {\n      ...data\n    });\n  }\n  createCommand(data) {\n    return this.post(this.baseURL + \"/commands\", data);\n  }\n  getCommand(name) {\n    return this.get(this.baseURL + `/commands/${encodeURIComponent(name)}`);\n  }\n  updateCommand(name, data) {\n    return this.put(this.baseURL + `/commands/${encodeURIComponent(name)}`, data);\n  }\n  deleteCommand(name) {\n    return this.delete(this.baseURL + `/commands/${encodeURIComponent(name)}`);\n  }\n  listCommands() {\n    return this.get(this.baseURL + `/commands`);\n  }\n  createChannelType(data) {\n    const channelData = Object.assign({}, {\n      commands: [\"all\"]\n    }, data);\n    return this.post(this.baseURL + \"/channeltypes\", channelData);\n  }\n  getChannelType(channelType) {\n    return this.get(this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`);\n  }\n  updateChannelType(channelType, data) {\n    return this.put(this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`, data);\n  }\n  deleteChannelType(channelType) {\n    return this.delete(this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`);\n  }\n  listChannelTypes() {\n    return this.get(this.baseURL + `/channeltypes`);\n  }\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {MessageResponse} Response that includes the message\n   */\n  async translateMessage(messageId, language) {\n    return await this.post(this.baseURL + `/messages/${encodeURIComponent(messageId)}/translate`, {\n      language\n    });\n  }\n  /**\n   * translate - translates the given text to provided language\n   *\n   * @param {string} text\n   * @param {string} destination_language\n   * @param {string} source_language\n   *\n   * @return {TranslateResponse} Response that includes the message\n   */\n  async translate(text, destination_language, source_language) {\n    return await this.post(this.baseURL + `/translate`, {\n      text,\n      source_language,\n      destination_language\n    });\n  }\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate) {\n    let pinExpires = null;\n    if (typeof timeoutOrExpirationDate === \"number\") {\n      const now = /* @__PURE__ */new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString3(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(messageOrMessageId, errorText) {\n    let messageId;\n    if (typeof messageOrMessageId === \"string\") {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n   * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n   */\n  pinMessage(messageOrMessageId, timeoutOrExpirationDate, pinnedBy, pinnedAt) {\n    const messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n    return this.partialUpdateMessage(messageId, {\n      set: {\n        pinned: true,\n        pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n        pinned_at: this._normalizeExpiration(pinnedAt)\n      }\n    }, pinnedBy);\n  }\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(messageOrMessageId, userId) {\n    const messageId = this._validateAndGetMessageId(messageOrMessageId, \"Please specify the message id when calling unpinMessage\");\n    return this.partialUpdateMessage(messageId, {\n      set: {\n        pinned: false\n      }\n    }, userId);\n  }\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [partialUserOrUserId]\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: LocalMessage | MessageResponse }} Response that includes the message\n   */\n  async updateMessage(message, partialUserOrUserId, options) {\n    if (!message.id) {\n      throw Error(\"Please specify the message.id when calling updateMessage\");\n    }\n    const payload = toUpdatedMessagePayload(message);\n    if (typeof partialUserOrUserId === \"string\") {\n      payload.user_id = partialUserOrUserId;\n    } else if (typeof partialUserOrUserId?.id === \"string\") {\n      payload.user_id = partialUserOrUserId.id;\n    }\n    return await this.post(this.baseURL + `/messages/${encodeURIComponent(message.id)}`, {\n      message: payload,\n      ...options\n    });\n  }\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse }} Response that includes the updated message\n   */\n  async partialUpdateMessage(id, partialMessageObject, partialUserOrUserId, options) {\n    if (!id) {\n      throw Error(\"Please specify the message.id when calling partialUpdateMessage\");\n    }\n    let user = void 0;\n    if (typeof partialUserOrUserId === \"string\") {\n      user = {\n        id: partialUserOrUserId\n      };\n    } else if (typeof partialUserOrUserId?.id === \"string\") {\n      user = {\n        id: partialUserOrUserId.id\n      };\n    }\n    return await this.put(this.baseURL + `/messages/${encodeURIComponent(id)}`, {\n      ...partialMessageObject,\n      ...options,\n      user\n    });\n  }\n  async deleteMessage(messageID, hardDelete) {\n    try {\n      if (this.offlineDb) {\n        if (hardDelete) {\n          await this.offlineDb.hardDeleteMessage({\n            id: messageID\n          });\n        } else {\n          await this.offlineDb.softDeleteMessage({\n            id: messageID\n          });\n        }\n        return await this.offlineDb.queueTask({\n          task: {\n            messageId: messageID,\n            payload: [messageID, hardDelete],\n            type: \"delete-message\"\n          }\n        });\n      }\n    } catch (error) {\n      this.logger(\"error\", `offlineDb:deleteMessage`, {\n        tags: [\"channel\", \"offlineDb\"],\n        error\n      });\n    }\n    return this._deleteMessage(messageID, hardDelete);\n  }\n  async _deleteMessage(messageID, hardDelete) {\n    let params = {};\n    if (hardDelete) {\n      params = {\n        hard: true\n      };\n    }\n    return await this.delete(this.baseURL + `/messages/${encodeURIComponent(messageID)}`, params);\n  }\n  /**\n   * undeleteMessage - Undelete a message\n   *\n   * undeletes a message that was previous soft deleted. Hard deleted messages\n   * cannot be undeleted. This is only allowed to be called from server-side\n   * clients.\n   *\n   * @param {string} messageID The id of the message to undelete\n   * @param {string} userID The id of the user who undeleted the message\n   *\n   * @return {{ message: MessageResponse }} Response that includes the message\n   */\n  async undeleteMessage(messageID, userID) {\n    return await this.post(this.baseURL + `/messages/${encodeURIComponent(messageID)}/undelete`, {\n      undeleted_by: userID\n    });\n  }\n  async getMessage(messageID, options) {\n    return await this.get(this.baseURL + `/messages/${encodeURIComponent(messageID)}`, {\n      ...options\n    });\n  }\n  /**\n   * queryThreads - returns the list of threads of current user.\n   *\n   * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.\n   * @param {number}  options.limit Limits the number of threads to be returned.\n   * @param {boolean} options.watch Subscribes the user to the channels of the threads.\n   * @param {number}  options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}  options.reply_limit Limits the number of replies returned per threads.\n   * @param {ThreadFilters} options.filter MongoDB style filters for threads\n   * @param {ThreadSort} options.sort MongoDB style sort for threads\n   *\n   * @returns {{ threads: Thread[], next: string }} Returns the list of threads and the next cursor.\n   */\n  async queryThreads(options = {}) {\n    const optionsWithDefaults = {\n      limit: 10,\n      participant_limit: 10,\n      reply_limit: 3,\n      watch: true,\n      ...options\n    };\n    const requestBody = {\n      ...optionsWithDefaults\n    };\n    if (optionsWithDefaults.filter && Object.keys(optionsWithDefaults.filter).length > 0) {\n      requestBody.filter = optionsWithDefaults.filter;\n    }\n    if (optionsWithDefaults.sort && (Array.isArray(optionsWithDefaults.sort) ? optionsWithDefaults.sort.length > 0 : Object.keys(optionsWithDefaults.sort).length > 0)) {\n      requestBody.sort = normalizeQuerySort(optionsWithDefaults.sort);\n    }\n    const response = await this.post(`${this.baseURL}/threads`, requestBody);\n    return {\n      threads: response.threads.map(thread => new Thread({\n        client: this,\n        threadData: thread\n      })),\n      next: response.next\n    };\n  }\n  /**\n   * getThread - returns the thread of a message by its id.\n   *\n   * @param {string}            messageId The message id\n   * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.\n   * @param {boolean}           options.watch Subscribes the user to the channel of the thread.\n   * @param {number}            options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}            options.reply_limit Limits the number of replies returned per threads.\n   *\n   * @returns {Thread} Returns the thread.\n   */\n  async getThread(messageId, options = {}) {\n    if (!messageId) {\n      throw new Error(\"Please specify the messageId when calling getThread\");\n    }\n    const optionsWithDefaults = {\n      participant_limit: 100,\n      reply_limit: 3,\n      watch: true,\n      ...options\n    };\n    const response = await this.get(`${this.baseURL}/threads/${encodeURIComponent(messageId)}`, optionsWithDefaults);\n    return new Thread({\n      client: this,\n      threadData: response.thread\n    });\n  }\n  /**\n   * partialUpdateThread - updates the given thread\n   *\n   * @param {string}              messageId The id of the thread message which needs to be updated.\n   * @param {PartialThreadUpdate} partialThreadObject should contain \"set\" or \"unset\" params for any of the thread's non-reserved fields.\n   *\n   * @returns {GetThreadAPIResponse} Returns the updated thread.\n   */\n  async partialUpdateThread(messageId, partialThreadObject) {\n    if (!messageId) {\n      throw Error(\"Please specify the message id when calling partialUpdateThread\");\n    }\n    const reservedThreadFields = [\"created_at\", \"id\", \"last_message_at\", \"type\", \"updated_at\", \"user\", \"reply_count\", \"participants\", \"channel\", \"custom\"];\n    for (const key in {\n      ...partialThreadObject.set,\n      ...partialThreadObject.unset\n    }) {\n      if (reservedThreadFields.includes(key)) {\n        throw Error(`You cannot set ${key} field on Thread object. ${key} is reserved for server-side use. Please omit ${key} from your set object.`);\n      }\n    }\n    return await this.patch(`${this.baseURL}/threads/${encodeURIComponent(messageId)}`, partialThreadObject);\n  }\n  getUserAgent() {\n    if (this.userAgent) {\n      return this.userAgent;\n    }\n    const version = \"9.8.0\";\n    const clientBundle = \"browser-esm\";\n    let userAgentString = \"\";\n    if (this.sdkIdentifier) {\n      userAgentString = `stream-chat-${this.sdkIdentifier.name}-v${this.sdkIdentifier.version}-llc-v${version}`;\n    } else {\n      userAgentString = `stream-chat-js-v${version}-${this.node ? \"node\" : \"browser\"}`;\n    }\n    const {\n      os,\n      model\n    } = this.deviceIdentifier ?? {};\n    return [\n    // reports the device OS, if provided\n    [\"os\", os],\n    // reports the device model, if provided\n    [\"device_model\", model],\n    // reports which bundle is being picked from the exports\n    [\"client_bundle\", clientBundle]].reduce((withArguments, [key, value]) => value && value.length > 0 ? withArguments.concat(`|${key}=${value}`) : withArguments, userAgentString);\n  }\n  /**\n   * @deprecated use sdkIdentifier instead\n   * @param userAgent\n   */\n  setUserAgent(userAgent) {\n    this.userAgent = userAgent;\n  }\n  _enrichAxiosOptions(options = {\n    params: {},\n    headers: {},\n    config: {}\n  }) {\n    const token = this._getToken();\n    const authorization = token ? {\n      Authorization: token\n    } : void 0;\n    let signal = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n    if (!options.headers?.[\"x-client-request-id\"]) {\n      options.headers = {\n        ...options.headers,\n        \"x-client-request-id\": randomId()\n      };\n    }\n    const {\n      params: axiosRequestConfigParams,\n      headers: axiosRequestConfigHeaders,\n      ...axiosRequestConfigRest\n    } = this.options.axiosRequestConfig || {};\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n        ...(axiosRequestConfigParams || {})\n      },\n      headers: {\n        ...authorization,\n        \"stream-auth-type\": this.getAuthType(),\n        \"X-Stream-Client\": this.getUserAgent(),\n        ...options.headers,\n        ...(axiosRequestConfigHeaders || {})\n      },\n      ...(signal ? {\n        signal\n      } : {}),\n      ...options.config,\n      ...(axiosRequestConfigRest || {})\n    };\n  }\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n    return this.tokenManager.getToken();\n  }\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n  /**\n   * checks signature of a request\n   * @param {string | Buffer} rawBody\n   * @param {string} signature from HTTP header\n   * @returns {boolean}\n   */\n  verifyWebhook(requestBody, xSignature) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name) {\n    return this.get(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData) {\n    return this.post(`${this.baseURL}/permissions`, {\n      ...permissionData\n    });\n  }\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id, permissionData) {\n    return this.put(`${this.baseURL}/permissions/${encodeURIComponent(id)}`, {\n      ...permissionData\n    });\n  }\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name) {\n    return this.delete(`${this.baseURL}/permissions/${encodeURIComponent(name)}`);\n  }\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get(`${this.baseURL}/permissions`);\n  }\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name) {\n    return this.post(`${this.baseURL}/roles`, {\n      name\n    });\n  }\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get(`${this.baseURL}/roles`);\n  }\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name) {\n    return this.delete(`${this.baseURL}/roles/${encodeURIComponent(name)}`);\n  }\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   * @param {SyncOptions} options See JSDoc in the type fields for more info\n   *\n   * @returns {Promise<SyncResponse>}\n   */\n  sync(channel_cids, last_sync_at, options = {}) {\n    return this.post(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n      ...options\n    });\n  }\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID, event) {\n    return await this.post(`${this.baseURL}/users/${encodeURIComponent(targetUserID)}/event`, {\n      event\n    });\n  }\n  /**\n   * Creates a new block list\n   *\n   * @param {BlockList} blockList - The block list to create\n   * @param {string} blockList.name - The name of the block list\n   * @param {string[]} blockList.words - List of words to block\n   * @param {string} [blockList.team] - Team ID the block list belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  createBlockList(blockList) {\n    return this.post(`${this.baseURL}/blocklists`, blockList);\n  }\n  /**\n   * Lists all block lists\n   *\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID to filter block lists by\n   *\n   * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists\n   */\n  listBlockLists(data) {\n    return this.get(`${this.baseURL}/blocklists`, data);\n  }\n  /**\n   * Gets a specific block list\n   *\n   * @param {string} name - The name of the block list to retrieve\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list\n   */\n  getBlockList(name, data) {\n    return this.get(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n  /**\n   * Updates an existing block list\n   *\n   * @param {string} name - The name of the block list to update\n   * @param {Object} data - The update data\n   * @param {string[]} data.words - New list of words to block\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  updateBlockList(name, data) {\n    return this.put(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n  /**\n   * Deletes a block list\n   *\n   * @param {string} name - The name of the block list to delete\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  deleteBlockList(name, data) {\n    return this.delete(`${this.baseURL}/blocklists/${encodeURIComponent(name)}`, data);\n  }\n  exportChannels(request, options = {}) {\n    const payload = {\n      channels: request,\n      ...options\n    };\n    return this.post(`${this.baseURL}/export_channels`, payload);\n  }\n  exportUsers(request) {\n    return this.post(`${this.baseURL}/export/users`, request);\n  }\n  exportChannel(request, options) {\n    return this.exportChannels([request], options);\n  }\n  getExportChannelStatus(id) {\n    return this.get(`${this.baseURL}/export_channels/${encodeURIComponent(id)}`);\n  }\n  campaign(idOrData, data) {\n    if (idOrData && typeof idOrData === \"object\") {\n      return new Campaign(this, null, idOrData);\n    }\n    return new Campaign(this, idOrData, data);\n  }\n  segment(type, idOrData, data) {\n    if (typeof idOrData === \"string\") {\n      return new Segment(this, type, idOrData, data);\n    }\n    return new Segment(this, type, null, idOrData);\n  }\n  validateServerSideAuth() {\n    if (!this.secret) {\n      throw new Error(\"Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.\");\n    }\n  }\n  /**\n   * createSegment - Creates a segment\n   *\n   * @private\n   * @param {SegmentType} type Segment type\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} params Segment data\n   *\n   * @return {{segment: SegmentResponse} & APIResponse} The created Segment\n   */\n  createSegment(type, id, data) {\n    this.validateServerSideAuth();\n    const body = {\n      id,\n      type,\n      ...data\n    };\n    return this.post(this.baseURL + `/segments`, body);\n  }\n  /**\n   * createUserSegment - Creates a user segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  createUserSegment(id, data) {\n    this.validateServerSideAuth();\n    return this.createSegment(\"user\", id, data);\n  }\n  /**\n   * createChannelSegment - Creates a channel segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  createChannelSegment(id, data) {\n    this.validateServerSideAuth();\n    return this.createSegment(\"channel\", id, data);\n  }\n  getSegment(id) {\n    this.validateServerSideAuth();\n    return this.get(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n  /**\n   * updateSegment - Update a segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<UpdateSegmentData>} data Data to update\n   *\n   * @return {Segment} Updated Segment\n   */\n  updateSegment(id, data) {\n    this.validateServerSideAuth();\n    return this.put(this.baseURL + `/segments/${encodeURIComponent(id)}`, data);\n  }\n  /**\n   * addSegmentTargets - Add targets to a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  addSegmentTargets(id, targets) {\n    this.validateServerSideAuth();\n    const body = {\n      target_ids: targets\n    };\n    return this.post(this.baseURL + `/segments/${encodeURIComponent(id)}/addtargets`, body);\n  }\n  querySegmentTargets(id, filter2 = {}, sort = [], options = {}) {\n    this.validateServerSideAuth();\n    return this.post(this.baseURL + `/segments/${encodeURIComponent(id)}/targets/query`, {\n      filter: filter2 || {},\n      sort: sort || [],\n      ...options\n    });\n  }\n  /**\n   * removeSegmentTargets - Remove targets from a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  removeSegmentTargets(id, targets) {\n    this.validateServerSideAuth();\n    const body = {\n      target_ids: targets\n    };\n    return this.post(this.baseURL + `/segments/${encodeURIComponent(id)}/deletetargets`, body);\n  }\n  /**\n   * querySegments - Query Segments\n   *\n   * @param {filter} filter MongoDB style filter conditions\n   * @param {QuerySegmentsOptions} options Options for sorting/paginating the results\n   *\n   * @return {Segment[]} Segments\n   */\n  querySegments(filter2, sort, options = {}) {\n    this.validateServerSideAuth();\n    return this.post(this.baseURL + `/segments/query`, {\n      filter: filter2,\n      sort,\n      ...options\n    });\n  }\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  deleteSegment(id) {\n    this.validateServerSideAuth();\n    return this.delete(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n  /**\n   * segmentTargetExists - Check if a target exists in a segment\n   *\n   * @param {string} segmentId Segment ID\n   * @param {string} targetId Target ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  segmentTargetExists(segmentId, targetId) {\n    this.validateServerSideAuth();\n    return this.get(this.baseURL + `/segments/${encodeURIComponent(segmentId)}/target/${encodeURIComponent(targetId)}`);\n  }\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  createCampaign(params) {\n    this.validateServerSideAuth();\n    return this.post(this.baseURL + `/campaigns`, {\n      ...params\n    });\n  }\n  getCampaign(id, options) {\n    this.validateServerSideAuth();\n    return this.get(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, {\n      ...options?.users\n    });\n  }\n  startCampaign(id, options) {\n    this.validateServerSideAuth();\n    return this.post(this.baseURL + `/campaigns/${encodeURIComponent(id)}/start`, {\n      scheduled_for: options?.scheduledFor,\n      stop_at: options?.stopAt\n    });\n  }\n  /**\n   * queryCampaigns - Query Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async queryCampaigns(filter2, sort, options) {\n    this.validateServerSideAuth();\n    return await this.post(this.baseURL + `/campaigns/query`, {\n      filter: filter2,\n      sort,\n      ...(options || {})\n    });\n  }\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  updateCampaign(id, params) {\n    this.validateServerSideAuth();\n    return this.put(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, params);\n  }\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  deleteCampaign(id) {\n    this.validateServerSideAuth();\n    return this.delete(this.baseURL + `/campaigns/${encodeURIComponent(id)}`);\n  }\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  stopCampaign(id) {\n    this.validateServerSideAuth();\n    return this.post(this.baseURL + `/campaigns/${encodeURIComponent(id)}/stop`);\n  }\n  /**\n   * enrichURL - Get OpenGraph data of the given link\n   *\n   * @param {string} url link\n   * @return {OGAttachment} OG Attachment\n   */\n  enrichURL(url) {\n    return this.get(this.baseURL + `/og`, {\n      url\n    });\n  }\n  /**\n   * getTask - Gets status of a long running task\n   *\n   * @param {string} id Task ID\n   *\n   * @return {TaskStatus} The task status\n   */\n  getTask(id) {\n    return this.get(`${this.baseURL}/tasks/${encodeURIComponent(id)}`);\n  }\n  /**\n   * deleteChannels - Deletes a list of channel\n   *\n   * @param {string[]} cids Channel CIDs\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n   */\n  async deleteChannels(cids, options = {}) {\n    return await this.post(this.baseURL + `/channels/delete`, {\n      cids,\n      ...options\n    });\n  }\n  /**\n   * deleteUsers - Batch Delete Users\n   *\n   * @param {string[]} user_ids which users to delete\n   * @param {DeleteUserOptions} options Configuration how to delete users\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deleteUsers(user_ids, options = {}) {\n    if (typeof options.user !== \"undefined\" && ![\"soft\", \"hard\", \"pruning\"].includes(options.user)) {\n      throw new Error(\"Invalid delete user options. user must be one of [soft hard pruning]\");\n    }\n    if (typeof options.conversations !== \"undefined\" && ![\"soft\", \"hard\"].includes(options.conversations)) {\n      throw new Error(\"Invalid delete user options. conversations must be one of [soft hard]\");\n    }\n    if (typeof options.messages !== \"undefined\" && ![\"soft\", \"hard\", \"pruning\"].includes(options.messages)) {\n      throw new Error(\"Invalid delete user options. messages must be one of [soft hard pruning]\");\n    }\n    return await this.post(this.baseURL + `/users/delete`, {\n      user_ids,\n      ...options\n    });\n  }\n  /**\n   * _createImportURL - Create an Import upload url.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} filename filename of uploaded data\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImportURL(filename) {\n    return await this.post(this.baseURL + `/import_urls`, {\n      filename\n    });\n  }\n  /**\n   * _createImport - Create an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} path path of uploaded data\n   * @param {CreateImportOptions} options import options\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImport(path, options = {\n    mode: \"upsert\"\n  }) {\n    return await this.post(this.baseURL + `/imports`, {\n      path,\n      ...options\n    });\n  }\n  /**\n   * _getImport - Get an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} id id of Import Task\n   *\n   * @return {APIResponse & GetImportResponse} An ImportTask\n   */\n  async _getImport(id) {\n    return await this.get(this.baseURL + `/imports/${encodeURIComponent(id)}`);\n  }\n  /**\n   * _listImports - Lists Import Tasks.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {ListImportsPaginationOptions} options pagination options\n   *\n   * @return {APIResponse & ListImportsResponse} An ImportTask\n   */\n  async _listImports(options) {\n    return await this.get(this.baseURL + `/imports`, options);\n  }\n  /**\n   * upsertPushProvider - Create or Update a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderConfig} configuration of the provider you want to create or update\n   *\n   * @return {APIResponse & PushProviderUpsertResponse} A push provider\n   */\n  async upsertPushProvider(pushProvider) {\n    return await this.post(this.baseURL + `/push_providers`, {\n      push_provider: pushProvider\n    });\n  }\n  /**\n   * deletePushProvider - Delete a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderID} type and foreign id of the push provider to be deleted\n   *\n   * @return {APIResponse} An API response\n   */\n  async deletePushProvider({\n    type,\n    name\n  }) {\n    return await this.delete(this.baseURL + `/push_providers/${encodeURIComponent(type)}/${encodeURIComponent(name)}`);\n  }\n  /**\n   * listPushProviders - Get all push providers in the app\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @return {APIResponse & PushProviderListResponse} A push provider\n   */\n  async listPushProviders() {\n    return await this.get(this.baseURL + `/push_providers`);\n  }\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest() {\n    return this.nextRequestAbortController = new AbortController();\n  }\n  /**\n   * commits a pending message, making it visible in the channel and for other users\n   * @param id the message id\n   *\n   * @return {APIResponse & MessageResponse} The message\n   */\n  async commitMessage(id) {\n    return await this.post(this.baseURL + `/messages/${encodeURIComponent(id)}/commit`);\n  }\n  /**\n   * Creates a poll\n   * @param poll PollData The poll that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CreatePollAPIResponse} The poll\n   */\n  async createPoll(poll, userId) {\n    return await this.post(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Retrieves a poll\n   * @param id string The poll id\n   *  @param userId string The user id (only serverside)\n   * @returns {APIResponse & GetPollAPIResponse} The poll\n   */\n  async getPoll(id, userId) {\n    return await this.get(this.baseURL + `/polls/${encodeURIComponent(id)}`, userId ? {\n      user_id: userId\n    } : {});\n  }\n  /**\n   * Updates a poll\n   * @param poll PollData The poll that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollResponse} The poll\n   */\n  async updatePoll(poll, userId) {\n    return await this.put(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Partially updates a poll\n   * @param id string The poll id\n   * @param {PartialPollUpdate} partialPollObject which should contain id and any of \"set\" or \"unset\" params;\n   * @param userId string The user id (only serverside)\n   * example: {id: \"44f26af5-f2be-4fa7-9dac-71cf893781de\", set:{field: value}, unset:[\"field2\"]}\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async partialUpdatePoll(id, partialPollObject, userId) {\n    return await this.patch(this.baseURL + `/polls/${encodeURIComponent(id)}`, {\n      ...partialPollObject,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Delete a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async deletePoll(id, userId) {\n    return await this.delete(this.baseURL + `/polls/${encodeURIComponent(id)}`, {\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Close a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  closePoll(id, userId) {\n    return this.partialUpdatePoll(id, {\n      set: {\n        is_closed: true\n      }\n    }, userId);\n  }\n  /**\n   * Creates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async createPollOption(pollId, option, userId) {\n    return await this.post(this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`, {\n      ...option,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Retrieves a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async getPollOption(pollId, optionId, userId) {\n    return await this.get(this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`, userId ? {\n      user_id: userId\n    } : {});\n  }\n  /**\n   * Updates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async updatePollOption(pollId, option, userId) {\n    return await this.put(this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`, {\n      ...option,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Delete a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse} The poll option\n   */\n  async deletePollOption(pollId, optionId, userId) {\n    return await this.delete(this.baseURL + `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`, userId ? {\n      user_id: userId\n    } : {});\n  }\n  /**\n   * Cast vote on a poll\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param vote PollVoteData The vote that will be casted\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CastVoteAPIResponse} The poll vote\n   */\n  async castPollVote(messageId, pollId, vote, userId) {\n    return await this.post(this.baseURL + `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote`, {\n      vote,\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Add a poll answer\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param answerText string The answer text\n   * @param userId string The user id (only serverside)\n   */\n  addPollAnswer(messageId, pollId, answerText, userId) {\n    return this.castPollVote(messageId, pollId, {\n      answer_text: answerText\n    }, userId);\n  }\n  async removePollVote(messageId, pollId, voteId, userId) {\n    return await this.delete(this.baseURL + `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote/${encodeURIComponent(voteId)}`, {\n      ...(userId ? {\n        user_id: userId\n      } : {})\n    });\n  }\n  /**\n   * Queries polls\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & QueryPollsResponse} The polls\n   */\n  async queryPolls(filter2 = {}, sort = [], options = {}, userId) {\n    const q = userId ? `?user_id=${userId}` : \"\";\n    return await this.post(this.baseURL + `/polls/query${q}`, {\n      filter: filter2,\n      sort: normalizeQuerySort(sort),\n      ...options\n    });\n  }\n  /**\n   * Queries poll votes\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollVotesAPIResponse} The poll votes\n   */\n  async queryPollVotes(pollId, filter2 = {}, sort = [], options = {}, userId) {\n    const q = userId ? `?user_id=${userId}` : \"\";\n    return await this.post(this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`, {\n      filter: filter2,\n      sort: normalizeQuerySort(sort),\n      ...options\n    });\n  }\n  /**\n   * Queries poll answers\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollAnswersAPIResponse} The poll votes\n   */\n  async queryPollAnswers(pollId, filter2 = {}, sort = [], options = {}, userId) {\n    const q = userId ? `?user_id=${userId}` : \"\";\n    return await this.post(this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`, {\n      filter: {\n        ...filter2,\n        is_answer: true\n      },\n      sort: normalizeQuerySort(sort),\n      ...options\n    });\n  }\n  /**\n   * Query message history\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10}\n   * @returns {APIResponse & QueryMessageHistoryResponse} The message histories\n   */\n  async queryMessageHistory(filter2 = {}, sort = [], options = {}) {\n    return await this.post(this.baseURL + \"/messages/history\", {\n      filter: filter2,\n      sort: normalizeQuerySort(sort),\n      ...options\n    });\n  }\n  /**\n   * updateFlags - reviews/unflags flagged message\n   *\n   * @param {string[]} message_ids list of message IDs\n   * @param {string} options Option object in case user ID is set to review all the flagged messages by the user\n   * @param {string} reviewed_by user ID who reviewed the flagged message\n   * @returns {APIResponse}\n   */\n  async updateFlags(message_ids, reviewed_by, options = {}) {\n    return await this.post(this.baseURL + \"/automod/v1/moderation/update_flags\", {\n      message_ids,\n      reviewed_by,\n      ...options\n    });\n  }\n  /**\n   * queryDrafts - Queries drafts for the current user\n   *\n   * @param {object} [options] Query options\n   * @param {object} [options.filter] Filters for the query\n   * @param {number} [options.sort] Sort parameters\n   * @param {number} [options.limit] Limit the number of results\n   * @param {string} [options.next] Pagination parameter\n   * @param {string} [options.prev] Pagination parameter\n   * @param {string} [options.user_id] Has to be provided when called server-side\n   *\n   * @return {Promise<APIResponse & { drafts: DraftResponse[]; next?: string }>} Response containing the drafts\n   */\n  async queryDrafts(options = {}) {\n    const payload = {\n      ...options,\n      sort: options.sort ? normalizeQuerySort(options.sort) : void 0\n    };\n    return await this.post(this.baseURL + \"/drafts/query\", payload);\n  }\n  /**\n   * createReminder - Creates a reminder for a message\n   *\n   * @param {CreateReminderOptions} options The options for creating the reminder\n   * @returns {Promise<ReminderAPIResponse>}\n   */\n  async createReminder({\n    messageId,\n    ...options\n  }) {\n    return await this.post(`${this.baseURL}/messages/${messageId}/reminders`, options);\n  }\n  /**\n   * updateReminder - Updates an existing reminder for a message\n   *\n   * @param {UpdateReminderOptions} options The options for updating the reminder\n   * @returns {Promise<ReminderAPIResponse>}\n   */\n  async updateReminder({\n    messageId,\n    ...options\n  }) {\n    return await this.patch(`${this.baseURL}/messages/${messageId}/reminders`, options);\n  }\n  /**\n   * deleteReminder - Deletes a reminder for a message\n   *\n   * @param {string} messageId The ID of the message whose reminder to delete\n   * @param {string} [userId] Optional user ID, required for server-side operations\n   * @returns {Promise<APIResponse>}\n   */\n  async deleteReminder(messageId, userId) {\n    return await this.delete(`${this.baseURL}/messages/${messageId}/reminders`, userId ? {\n      user_id: userId\n    } : {});\n  }\n  /**\n   * queryReminders - Queries reminders based on given filters\n   *\n   * @param {QueryRemindersOptions} options The options for querying reminders\n   * @returns {Promise<QueryRemindersResponse>}\n   */\n  async queryReminders({\n    filter: filter2,\n    sort,\n    ...rest\n  } = {}) {\n    return await this.post(`${this.baseURL}/reminders/query`, {\n      filter_conditions: filter2,\n      sort: sort && normalizeQuerySort(sort),\n      ...rest\n    });\n  }\n  /**\n   * uploadFile - Uploads a file to the configured storage (defaults to Stream CDN)\n   *\n   * @param {string|NodeJS.ReadableStream|Buffer|File} uri The file to upload\n   * @param {string} [name] The name of the file\n   * @param {string} [contentType] The content type of the file\n   * @param {UserResponse} [user] Optional user information\n   *\n   * @return {Promise<SendFileAPIResponse>} Response containing the file URL\n   */\n  uploadFile(uri, name, contentType, user) {\n    return this.sendFile(`${this.baseURL}/uploads/file`, uri, name, contentType, user);\n  }\n  /**\n   * uploadImage - Uploads an image to the configured storage (defaults to Stream CDN)\n   *\n   * @param {string|NodeJS.ReadableStream|File} uri The image to upload\n   * @param {string} [name] The name of the image\n   * @param {string} [contentType] The content type of the image\n   * @param {UserResponse} [user] Optional user information\n   *\n   * @return {Promise<SendFileAPIResponse>} Response containing the image URL\n   */\n  uploadImage(uri, name, contentType, user) {\n    return this.sendFile(`${this.baseURL}/uploads/image`, uri, name, contentType, user);\n  }\n  /**\n   * deleteFile - Deletes a file from the configured storage\n   *\n   * @param {string} url The URL of the file to delete\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  deleteFile(url) {\n    return this.delete(`${this.baseURL}/uploads/file`, {\n      url\n    });\n  }\n  /**\n   * deleteImage - Deletes an image from the configured storage\n   *\n   * @param {string} url The URL of the image to delete\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  deleteImage(url) {\n    return this.delete(`${this.baseURL}/uploads/image`, {\n      url\n    });\n  }\n};\n\n// src/events.ts\nvar EVENT_MAP = {\n  \"channel.created\": true,\n  \"channel.deleted\": true,\n  \"channel.hidden\": true,\n  \"channel.kicked\": true,\n  \"channel.muted\": true,\n  \"channel.truncated\": true,\n  \"channel.unmuted\": true,\n  \"channel.updated\": true,\n  \"channel.visible\": true,\n  \"draft.deleted\": true,\n  \"draft.updated\": true,\n  \"health.check\": true,\n  \"member.added\": true,\n  \"member.removed\": true,\n  \"member.updated\": true,\n  \"message.deleted\": true,\n  \"message.new\": true,\n  \"message.read\": true,\n  \"message.updated\": true,\n  \"message.undeleted\": true,\n  \"notification.added_to_channel\": true,\n  \"notification.channel_deleted\": true,\n  \"notification.channel_mutes_updated\": true,\n  \"notification.channel_truncated\": true,\n  \"notification.invite_accepted\": true,\n  \"notification.invite_rejected\": true,\n  \"notification.invited\": true,\n  \"notification.mark_read\": true,\n  \"notification.mark_unread\": true,\n  \"notification.message_new\": true,\n  \"notification.mutes_updated\": true,\n  \"notification.removed_from_channel\": true,\n  \"notification.thread_message_new\": true,\n  \"poll.closed\": true,\n  \"poll.updated\": true,\n  \"poll.vote_casted\": true,\n  \"poll.vote_changed\": true,\n  \"poll.vote_removed\": true,\n  \"reaction.deleted\": true,\n  \"reaction.new\": true,\n  \"reaction.updated\": true,\n  \"thread.updated\": true,\n  \"typing.start\": true,\n  \"typing.stop\": true,\n  \"user.banned\": true,\n  \"user.deleted\": true,\n  \"user.presence.changed\": true,\n  \"user.unbanned\": true,\n  \"user.unread_message_reminder\": true,\n  \"user.updated\": true,\n  \"user.watching.start\": true,\n  \"user.watching.stop\": true,\n  // AI events\n  \"ai_indicator.update\": true,\n  \"ai_indicator.stop\": true,\n  \"ai_indicator.clear\": true,\n  // local events\n  \"channels.queried\": true,\n  \"offline_reactions.queried\": true,\n  \"connection.changed\": true,\n  \"connection.recovered\": true,\n  \"transport.changed\": true,\n  \"capabilities.changed\": true,\n  // Reminder events\n  \"reminder.created\": true,\n  \"reminder.updated\": true,\n  \"reminder.deleted\": true,\n  \"notification.reminder_due\": true\n};\n\n// src/permissions.ts\nvar Allow = \"Allow\";\nvar Deny = \"Deny\";\nvar AnyResource = [\"*\"];\nvar AnyRole = [\"*\"];\nvar MaxPriority = 999;\nvar MinPriority = 1;\nvar Permission = class {\n  constructor(name, priority, resources = AnyResource, roles = AnyRole, owner = false, action = Allow) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n};\nvar AllowAll = new Permission(\"Allow all\", MaxPriority, AnyResource, AnyRole, false, Allow);\nvar DenyAll = new Permission(\"Deny all\", MinPriority, AnyResource, AnyRole, false, Deny);\nvar BuiltinRoles = {\n  Admin: \"admin\",\n  Anonymous: \"anonymous\",\n  ChannelMember: \"channel_member\",\n  ChannelModerator: \"channel_moderator\",\n  Guest: \"guest\",\n  User: \"user\"\n};\nvar BuiltinPermissions = {\n  AddLinks: \"Add Links\",\n  BanUser: \"Ban User\",\n  CreateChannel: \"Create Channel\",\n  CreateMessage: \"Create Message\",\n  CreateReaction: \"Create Reaction\",\n  DeleteAnyAttachment: \"Delete Any Attachment\",\n  DeleteAnyChannel: \"Delete Any Channel\",\n  DeleteAnyMessage: \"Delete Any Message\",\n  DeleteAnyReaction: \"Delete Any Reaction\",\n  DeleteOwnAttachment: \"Delete Own Attachment\",\n  DeleteOwnChannel: \"Delete Own Channel\",\n  DeleteOwnMessage: \"Delete Own Message\",\n  DeleteOwnReaction: \"Delete Own Reaction\",\n  ReadAnyChannel: \"Read Any Channel\",\n  ReadOwnChannel: \"Read Own Channel\",\n  RunMessageAction: \"Run Message Action\",\n  UpdateAnyChannel: \"Update Any Channel\",\n  UpdateAnyMessage: \"Update Any Message\",\n  UpdateMembersAnyChannel: \"Update Members Any Channel\",\n  UpdateMembersOwnChannel: \"Update Members Own Channel\",\n  UpdateOwnChannel: \"Update Own Channel\",\n  UpdateOwnMessage: \"Update Own Message\",\n  UploadAttachment: \"Upload Attachment\",\n  UseFrozenChannel: \"Send messages and reactions to frozen channels\"\n};\n\n// src/offline-support/types.ts\nvar OfflineError = class extends Error {\n  constructor(message, {\n    type\n  }) {\n    super(message);\n    this.name = \"OfflineError\";\n    this.type = type;\n  }\n  // Vitest helper (serialized errors are too large to read)\n  // https://github.com/vitest-dev/vitest/blob/v3.1.3/packages/utils/src/error.ts#L60-L62\n  toJSON() {\n    return {\n      message: `${this.type} - ${this.message}`,\n      stack: this.stack,\n      name: this.name\n    };\n  }\n};\n\n// src/offline-support/offline_sync_manager.ts\nvar OfflineDBSyncManager = class {\n  constructor({\n    client,\n    offlineDb\n  }) {\n    this.syncStatus = false;\n    this.connectionChangedListener = null;\n    this.syncStatusListeners = [];\n    this.scheduledSyncStatusCallbacks = /* @__PURE__ */new Map();\n    /**\n     * Initializes the sync manager. Should only be called once per session.\n     *\n     * Cleans up old listeners if re-initialized to avoid memory leaks.\n     * Starts syncing immediately if already connected, otherwise waits for reconnection.\n     */\n    this.init = async () => {\n      try {\n        if (this.client.user?.id && this.client.wsConnection?.isHealthy) {\n          await this.syncAndExecutePendingTasks();\n          await this.invokeSyncStatusListeners(true);\n        }\n        if (this.connectionChangedListener) {\n          this.connectionChangedListener.unsubscribe();\n        }\n        this.connectionChangedListener = this.client.on(\"connection.changed\", async event => {\n          if (event.online) {\n            await this.syncAndExecutePendingTasks();\n            await this.invokeSyncStatusListeners(true);\n          } else {\n            await this.invokeSyncStatusListeners(false);\n          }\n        });\n      } catch (error) {\n        console.log(\"Error in DBSyncManager.init: \", error);\n      }\n    };\n    /**\n     * Registers a listener that is called whenever the sync status changes.\n     *\n     * @param listener - A callback invoked with the new sync status (`true` or `false`).\n     * @returns An object with an `unsubscribe` function to remove the listener.\n     */\n    this.onSyncStatusChange = listener => {\n      this.syncStatusListeners.push(listener);\n      return {\n        unsubscribe: () => {\n          this.syncStatusListeners = this.syncStatusListeners.filter(el => el !== listener);\n        }\n      };\n    };\n    /**\n     * Schedules a one-time callback to be invoked after the next successful sync.\n     *\n     * @param tag - A unique key to identify and manage the callback.\n     * @param callback - An async function to run after sync.\n     */\n    this.scheduleSyncStatusChangeCallback = (tag, callback) => {\n      this.scheduledSyncStatusCallbacks.set(tag, callback);\n    };\n    /**\n     * Invokes all registered sync status listeners and executes any scheduled sync callbacks.\n     *\n     * @param status - The new sync status (`true` or `false`).\n     */\n    this.invokeSyncStatusListeners = async status => {\n      this.syncStatus = status;\n      this.syncStatusListeners.forEach(l => l(status));\n      if (status) {\n        const promises = Array.from(this.scheduledSyncStatusCallbacks.values()).map(cb => cb());\n        await Promise.all(promises);\n        this.scheduledSyncStatusCallbacks.clear();\n      }\n    };\n    /**\n     * Performs synchronization with the Stream backend.\n     *\n     * This includes downloading events since the last sync, updating the local DB,\n     * and handling sync failures (e.g., if syncing beyond the allowed retention window).\n     */\n    this.sync = async () => {\n      if (!this.client?.user) {\n        return;\n      }\n      try {\n        const cids = await this.offlineDb.getAllChannelCids();\n        if (cids.length === 0) {\n          return;\n        }\n        const lastSyncedAt = await this.offlineDb.getLastSyncedAt({\n          userId: this.client.user.id\n        });\n        if (lastSyncedAt) {\n          const lastSyncedAtDate = new Date(lastSyncedAt);\n          const nowDate = /* @__PURE__ */new Date();\n          const diff = Math.floor((nowDate.getTime() - lastSyncedAtDate.getTime()) / (1e3 * 60 * 60 * 24));\n          if (diff > 30) {\n            await this.offlineDb.resetDB();\n          } else {\n            const result = await this.client.sync(cids, lastSyncedAtDate.toISOString());\n            const queryPromises = result.events.map(event => this.offlineDb.handleEvent({\n              event,\n              execute: false\n            }));\n            const queriesArray = await Promise.all(queryPromises);\n            const queries = queriesArray.flat();\n            if (queries.length) {\n              await this.offlineDb.executeSqlBatch(queries);\n            }\n          }\n        }\n        await this.offlineDb.upsertUserSyncStatus({\n          userId: this.client.user.id,\n          lastSyncedAt: (/* @__PURE__ */new Date()).toString()\n        });\n      } catch (e) {\n        console.log(\"An error has occurred while syncing the DB.\", e);\n        await this.offlineDb.resetDB();\n      }\n    };\n    /**\n     * Executes any tasks that were queued while offline and then performs a sync.\n     */\n    this.syncAndExecutePendingTasks = async () => {\n      await this.offlineDb.executePendingTasks();\n      await this.sync();\n    };\n    this.client = client;\n    this.offlineDb = offlineDb;\n  }\n};\n\n// src/offline-support/offline_support_api.ts\nvar AbstractOfflineDB = class {\n  constructor({\n    client\n  }) {\n    /**\n     * Initializes the DB as well as its syncManager for a given userId.\n     * It will update the DBs reactive state with initialization values.\n     * @param userId - the user ID for which we want to initialize\n     */\n    this.init = async userId => {\n      try {\n        if (!this.shouldInitialize(userId)) {\n          const initialized = await this.initializeDB();\n          if (initialized) {\n            await this.syncManager.init();\n            this.state.partialNext({\n              initialized: true,\n              userId\n            });\n          } else {\n            this.state.partialNext({\n              initialized: false\n            });\n          }\n        }\n      } catch (error) {\n        this.state.partialNext({\n          initialized: false,\n          userId: void 0\n        });\n        console.log(\"Error Initializing DB:\", error);\n      }\n    };\n    /**\n     * A utility method used to execute a query in a detached manner. The callback\n     * passed uses a reference to the DB itself and will handle errors gracefully\n     * and silently. Only really meant to be used for write queries that need to\n     * be run in synchronous functions.\n     * @param queryCallback - a callback wrapping all query logic that is to be executed\n     * @param method - a utility parameter used for proper logging (will make sure the method\n     * is logged on failure)\n     */\n    this.executeQuerySafely = (queryCallback, {\n      method\n    }) => {\n      const {\n        initialized\n      } = this.state.getLatestValue();\n      if (!initialized) {\n        return;\n      }\n      runDetached(queryCallback(this), {\n        context: `OfflineDB(${method})`\n      });\n    };\n    /**\n     * A utility method used to guard a certain DB query with the possible non-existance\n     * of a channel inside of the DB. If the channel we want to guard against does not exist\n     * in the DB yet, it will try to:\n     *\n     * 1. Use the channel from the WS event\n     * 2. Use the channel from state\n     *\n     * and upsert the channels in the DB.\n     *\n     * If both fail, it will not execute the query as it would result in a foreign key constraint\n     * error.\n     *\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     * @param forceUpdate - whether to upsert the channel data anyway\n     * @param createQueries - a callback function to creation of the queries that we want to execute\n     */\n    this.queriesWithChannelGuard = async ({\n      event,\n      execute = true,\n      forceUpdate = false\n    }, createQueries) => {\n      const channelFromEvent = event.channel;\n      const cid = event.cid || channelFromEvent?.cid;\n      const type = event.type;\n      if (!cid) {\n        return await createQueries(execute);\n      }\n      const shouldUpsertChannelData = forceUpdate || !(await this.channelExists({\n        cid\n      }));\n      if (shouldUpsertChannelData) {\n        let channelData = channelFromEvent;\n        if (!channelData && event.channel_type && event.channel_id) {\n          const channelFromState = this.client.channel(event.channel_type, event.channel_id);\n          if (channelFromState.initialized && !channelFromState.disconnected) {\n            channelData = channelFromState.data;\n          }\n        }\n        if (channelData) {\n          const channelQuery = await this.upsertChannelData({\n            channel: channelData,\n            execute: false\n          });\n          if (channelQuery) {\n            const createdQueries = await createQueries(false);\n            const newQueries = [...channelQuery, ...createdQueries];\n            if (execute) {\n              await this.executeSqlBatch(newQueries);\n            }\n            return newQueries;\n          } else {\n            console.warn(`Couldn't create channel queries on ${type} event for an initialized channel that is not in DB, skipping event`, {\n              event\n            });\n            return [];\n          }\n        } else {\n          console.warn(`Received ${type} event for a non initialized channel that is not in DB, skipping event`, {\n            event\n          });\n          return [];\n        }\n      }\n      return await createQueries(execute);\n    };\n    /**\n     * Handles a message.new event. Will always use a channel guard for the inner queries\n     * and it is going to make sure that both messages and reads are upserted. It will not\n     * try to fetch the reads from the DB first and it will rely on channel.state to handle\n     * the number of unreads.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleNewMessage = async ({\n      event,\n      execute = true\n    }) => {\n      const client = this.client;\n      const {\n        cid,\n        message,\n        user\n      } = event;\n      if (!message || message.parent_id && !message.show_in_channel) {\n        return [];\n      }\n      const finalQueries = await this.queriesWithChannelGuard({\n        event,\n        execute\n      }, async () => {\n        let queries = await this.upsertMessages({\n          execute: false,\n          messages: [message]\n        });\n        if (cid && client.user && client.user.id !== user?.id) {\n          const userId = client.user.id;\n          const channel = client.activeChannels[cid];\n          if (channel) {\n            const ownReads = channel.state.read[userId];\n            const unreadCount = channel.countUnread();\n            const upsertReadsQueries = await this.upsertReads({\n              cid,\n              execute: false,\n              reads: [{\n                last_read: ownReads.last_read.toISOString(),\n                last_read_message_id: ownReads.last_read_message_id,\n                unread_messages: unreadCount,\n                user: client.user\n              }]\n            });\n            queries = [...queries, ...upsertReadsQueries];\n          }\n        }\n        return queries;\n      });\n      if (execute) {\n        await this.executeSqlBatch(finalQueries);\n      }\n      return finalQueries;\n    };\n    /**\n     * A handler for message deletion. It provides a channel guard and determines whether\n     * it should hard delete or soft delete the message.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleDeleteMessage = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        message,\n        hard_delete = false\n      } = event;\n      if (message) {\n        const deleteMethod = hard_delete ? this.hardDeleteMessage : this.softDeleteMessage;\n        return await this.queriesWithChannelGuard({\n          event,\n          execute\n        }, async executeOverride => await deleteMethod({\n          id: message.id,\n          execute: executeOverride\n        }));\n      }\n      return [];\n    };\n    /**\n     * A utility method used for removing a message that has already failed from the\n     * state as well as the DB. We want to drop all pending tasks and finally hard\n     * delete the message from the DB.\n     * @param messageId - the message id of the message we want to remove\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleRemoveMessage = async ({\n      messageId,\n      execute = true\n    }) => {\n      const dropPendingTasksQueries = await this.dropPendingTasks({\n        messageId,\n        execute: false\n      });\n      const hardDeleteMessageQueries = await this.hardDeleteMessage({\n        id: messageId,\n        execute: false\n      });\n      const queries = [...dropPendingTasksQueries, ...hardDeleteMessageQueries];\n      if (execute) {\n        await this.executeSqlBatch(queries);\n      }\n      return queries;\n    };\n    /**\n     * A utility method to handle read events. It will calculate the state of the reads if\n     * present in the event, or optionally rely on the hard override in unreadMessages.\n     * The unreadMessages argument is useful for cases where we know the exact number of unreads\n     * (for example reading an entire channel), but `unread_messages` might not necessarily exist\n     * in the event (or it exists with a stale value if we know what we want to ultimately update to).\n     * @param event - the WS event we are trying to process\n     * @param unreadMessages - an override of unread_messages that will be preferred when upserting reads\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleRead = async ({\n      event,\n      unreadMessages,\n      execute = true\n    }) => {\n      const {\n        received_at: last_read,\n        last_read_message_id,\n        unread_messages = 0,\n        user,\n        cid\n      } = event;\n      const overriddenUnreadMessages = unreadMessages ?? unread_messages;\n      if (user?.id && cid) {\n        return await this.queriesWithChannelGuard({\n          event,\n          execute\n        }, executeOverride => this.upsertReads({\n          cid,\n          execute: executeOverride,\n          reads: [{\n            last_read,\n            last_read_message_id,\n            unread_messages: overriddenUnreadMessages,\n            user\n          }]\n        }));\n      }\n      return [];\n    };\n    /**\n     * A utility method used to handle member events. It guards the processing\n     * of each event with a channel guard and also forces an update of member_count\n     * for the respective channel if applicable.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleMemberEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        member,\n        cid,\n        type\n      } = event;\n      if (member && cid) {\n        return await this.queriesWithChannelGuard({\n          event,\n          execute,\n          forceUpdate: true\n        }, async executeOverride => {\n          if (type === \"member.removed\") {\n            return await this.deleteMember({\n              member,\n              cid,\n              execute: executeOverride\n            });\n          }\n          return await this.upsertMembers({\n            cid,\n            members: [member],\n            execute: executeOverride\n          });\n        });\n      }\n      return [];\n    };\n    /**\n     * A utility method used to handle message.updated events. It guards each\n     * event handler within a channel guard.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleMessageUpdatedEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        message\n      } = event;\n      if (message && !message.parent_id) {\n        return await this.queriesWithChannelGuard({\n          event,\n          execute\n        }, async executeOverride => await this.updateMessage({\n          message,\n          execute: executeOverride\n        }));\n      }\n      return [];\n    };\n    /**\n     * An event handler for channel.visible and channel.hidden events. We need a separate\n     * handler because event.channel.hidden does not arrive with the baseline event, so a\n     * simple upsertion is not enough.\n     * It will update the hidden property of a channel to true if handling the `channel.hidden`\n     * event and to false if handling `channel.visible`.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleChannelVisibilityEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        type,\n        channel\n      } = event;\n      if (channel && type) {\n        const hidden = type === \"channel.hidden\";\n        return await this.upsertChannelData({\n          channel: {\n            ...channel,\n            hidden\n          },\n          execute\n        });\n      }\n      return [];\n    };\n    /**\n     * A utility handler used to handle channel.truncated events. It handles both\n     * removing all messages and relying on truncated_at as well. It will also upsert\n     * reads adequately (and calculate the correct unread messages when truncating).\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleChannelTruncatedEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        channel\n      } = event;\n      const ownUser = this.client.user;\n      if (channel && ownUser) {\n        const {\n          cid,\n          truncated_at\n        } = channel;\n        const truncateQueries = await this.deleteMessagesForChannel({\n          cid,\n          truncated_at,\n          execute: false\n        });\n        const userId = ownUser.id;\n        const activeChannel = this.client.activeChannels[cid];\n        const ownReads = activeChannel.state.read[userId];\n        let unreadCount = 0;\n        if (truncated_at) {\n          const truncatedAt = new Date(truncated_at);\n          unreadCount = activeChannel.countUnread(truncatedAt);\n        }\n        const upsertReadQueries = await this.upsertReads({\n          cid,\n          execute: false,\n          reads: [{\n            last_read: ownReads.last_read.toString(),\n            last_read_message_id: ownReads.last_read_message_id,\n            unread_messages: unreadCount,\n            user: ownUser\n          }]\n        });\n        const finalQueries = [...truncateQueries, ...upsertReadQueries];\n        if (execute) {\n          await this.executeSqlBatch(finalQueries);\n        }\n        return finalQueries;\n      }\n      return [];\n    };\n    /**\n     * A utility handler for all reaction events. It wraps the inner queries\n     * within a channel guard and maps them like so:\n     * - reaction.new -> insertReaction\n     * - reaction.updated -> updateReaction\n     * - reaction.deleted -> deleteReaction\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleReactionEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        type,\n        message,\n        reaction\n      } = event;\n      if (!(message && reaction)) {\n        return [];\n      }\n      const getReactionMethod = type2 => {\n        switch (type2) {\n          case \"reaction.new\":\n            return this.insertReaction;\n          case \"reaction.deleted\":\n            return this.deleteReaction;\n          case \"reaction.updated\":\n            return this.updateReaction;\n          default:\n            throw new Error(`You are trying to handle a non-reaction event (${type2}) through the reaction DB api.`);\n        }\n      };\n      const reactionMethod = getReactionMethod(type);\n      return await this.queriesWithChannelGuard({\n        event,\n        execute\n      }, executeOverride => reactionMethod({\n        message,\n        reaction,\n        execute: executeOverride\n      }));\n    };\n    /**\n     * A utility handler for all draft events:\n     * - draft.updated -> updateDraft\n     * - draft.deleted -> deleteDraft\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleDraftEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        cid,\n        draft,\n        type\n      } = event;\n      if (!draft) return [];\n      if (type === \"draft.updated\") {\n        return await this.upsertDraft({\n          draft,\n          execute\n        });\n      }\n      if (type === \"draft.deleted\") {\n        if (!cid) return [];\n        return await this.deleteDraft({\n          cid,\n          parent_id: draft.parent_id,\n          execute\n        });\n      }\n      return [];\n    };\n    /**\n     * A generic event handler that decides which DB API to invoke based on\n     * event.type for all events we are currently handling. It is used to both\n     * react on WS events as well as process the sync API events.\n     * @param event - the WS event we are trying to process\n     * @param execute - whether to immediately execute the operation.\n     */\n    this.handleEvent = async ({\n      event,\n      execute = true\n    }) => {\n      const {\n        type,\n        channel\n      } = event;\n      if (type.startsWith(\"reaction\")) {\n        return await this.handleReactionEvent({\n          event,\n          execute\n        });\n      }\n      if (type === \"message.new\") {\n        return await this.handleNewMessage({\n          event,\n          execute\n        });\n      }\n      if (type === \"message.deleted\") {\n        return await this.handleDeleteMessage({\n          event,\n          execute\n        });\n      }\n      if (type === \"message.updated\" || type === \"message.undeleted\") {\n        return this.handleMessageUpdatedEvent({\n          event,\n          execute\n        });\n      }\n      if (type === \"message.read\" || type === \"notification.mark_read\") {\n        return this.handleRead({\n          event,\n          unreadMessages: 0,\n          execute\n        });\n      }\n      if (type === \"notification.mark_unread\") {\n        return this.handleRead({\n          event,\n          execute\n        });\n      }\n      if (type.startsWith(\"member.\")) {\n        return await this.handleMemberEvent({\n          event,\n          execute\n        });\n      }\n      if (type === \"channel.hidden\" || type === \"channel.visible\") {\n        return await this.handleChannelVisibilityEvent({\n          event,\n          execute\n        });\n      }\n      if (type === \"draft.updated\" || type === \"draft.deleted\") {\n        return await this.handleDraftEvent({\n          event,\n          execute\n        });\n      }\n      if ((type === \"channel.updated\" || type === \"notification.message_new\" || type === \"notification.added_to_channel\") && channel) {\n        return await this.upsertChannelData({\n          channel,\n          execute\n        });\n      }\n      if ((type === \"channel.deleted\" || type === \"notification.channel_deleted\" || type === \"notification.removed_from_channel\") && channel) {\n        return await this.deleteChannel({\n          cid: channel.cid,\n          execute\n        });\n      }\n      if (type === \"channel.truncated\") {\n        return await this.handleChannelTruncatedEvent({\n          event,\n          execute\n        });\n      }\n      return [];\n    };\n    /**\n     * A method used to enqueue a pending task if the execution of it fails.\n     * It will try to do the following:\n     *\n     * 1. Execute the task immediately\n     * 2. If this fails, checks if the failure was due to something valid for a pending task\n     * 3. If it is, it will insert the task in the pending tasks table\n     *\n     * It will return the response from the execution if it succeeded.\n     * @param task - the pending task we want to execute\n     */\n    this.queueTask = async ({\n      task\n    }) => {\n      const attemptTaskExecution = async () => {\n        if (!this.client.wsConnection?.isHealthy) {\n          throw new OfflineError(\"Cannot execute task because the connection has been lost.\", {\n            type: \"connection:lost\"\n          });\n        }\n        return await this.executeTask({\n          task\n        });\n      };\n      try {\n        return await attemptTaskExecution();\n      } catch (e) {\n        if (!this.shouldSkipQueueingTask(e)) {\n          await this.addPendingTask(task);\n        }\n        throw e;\n      }\n    };\n    /**\n     * A utility method that determines if a failed task should be added to the\n     * queue based on its error.\n     * Error code 4 - bad request data\n     * Error code 17 - missing own_capabilities to execute the task\n     * @param error\n     */\n    this.shouldSkipQueueingTask = error => error?.response?.data?.code === 4 || error?.response?.data?.code === 17;\n    /**\n     * Executes a task from the list of supported pending tasks. Currently supported pending tasks\n     * are:\n     * - Deleting a message\n     * - Sending a reaction\n     * - Removing a reaction\n     * - Sending a message\n     * It will throw if we try to execute a pending task that is not supported.\n     * @param task - The task we want to execute\n     * @param isPendingTask - a control value telling us if it's an actual pending task being executed\n     * or delayed execution\n     */\n    this.executeTask = async ({\n      task\n    }, isPendingTask = false) => {\n      if (task.type === \"delete-message\") {\n        return await this.client._deleteMessage(...task.payload);\n      }\n      const {\n        channelType,\n        channelId\n      } = task;\n      if (channelType && channelId) {\n        const channel = this.client.channel(channelType, channelId);\n        if (task.type === \"send-reaction\") {\n          return await channel._sendReaction(...task.payload);\n        }\n        if (task.type === \"delete-reaction\") {\n          return await channel._deleteReaction(...task.payload);\n        }\n        if (task.type === \"create-draft\") {\n          return await channel._createDraft(...task.payload);\n        }\n        if (task.type === \"delete-draft\") {\n          return await channel._deleteDraft(...task.payload);\n        }\n        if (task.type === \"send-message\") {\n          const newMessageResponse = await channel._sendMessage(...task.payload);\n          const newMessage = newMessageResponse?.message;\n          if (isPendingTask && newMessage) {\n            if (newMessage?.parent_id) {\n              this.client.threads.threadsById[newMessage.parent_id]?.upsertReplyLocally({\n                message: newMessage,\n                timestampChanged: true\n              });\n            }\n            channel.state.addMessageSorted(newMessage, true);\n          }\n          return newMessageResponse;\n        }\n      }\n      throw new Error(`Tried to execute invalid pending task type (${task.type}) while synchronizing the database.`);\n    };\n    /**\n     * A utility method used to execute all pending tasks. As each task succeeds execution,\n     * it is going to be removed from the DB. If the execution failed due to a valid reason\n     * it is going to remove the pending task from the DB even if execution fails, otherwise\n     * it will keep it for the next time we try to execute all pending taks.\n     */\n    this.executePendingTasks = async () => {\n      const queue = await this.getPendingTasks();\n      for (const task of queue) {\n        if (!task.id) {\n          continue;\n        }\n        try {\n          await this.executeTask({\n            task\n          }, true);\n        } catch (e) {\n          const error = e;\n          if (!this.shouldSkipQueueingTask(error)) {\n            continue;\n          }\n        }\n        await this.deletePendingTask({\n          id: task.id\n        });\n      }\n    };\n    this.client = client;\n    this.syncManager = new OfflineDBSyncManager({\n      client,\n      offlineDb: this\n    });\n    this.state = new StateStore({\n      initialized: false,\n      userId: this.client.userID\n    });\n  }\n  /**\n   * Checks whether the DB should be initialized or if it has been initialized already.\n   * @param {string} userId - the user ID for which we want to check initialization\n   */\n  shouldInitialize(userId) {\n    const {\n      userId: userIdFromState,\n      initialized\n    } = this.state.getLatestValue();\n    return userId === userIdFromState && initialized;\n  }\n};\n\n// src/utils/FixedSizeQueueCache.ts\nvar FixedSizeQueueCache = class {\n  constructor(size, options) {\n    if (!size) throw new Error(\"Size must be greater than 0\");\n    this.keys = [];\n    this.size = size;\n    this.map = /* @__PURE__ */new Map();\n    this.dispose = options?.dispose ?? null;\n  }\n  /**\n   * Adds a new or moves the existing reference to the front of the queue\n   * @param key\n   * @param value\n   */\n  add(key, value) {\n    const index = this.keys.indexOf(key);\n    if (index > -1) {\n      this.keys.splice(this.keys.indexOf(key), 1);\n    } else if (this.keys.length >= this.size) {\n      const itemKey = this.keys.shift();\n      if (itemKey) {\n        const item = this.peek(itemKey);\n        if (item) {\n          this.dispose?.(itemKey, item);\n        }\n        this.map.delete(itemKey);\n      }\n    }\n    this.keys.push(key);\n    this.map.set(key, value);\n  }\n  /**\n   * Retrieves the value by key.\n   * @param key\n   */\n  peek(key) {\n    const value = this.map.get(key);\n    return value;\n  }\n  /**\n   * Retrieves the value and moves it to the front of the queue.\n   * @param key\n   */\n  get(key) {\n    const foundItem = this.peek(key);\n    if (foundItem && this.keys.indexOf(key) !== this.size - 1) {\n      this.keys.splice(this.keys.indexOf(key), 1);\n      this.keys.push(key);\n    }\n    return foundItem;\n  }\n};\nexport { AbstractOfflineDB, Allow, AllowAll, AnyResource, AnyRole, AttachmentManager, BasePaginator, BaseSearchSource, BaseSearchSourceSync, BuiltinPermissions, BuiltinRoles, Campaign, Channel, ChannelManager, ChannelSearchSource, ChannelState, CheckSignature, ClientState, CommandSearchSource, CustomDataManager, DEFAULT_ATTACHMENT_MANAGER_CONFIG, DEFAULT_CHANNEL_MANAGER_OPTIONS, DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS, DEFAULT_COMPOSER_CONFIG, DEFAULT_LINK_PREVIEW_MANAGER_CONFIG, DEFAULT_PAGINATION_OPTIONS, DEFAULT_REMINDER_MANAGER_CONFIG, DEFAULT_STOP_REFRESH_BOUNDARY_MS, DEFAULT_TEXT_COMPOSER_CONFIG, Deny, DenyAll, DevToken, EVENT_MAP, ErrorFromResponse, FixedSizeQueueCache, InsightMetrics, JWTServerToken, JWTUserToken, LinkPreviewStatus, LinkPreviewsManager, MAX_POLL_OPTIONS, MODERATION_ENTITY_TYPES, MaxPriority, MentionsSearchSource, MergedStateStore, MessageComposer, MessageComposerMiddlewareExecutor, MessageDraftComposerMiddlewareExecutor, MessageSearchSource, MiddlewareExecutor, MinPriority, Moderation, NotificationManager, OfflineDBSyncManager, OfflineError, Permission, Poll, PollComposer, PollComposerCompositionMiddlewareExecutor, PollComposerStateMiddlewareExecutor, PollManager, Reminder, ReminderManager, ReminderPaginator, ReminderTimer, SearchController, Segment, StableWSConnection, StateStore, StreamChat, THREAD_MANAGER_INITIAL_STATE, TextComposer, TextComposerMiddlewareExecutor, Thread, ThreadManager, TokenManager, UserFromToken, UserSearchSource, VALID_MAX_VOTES_VALUE_REGEX, VotingVisibility, accentsMap, buildWsFatalInsight, buildWsSuccessAfterFailureInsight, calculateLevenshtein, channelManagerEventToHandlerMapping, chatCodes, createActiveCommandGuardMiddleware, createAttachmentsCompositionMiddleware, createCommandInjectionMiddleware, createCommandStringExtractionMiddleware, createCommandsMiddleware, createCompositionDataCleanupMiddleware, createCompositionValidationMiddleware, createCustomDataCompositionMiddleware, createDraftAttachmentsCompositionMiddleware, createDraftCommandInjectionMiddleware, createDraftCompositionValidationMiddleware, createDraftCustomDataCompositionMiddleware, createDraftLinkPreviewsCompositionMiddleware, createDraftMessageComposerStateCompositionMiddleware, createDraftTextComposerCompositionMiddleware, createFileFromBlobs, createLinkPreviewsCompositionMiddleware, createMentionsMiddleware, createMessageComposerStateCompositionMiddleware, createPollComposerStateMiddleware, createTextComposerCompositionMiddleware, createTextComposerPreValidationMiddleware, decodeBase64, defaultPollFieldBlurEventValidators, defaultPollFieldChangeEventValidators, encodeBase64, ensureIsLocalAttachment, escapeRegExp, extractPollData, extractPollEnrichedData, formatMessage, generateFileName, getAttachmentTypeFromMimeType, getCompleteCommandInString, getExtensionFromMimeType, getTokenizedSuggestionDisplayName, getTriggerCharWithToken, insertItemWithTrigger, isAudioAttachment, isBlobButNotFile, isFile2 as isFile, isFileAttachment, isFileList2 as isFileList, isFileReference, isImageAttachment, isImageFile, isLocalAttachment, isLocalAudioAttachment, isLocalFileAttachment, isLocalImageAttachment, isLocalUploadAttachment, isLocalVideoAttachment, isLocalVoiceRecordingAttachment, isOwnUser, isPatch, isScrapedContent, isTargetedOptionTextUpdate, isUploadedAttachment, isVideoAttachment, isVoiceRecordingAttachment, isVoteAnswer, localMessageToNewMessagePayload, logChatPromiseExecution, mapPollStateToResponse, pollCompositionStateProcessors, pollStateChangeValidators, postInsights, promoteChannel, readFileAsArrayBuffer, removeDiacritics, replaceWordWithEntity, textIsEmpty, timeLeftMs };","map":{"version":3,"names":["require_base64_js","__commonJS","node_modules/base64-js/index.js","exports","byteLength","toByteArray","fromByteArray","fromByteArray2","lookup","revLookup","Arr","Uint8Array","Array","code","i","len","length","charCodeAt","getLens","b64","len2","Error","validLen","indexOf","placeHoldersLen","lens","_byteLength","tmp","arr","curByte","i2","tripletToBase64","num","encodeChunk","uint8","start","end","output","push","join","extraBytes","parts","maxChunkLength","len22","require_browser","node_modules/form-data/lib/browser.js","module","self","FormData","window","import_base64_js","__toESM","isString","arrayOrString","isMapStringCallback","callback","map","res","k","charAt","kValue","mappedValue","encodeBase64","data","char","decodeBase64","s","e","w","String","fromCharCode","L","b","c","x","l","a","r","A","Campaign","constructor","client","id","create","body","message_template","segment_ids","sender_id","sender_mode","channel_template","create_channels","show_channels","description","name","skip_push","skip_webhook","user_ids","result","createCampaign","campaign","verifyCampaignId","options","startCampaign","update","updateCampaign","delete","deleteCampaign","stop","stopCampaign","get","getCampaign","bind","fn","thisArg","wrap","apply","arguments","toString","Object","prototype","getPrototypeOf","kindOf","cache","thing","str","call","slice","toLowerCase","kindOfTest","type","typeOfTest","isArray","isUndefined","isBuffer","val","isFunction","isArrayBuffer","isArrayBufferView","ArrayBuffer","isView","buffer","isString2","isNumber","isObject","isBoolean","isPlainObject","prototype3","Symbol","toStringTag","iterator","isDate","isFile","isBlob","isFileList","isStream","pipe","isFormData","kind","append","isURLSearchParams","trim","replace","forEach","obj","allOwnKeys","keys","getOwnPropertyNames","key","findKey","_key","_global","globalThis","global","isContextDefined","context","merge","caseless","assignValue","targetKey","extend","stripBOM","content","inherits","superConstructor","props","descriptors2","defineProperty","value","assign","toFlatObject","sourceObj","destObj","filter2","propFilter","prop","merged","endsWith","searchString","position","lastIndex","toArray","isTypedArray","TypedArray","forEachEntry","generator","next","done","pair","matchAll","regExp","matches","exec","isHTMLForm","toCamelCase","replacer","m","p1","p2","toUpperCase","hasOwnProperty","hasOwnProperty2","isRegExp","reduceDescriptors","reducer","getOwnPropertyDescriptors","reducedDescriptors","descriptor","ret","defineProperties","freezeMethods","enumerable","writable","set","toObjectSet","delimiter","define","split","noop","toFiniteNumber","defaultValue","Number","isFinite","ALPHA","DIGIT","ALPHABET","ALPHA_DIGIT","generateString","size","alphabet","Math","random","isSpecCompliantForm","toJSONObject","stack","visit","source","target","reducedValue","isAsyncFn","isThenable","then","catch","utils_default","hasOwnProp","AxiosError","message","config","request","response","captureStackTrace","toJSON","number","fileName","lineNumber","columnNumber","status","descriptors","from","error","customProps","axiosError","cause","AxiosError_default","null_default","isVisitable","removeBrackets","renderKey","path","dots","concat","each","token","isFlatArray","some","predicates","filter","test","toFormData","formData","TypeError","metaTokens","indexes","defined","option","visitor","defaultVisitor","_Blob","Blob","useBlob","convertValue","toISOString","Buffer","JSON","stringify","el","index","exposedHelpers","build","pop","toFormData_default","encode","charMap","encodeURIComponent","match","AxiosURLSearchParams","params","_pairs","prototype2","toString2","encoder","_encode","AxiosURLSearchParams_default","encode2","buildURL","url","serializeFn","serialize","serializedParams","hashmarkIndex","InterceptorManager","handlers","use","fulfilled","rejected","synchronous","runWhen","eject","clear","forEachHandler","h","InterceptorManager_default","transitional_default","silentJSONParsing","forcedJSONParsing","clarifyTimeoutError","URLSearchParams_default","URLSearchParams","FormData_default","Blob_default","isStandardBrowserEnv","product","navigator","document","isStandardBrowserWebWorkerEnv","WorkerGlobalScope","importScripts","browser_default","isBrowser","classes","protocols","toURLEncodedForm","helpers","isNode","parsePropPath","arrayToObject","formDataToJSON","buildPath","isNumericKey","isLast","entries","formDataToJSON_default","stringifySafely","rawValue","parser","parse","defaults","transitional","adapter","transformRequest","headers","contentType","getContentType","hasJSONContentType","isObjectPayload","isFormData2","setContentType","isFileList3","formSerializer","_FormData","env","transformResponse","transitional2","JSONRequested","responseType","strictJSONParsing","ERR_BAD_RESPONSE","timeout","xsrfCookieName","xsrfHeaderName","maxContentLength","maxBodyLength","validateStatus","common","method","defaults_default","ignoreDuplicateOf","parseHeaders_default","rawHeaders","parsed","line","substring","$internals","normalizeHeader","header","normalizeValue","parseTokens","tokens","tokensRE","isValidHeaderName","matchHeaderValue","isHeaderNameFilter","formatHeader","buildAccessors","accessorName","methodName","arg1","arg2","arg3","configurable","AxiosHeaders","valueOrRewrite","rewrite","self2","setHeader","_value","_header","_rewrite","lHeader","setHeaders","has","matcher","deleted","deleteHeader","normalize","format","normalized","targets","asStrings","first","computed","accessor","internals","accessors","defineAccessor","mapped","headerValue","AxiosHeaders_default","transformData","fns","transform","isCancel","__CANCEL__","CanceledError","ERR_CANCELED","CanceledError_default","settle","resolve","reject","validateStatus2","ERR_BAD_REQUEST","floor","cookies_default","standardBrowserEnv","write","expires","domain2","secure","cookie","Date","toGMTString","read","RegExp","decodeURIComponent","remove","now","nonStandardBrowserEnv","isAbsoluteURL","combineURLs","baseURL","relativeURL","buildFullPath","requestedURL","isURLSameOrigin_default","standardBrowserEnv2","msie","userAgent","urlParsingNode","createElement","originURL","resolveURL","href","setAttribute","protocol","host","search","hash","hostname","port","pathname","location","isURLSameOrigin","requestURL","nonStandardBrowserEnv2","parseProtocol","speedometer","samplesCount","min","bytes","timestamps","head","tail","firstSampleTS","chunkLength","startedAt","bytesCount","passed","round","speedometer_default","progressEventReducer","listener","isDownloadStream","bytesNotified","_speedometer","loaded","total","lengthComputable","progressBytes","rate","inRange","progress","estimated","event","isXHRAdapterSupported","XMLHttpRequest","xhr_default","Promise","dispatchXhrRequest","requestData","requestHeaders","onCanceled","cancelToken","unsubscribe","signal","removeEventListener","auth","username","password","unescape","btoa","fullPath","open","paramsSerializer","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","statusText","_resolve","_reject","err","onreadystatechange","handleLoad","readyState","responseURL","setTimeout","onabort","handleAbort","ECONNABORTED","onerror","handleError","ERR_NETWORK","ontimeout","handleTimeout","timeoutErrorMessage","ETIMEDOUT","xsrfValue","setRequestHeader","withCredentials","onDownloadProgress","addEventListener","onUploadProgress","upload","cancel","abort","subscribe","aborted","send","knownAdapters","http","xhr","renderReason","reason","isResolvedHandle","adapters_default","getAdapter","adapters","nameOrAdapter","rejectedReasons","reasons","state","throwIfCancellationRequested","throwIfRequested","dispatchRequest","onAdapterResolution","onAdapterRejection","headersToObject","mergeConfig","config1","config2","getMergedValue","mergeDeepProperties","valueFromConfig2","defaultToConfig2","mergeDirectKeys","mergeMap","timeoutMessage","decompress","beforeRedirect","transport","httpAgent","httpsAgent","socketPath","responseEncoding","computeConfigValue","merge2","configValue","VERSION","validators","validator","deprecatedWarnings","version","formatMessage2","opt","desc","opts","ERR_DEPRECATED","console","warn","assertOptions","schema","allowUnknown","ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","validator_default","validators2","Axios","instanceConfig","interceptors","configOrUrl","boolean","function","contextHeaders","requestInterceptorChain","synchronousRequestInterceptors","unshiftRequestInterceptors","interceptor","unshift","responseInterceptorChain","pushResponseInterceptors","promise","chain","newConfig","onFulfilled","onRejected","getUri","forEachMethodNoData","forEachMethodWithData","generateHTTPMethod","isForm","httpMethod","Axios_default","CancelToken","_CancelToken","executor","resolvePromise","promiseExecutor","_listeners","onfulfilled","splice","CancelToken_default","spread","isAxiosError","payload","HttpStatusCode","Continue","SwitchingProtocols","Processing","EarlyHints","Ok","Created","Accepted","NonAuthoritativeInformation","NoContent","ResetContent","PartialContent","MultiStatus","AlreadyReported","ImUsed","MultipleChoices","MovedPermanently","Found","SeeOther","NotModified","UseProxy","Unused","TemporaryRedirect","PermanentRedirect","BadRequest","Unauthorized","PaymentRequired","Forbidden","NotFound","MethodNotAllowed","NotAcceptable","ProxyAuthenticationRequired","RequestTimeout","Conflict","Gone","LengthRequired","PreconditionFailed","PayloadTooLarge","UriTooLong","UnsupportedMediaType","RangeNotSatisfiable","ExpectationFailed","ImATeapot","MisdirectedRequest","UnprocessableEntity","Locked","FailedDependency","TooEarly","UpgradeRequired","PreconditionRequired","TooManyRequests","RequestHeaderFieldsTooLarge","UnavailableForLegalReasons","InternalServerError","NotImplemented","BadGateway","ServiceUnavailable","GatewayTimeout","HttpVersionNotSupported","VariantAlsoNegotiates","InsufficientStorage","LoopDetected","NotExtended","NetworkAuthenticationRequired","HttpStatusCode_default","createInstance","defaultConfig","instance","axios","Cancel","all","promises","formToJSON","default","axios_default","Axios2","AxiosError2","CanceledError2","isCancel2","CancelToken2","VERSION2","all2","isAxiosError2","spread2","toFormData2","AxiosHeaders2","HttpStatusCode2","mergeConfig2","import_https","require_https","import_form_data","DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE","DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE","DEFAULT_MESSAGE_SET_PAGINATION","hasNext","hasPrev","DEFAULT_UPLOAD_SIZE_LIMIT_BYTES","API_MAX_FILES_ALLOWED_PER_MESSAGE","MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY","RESERVED_UPDATED_MESSAGE_FIELDS","created_at","deleted_at","pinned_at","updated_at","command","mentioned_users","quoted_message","latest_reactions","own_reactions","reaction_counts","reply_count","i18n","html","__html","user","LOCAL_MESSAGE_FIELDS","DEFAULT_QUERY_CHANNELS_RETRY_COUNT","DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES","logChatPromiseExecution","sleep","isFunction2","Function","chatCodes","TOKEN_EXPIRED","WS_CLOSED_SUCCESS","isReadableStream","readable","_read","isBuffer2","isFileWebAPI","uri","File","isOwnUser","total_unread_count","isBlobWebAPI","isOwnUserBaseProperty","property","ownUserBaseProperties","channel_mutes","devices","mutes","unread_channels","unread_count","unread_threads","invisible","privacy_settings","roles","push_preferences","addFileToFormData","reverse","normalizeQuerySort","sort","sortFields","sortArr","item","field","direction","retryInterval","numberOfFailures","max","randomId","generateUUIDv4","hex","padStart","getRandomBytes","subarray","getRandomValuesWithMathRandom","pow","getRandomValues","crypto","msCrypto","convertErrorToJson","jsonObj","getOwnPropertyDescriptor","_","isOnline","nav","onLine","addConnectionEventListeners","cb","removeConnectionEventListeners","axiosParamsSerializer","newParams","formatMessage","toLocalMessageBase","msg","reaction_groups","maybeGetReactionGroupsFallback","reaction_scores","unformatMessage","toMessageResponseBase","newDateString","localMessageToNewMessagePayload","localMessage","messageFields","toUpdatedMessagePayload","reservedKeys","fromEntries","pinned","findIndexInSortedArray","needle","sortedArray","selectKey","selectValueToCompare","sortDirection","left","right","middle","recalculateMiddle","comparableNeedle","comparableMiddle","needleKey","step","addToMessageList","messages","newMessage","timestampChanged","sortBy","addIfDoesNotExist","addMessageToList","newMessages","messageTime","getTime","messageIsNewest","at","insertionIndex","groups","counts","scores","fallback","count","sum_scores","debounce","leading","trailing","runningTimeout","argsForTrailingExecution","lastResult","debouncedFn","args","clearTimeout","timeoutHandler","flush","throttle","storedArgs","reduce","acc","uniqBy","array","iteratee","seen","Set","add","binarySearchByDateEqualOrNearestGreater","targetDate","mid","midCreatedAt","midDate","messagePaginationCreatedAtAround","parentSet","requestedPageSize","returnedPage","messagePaginationOptions","newPagination","pagination","created_at_around","updateHasPrev","updateHasNext","createdAtAroundDate","firstPageMsg","lastPageMsg","wholePageHasNewerMessages","wholePageHasOlderMessages","requestedPageSizeNotMet","noMoreMessages","firstPageMsgIsFirstInSet","lastPageMsgIsLastInSet","midPointByCount","midPointByCreationDate","messagePaginationIdAround","id_around","midPoint","targetMsg","halves","find","messagePaginationLinear","queriedNextMessages","created_at_after_or_equal","created_at_after","id_gt","id_gte","queriedPrevMessages","created_at_before_or_equal","created_at_before","id_lt","id_lte","offset","containsUnrecognizedOptionsOnly","hasMore","returnedPageIsEmpty","messageSetPagination","logger","WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL","getAndWatchChannel","channel","members","channelToWatch","originalCid","cid","generateChannelTempCid","queryPromise","watch","channelType","membersStr","isChannelPinned","member","membership","isChannelArchived","archived_at","shouldConsiderArchivedChannels","filters","archived","extractSortValue","atIndex","shouldConsiderPinnedChannels","findPinnedAtSortOrder","abs","findLastPinnedChannelIndex","channels","lastPinnedChannelIndex","promoteChannel","channelToMove","channelToMoveIndexWithinChannels","targetChannelIndex","findIndex","targetChannelExistsWithinList","targetChannelAlreadyAtTheTop","considerPinnedChannels","isTargetChannelPinned","newChannels","isDate2","isLocalMessage","runDetached","onSuccessCallback","onErrorCallback","defaultOnError","log","onError","ChannelState","messageSets","setIsUpToDate","isUpToDate","removeMessageFromArray","msgArray","removed","updateUserMessages","_updateUserMessages","user2","parentId","threads","pinnedMessages","deleteUserMessages","hardDelete","_deleteUserMessages","hardDelete2","parent_id","thread_participants","_channel","watcher_count","typing","initMessages","pending_messages","mutedUsers","watchers","unreadCount","last_message_at","isCurrent","latestMessages","isLatest","messagePagination","addMessageSorted","messageSetToAddToIfDoesNotExist","addMessagesSorted","initializing","messagesToAdd","targetMessageSetIndex","findTargetMessageSet","isFromShadowBannedUser","shadowed","isMessageFormatted","getClient","updateUserReference","parentID","show_in_channel","_addToMessageList","thread","messageSet","addPinnedMessages","addPinnedMessage","pinnedMessage","removePinnedMessage","addReaction","reaction","enforce_unique","messageWithReaction","messageFromState","findMessage","message_id","messageToUpdate","updateData","_updateMessage","updatedMessage","_addOwnReactionToMessage","userID","user_id","_addReactionToState","ownReaction","oldOwnReactionTypeData","score","newReactionGroups","oldReactionTypeData","last_reaction_at","first_reaction_at","userId","ownReactions","_removeOwnReactionFromMessage","removeReaction","messageWithRemovedReaction","_removeReactionFromState","reactionToRemove","newReactionGroup","_updateQuotedMessageReferences","parseMessage","updatedMessages","quoted_message_id","attachments","removeQuotedMessageReferences","updateFunc","msgIndex","messageSetIndex","findMessageSetIndex","upMsg","removeMessage","messageToRemove","isRemoved","threadMessages","filterErrorMessages","filteredMessages","clean","lastEvent","receivedAt","received_at","dispatchEvent","clearMessages","loadMessageIntoState","messageId","parentMessageId","limit","switchedToMessageSet","loadedMessageThread","messageIdToFind","switchToMessageSet","query","getReplies","currentMessages","areMessageSetsOverlap","messages1","messages2","m1","m2","overlappingMessageSetIndices","mergeTargetMessageSetIndex","mergeSourceMessageSetIndices","sources","overlappingMessageSetIndex","isScrapedContent","attachment","og_scrape_url","title_link","isLocalAttachment","localMetadata","isLocalUploadAttachment","uploadState","isFileAttachment","supportedVideoFormat","mime_type","isLocalFileAttachment","isImageAttachment","isLocalImageAttachment","isAudioAttachment","isLocalAudioAttachment","isVoiceRecordingAttachment","isLocalVoiceRecordingAttachment","isVideoAttachment","isLocalVideoAttachment","isUploadedAttachment","isFile2","fileLike","lastModified","isFileList2","FileList","isBlobButNotFile","isFileReference","createFileFromBlobs","blobsArray","mimeType","concatenatedBlob","getExtensionFromMimeType","readFileAsArrayBuffer","file","fileReader","FileReader","onload","readAsArrayBuffer","generateFileName","extension","isImageFile","startsWith","getAttachmentTypeFromMimeType","includes","ensureIsLocalAttachment","rest","isPatch","noop2","StateStore","preprocessors","partialNext","partial","current","subscribeWithSelector","selector","handler","previouslySelectedValues","wrappedHandler","nextValue","newlySelectedValues","hasUpdatedValues","previouslySelectedValuesCopy","stateStore","MergedStateStore","original","newValueOrPatch","newValue","preprocessor","oldValue","getLatestValue","addPreprocessor","_MergedStateStore","originalValue","mergedValue","cachedOriginalValue","cachedMergedValue","unsubscribeFunctions","base","currentValue","isClassInstance","proto","isEqual","value1","value2","compareStack","objectStack1","WeakSet","objectStack2","type1","type2","obj1","obj2","isArray1","isArray2","arr1","arr2","pairKey2","plainObj1","plainObj2","keys1","keys2","pairKey","generateDiff","modified","diffRoot","children","compareAndBuildDiff","cleanupDiffTree","parentDiffNode","objectStack","shouldTreatAtomically","originalObj","modifiedObj","currentDiffNode","allKeys","getOwnPropertySymbols","childKey","modifiedValue","createMergeCore","trackDiff","mergeCore","customizer","originalTarget","structuredClone","handleCustomizer","targetValue","srcValue","sourceKey","target2","src","customValue","createNewTarget","isTargetClassInstance","isSourceClassInstance","processSourceValue","pendingMerges","newTarget","parentTarget","processKeys","source2","sourceKeys","processPendingMerge","baseMerge","object","result2","diff","diffNode","cleanChildren","hasChildren","childNode","mergeWith","mergeWithDiff","initState","att","AttachmentManager","composer","setCustomUploadFn","doUploadRequest","updateConfig","getAttachmentIndex","localId","attachmentsById","prepareAttachmentUpdate","attachmentToUpdate","stateAttachments","attachmentIndex","updatesOnMerge","localAttachment","updateAttachment","updatedAttachments","upsertAttachments","attachmentsToUpsert","hasUpdates","removeAttachments","localAttachmentIds","getUploadConfigCheck","appSettings","appSettingsPromise","getAppSettings","uploadConfig","app","image_upload_config","file_upload_config","uploadBlocked","allowed_file_extensions","allowed_mime_types","blocked_file_extensions","blocked_mime_types","size_limit","sizeLimit","ext","fileToLocalUploadAttachment","uploadPermissionCheck","file_size","previewUri","URL","createObjectURL","height","width","original_height","original_width","thumb_url","ensureLocalUploadAttachment","notifications","addError","origin","emitter","fileUploadFilter","newAttachment","doDefaultUploadRequest","duration","customUploadFn","uploadAttachment","isUploadEnabled","blockedAttachment","metadata","failedAttachment","originalError","uploadedAttachment","revokeObjectURL","image_url","asset_url","uploadFiles","files","iterableFiles","availableUploadSlots","attachmentsByIdGetterCache","newAttachmentsById","_a","acceptedFiles","maxNumberOfFilesPerMessage","hasUploadPermission","own_capabilities","successfulUploads","getUploadsByState","successfulUploadsCount","uploadsInProgressCount","failedUploadsCount","blockedUploadsCount","pendingUploadsCount","values","encodedTlds","encodedUtlds","properties","numeric","ascii","alpha","asciinumeric","alphanumeric","domain","emoji","scheme","slashscheme","whitespace","registerGroup","addToGroups","t","flags","group","flagsForToken","State","j","jr","jd","accepts","go","input","nextState","regex","nextState2","exactOnly","ta","inputs","tt","tr","regexp","ts","templateState","allFlags","WORD","UWORD","ASCIINUMERICAL","ALPHANUMERICAL","LOCALHOST","TLD","UTLD","SCHEME","SLASH_SCHEME","NUM","WS","NL","OPENBRACE","CLOSEBRACE","OPENBRACKET","CLOSEBRACKET","OPENPAREN","CLOSEPAREN","OPENANGLEBRACKET","CLOSEANGLEBRACKET","FULLWIDTHLEFTPAREN","FULLWIDTHRIGHTPAREN","LEFTCORNERBRACKET","RIGHTCORNERBRACKET","LEFTWHITECORNERBRACKET","RIGHTWHITECORNERBRACKET","FULLWIDTHLESSTHAN","FULLWIDTHGREATERTHAN","AMPERSAND","APOSTROPHE","ASTERISK","AT","BACKSLASH","BACKTICK","CARET","COLON","COMMA","DOLLAR","DOT","EQUALS","EXCLAMATION","HYPHEN","PERCENT","PIPE","PLUS","POUND","QUERY","QUOTE","FULLWIDTHMIDDLEDOT","SEMI","SLASH","TILDE","UNDERSCORE","EMOJI$1","SYM","tk","freeze","__proto__","EMOJI","ASCII_LETTER","LETTER","DIGIT2","SPACE","CR","LF","EMOJI_VARIATION","EMOJI_JOINER","OBJECT_REPLACEMENT","tlds","utlds","init$2","customSchemes","Start","decodeTlds","Num","Asciinumeric","Alphanumeric","Word","UWord","Nl2","Cr","Ws","Emoji","EmojiJoiner","wordjr","uwordjr","fastts","tld","utld","sch","optionalSlashSlash","run$1","iterable","stringToArray","charCount","cursor","charCursor","tokenLength","latestAccepting","sinceAccepts","charsSinceAccepts","v","second","defaultt","encoded","words","digits","popDigitCount","popCount","parseInt","defaults2","defaultProtocol","events","noop3","formatHref","nl2br","tagName","rel","validate","truncate","Infinity","className","attributes","ignoreTags","render","Options","defaultRender","o","ignoredTags","uppercaseIgnoredTags","ir","check","operator","isCallable","getObj","renderFn","MultiToken","isLink","toHref","scheme2","toFormattedString","formatted","toFormattedHref","startIndex","endIndex","toObject","toFormattedObject","formattedHref","attrs","eventListeners","class","createTokenClass","Token","p","Email","Text","Nl","Url","hasProtocol","makeState","arg","init$1","qsAccepting","qsNonAccepting","localpartAccepting","Localpart","Domain","Scheme","SlashScheme","LocalpartAt","LocalpartDot","EmailDomain","EmailDomainDot","Email$1","EmailDomainHyphen","EmailColon","DomainHyphen","DomainDot","DomainDotTld","DomainDotTldColon","DomainDotTldColonPort","Url$1","UrlNonaccept","SchemeColon","SlashSchemeColon","SlashSchemeColonSlash","UriPrefix","bracketPairs","OPEN","CLOSE","UrlOpen","UrlOpenQ","UrlOpenSyms","run","multis","textTokens","secondState","multiLength","initMultiToken","Multi","subtokens","startIdx","endIdx","INIT","scanner","tokenQueue","pluginQueue","initialized","init","tokenize","scan","filtered","DEFAULT_LINK_PREVIEW_MANAGER_CONFIG","debounceURLEnrichmentMs","enabled","findURLFn","text","link","DEFAULT_ATTACHMENT_MANAGER_CONFIG","DEFAULT_TEXT_COMPOSER_CONFIG","publishTypingEvents","DEFAULT_COMPOSER_CONFIG","drafts","linkPreviews","initState2","custom","CustomDataManager","isMessageDataEqual","previousState","customMessageData","customComposerData","setMessageData","setCustomData","LinkPreviewStatus","LinkPreviewStatus2","linkPreviewArrayToMap","Map","linkPreview","initState3","previews","_LinkPreviewsManager","shouldDiscardEnrichQueries","_findAndEnrichUrls","urls","keptPreviews","previewUrl","newLinkPreviews","existingPreviews","existingPreviewLink","ogAttachment","enrichURL","updatePreview","cancelURLEnrichment","findAndEnrichUrls","clearPreviews","currentPreviews","newPreviews","preview","previewIsDismissed","existingPreview","finalPreview","isSame","dismissPreview","onLinkPreviewDismissed","loadingPreviews","previewIsLoading","loadedPreviews","previewIsLoaded","dismissedPreviews","failedPreviews","previewIsFailed","pendingPreviews","previewIsPending","getConfig","url_enrichment","getPreviewData","LinkPreviewsManager","withoutConcurrency","createRunner","wrapWithContinuationTracking","withCancellation","wrapWithCancellation","pendingPromises","wrapper","run2","tag","wrapped","onContinued","pending","hasContinuation","finally","ac","AbortController","MiddlewareExecutor","middleware","newMiddleware","upserted","existingIndex","existing","insert","unique","md","existingMiddlewareIndex","targetId","after","before","targetIndex","setOrder","order","Boolean","executeMiddlewareChain","eventName","initialValue","execute","returnFromChain","adjustedState","complete","discard","forward","abortSignal","initialState","VALID_MAX_VOTES_VALUE_REGEX","MAX_POLL_OPTIONS","textFieldIsEmpty","pollStateChangeValidators","enforce_unique_vote","max_votes_allowed","numericMatch","errors","seenOptions","defaultPollFieldChangeEventValidators","currentError","defaultPollFieldBlurEventValidators","defaultResult","isTheLastOption","isTargetedOptionTextUpdate","pollCompositionStateProcessors","prevOptions","shouldRemoveOption","optionListHead","optionListTail","newOptions","shouldAddNewOption","createPollComposerStateMiddleware","processors","customProcessors","customValidators","universalHandler","validators3","targetFields","newData","targetOption","processor","newErrors","handleFieldChange","injectedFieldErrors","handleFieldBlur","createPollCompositionValidationMiddleware","compose","pollComposer","canCreatePoll","PollComposerCompositionMiddlewareExecutor","PollComposerStateMiddlewareExecutor","ErrorFromResponse","extra","joinable","VotingVisibility","VotingVisibility2","PollComposer","updateFields","stateMiddlewareExecutor","compositionMiddlewareExecutor","allow_answers","allow_user_suggested_options","voting_visibility","hasAtLeastOneNonEmptyOption","hasName","maxVotesAllowedNumber","validMaxVotesAllowed","errorText","localAttachmentToAttachment","createAttachmentsCompositionMiddleware","attachmentManager","addWarning","createDraftAttachmentsCompositionMiddleware","draft","createCompositionDataCleanupMiddleware","editedMessage","editedMessagePayloadToBeSent","sendOptions","skip_enrich_url","createCustomDataCompositionMiddleware","customDataManager","createDraftCustomDataCompositionMiddleware","createCompositionValidationMiddleware","maxLengthOnSend","inputText","isEmptyMessage","textIsEmpty","poll_id","hasExceededMaxLength","editedMessageIsUnchanged","lastChangeOriginIsLocal","createDraftCompositionValidationMiddleware","hasData","shouldCreateDraft","createLinkPreviewsCompositionMiddleware","linkPreviewsManager","someLinkPreviewsLoading","someLinkPreviewsDismissed","createDraftLinkPreviewsCompositionMiddleware","createTextComposerCompositionMiddleware","textComposer","mentionedUsers","u","createDraftTextComposerCompositionMiddleware","createMessageComposerStateCompositionMiddleware","quotedMessage","pollId","showReplyInChannel","createDraftMessageComposerStateCompositionMiddleware","createUserDataInjectionMiddleware","messageUser","pollLocalMessageNullifiedFields","createPollOnlyCompositionMiddleware","isEditingMessage","isComposingThreadReply","threadId","MessageComposerMiddlewareExecutor","MessageDraftComposerMiddlewareExecutor","createCommandInjectionMiddleware","injection","enrichedText","createDraftCommandInjectionMiddleware","createActiveCommandGuardMiddleware","onChange","onSuggestionItemSelect","DEFAULT_SEARCH_SOURCE_OPTIONS","debounceMs","pageSize","BaseSearchSourceBase","activate","isActive","deactivate","canExecuteQuery","newSearchString","hasNewSearchQuery","searchQuery","isLoading","lastQueryError","hasResults","items","getStateBeforeFirstQuery","getStateAfterQuery","stateUpdate","isFirstPage","prepareStateForQuery","updatePaginationStateFromQuery","resetState","resetStateAndActivate","BaseSearchSource","setDebounceOptions","searchDebounced","executeQuery","results","filterQueryResults","cancelScheduledQuery","BaseSearchSourceSync","SearchController","addSource","getSource","sourceType","removeSource","newSources","activateSource","keepSingleActiveSource","deactivateSource","activeSources","sourcesToActivate","searchedSources","cancelSearchQueries","queriesInProgress","exit","_internalState","searchSourceTypes","UserSearchSource","$or","$autocomplete","searchOptions","users","queryUsers","ChannelSearchSource","$in","queryChannels","MessageSearchSource","channelFilters","messageSearchChannelFilters","messageFilters","messageSearchFilters","messageSearchSort","cids","activeChannels","allChannelsLoadedLocally","channelQueryFilters","channelQuerySort","channelQueryOptions","getTriggerCharWithToken","trigger","isCommand","acceptTrailingSpaces","triggerNorWhitespace","getCompleteCommandInString","commandName","insertItemWithTrigger","insertText","selection","beforeCursor","afterCursor","lastIndexOf","newText","replaceWordWithEntity","caretPosition","getEntityString","lastWordRegex","lastWord","spaces","newWord","textBeforeWord","textAfterCaret","escapeRegExp","getTokenizedSuggestionDisplayName","displayName","searchToken","tokenizedDisplayName","CommandSearchSource","newState","channelConfig","commands","selectedCommands","nameA","nameB","DEFAULT_OPTIONS","minChars","createCommandsMiddleware","finalOptions","searchSource","finalText","suggestions","triggerWithToken","newSearchTriggerred","triggerWasRemoved","hasStaleSuggestions","selectedSuggestion","change","stripCommandFromText","createCommandStringExtractionMiddleware","triggerWithCommand","accentsMap","n","removeDiacritics","calculateLevenshtein","matrix","MentionsSearchSource","mentionAllAppUsers","textComposerText","transliterate","restOptions","getMembersAndWatchers","memberUsers","watcherUsers","uniqueUsers","searchMembersLocally","updatedId","updatedName","updatedQuery","maxDistance","lastDigits","levenshtein2","levenshtein","memberSort","localeCompare","aValue","bValue","prepareQueryUsersParams","userFilters","userSort","prepareQueryMembersParams","maxSortParamsCount","memberFilters","queryMembers","filterMutes","suggestion","mute","every","allMembersLoadedWithInitialChannelQuery","countLoadedMembers","shouldSearchLocally","DEFAULT_OPTIONS2","userSuggestionToUserResponse","userResponse","createMentionsMiddleware","newSearchTriggered","createTextComposerPreValidationMiddleware","maxLengthOnEdit","TextComposerMiddlewareExecutor","trimmedText","initState4","text2","TextComposer","upsertMentionedUser","existingUserIndex","getMentionedUser","removeMentionedUser","setCommand","setText","setSelection","selectionChanged","finalSelection","currentText","textBeforeTrim","expectedCursorPosition","cursorPosition","handleChange","wrapSelection","currentSelection","prependedText","selectedText","appendedText","setSuggestions","closeSuggestions","middlewareExecutor","keystroke","handleSelect","setMentionedUsers","clearCommand","_WithSubscriptions","refCount","hasSubscriptions","addUnsubscribeFunction","unsubscribeFunction","incrementRefCount","unregisterSubscriptions","symbol","WithSubscriptions","DEFAULT_PAGE_LIMIT","DEFAULT_SORT","MARK_AS_READ_THROTTLE_TIMEOUT","THREAD_RESPONSE_RESERVED_KEYS","active_participant_count","channel_cid","created_by","created_by_user_id","latest_replies","parent_message","parent_message_id","participant_count","title","constructCustomDataObject","threadData","customKey","Thread","failedRepliesMap","active","reload","getThread","hydrateState","createdAt","deletedAt","parentMessage","participants","replyCount","replies","updatedAt","pendingReplies","isStateStale","registerSubscriptions","subscribeThreadUpdated","subscribeMarkActiveThreadRead","subscribeReloadActiveStaleThread","subscribeMarkThreadStale","subscribeNewReplies","subscribeRepliesRead","subscribeMessageDeleted","subscribeMessageUpdated","on","unreadMessageCount","ownUnreadCountSelector","throttledMarkAsRead","isOwnMessage","upsertReplyLocally","nextRead","userRead","nextUserRead","lastReadAt","lastReadMessageId","last_read_message_id","hard_delete","deleteReplyLocally","updateParentMessageLocally","eventTypes","eventType","updateParentMessageOrReplyLocally","reply","updatedReplies","formattedMessage","markAsRead","force","ownUnreadCount","markRead","thread_id","queryReplies","otherOptions","loadNextPage","loadPage","loadPrevPage","loadingKey","cursorKey","insertionMethodKey","queryOptions","maybeNextCursor","nextReplies","_hydrateMembers","overrideCurrentState","placeholderReadResponse","unread_messages","last_read","repliesPaginationFromInitialThread","formatReadState","messageComposer","MessageComposer","composition","compositionContext","hasStaleState","latestRepliesContainsAllReplies","nextCursor","prevCursor","isLoadingNext","isLoadingPrev","currentUserId","compositionIsDraftResponse","initEditingAuditState","draftUpdate","lastChange","initState5","draftId","generateId","_MessageComposer","editingAuditState","initStateFromChannelResponse","channelApiResponse","offlineDb","executeQuerySafely","db","deleteDraft","registerDraftEventSubscriptions","unsubscribeDraftUpdated","subscribeDraftUpdated","unsubscribeDraftDeleted","subscribeDraftDeleted","subscribeMessageComposerSetupStateChange","subscribeTextComposerStateChanged","subscribeAttachmentManagerStateChanged","subscribeLinkPreviewsManagerStateChanged","subscribePollComposerStateChanged","subscribeCustomDataManagerStateChanged","subscribeMessageComposerStateChanged","subscribeMessageComposerConfigStateChanged","setQuotedMessage","tearDown","_messageComposerSetupState","setupFunction","setup","logDraftUpdateTimestamp","compositionIsEmpty","previousSelection","logStateUpdateTimestamp","previousValue","draftUnsubscribeFunction","configState","textDefaultValue","draftsEnabled","toggleShowReplyInChannel","restore","composeDraft","draftCompositionMiddlewareExecutor","createDraft","optimisticDraftResponse","upsertDraft","tags","getDraft","draftFromOfflineDB","createPoll","poll","polls","Channel","evaluateContextType","legacyThreadId","constructTag","contextType","hasSendableData","initiatedWithoutDraft","composingMessageFromScratch","editedMessageWasUpdated","draftWasChanged","timestamp","defaultOptions","presence","_callChannelListeners","listeners","_channelURL","validTypeRe","validIDRe","_client","_data","offlineMode","lastTypingEvent","isTyping","disconnected","configs","_sendMessage","post","sendMessage","queueTask","task","channelId","sendFile","sendImage","deleteFile","deleteImage","sendEvent","_checkInitialized","filter_conditions","message_filter_conditions","wsPromise","filterConditions","updateMemberPartial","updates","searchParams","patch","partialUpdateMember","sendReaction","messageID","_sendReaction","deleteReaction","reactionType","_deleteReaction","channelData","updateMessage","reserved","_update","updatePartial","areCapabilitiesChanged","enableSlowMode","coolDownInterval","cooldown","disableSlowMode","acceptInvite","accept_invite","rejectInvite","reject_invite","addMembers","add_members","addModerators","add_moderators","assignRoles","assign_roles","inviteMembers","invites","removeMembers","remove_members","demoteModerators","demote_moderators","unmute","archive","cli","uid","resp","channel_member","unarchive","pin","unpin","muteStatus","_muteStatus","sendAction","form_data","_isTypingIndicatorsEnabled","lastKeyStroke","updateAIState","ai_state","clearAIIndicator","stopAIResponse","stopTyping","typing_events","wsConnection","isHealthy","typing_indicators","lastMessage","messageSlice","read_events","_isUsingServerAuth","markUnread","_hasConnectionID","combined","stopWatching","normalizedSort","getPinnedMessages","getReactions","getMessagesById","messageIds","ids","lastRead","_countMessageAsUnread","silent","userMuteStatus","muted","countUnread","countUnreadMentions","createdById","created_by_id","queryURL","tempChannelCid","_cacheEnabled","_addChannelConfig","_initializeState","hydratePollCache","reminders","queriedChannels","isLatestMessageSet","upsertChannels","isLatestMessagesSet","banUser","targetUserID","hide","clearHistory","clear_history","show","unbanUser","shadowBan","removeShadowBan","vote","castPollVote","removeVote","voteId","removePollVote","_createDraft","_deleteDraft","callbackOrString","callbackOrNothing","off","_handleChannelEvent","channelState","_extendEventWithOwnReactions","ownMessage","isThreadMessage","preventUnreadCountUpdate","truncated_at","truncatedAt","memberCopy","member_count","newMembers","first_unread_message_id","last_read_at","isFrozenChanged","frozen","newChannelData","hidden","handleChannelVisibilityEvent","shadow_banned","shadow","banned","clientState","pinned_messages","watcher","newMembersById","membersById","_disconnect","ClientState","userChannelReferences","updateUsers","updateUser","channelID","deleteAllChannelReference","ws","WebSocket","MozWebSocket","browser_default2","InsightMetrics","connectionStartTimestamp","wsTotalFailures","wsConsecutiveFailures","instanceClientId","postInsights","insightType","insights","maxAttempts","buildWsFatalInsight","connection","buildWsBaseInsight","ready_state","_buildUrl","api_key","start_ts","insightMetrics","end_ts","auth_type","getAuthType","tokenManager","user_details","_user","device","client_id","connectionID","ws_details","ws_consecutive_failures","ws_total_failures","request_id","requestID","online","user_agent","instance_client_id","buildWsSuccessAfterFailureInsight","isCloseEvent","isErrorEvent","StableWSConnection","qs","_buildWSPayload","getToken","wsUrlParams","getUserAgent","wsBaseURL","onlineStatusChanged","_log","_setHealth","_reconnect","interval","onopen","wsID","onmessage","isResolved","rejectPromise","_errorFromWSEvent","scheduleNextPing","handleEvent","scheduleConnectionCheck","onclose","wasClean","consecutiveFailures","totalFailures","isConnecting","healthy","isWSFailure2","statusCode","StatusCode","isWSFailure","_setupConnectionPromise","connectionOpen","healthCheckTimeoutRef","clientID","pingInterval","connectionCheckTimeoutRef","connectionCheckTimeout","isDisconnected","level","setClient","connect","healthCheck","_connect","isStatic","refreshToken","_waitForHealthy","race","disconnect","clearInterval","removeAllListeners","isClosedPromise","ws2","close","enableWSFallback","isTokenReady","tokenReady","loadToken","wsURL","connection_id","enableInsights","_destroyCurrentWSConnection","recoverState","import_jsonwebtoken","require_jsonwebtoken","import_crypto","require_crypto","JWTUserToken","apiSecret","extraData","jwtOptions","sign","algorithm","noTimestamp","iat","JWTServerToken","server","UserFromToken","fragments","b64Payload","DevToken","CheckSignature","secret","signature","createHmac","digest","timingSafeEqual","TokenManager","setTokenOrProvider","tokenOrProvider","validateToken","tokenProvider","reset","loadTokenPromise","anon","tokenUserId","APIErrorCodes","retryable","isAPIError","isErrorRetryable","isConnectionIDError","isErrorResponse","WSConnectionFallback","_onlineStatusChanged","_setState","_req","retry","doAxiosRequest","_poll","reconnect","json","Segment","all_sender_channels","all_users","createSegment","verifySegmentId","getSegment","updateSegment","addTargets","addSegmentTargets","removeTargets","removeSegmentTargets","deleteSegment","targetExists","segmentTargetExists","queryTargets","querySegmentTargets","MODERATION_ENTITY_TYPES","userprofile","Moderation","flagUser","flaggedUserID","flag","flagMessage","entityType","entityId","entityCreatorID","entity_type","entity_id","entity_creator_id","muteUser","targetID","target_ids","unmuteUser","getUserModerationReport","queryReviewQueue","upsertConfig","deleteConfig","queryConfigs","submitAction","actionType","itemID","action_type","item_id","entityID","moderationPayload","configKey","moderation_payload","config_key","checkUserProfile","profile","image","texts","images","force_sync","test_mode","addCustomFlags","addCustomMessageFlags","DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION","MAX_QUERY_THREADS_LIMIT","THREAD_MANAGER_INITIAL_STATE","isThreadOrderStale","unreadThreadCount","unseenThreadIds","lastConnectionDropAt","ready","ThreadManager","subscribeUnreadThreadsCountChange","subscribeManageThreadSubscriptions","subscribeReloadOnActivation","subscribeRecoverAfterConnectionDrop","subscribeChannelDeleted","unreadThreadCount2","me","newThreads","nextThreads","prev","prevThreads","removedThreads","threadsById","unsubscribeConnectionDropped","throttledHandleConnectionRecovered","unsubscribeConnectionRecovered","queryThreads","incomingThread","existingThread","participant_limit","reply_limit","threadsByIdGetterCache","newThreadsById","isPollUpdatedEvent","isPollClosedEventEvent","isPollVoteCastedEvent","isPollVoteChangedEvent","isPollVoteRemovedEvent","isVoteAnswer","answer_text","Poll","getInitialStateFromPollResponse","own_votes","pollResponseForState","ownAnswer","ownVotes","voteOrAnswer","lastActivityAt","maxVotedOptionIds","getMaxVotedOptionIds","vote_counts_by_option","ownVotesByOptionId","getOwnVotesByOptionId","upsertOfflineDb","upsertPoll","mapPollStateToResponse","reinitializeState","handlePollUpdated","pollData","extractPollData","handlePollClosed","is_closed","handleVoteCasted","currentState","isOwnVote","poll_vote","latestAnswers","latest_answers","option_id","pollEnrichData","extractPollEnrichedData","handleVoteChanged","answer","optionId","handleVoteRemoved","getPoll","updatePoll","partialUpdate","partialPollObject","partialUpdatePoll","closePoll","deletePoll","createOption","createPollOption","updateOption","updatePollOption","deleteOption","deletePollOption","castVote","reachedVoteLimit","oldestVote","addAnswer","answerText","addPollAnswer","removeAnswer","answerId","queryAnswers","queryPollAnswers","queryOptionVotes","queryPollVotes","voteCountsByOption","maxVotes","winningOptions","pollResponse","restState","answers_count","latest_votes_by_option","vote_count","PollManager","pollCache","fromState","subscribeMessageNew","subscribePollUpdated","subscribePollClosed","subscribeVoteCasted","subscribeVoteChanged","subscribeVoteRemoved","createdPoll","setOrOverwriteInCache","cachedPoll","poll2","queryPolls","pollInstances","overwriteState","pollFromCache","channelManagerEventToHandlerMapping","DEFAULT_CHANNEL_MANAGER_OPTIONS","abortInFlightQuery","allowNotLoadedChannelPromotionForEvent","lockChannelOrder","DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS","ChannelManager","eventHandlerOverrides","eventHandlers","stateOptions","setChannels","valueOrFactory","currentChannels","upsertCidsForQuery","setEventHandlerOverrides","truthyEventHandlerOverrides","setOptions","executeChannelsQuery","retryCount","newOffset","wrappedError","filtersFromState","executeChannelsQueryPayload","getChannelsForQuery","channelsFromDB","offlineChannels","hydrateActiveChannels","skipInitialization","syncManager","syncStatus","scheduleSyncStatusChangeCallback","loadNext","nextChannels","notificationAddedToChannelHandler","channelDeletedHandler","channelIndex","channelHiddenHandler","newMessageHandler","channel_type","channel_id","targetChannel","isTargetChannelArchived","considerArchivedChannels","notificationNewMessageHandler","channelVisibleHandler","notificationRemovedFromChannelHandler","memberUpdatedHandler","pinnedAtSort","newTargetChannelIndex","subscriptionOrOverride","handlerName","defaultEventHandler","eventHandlerOverride","DURATION_MS","DEFAULT_NOTIFICATION_MANAGER_CONFIG","durations","info","success","warning","NotificationManager","timeouts","store","severity","notification","expiresAt","actions","addInfo","addSuccess","oneMinute","oneHour","oneDay","oneWeek","GROUP_BOUNDS","minute","lower","upper","hour","day","DEFAULT_STOP_REFRESH_BOUNDARY_MS","ReminderTimer","reminder","stopRefreshBoundaryMs","getRefreshIntervalLength","remindAt","distanceFromDeadlineMs","timeLeftMs","refreshInterval","timeoutLength","boundaryTimestamp","timeLeftToBoundary","refreshTimeLeft","_Reminder","setState","toStateValue","remind_at","initTimer","clearTimer","timer","Reminder","DEFAULT_PAGINATION_OPTIONS","BasePaginator","_isCursorPagination","_executeQueryDebounced","nextDebounced","prevDebounced","ReminderPaginator","queryReminders","_filters","_sort","oneMinute2","oneHour2","oneDay2","DEFAULT_REMINDER_MANAGER_CONFIG","scheduledOffsetsMs","stopTimerRefreshBoundaryMs","isReminderExistsError","isReminderDoesNotExistError","_ReminderManager","upsertToState","overwrite","cachedReminder","getFromState","removeFromState","initTimers","clearTimers","subscribeReminderCreated","subscribeReminderUpdated","subscribeReminderDeleted","subscribeNotificationReminderDue","subscribeMessageUndeleted","subscribePaginatorStateUpdated","subscribeConfigStateUpdated","isReminderWsEventPayload","paginator","upsertReminder","updateReminder","createReminder","deleteReminder","queryNextReminders","queryPreviousReminders","ReminderManager","isString3","StreamChat","_StreamChat","secretOrOptions","nextRequestAbortController","_getConnectionID","wsFallback","setMessageComposerSetupFunction","connectUser","userTokenOrProvider","setUserPromise","node","allowServerSideConnect","anonymous","setTokenPromise","_setToken","_setUser","openConnection","persistUserOnConnectionFailure","closeConnection","disconnectUser","setUser","cleaningIntervalRef","upsertUserSyncStatus","lastSyncedAt","createChannelManager","_startCleaning","_setupConnection","_normalizeDate","closePromise","connectAnonymousUser","anonymousUser","setAnonymousUser","requestConfig","_enrichAxiosOptions","_logApiRequest","axiosInstance","postForm","put","_logApiResponse","handleResponse","client_request_id","_logApiError","postListenerCallbacks","_handleClientEvent","_callClientListeners","messageEvent","jsonString","_updateMemberWatcherReferences","refMap","_updateUserReferences","_updateUserMessageReferences","_deleteUserMessageReference","_handleUserEvent","deleteKey","updateKey","mark_messages_deleted","recoverStateOnReconnect","getChannelByMembers","memberIds","tempCid","channel2","membersStrInExistingChannel","getChannelById","upsertUsers","upsertUser","_unblockMessage","unblockMessage","markAllRead","markChannelsRead","disableCache","mutedChannels","moderation","inputOptions","browser","warmUp","Agent","keepAlive","keepAliveMsecs","setBaseURL","process","STREAM_LOCAL_TEST_RUN","STREAM_LOCAL_TEST_HOST","defaultWSTimeoutWithFallback","defaultWSTimeout","getInstance","_instance","setOfflineDBApi","offlineDBInstance","devToken","updateAppSettings","apn_config","p12_cert","revokeTokens","revoke_tokens_issued_before","revokeUserToken","revokeUsersToken","userIDs","partialUpdateUsers","testPushSettings","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","skipDevices","skip_devices","pushProviderName","push_provider_name","pushProviderType","push_provider_type","testSQSSettings","testSNSSettings","setGuestUser","last_active","guestUser","access_token","createToken","exp","getHeaders","errorFromResponse","activeChannelKeys","activeChannelKey","_sayHi","mode","queryBannedUsers","queryMessageFlags","queryChannelsRequest","queryReactions","reactionsFromDb","offlineReactions","channelsFromApi","queryChannelsOptions","updatedMessagesSet","message_limit","setLocalDevice","addDevice","push_provider","getDevices","getUnreadCount","getUnreadCountBatch","setPushPreferences","preferences","removeDevice","getRateLimits","serverSide","web","android","ios","endpoints","server_side","channelIDOrCustom","partialUpdateUser","partialUserObject","userMap","userObject","deleteUser","restoreUsers","reactivateUser","reactivateUsers","deactivateUser","deactivateUsers","exportUser","target_user_id","blockUser","blockedUserID","blocked_user_id","getBlockedUsers","unBlockUser","target_id","currentUserID","targetMessageID","target_message_id","unflagMessage","unflagUser","_queryFlags","_queryFlagReports","_reviewFlagReport","reviewResult","review_result","createCommand","getCommand","updateCommand","deleteCommand","listCommands","createChannelType","getChannelType","updateChannelType","deleteChannelType","listChannelTypes","translateMessage","language","translate","destination_language","source_language","_normalizeExpiration","timeoutOrExpirationDate","pinExpires","setSeconds","getSeconds","_validateAndGetMessageId","messageOrMessageId","pinMessage","pinnedBy","pinnedAt","partialUpdateMessage","pin_expires","unpinMessage","partialUserOrUserId","partialMessageObject","deleteMessage","hardDeleteMessage","softDeleteMessage","_deleteMessage","hard","undeleteMessage","undeleted_by","getMessage","optionsWithDefaults","requestBody","partialUpdateThread","partialThreadObject","reservedThreadFields","unset","clientBundle","userAgentString","sdkIdentifier","os","model","deviceIdentifier","withArguments","setUserAgent","_getToken","authorization","Authorization","axiosRequestConfigParams","axiosRequestConfigHeaders","axiosRequestConfigRest","axiosRequestConfig","that","setInterval","verifyWebhook","xSignature","getPermission","createPermission","permissionData","updatePermission","deletePermission","listPermissions","createRole","listRoles","deleteRole","sync","channel_cids","last_sync_at","sendUserCustomEvent","createBlockList","blockList","listBlockLists","getBlockList","updateBlockList","deleteBlockList","exportChannels","exportUsers","exportChannel","getExportChannelStatus","idOrData","segment","validateServerSideAuth","createUserSegment","createChannelSegment","querySegments","segmentId","scheduled_for","scheduledFor","stop_at","stopAt","queryCampaigns","getTask","deleteChannels","deleteUsers","conversations","_createImportURL","filename","_createImport","_getImport","_listImports","upsertPushProvider","pushProvider","deletePushProvider","listPushProviders","createAbortControllerForNextRequest","commitMessage","getPollOption","q","is_answer","queryMessageHistory","updateFlags","message_ids","reviewed_by","queryDrafts","uploadFile","uploadImage","EVENT_MAP","Allow","Deny","AnyResource","AnyRole","MaxPriority","MinPriority","Permission","priority","resources","owner","action","AllowAll","DenyAll","BuiltinRoles","Admin","Anonymous","ChannelMember","ChannelModerator","Guest","User","BuiltinPermissions","AddLinks","BanUser","CreateChannel","CreateMessage","CreateReaction","DeleteAnyAttachment","DeleteAnyChannel","DeleteAnyMessage","DeleteAnyReaction","DeleteOwnAttachment","DeleteOwnChannel","DeleteOwnMessage","DeleteOwnReaction","ReadAnyChannel","ReadOwnChannel","RunMessageAction","UpdateAnyChannel","UpdateAnyMessage","UpdateMembersAnyChannel","UpdateMembersOwnChannel","UpdateOwnChannel","UpdateOwnMessage","UploadAttachment","UseFrozenChannel","OfflineError","OfflineDBSyncManager","connectionChangedListener","syncStatusListeners","scheduledSyncStatusCallbacks","syncAndExecutePendingTasks","invokeSyncStatusListeners","onSyncStatusChange","getAllChannelCids","getLastSyncedAt","lastSyncedAtDate","nowDate","resetDB","queryPromises","queriesArray","queries","flat","executeSqlBatch","executePendingTasks","AbstractOfflineDB","shouldInitialize","initializeDB","queryCallback","queriesWithChannelGuard","forceUpdate","createQueries","channelFromEvent","shouldUpsertChannelData","channelExists","channelFromState","channelQuery","upsertChannelData","createdQueries","newQueries","handleNewMessage","finalQueries","upsertMessages","ownReads","upsertReadsQueries","upsertReads","reads","handleDeleteMessage","deleteMethod","executeOverride","handleRemoveMessage","dropPendingTasksQueries","dropPendingTasks","hardDeleteMessageQueries","handleRead","unreadMessages","overriddenUnreadMessages","handleMemberEvent","deleteMember","upsertMembers","handleMessageUpdatedEvent","handleChannelTruncatedEvent","ownUser","truncateQueries","deleteMessagesForChannel","activeChannel","upsertReadQueries","handleReactionEvent","getReactionMethod","insertReaction","updateReaction","reactionMethod","handleDraftEvent","deleteChannel","attemptTaskExecution","executeTask","shouldSkipQueueingTask","addPendingTask","isPendingTask","newMessageResponse","queue","getPendingTasks","deletePendingTask","userIdFromState","FixedSizeQueueCache","dispose","itemKey","shift","peek","foundItem"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/base64-js/index.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/form-data/lib/browser.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/base64.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/campaign.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/bind.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/utils.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/AxiosError.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/null.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/toFormData.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/AxiosURLSearchParams.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/buildURL.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/InterceptorManager.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/defaults/transitional.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/URLSearchParams.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/FormData.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/platform/browser/classes/Blob.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/platform/browser/index.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/toURLEncodedForm.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/formDataToJSON.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/defaults/index.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/parseHeaders.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/AxiosHeaders.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/transformData.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/cancel/isCancel.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/cancel/CanceledError.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/settle.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/cookies.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/isAbsoluteURL.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/combineURLs.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/buildFullPath.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/isURLSameOrigin.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/parseProtocol.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/speedometer.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/adapters/xhr.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/adapters/adapters.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/dispatchRequest.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/mergeConfig.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/env/data.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/validator.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/core/Axios.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/cancel/CancelToken.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/spread.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/isAxiosError.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/helpers/HttpStatusCode.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/lib/axios.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/axios/index.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/client.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/constants.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/channel_state.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/attachmentIdentity.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/fileUtils.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/store.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/mergeWith/mergeWithCore.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/mergeWith/mergeWith.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/mergeWith/mergeWithDiff.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/attachmentManager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/linkifyjs/dist/linkify.es.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/configuration/configuration.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/CustomDataManager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/linkPreviewsManager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/concurrency.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/middleware.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/pollComposer/state.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/pollComposer/composition.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/pollComposer/PollComposerMiddlewareExecutor.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/types.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/pollComposer.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/attachments.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/cleanData.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/customData.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/compositionValidation.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/linkPreviews.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/textComposer.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/messageComposerState.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/userDataInjection.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/pollOnly.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/MessageComposerMiddlewareExecutor.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/messageComposer/commandInjection.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/activeCommandGuard.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/search/BaseSearchSource.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/search/SearchController.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/search/UserSearchSource.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/search/ChannelSearchSource.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/search/MessageSearchSource.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/textMiddlewareUtils.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/commands.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/commandStringExtraction.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/mentions.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/validation.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/middleware/textComposer/TextComposerMiddlewareExecutor.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/textComposer.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/WithSubscriptions.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/thread.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/messageComposer/messageComposer.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/channel.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/client_state.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/node_modules/isomorphic-ws/browser.js","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/insights.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/connection.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/signing.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/token_manager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/errors.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/connection_fallback.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/segment.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/moderation.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/thread_manager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/poll.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/poll_manager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/channel_manager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/notifications/configuration.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/notifications/NotificationManager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/reminders/ReminderTimer.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/reminders/Reminder.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/pagination/BasePaginator.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/pagination/ReminderPaginator.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/reminders/ReminderManager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/events.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/permissions.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/offline-support/types.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/offline-support/offline_sync_manager.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/offline-support/offline_support_api.ts","/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat/src/utils/FixedSizeQueueCache.ts"],"sourcesContent":["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","import type { StreamChat } from './client';\nimport type { CampaignData, GetCampaignOptions } from './types';\n\nexport class Campaign {\n  id: string | null;\n  data?: CampaignData;\n  client: StreamChat;\n\n  constructor(client: StreamChat, id: string | null, data?: CampaignData) {\n    this.client = client;\n    this.id = id;\n    this.data = data;\n  }\n\n  async create() {\n    const body = {\n      id: this.id,\n      message_template: this.data?.message_template,\n      segment_ids: this.data?.segment_ids,\n      sender_id: this.data?.sender_id,\n      sender_mode: this.data?.sender_mode,\n      channel_template: this.data?.channel_template,\n      create_channels: this.data?.create_channels,\n      show_channels: this.data?.show_channels,\n      description: this.data?.description,\n      name: this.data?.name,\n      skip_push: this.data?.skip_push,\n      skip_webhook: this.data?.skip_webhook,\n      user_ids: this.data?.user_ids,\n    };\n\n    const result = await this.client.createCampaign(body);\n\n    this.id = result.campaign.id;\n    this.data = result.campaign;\n    return result;\n  }\n\n  verifyCampaignId() {\n    if (!this.id) {\n      throw new Error(\n        'Campaign id is missing. Either create the campaign using campaign.create() or set the id during instantiation - const campaign = client.campaign(id)',\n      );\n    }\n  }\n\n  async start(options?: { scheduledFor?: string; stopAt?: string }) {\n    this.verifyCampaignId();\n\n    return await this.client.startCampaign(this.id as string, options);\n  }\n\n  update(data: Partial<CampaignData>) {\n    this.verifyCampaignId();\n\n    return this.client.updateCampaign(this.id as string, data);\n  }\n\n  async delete() {\n    this.verifyCampaignId();\n\n    return await this.client.deleteCampaign(this.id as string);\n  }\n\n  stop() {\n    this.verifyCampaignId();\n\n    return this.client.stopCampaign(this.id as string);\n  }\n\n  get(options?: GetCampaignOptions) {\n    this.verifyCampaignId();\n\n    return this.client.getCampaign(this.id as string, options);\n  }\n}\n","'use strict';\n\nexport default function bind(fn, thisArg) {\n  return function wrap() {\n    return fn.apply(thisArg, arguments);\n  };\n}\n","'use strict';\n\nimport bind from './helpers/bind.js';\n\n// utils is a library of generic helper functions non-specific to axios\n\nconst {toString} = Object.prototype;\nconst {getPrototypeOf} = Object;\n\nconst kindOf = (cache => thing => {\n    const str = toString.call(thing);\n    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());\n})(Object.create(null));\n\nconst kindOfTest = (type) => {\n  type = type.toLowerCase();\n  return (thing) => kindOf(thing) === type\n}\n\nconst typeOfTest = type => thing => typeof thing === type;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n *\n * @returns {boolean} True if value is an Array, otherwise false\n */\nconst {isArray} = Array;\n\n/**\n * Determine if a value is undefined\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nconst isUndefined = typeOfTest('undefined');\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nconst isArrayBuffer = kindOfTest('ArrayBuffer');\n\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  let result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a String, otherwise false\n */\nconst isString = typeOfTest('string');\n\n/**\n * Determine if a value is a Function\n *\n * @param {*} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nconst isFunction = typeOfTest('function');\n\n/**\n * Determine if a value is a Number\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Number, otherwise false\n */\nconst isNumber = typeOfTest('number');\n\n/**\n * Determine if a value is an Object\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an Object, otherwise false\n */\nconst isObject = (thing) => thing !== null && typeof thing === 'object';\n\n/**\n * Determine if a value is a Boolean\n *\n * @param {*} thing The value to test\n * @returns {boolean} True if value is a Boolean, otherwise false\n */\nconst isBoolean = thing => thing === true || thing === false;\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a plain Object, otherwise false\n */\nconst isPlainObject = (val) => {\n  if (kindOf(val) !== 'object') {\n    return false;\n  }\n\n  const prototype = getPrototypeOf(val);\n  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Date, otherwise false\n */\nconst isDate = kindOfTest('Date');\n\n/**\n * Determine if a value is a File\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFile = kindOfTest('File');\n\n/**\n * Determine if a value is a Blob\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nconst isBlob = kindOfTest('Blob');\n\n/**\n * Determine if a value is a FileList\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a File, otherwise false\n */\nconst isFileList = kindOfTest('FileList');\n\n/**\n * Determine if a value is a Stream\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nconst isStream = (val) => isObject(val) && isFunction(val.pipe);\n\n/**\n * Determine if a value is a FormData\n *\n * @param {*} thing The value to test\n *\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nconst isFormData = (thing) => {\n  let kind;\n  return thing && (\n    (typeof FormData === 'function' && thing instanceof FormData) || (\n      isFunction(thing.append) && (\n        (kind = kindOf(thing)) === 'formdata' ||\n        // detect form-data instance\n        (kind === 'object' && isFunction(thing.toString) && thing.toString() === '[object FormData]')\n      )\n    )\n  )\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nconst isURLSearchParams = kindOfTest('URLSearchParams');\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n *\n * @returns {String} The String freed of excess whitespace\n */\nconst trim = (str) => str.trim ?\n  str.trim() : str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n *\n * @param {Boolean} [allOwnKeys = false]\n * @returns {any}\n */\nfunction forEach(obj, fn, {allOwnKeys = false} = {}) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  let i;\n  let l;\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);\n    const len = keys.length;\n    let key;\n\n    for (i = 0; i < len; i++) {\n      key = keys[i];\n      fn.call(null, obj[key], key, obj);\n    }\n  }\n}\n\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\n\nconst _global = (() => {\n  /*eslint no-undef:0*/\n  if (typeof globalThis !== \"undefined\") return globalThis;\n  return typeof self !== \"undefined\" ? self : (typeof window !== 'undefined' ? window : global)\n})();\n\nconst isContextDefined = (context) => !isUndefined(context) && context !== _global;\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n *\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  const {caseless} = isContextDefined(this) && this || {};\n  const result = {};\n  const assignValue = (val, key) => {\n    const targetKey = caseless && findKey(result, key) || key;\n    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {\n      result[targetKey] = merge(result[targetKey], val);\n    } else if (isPlainObject(val)) {\n      result[targetKey] = merge({}, val);\n    } else if (isArray(val)) {\n      result[targetKey] = val.slice();\n    } else {\n      result[targetKey] = val;\n    }\n  }\n\n  for (let i = 0, l = arguments.length; i < l; i++) {\n    arguments[i] && forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n *\n * @param {Boolean} [allOwnKeys]\n * @returns {Object} The resulting value of object a\n */\nconst extend = (a, b, thisArg, {allOwnKeys}= {}) => {\n  forEach(b, (val, key) => {\n    if (thisArg && isFunction(val)) {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  }, {allOwnKeys});\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n *\n * @returns {string} content value without BOM\n */\nconst stripBOM = (content) => {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\n/**\n * Inherit the prototype methods from one constructor into another\n * @param {function} constructor\n * @param {function} superConstructor\n * @param {object} [props]\n * @param {object} [descriptors]\n *\n * @returns {void}\n */\nconst inherits = (constructor, superConstructor, props, descriptors) => {\n  constructor.prototype = Object.create(superConstructor.prototype, descriptors);\n  constructor.prototype.constructor = constructor;\n  Object.defineProperty(constructor, 'super', {\n    value: superConstructor.prototype\n  });\n  props && Object.assign(constructor.prototype, props);\n}\n\n/**\n * Resolve object with deep prototype chain to a flat object\n * @param {Object} sourceObj source object\n * @param {Object} [destObj]\n * @param {Function|Boolean} [filter]\n * @param {Function} [propFilter]\n *\n * @returns {Object}\n */\nconst toFlatObject = (sourceObj, destObj, filter, propFilter) => {\n  let props;\n  let i;\n  let prop;\n  const merged = {};\n\n  destObj = destObj || {};\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  if (sourceObj == null) return destObj;\n\n  do {\n    props = Object.getOwnPropertyNames(sourceObj);\n    i = props.length;\n    while (i-- > 0) {\n      prop = props[i];\n      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {\n        destObj[prop] = sourceObj[prop];\n        merged[prop] = true;\n      }\n    }\n    sourceObj = filter !== false && getPrototypeOf(sourceObj);\n  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);\n\n  return destObj;\n}\n\n/**\n * Determines whether a string ends with the characters of a specified string\n *\n * @param {String} str\n * @param {String} searchString\n * @param {Number} [position= 0]\n *\n * @returns {boolean}\n */\nconst endsWith = (str, searchString, position) => {\n  str = String(str);\n  if (position === undefined || position > str.length) {\n    position = str.length;\n  }\n  position -= searchString.length;\n  const lastIndex = str.indexOf(searchString, position);\n  return lastIndex !== -1 && lastIndex === position;\n}\n\n\n/**\n * Returns new array from array like object or null if failed\n *\n * @param {*} [thing]\n *\n * @returns {?Array}\n */\nconst toArray = (thing) => {\n  if (!thing) return null;\n  if (isArray(thing)) return thing;\n  let i = thing.length;\n  if (!isNumber(i)) return null;\n  const arr = new Array(i);\n  while (i-- > 0) {\n    arr[i] = thing[i];\n  }\n  return arr;\n}\n\n/**\n * Checking if the Uint8Array exists and if it does, it returns a function that checks if the\n * thing passed in is an instance of Uint8Array\n *\n * @param {TypedArray}\n *\n * @returns {Array}\n */\n// eslint-disable-next-line func-names\nconst isTypedArray = (TypedArray => {\n  // eslint-disable-next-line func-names\n  return thing => {\n    return TypedArray && thing instanceof TypedArray;\n  };\n})(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));\n\n/**\n * For each entry in the object, call the function with the key and value.\n *\n * @param {Object<any, any>} obj - The object to iterate over.\n * @param {Function} fn - The function to call for each entry.\n *\n * @returns {void}\n */\nconst forEachEntry = (obj, fn) => {\n  const generator = obj && obj[Symbol.iterator];\n\n  const iterator = generator.call(obj);\n\n  let result;\n\n  while ((result = iterator.next()) && !result.done) {\n    const pair = result.value;\n    fn.call(obj, pair[0], pair[1]);\n  }\n}\n\n/**\n * It takes a regular expression and a string, and returns an array of all the matches\n *\n * @param {string} regExp - The regular expression to match against.\n * @param {string} str - The string to search.\n *\n * @returns {Array<boolean>}\n */\nconst matchAll = (regExp, str) => {\n  let matches;\n  const arr = [];\n\n  while ((matches = regExp.exec(str)) !== null) {\n    arr.push(matches);\n  }\n\n  return arr;\n}\n\n/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */\nconst isHTMLForm = kindOfTest('HTMLFormElement');\n\nconst toCamelCase = str => {\n  return str.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,\n    function replacer(m, p1, p2) {\n      return p1.toUpperCase() + p2;\n    }\n  );\n};\n\n/* Creating a function that will check if an object has a property. */\nconst hasOwnProperty = (({hasOwnProperty}) => (obj, prop) => hasOwnProperty.call(obj, prop))(Object.prototype);\n\n/**\n * Determine if a value is a RegExp object\n *\n * @param {*} val The value to test\n *\n * @returns {boolean} True if value is a RegExp object, otherwise false\n */\nconst isRegExp = kindOfTest('RegExp');\n\nconst reduceDescriptors = (obj, reducer) => {\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  const reducedDescriptors = {};\n\n  forEach(descriptors, (descriptor, name) => {\n    let ret;\n    if ((ret = reducer(descriptor, name, obj)) !== false) {\n      reducedDescriptors[name] = ret || descriptor;\n    }\n  });\n\n  Object.defineProperties(obj, reducedDescriptors);\n}\n\n/**\n * Makes all methods read-only\n * @param {Object} obj\n */\n\nconst freezeMethods = (obj) => {\n  reduceDescriptors(obj, (descriptor, name) => {\n    // skip restricted props in strict mode\n    if (isFunction(obj) && ['arguments', 'caller', 'callee'].indexOf(name) !== -1) {\n      return false;\n    }\n\n    const value = obj[name];\n\n    if (!isFunction(value)) return;\n\n    descriptor.enumerable = false;\n\n    if ('writable' in descriptor) {\n      descriptor.writable = false;\n      return;\n    }\n\n    if (!descriptor.set) {\n      descriptor.set = () => {\n        throw Error('Can not rewrite read-only method \\'' + name + '\\'');\n      };\n    }\n  });\n}\n\nconst toObjectSet = (arrayOrString, delimiter) => {\n  const obj = {};\n\n  const define = (arr) => {\n    arr.forEach(value => {\n      obj[value] = true;\n    });\n  }\n\n  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));\n\n  return obj;\n}\n\nconst noop = () => {}\n\nconst toFiniteNumber = (value, defaultValue) => {\n  value = +value;\n  return Number.isFinite(value) ? value : defaultValue;\n}\n\nconst ALPHA = 'abcdefghijklmnopqrstuvwxyz'\n\nconst DIGIT = '0123456789';\n\nconst ALPHABET = {\n  DIGIT,\n  ALPHA,\n  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT\n}\n\nconst generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {\n  let str = '';\n  const {length} = alphabet;\n  while (size--) {\n    str += alphabet[Math.random() * length|0]\n  }\n\n  return str;\n}\n\n/**\n * If the thing is a FormData object, return true, otherwise return false.\n *\n * @param {unknown} thing - The thing to check.\n *\n * @returns {boolean}\n */\nfunction isSpecCompliantForm(thing) {\n  return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator]);\n}\n\nconst toJSONObject = (obj) => {\n  const stack = new Array(10);\n\n  const visit = (source, i) => {\n\n    if (isObject(source)) {\n      if (stack.indexOf(source) >= 0) {\n        return;\n      }\n\n      if(!('toJSON' in source)) {\n        stack[i] = source;\n        const target = isArray(source) ? [] : {};\n\n        forEach(source, (value, key) => {\n          const reducedValue = visit(value, i + 1);\n          !isUndefined(reducedValue) && (target[key] = reducedValue);\n        });\n\n        stack[i] = undefined;\n\n        return target;\n      }\n    }\n\n    return source;\n  }\n\n  return visit(obj, 0);\n}\n\nconst isAsyncFn = kindOfTest('AsyncFunction');\n\nconst isThenable = (thing) =>\n  thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);\n\nexport default {\n  isArray,\n  isArrayBuffer,\n  isBuffer,\n  isFormData,\n  isArrayBufferView,\n  isString,\n  isNumber,\n  isBoolean,\n  isObject,\n  isPlainObject,\n  isUndefined,\n  isDate,\n  isFile,\n  isBlob,\n  isRegExp,\n  isFunction,\n  isStream,\n  isURLSearchParams,\n  isTypedArray,\n  isFileList,\n  forEach,\n  merge,\n  extend,\n  trim,\n  stripBOM,\n  inherits,\n  toFlatObject,\n  kindOf,\n  kindOfTest,\n  endsWith,\n  toArray,\n  forEachEntry,\n  matchAll,\n  isHTMLForm,\n  hasOwnProperty,\n  hasOwnProp: hasOwnProperty, // an alias to avoid ESLint no-prototype-builtins detection\n  reduceDescriptors,\n  freezeMethods,\n  toObjectSet,\n  toCamelCase,\n  noop,\n  toFiniteNumber,\n  findKey,\n  global: _global,\n  isContextDefined,\n  ALPHABET,\n  generateString,\n  isSpecCompliantForm,\n  toJSONObject,\n  isAsyncFn,\n  isThenable\n};\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [config] The config.\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n *\n * @returns {Error} The created error.\n */\nfunction AxiosError(message, code, config, request, response) {\n  Error.call(this);\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    this.stack = (new Error()).stack;\n  }\n\n  this.message = message;\n  this.name = 'AxiosError';\n  code && (this.code = code);\n  config && (this.config = config);\n  request && (this.request = request);\n  response && (this.response = response);\n}\n\nutils.inherits(AxiosError, Error, {\n  toJSON: function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: utils.toJSONObject(this.config),\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  }\n});\n\nconst prototype = AxiosError.prototype;\nconst descriptors = {};\n\n[\n  'ERR_BAD_OPTION_VALUE',\n  'ERR_BAD_OPTION',\n  'ECONNABORTED',\n  'ETIMEDOUT',\n  'ERR_NETWORK',\n  'ERR_FR_TOO_MANY_REDIRECTS',\n  'ERR_DEPRECATED',\n  'ERR_BAD_RESPONSE',\n  'ERR_BAD_REQUEST',\n  'ERR_CANCELED',\n  'ERR_NOT_SUPPORT',\n  'ERR_INVALID_URL'\n// eslint-disable-next-line func-names\n].forEach(code => {\n  descriptors[code] = {value: code};\n});\n\nObject.defineProperties(AxiosError, descriptors);\nObject.defineProperty(prototype, 'isAxiosError', {value: true});\n\n// eslint-disable-next-line func-names\nAxiosError.from = (error, code, config, request, response, customProps) => {\n  const axiosError = Object.create(prototype);\n\n  utils.toFlatObject(error, axiosError, function filter(obj) {\n    return obj !== Error.prototype;\n  }, prop => {\n    return prop !== 'isAxiosError';\n  });\n\n  AxiosError.call(axiosError, error.message, code, config, request, response);\n\n  axiosError.cause = error;\n\n  axiosError.name = error.name;\n\n  customProps && Object.assign(axiosError, customProps);\n\n  return axiosError;\n};\n\nexport default AxiosError;\n","// eslint-disable-next-line strict\nexport default null;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\n// temporary hotfix to avoid circular references until AxiosURLSearchParams is refactored\nimport PlatformFormData from '../platform/node/classes/FormData.js';\n\n/**\n * Determines if the given thing is a array or js object.\n *\n * @param {string} thing - The object or array to be visited.\n *\n * @returns {boolean}\n */\nfunction isVisitable(thing) {\n  return utils.isPlainObject(thing) || utils.isArray(thing);\n}\n\n/**\n * It removes the brackets from the end of a string\n *\n * @param {string} key - The key of the parameter.\n *\n * @returns {string} the key without the brackets.\n */\nfunction removeBrackets(key) {\n  return utils.endsWith(key, '[]') ? key.slice(0, -2) : key;\n}\n\n/**\n * It takes a path, a key, and a boolean, and returns a string\n *\n * @param {string} path - The path to the current key.\n * @param {string} key - The key of the current object being iterated over.\n * @param {string} dots - If true, the key will be rendered with dots instead of brackets.\n *\n * @returns {string} The path to the current key.\n */\nfunction renderKey(path, key, dots) {\n  if (!path) return key;\n  return path.concat(key).map(function each(token, i) {\n    // eslint-disable-next-line no-param-reassign\n    token = removeBrackets(token);\n    return !dots && i ? '[' + token + ']' : token;\n  }).join(dots ? '.' : '');\n}\n\n/**\n * If the array is an array and none of its elements are visitable, then it's a flat array.\n *\n * @param {Array<any>} arr - The array to check\n *\n * @returns {boolean}\n */\nfunction isFlatArray(arr) {\n  return utils.isArray(arr) && !arr.some(isVisitable);\n}\n\nconst predicates = utils.toFlatObject(utils, {}, null, function filter(prop) {\n  return /^is[A-Z]/.test(prop);\n});\n\n/**\n * Convert a data object to FormData\n *\n * @param {Object} obj\n * @param {?Object} [formData]\n * @param {?Object} [options]\n * @param {Function} [options.visitor]\n * @param {Boolean} [options.metaTokens = true]\n * @param {Boolean} [options.dots = false]\n * @param {?Boolean} [options.indexes = false]\n *\n * @returns {Object}\n **/\n\n/**\n * It converts an object into a FormData object\n *\n * @param {Object<any, any>} obj - The object to convert to form data.\n * @param {string} formData - The FormData object to append to.\n * @param {Object<string, any>} options\n *\n * @returns\n */\nfunction toFormData(obj, formData, options) {\n  if (!utils.isObject(obj)) {\n    throw new TypeError('target must be an object');\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  formData = formData || new (PlatformFormData || FormData)();\n\n  // eslint-disable-next-line no-param-reassign\n  options = utils.toFlatObject(options, {\n    metaTokens: true,\n    dots: false,\n    indexes: false\n  }, false, function defined(option, source) {\n    // eslint-disable-next-line no-eq-null,eqeqeq\n    return !utils.isUndefined(source[option]);\n  });\n\n  const metaTokens = options.metaTokens;\n  // eslint-disable-next-line no-use-before-define\n  const visitor = options.visitor || defaultVisitor;\n  const dots = options.dots;\n  const indexes = options.indexes;\n  const _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;\n  const useBlob = _Blob && utils.isSpecCompliantForm(formData);\n\n  if (!utils.isFunction(visitor)) {\n    throw new TypeError('visitor must be a function');\n  }\n\n  function convertValue(value) {\n    if (value === null) return '';\n\n    if (utils.isDate(value)) {\n      return value.toISOString();\n    }\n\n    if (!useBlob && utils.isBlob(value)) {\n      throw new AxiosError('Blob is not supported. Use a Buffer instead.');\n    }\n\n    if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {\n      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);\n    }\n\n    return value;\n  }\n\n  /**\n   * Default visitor.\n   *\n   * @param {*} value\n   * @param {String|Number} key\n   * @param {Array<String|Number>} path\n   * @this {FormData}\n   *\n   * @returns {boolean} return true to visit the each prop of the value recursively\n   */\n  function defaultVisitor(value, key, path) {\n    let arr = value;\n\n    if (value && !path && typeof value === 'object') {\n      if (utils.endsWith(key, '{}')) {\n        // eslint-disable-next-line no-param-reassign\n        key = metaTokens ? key : key.slice(0, -2);\n        // eslint-disable-next-line no-param-reassign\n        value = JSON.stringify(value);\n      } else if (\n        (utils.isArray(value) && isFlatArray(value)) ||\n        ((utils.isFileList(value) || utils.endsWith(key, '[]')) && (arr = utils.toArray(value))\n        )) {\n        // eslint-disable-next-line no-param-reassign\n        key = removeBrackets(key);\n\n        arr.forEach(function each(el, index) {\n          !(utils.isUndefined(el) || el === null) && formData.append(\n            // eslint-disable-next-line no-nested-ternary\n            indexes === true ? renderKey([key], index, dots) : (indexes === null ? key : key + '[]'),\n            convertValue(el)\n          );\n        });\n        return false;\n      }\n    }\n\n    if (isVisitable(value)) {\n      return true;\n    }\n\n    formData.append(renderKey(path, key, dots), convertValue(value));\n\n    return false;\n  }\n\n  const stack = [];\n\n  const exposedHelpers = Object.assign(predicates, {\n    defaultVisitor,\n    convertValue,\n    isVisitable\n  });\n\n  function build(value, path) {\n    if (utils.isUndefined(value)) return;\n\n    if (stack.indexOf(value) !== -1) {\n      throw Error('Circular reference detected in ' + path.join('.'));\n    }\n\n    stack.push(value);\n\n    utils.forEach(value, function each(el, key) {\n      const result = !(utils.isUndefined(el) || el === null) && visitor.call(\n        formData, el, utils.isString(key) ? key.trim() : key, path, exposedHelpers\n      );\n\n      if (result === true) {\n        build(el, path ? path.concat(key) : [key]);\n      }\n    });\n\n    stack.pop();\n  }\n\n  if (!utils.isObject(obj)) {\n    throw new TypeError('data must be an object');\n  }\n\n  build(obj);\n\n  return formData;\n}\n\nexport default toFormData;\n","'use strict';\n\nimport toFormData from './toFormData.js';\n\n/**\n * It encodes a string by replacing all characters that are not in the unreserved set with\n * their percent-encoded equivalents\n *\n * @param {string} str - The string to encode.\n *\n * @returns {string} The encoded string.\n */\nfunction encode(str) {\n  const charMap = {\n    '!': '%21',\n    \"'\": '%27',\n    '(': '%28',\n    ')': '%29',\n    '~': '%7E',\n    '%20': '+',\n    '%00': '\\x00'\n  };\n  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {\n    return charMap[match];\n  });\n}\n\n/**\n * It takes a params object and converts it to a FormData object\n *\n * @param {Object<string, any>} params - The parameters to be converted to a FormData object.\n * @param {Object<string, any>} options - The options object passed to the Axios constructor.\n *\n * @returns {void}\n */\nfunction AxiosURLSearchParams(params, options) {\n  this._pairs = [];\n\n  params && toFormData(params, this, options);\n}\n\nconst prototype = AxiosURLSearchParams.prototype;\n\nprototype.append = function append(name, value) {\n  this._pairs.push([name, value]);\n};\n\nprototype.toString = function toString(encoder) {\n  const _encode = encoder ? function(value) {\n    return encoder.call(this, value, encode);\n  } : encode;\n\n  return this._pairs.map(function each(pair) {\n    return _encode(pair[0]) + '=' + _encode(pair[1]);\n  }, '').join('&');\n};\n\nexport default AxiosURLSearchParams;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosURLSearchParams from '../helpers/AxiosURLSearchParams.js';\n\n/**\n * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their\n * URI encoded counterparts\n *\n * @param {string} val The value to be encoded.\n *\n * @returns {string} The encoded value.\n */\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @param {?object} options\n *\n * @returns {string} The formatted url\n */\nexport default function buildURL(url, params, options) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n  \n  const _encode = options && options.encode || encode;\n\n  const serializeFn = options && options.serialize;\n\n  let serializedParams;\n\n  if (serializeFn) {\n    serializedParams = serializeFn(params, options);\n  } else {\n    serializedParams = utils.isURLSearchParams(params) ?\n      params.toString() :\n      new AxiosURLSearchParams(params, options).toString(_encode);\n  }\n\n  if (serializedParams) {\n    const hashmarkIndex = url.indexOf(\"#\");\n\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\nclass InterceptorManager {\n  constructor() {\n    this.handlers = [];\n  }\n\n  /**\n   * Add a new interceptor to the stack\n   *\n   * @param {Function} fulfilled The function to handle `then` for a `Promise`\n   * @param {Function} rejected The function to handle `reject` for a `Promise`\n   *\n   * @return {Number} An ID used to remove interceptor later\n   */\n  use(fulfilled, rejected, options) {\n    this.handlers.push({\n      fulfilled,\n      rejected,\n      synchronous: options ? options.synchronous : false,\n      runWhen: options ? options.runWhen : null\n    });\n    return this.handlers.length - 1;\n  }\n\n  /**\n   * Remove an interceptor from the stack\n   *\n   * @param {Number} id The ID that was returned by `use`\n   *\n   * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise\n   */\n  eject(id) {\n    if (this.handlers[id]) {\n      this.handlers[id] = null;\n    }\n  }\n\n  /**\n   * Clear all interceptors from the stack\n   *\n   * @returns {void}\n   */\n  clear() {\n    if (this.handlers) {\n      this.handlers = [];\n    }\n  }\n\n  /**\n   * Iterate over all the registered interceptors\n   *\n   * This method is particularly useful for skipping over any\n   * interceptors that may have become `null` calling `eject`.\n   *\n   * @param {Function} fn The function to call for each interceptor\n   *\n   * @returns {void}\n   */\n  forEach(fn) {\n    utils.forEach(this.handlers, function forEachHandler(h) {\n      if (h !== null) {\n        fn(h);\n      }\n    });\n  }\n}\n\nexport default InterceptorManager;\n","'use strict';\n\nexport default {\n  silentJSONParsing: true,\n  forcedJSONParsing: true,\n  clarifyTimeoutError: false\n};\n","'use strict';\n\nimport AxiosURLSearchParams from '../../../helpers/AxiosURLSearchParams.js';\nexport default typeof URLSearchParams !== 'undefined' ? URLSearchParams : AxiosURLSearchParams;\n","'use strict';\n\nexport default typeof FormData !== 'undefined' ? FormData : null;\n","'use strict'\n\nexport default typeof Blob !== 'undefined' ? Blob : null\n","import URLSearchParams from './classes/URLSearchParams.js'\nimport FormData from './classes/FormData.js'\nimport Blob from './classes/Blob.js'\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n *\n * @returns {boolean}\n */\nconst isStandardBrowserEnv = (() => {\n  let product;\n  if (typeof navigator !== 'undefined' && (\n    (product = navigator.product) === 'ReactNative' ||\n    product === 'NativeScript' ||\n    product === 'NS')\n  ) {\n    return false;\n  }\n\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n})();\n\n/**\n * Determine if we're running in a standard browser webWorker environment\n *\n * Although the `isStandardBrowserEnv` method indicates that\n * `allows axios to run in a web worker`, the WebWorker will still be\n * filtered out due to its judgment standard\n * `typeof window !== 'undefined' && typeof document !== 'undefined'`.\n * This leads to a problem when axios post `FormData` in webWorker\n */\n const isStandardBrowserWebWorkerEnv = (() => {\n  return (\n    typeof WorkerGlobalScope !== 'undefined' &&\n    // eslint-disable-next-line no-undef\n    self instanceof WorkerGlobalScope &&\n    typeof self.importScripts === 'function'\n  );\n})();\n\n\nexport default {\n  isBrowser: true,\n  classes: {\n    URLSearchParams,\n    FormData,\n    Blob\n  },\n  isStandardBrowserEnv,\n  isStandardBrowserWebWorkerEnv,\n  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport toFormData from './toFormData.js';\nimport platform from '../platform/index.js';\n\nexport default function toURLEncodedForm(data, options) {\n  return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({\n    visitor: function(value, key, path, helpers) {\n      if (platform.isNode && utils.isBuffer(value)) {\n        this.append(key, value.toString('base64'));\n        return false;\n      }\n\n      return helpers.defaultVisitor.apply(this, arguments);\n    }\n  }, options));\n}\n","'use strict';\n\nimport utils from '../utils.js';\n\n/**\n * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']\n *\n * @param {string} name - The name of the property to get.\n *\n * @returns An array of strings.\n */\nfunction parsePropPath(name) {\n  // foo[x][y][z]\n  // foo.x.y.z\n  // foo-x-y-z\n  // foo x y z\n  return utils.matchAll(/\\w+|\\[(\\w*)]/g, name).map(match => {\n    return match[0] === '[]' ? '' : match[1] || match[0];\n  });\n}\n\n/**\n * Convert an array to an object.\n *\n * @param {Array<any>} arr - The array to convert to an object.\n *\n * @returns An object with the same keys and values as the array.\n */\nfunction arrayToObject(arr) {\n  const obj = {};\n  const keys = Object.keys(arr);\n  let i;\n  const len = keys.length;\n  let key;\n  for (i = 0; i < len; i++) {\n    key = keys[i];\n    obj[key] = arr[key];\n  }\n  return obj;\n}\n\n/**\n * It takes a FormData object and returns a JavaScript object\n *\n * @param {string} formData The FormData object to convert to JSON.\n *\n * @returns {Object<string, any> | null} The converted object.\n */\nfunction formDataToJSON(formData) {\n  function buildPath(path, value, target, index) {\n    let name = path[index++];\n    const isNumericKey = Number.isFinite(+name);\n    const isLast = index >= path.length;\n    name = !name && utils.isArray(target) ? target.length : name;\n\n    if (isLast) {\n      if (utils.hasOwnProp(target, name)) {\n        target[name] = [target[name], value];\n      } else {\n        target[name] = value;\n      }\n\n      return !isNumericKey;\n    }\n\n    if (!target[name] || !utils.isObject(target[name])) {\n      target[name] = [];\n    }\n\n    const result = buildPath(path, value, target[name], index);\n\n    if (result && utils.isArray(target[name])) {\n      target[name] = arrayToObject(target[name]);\n    }\n\n    return !isNumericKey;\n  }\n\n  if (utils.isFormData(formData) && utils.isFunction(formData.entries)) {\n    const obj = {};\n\n    utils.forEachEntry(formData, (name, value) => {\n      buildPath(parsePropPath(name), value, obj, 0);\n    });\n\n    return obj;\n  }\n\n  return null;\n}\n\nexport default formDataToJSON;\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosError from '../core/AxiosError.js';\nimport transitionalDefaults from './transitional.js';\nimport toFormData from '../helpers/toFormData.js';\nimport toURLEncodedForm from '../helpers/toURLEncodedForm.js';\nimport platform from '../platform/index.js';\nimport formDataToJSON from '../helpers/formDataToJSON.js';\n\n/**\n * It takes a string, tries to parse it, and if it fails, it returns the stringified version\n * of the input\n *\n * @param {any} rawValue - The value to be stringified.\n * @param {Function} parser - A function that parses a string into a JavaScript object.\n * @param {Function} encoder - A function that takes a value and returns a string.\n *\n * @returns {string} A stringified version of the rawValue.\n */\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nconst defaults = {\n\n  transitional: transitionalDefaults,\n\n  adapter: ['xhr', 'http'],\n\n  transformRequest: [function transformRequest(data, headers) {\n    const contentType = headers.getContentType() || '';\n    const hasJSONContentType = contentType.indexOf('application/json') > -1;\n    const isObjectPayload = utils.isObject(data);\n\n    if (isObjectPayload && utils.isHTMLForm(data)) {\n      data = new FormData(data);\n    }\n\n    const isFormData = utils.isFormData(data);\n\n    if (isFormData) {\n      if (!hasJSONContentType) {\n        return data;\n      }\n      return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;\n    }\n\n    if (utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n      return data.toString();\n    }\n\n    let isFileList;\n\n    if (isObjectPayload) {\n      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n        return toURLEncodedForm(data, this.formSerializer).toString();\n      }\n\n      if ((isFileList = utils.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n        const _FormData = this.env && this.env.FormData;\n\n        return toFormData(\n          isFileList ? {'files[]': data} : data,\n          _FormData && new _FormData(),\n          this.formSerializer\n        );\n      }\n    }\n\n    if (isObjectPayload || hasJSONContentType ) {\n      headers.setContentType('application/json', false);\n      return stringifySafely(data);\n    }\n\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    const transitional = this.transitional || defaults.transitional;\n    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    const JSONRequested = this.responseType === 'json';\n\n    if (data && utils.isString(data) && ((forcedJSONParsing && !this.responseType) || JSONRequested)) {\n      const silentJSONParsing = transitional && transitional.silentJSONParsing;\n      const strictJSONParsing = !silentJSONParsing && JSONRequested;\n\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  env: {\n    FormData: platform.classes.FormData,\n    Blob: platform.classes.Blob\n  },\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*',\n      'Content-Type': undefined\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch'], (method) => {\n  defaults.headers[method] = {};\n});\n\nexport default defaults;\n","'use strict';\n\nimport utils from './../utils.js';\n\n// RawAxiosHeaders whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nconst ignoreDuplicateOf = utils.toObjectSet([\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n]);\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} rawHeaders Headers needing to be parsed\n *\n * @returns {Object} Headers parsed into an object\n */\nexport default rawHeaders => {\n  const parsed = {};\n  let key;\n  let val;\n  let i;\n\n  rawHeaders && rawHeaders.split('\\n').forEach(function parser(line) {\n    i = line.indexOf(':');\n    key = line.substring(0, i).trim().toLowerCase();\n    val = line.substring(i + 1).trim();\n\n    if (!key || (parsed[key] && ignoreDuplicateOf[key])) {\n      return;\n    }\n\n    if (key === 'set-cookie') {\n      if (parsed[key]) {\n        parsed[key].push(val);\n      } else {\n        parsed[key] = [val];\n      }\n    } else {\n      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\n\nconst $internals = Symbol('internals');\n\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\n\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\n\nfunction parseTokens(str) {\n  const tokens = Object.create(null);\n  const tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  let match;\n\n  while ((match = tokensRE.exec(str))) {\n    tokens[match[1]] = match[2];\n  }\n\n  return tokens;\n}\n\nconst isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());\n\nfunction matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n\n  if (isHeaderNameFilter) {\n    value = header;\n  }\n\n  if (!utils.isString(value)) return;\n\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\n\nfunction formatHeader(header) {\n  return header.trim()\n    .toLowerCase().replace(/([a-z\\d])(\\w*)/g, (w, char, str) => {\n      return char.toUpperCase() + str;\n    });\n}\n\nfunction buildAccessors(obj, header) {\n  const accessorName = utils.toCamelCase(' ' + header);\n\n  ['get', 'set', 'has'].forEach(methodName => {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\n\nclass AxiosHeaders {\n  constructor(headers) {\n    headers && this.set(headers);\n  }\n\n  set(header, valueOrRewrite, rewrite) {\n    const self = this;\n\n    function setHeader(_value, _header, _rewrite) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n\n      const key = utils.findKey(self, lHeader);\n\n      if(!key || self[key] === undefined || _rewrite === true || (_rewrite === undefined && self[key] !== false)) {\n        self[key || _header] = normalizeValue(_value);\n      }\n    }\n\n    const setHeaders = (headers, _rewrite) =>\n      utils.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));\n\n    if (utils.isPlainObject(header) || header instanceof this.constructor) {\n      setHeaders(header, valueOrRewrite)\n    } else if(utils.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {\n      setHeaders(parseHeaders(header), valueOrRewrite);\n    } else {\n      header != null && setHeader(valueOrRewrite, header, rewrite);\n    }\n\n    return this;\n  }\n\n  get(header, parser) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      if (key) {\n        const value = this[key];\n\n        if (!parser) {\n          return value;\n        }\n\n        if (parser === true) {\n          return parseTokens(value);\n        }\n\n        if (utils.isFunction(parser)) {\n          return parser.call(this, value, key);\n        }\n\n        if (utils.isRegExp(parser)) {\n          return parser.exec(value);\n        }\n\n        throw new TypeError('parser must be boolean|regexp|function');\n      }\n    }\n  }\n\n  has(header, matcher) {\n    header = normalizeHeader(header);\n\n    if (header) {\n      const key = utils.findKey(this, header);\n\n      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n\n    return false;\n  }\n\n  delete(header, matcher) {\n    const self = this;\n    let deleted = false;\n\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n\n      if (_header) {\n        const key = utils.findKey(self, _header);\n\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n\n          deleted = true;\n        }\n      }\n    }\n\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n\n    return deleted;\n  }\n\n  clear(matcher) {\n    const keys = Object.keys(this);\n    let i = keys.length;\n    let deleted = false;\n\n    while (i--) {\n      const key = keys[i];\n      if(!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {\n        delete this[key];\n        deleted = true;\n      }\n    }\n\n    return deleted;\n  }\n\n  normalize(format) {\n    const self = this;\n    const headers = {};\n\n    utils.forEach(this, (value, header) => {\n      const key = utils.findKey(headers, header);\n\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n\n      const normalized = format ? formatHeader(header) : String(header).trim();\n\n      if (normalized !== header) {\n        delete self[header];\n      }\n\n      self[normalized] = normalizeValue(value);\n\n      headers[normalized] = true;\n    });\n\n    return this;\n  }\n\n  concat(...targets) {\n    return this.constructor.concat(this, ...targets);\n  }\n\n  toJSON(asStrings) {\n    const obj = Object.create(null);\n\n    utils.forEach(this, (value, header) => {\n      value != null && value !== false && (obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value);\n    });\n\n    return obj;\n  }\n\n  [Symbol.iterator]() {\n    return Object.entries(this.toJSON())[Symbol.iterator]();\n  }\n\n  toString() {\n    return Object.entries(this.toJSON()).map(([header, value]) => header + ': ' + value).join('\\n');\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'AxiosHeaders';\n  }\n\n  static from(thing) {\n    return thing instanceof this ? thing : new this(thing);\n  }\n\n  static concat(first, ...targets) {\n    const computed = new this(first);\n\n    targets.forEach((target) => computed.set(target));\n\n    return computed;\n  }\n\n  static accessor(header) {\n    const internals = this[$internals] = (this[$internals] = {\n      accessors: {}\n    });\n\n    const accessors = internals.accessors;\n    const prototype = this.prototype;\n\n    function defineAccessor(_header) {\n      const lHeader = normalizeHeader(_header);\n\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n\n    return this;\n  }\n}\n\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent', 'Authorization']);\n\n// reserved names hotfix\nutils.reduceDescriptors(AxiosHeaders.prototype, ({value}, key) => {\n  let mapped = key[0].toUpperCase() + key.slice(1); // map `set` => `Set`\n  return {\n    get: () => value,\n    set(headerValue) {\n      this[mapped] = headerValue;\n    }\n  }\n});\n\nutils.freezeMethods(AxiosHeaders);\n\nexport default AxiosHeaders;\n","'use strict';\n\nimport utils from './../utils.js';\nimport defaults from '../defaults/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Array|Function} fns A single function or Array of functions\n * @param {?Object} response The response object\n *\n * @returns {*} The resulting transformed data\n */\nexport default function transformData(fns, response) {\n  const config = this || defaults;\n  const context = response || config;\n  const headers = AxiosHeaders.from(context.headers);\n  let data = context.data;\n\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);\n  });\n\n  headers.normalize();\n\n  return data;\n}\n","'use strict';\n\nexport default function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n}\n","'use strict';\n\nimport AxiosError from '../core/AxiosError.js';\nimport utils from '../utils.js';\n\n/**\n * A `CanceledError` is an object that is thrown when an operation is canceled.\n *\n * @param {string=} message The message.\n * @param {Object=} config The config.\n * @param {Object=} request The request.\n *\n * @returns {CanceledError} The created error.\n */\nfunction CanceledError(message, config, request) {\n  // eslint-disable-next-line no-eq-null,eqeqeq\n  AxiosError.call(this, message == null ? 'canceled' : message, AxiosError.ERR_CANCELED, config, request);\n  this.name = 'CanceledError';\n}\n\nutils.inherits(CanceledError, AxiosError, {\n  __CANCEL__: true\n});\n\nexport default CanceledError;\n","'use strict';\n\nimport AxiosError from './AxiosError.js';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n *\n * @returns {object} The response.\n */\nexport default function settle(resolve, reject, response) {\n  const validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(new AxiosError(\n      'Request failed with status code ' + response.status,\n      [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],\n      response.config,\n      response.request,\n      response\n    ));\n  }\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        const cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        const match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n// Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })();\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n *\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nexport default function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(url);\n}\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n *\n * @returns {string} The combined URL\n */\nexport default function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n}\n","'use strict';\n\nimport isAbsoluteURL from '../helpers/isAbsoluteURL.js';\nimport combineURLs from '../helpers/combineURLs.js';\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n *\n * @returns {string} The combined full path\n */\nexport default function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n}\n","'use strict';\n\nimport utils from './../utils.js';\nimport platform from '../platform/index.js';\n\nexport default platform.isStandardBrowserEnv ?\n\n// Standard browser envs have full support of the APIs needed to test\n// whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    const msie = /(msie|trident)/i.test(navigator.userAgent);\n    const urlParsingNode = document.createElement('a');\n    let originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      let href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n          urlParsingNode.pathname :\n          '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      const parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n          parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })();\n","'use strict';\n\nexport default function parseProtocol(url) {\n  const match = /^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(url);\n  return match && match[1] || '';\n}\n","'use strict';\n\n/**\n * Calculate data maxRate\n * @param {Number} [samplesCount= 10]\n * @param {Number} [min= 1000]\n * @returns {Function}\n */\nfunction speedometer(samplesCount, min) {\n  samplesCount = samplesCount || 10;\n  const bytes = new Array(samplesCount);\n  const timestamps = new Array(samplesCount);\n  let head = 0;\n  let tail = 0;\n  let firstSampleTS;\n\n  min = min !== undefined ? min : 1000;\n\n  return function push(chunkLength) {\n    const now = Date.now();\n\n    const startedAt = timestamps[tail];\n\n    if (!firstSampleTS) {\n      firstSampleTS = now;\n    }\n\n    bytes[head] = chunkLength;\n    timestamps[head] = now;\n\n    let i = tail;\n    let bytesCount = 0;\n\n    while (i !== head) {\n      bytesCount += bytes[i++];\n      i = i % samplesCount;\n    }\n\n    head = (head + 1) % samplesCount;\n\n    if (head === tail) {\n      tail = (tail + 1) % samplesCount;\n    }\n\n    if (now - firstSampleTS < min) {\n      return;\n    }\n\n    const passed = startedAt && now - startedAt;\n\n    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;\n  };\n}\n\nexport default speedometer;\n","'use strict';\n\nimport utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport cookies from './../helpers/cookies.js';\nimport buildURL from './../helpers/buildURL.js';\nimport buildFullPath from '../core/buildFullPath.js';\nimport isURLSameOrigin from './../helpers/isURLSameOrigin.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport speedometer from '../helpers/speedometer.js';\n\nfunction progressEventReducer(listener, isDownloadStream) {\n  let bytesNotified = 0;\n  const _speedometer = speedometer(50, 250);\n\n  return e => {\n    const loaded = e.loaded;\n    const total = e.lengthComputable ? e.total : undefined;\n    const progressBytes = loaded - bytesNotified;\n    const rate = _speedometer(progressBytes);\n    const inRange = loaded <= total;\n\n    bytesNotified = loaded;\n\n    const data = {\n      loaded,\n      total,\n      progress: total ? (loaded / total) : undefined,\n      bytes: progressBytes,\n      rate: rate ? rate : undefined,\n      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,\n      event: e\n    };\n\n    data[isDownloadStream ? 'download' : 'upload'] = true;\n\n    listener(data);\n  };\n}\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    let requestData = config.data;\n    const requestHeaders = AxiosHeaders.from(config.headers).normalize();\n    const responseType = config.responseType;\n    let onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    let contentType;\n\n    if (utils.isFormData(requestData)) {\n      if (platform.isStandardBrowserEnv || platform.isStandardBrowserWebWorkerEnv) {\n        requestHeaders.setContentType(false); // Let the browser set it\n      } else if(!requestHeaders.getContentType(/^\\s*multipart\\/form-data/)){\n        requestHeaders.setContentType('multipart/form-data'); // mobile/desktop app frameworks\n      } else if(utils.isString(contentType = requestHeaders.getContentType())){\n        // fix semicolon duplication issue for ReactNative FormData implementation\n        requestHeaders.setContentType(contentType.replace(/^\\s*(multipart\\/form-data);+/, '$1'))\n      }\n    }\n\n    let request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      const username = config.auth.username || '';\n      const password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));\n    }\n\n    const fullPath = buildFullPath(config.baseURL, config.url);\n\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = config.transitional || transitionalDefaults;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (platform.isStandardBrowserEnv) {\n      // Add xsrf header\n      // regarding CVE-2023-45857 config.withCredentials condition was removed temporarily\n      const xsrfValue = isURLSameOrigin(fullPath) && config.xsrfCookieName && cookies.read(config.xsrfCookieName);\n\n      if (xsrfValue) {\n        requestHeaders.set(config.xsrfHeaderName, xsrfValue);\n      }\n    }\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(fullPath);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n","import utils from '../utils.js';\nimport httpAdapter from './http.js';\nimport xhrAdapter from './xhr.js';\nimport AxiosError from \"../core/AxiosError.js\";\n\nconst knownAdapters = {\n  http: httpAdapter,\n  xhr: xhrAdapter\n}\n\nutils.forEach(knownAdapters, (fn, value) => {\n  if (fn) {\n    try {\n      Object.defineProperty(fn, 'name', {value});\n    } catch (e) {\n      // eslint-disable-next-line no-empty\n    }\n    Object.defineProperty(fn, 'adapterName', {value});\n  }\n});\n\nconst renderReason = (reason) => `- ${reason}`;\n\nconst isResolvedHandle = (adapter) => utils.isFunction(adapter) || adapter === null || adapter === false;\n\nexport default {\n  getAdapter: (adapters) => {\n    adapters = utils.isArray(adapters) ? adapters : [adapters];\n\n    const {length} = adapters;\n    let nameOrAdapter;\n    let adapter;\n\n    const rejectedReasons = {};\n\n    for (let i = 0; i < length; i++) {\n      nameOrAdapter = adapters[i];\n      let id;\n\n      adapter = nameOrAdapter;\n\n      if (!isResolvedHandle(nameOrAdapter)) {\n        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];\n\n        if (adapter === undefined) {\n          throw new AxiosError(`Unknown adapter '${id}'`);\n        }\n      }\n\n      if (adapter) {\n        break;\n      }\n\n      rejectedReasons[id || '#' + i] = adapter;\n    }\n\n    if (!adapter) {\n\n      const reasons = Object.entries(rejectedReasons)\n        .map(([id, state]) => `adapter ${id} ` +\n          (state === false ? 'is not supported by the environment' : 'is not available in the build')\n        );\n\n      let s = length ?\n        (reasons.length > 1 ? 'since :\\n' + reasons.map(renderReason).join('\\n') : ' ' + renderReason(reasons[0])) :\n        'as no adapter specified';\n\n      throw new AxiosError(\n        `There is no suitable adapter to dispatch the request ` + s,\n        'ERR_NOT_SUPPORT'\n      );\n    }\n\n    return adapter;\n  },\n  adapters: knownAdapters\n}\n","'use strict';\n\nimport transformData from './transformData.js';\nimport isCancel from '../cancel/isCancel.js';\nimport defaults from '../defaults/index.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport adapters from \"../adapters/adapters.js\";\n\n/**\n * Throws a `CanceledError` if cancellation has been requested.\n *\n * @param {Object} config The config that is to be used for the request\n *\n * @returns {void}\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new CanceledError(null, config);\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n *\n * @returns {Promise} The Promise to be fulfilled\n */\nexport default function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  config.headers = AxiosHeaders.from(config.headers);\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.transformRequest\n  );\n\n  if (['post', 'put', 'patch'].indexOf(config.method) !== -1) {\n    config.headers.setContentType('application/x-www-form-urlencoded', false);\n  }\n\n  const adapter = adapters.getAdapter(config.adapter || defaults.adapter);\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      config.transformResponse,\n      response\n    );\n\n    response.headers = AxiosHeaders.from(response.headers);\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          config.transformResponse,\n          reason.response\n        );\n        reason.response.headers = AxiosHeaders.from(reason.response.headers);\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n}\n","'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n","export const VERSION = \"1.6.0\";","'use strict';\n\nimport {VERSION} from '../env/data.js';\nimport AxiosError from '../core/AxiosError.js';\n\nconst validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach((type, i) => {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nconst deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n *\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n *\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return (value, opt, opts) => {\n    if (validator === false) {\n      throw new AxiosError(\n        formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')),\n        AxiosError.ERR_DEPRECATED\n      );\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n *\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n *\n * @returns {object}\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new AxiosError('options must be an object', AxiosError.ERR_BAD_OPTION_VALUE);\n  }\n  const keys = Object.keys(options);\n  let i = keys.length;\n  while (i-- > 0) {\n    const opt = keys[i];\n    const validator = schema[opt];\n    if (validator) {\n      const value = options[opt];\n      const result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new AxiosError('option ' + opt + ' must be ' + result, AxiosError.ERR_BAD_OPTION_VALUE);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw new AxiosError('Unknown option ' + opt, AxiosError.ERR_BAD_OPTION);\n    }\n  }\n}\n\nexport default {\n  assertOptions,\n  validators\n};\n","'use strict';\n\nimport utils from './../utils.js';\nimport buildURL from '../helpers/buildURL.js';\nimport InterceptorManager from './InterceptorManager.js';\nimport dispatchRequest from './dispatchRequest.js';\nimport mergeConfig from './mergeConfig.js';\nimport buildFullPath from './buildFullPath.js';\nimport validator from '../helpers/validator.js';\nimport AxiosHeaders from './AxiosHeaders.js';\n\nconst validators = validator.validators;\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n *\n * @return {Axios} A new instance of Axios\n */\nclass Axios {\n  constructor(instanceConfig) {\n    this.defaults = instanceConfig;\n    this.interceptors = {\n      request: new InterceptorManager(),\n      response: new InterceptorManager()\n    };\n  }\n\n  /**\n   * Dispatch a request\n   *\n   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)\n   * @param {?Object} config\n   *\n   * @returns {Promise} The Promise to be fulfilled\n   */\n  request(configOrUrl, config) {\n    /*eslint no-param-reassign:0*/\n    // Allow for axios('example/url'[, config]) a la fetch API\n    if (typeof configOrUrl === 'string') {\n      config = config || {};\n      config.url = configOrUrl;\n    } else {\n      config = configOrUrl || {};\n    }\n\n    config = mergeConfig(this.defaults, config);\n\n    const {transitional, paramsSerializer, headers} = config;\n\n    if (transitional !== undefined) {\n      validator.assertOptions(transitional, {\n        silentJSONParsing: validators.transitional(validators.boolean),\n        forcedJSONParsing: validators.transitional(validators.boolean),\n        clarifyTimeoutError: validators.transitional(validators.boolean)\n      }, false);\n    }\n\n    if (paramsSerializer != null) {\n      if (utils.isFunction(paramsSerializer)) {\n        config.paramsSerializer = {\n          serialize: paramsSerializer\n        }\n      } else {\n        validator.assertOptions(paramsSerializer, {\n          encode: validators.function,\n          serialize: validators.function\n        }, true);\n      }\n    }\n\n    // Set config.method\n    config.method = (config.method || this.defaults.method || 'get').toLowerCase();\n\n    // Flatten headers\n    let contextHeaders = headers && utils.merge(\n      headers.common,\n      headers[config.method]\n    );\n\n    headers && utils.forEach(\n      ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n      (method) => {\n        delete headers[method];\n      }\n    );\n\n    config.headers = AxiosHeaders.concat(contextHeaders, headers);\n\n    // filter out skipped interceptors\n    const requestInterceptorChain = [];\n    let synchronousRequestInterceptors = true;\n    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n        return;\n      }\n\n      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    const responseInterceptorChain = [];\n    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n    });\n\n    let promise;\n    let i = 0;\n    let len;\n\n    if (!synchronousRequestInterceptors) {\n      const chain = [dispatchRequest.bind(this), undefined];\n      chain.unshift.apply(chain, requestInterceptorChain);\n      chain.push.apply(chain, responseInterceptorChain);\n      len = chain.length;\n\n      promise = Promise.resolve(config);\n\n      while (i < len) {\n        promise = promise.then(chain[i++], chain[i++]);\n      }\n\n      return promise;\n    }\n\n    len = requestInterceptorChain.length;\n\n    let newConfig = config;\n\n    i = 0;\n\n    while (i < len) {\n      const onFulfilled = requestInterceptorChain[i++];\n      const onRejected = requestInterceptorChain[i++];\n      try {\n        newConfig = onFulfilled(newConfig);\n      } catch (error) {\n        onRejected.call(this, error);\n        break;\n      }\n    }\n\n    try {\n      promise = dispatchRequest.call(this, newConfig);\n    } catch (error) {\n      return Promise.reject(error);\n    }\n\n    i = 0;\n    len = responseInterceptorChain.length;\n\n    while (i < len) {\n      promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);\n    }\n\n    return promise;\n  }\n\n  getUri(config) {\n    config = mergeConfig(this.defaults, config);\n    const fullPath = buildFullPath(config.baseURL, config.url);\n    return buildURL(fullPath, config.params, config.paramsSerializer);\n  }\n}\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method,\n      url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n\n  function generateHTTPMethod(isForm) {\n    return function httpMethod(url, data, config) {\n      return this.request(mergeConfig(config || {}, {\n        method,\n        headers: isForm ? {\n          'Content-Type': 'multipart/form-data'\n        } : {},\n        url,\n        data\n      }));\n    };\n  }\n\n  Axios.prototype[method] = generateHTTPMethod();\n\n  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);\n});\n\nexport default Axios;\n","'use strict';\n\nimport CanceledError from './CanceledError.js';\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @param {Function} executor The executor function.\n *\n * @returns {CancelToken}\n */\nclass CancelToken {\n  constructor(executor) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.');\n    }\n\n    let resolvePromise;\n\n    this.promise = new Promise(function promiseExecutor(resolve) {\n      resolvePromise = resolve;\n    });\n\n    const token = this;\n\n    // eslint-disable-next-line func-names\n    this.promise.then(cancel => {\n      if (!token._listeners) return;\n\n      let i = token._listeners.length;\n\n      while (i-- > 0) {\n        token._listeners[i](cancel);\n      }\n      token._listeners = null;\n    });\n\n    // eslint-disable-next-line func-names\n    this.promise.then = onfulfilled => {\n      let _resolve;\n      // eslint-disable-next-line func-names\n      const promise = new Promise(resolve => {\n        token.subscribe(resolve);\n        _resolve = resolve;\n      }).then(onfulfilled);\n\n      promise.cancel = function reject() {\n        token.unsubscribe(_resolve);\n      };\n\n      return promise;\n    };\n\n    executor(function cancel(message, config, request) {\n      if (token.reason) {\n        // Cancellation has already been requested\n        return;\n      }\n\n      token.reason = new CanceledError(message, config, request);\n      resolvePromise(token.reason);\n    });\n  }\n\n  /**\n   * Throws a `CanceledError` if cancellation has been requested.\n   */\n  throwIfRequested() {\n    if (this.reason) {\n      throw this.reason;\n    }\n  }\n\n  /**\n   * Subscribe to the cancel signal\n   */\n\n  subscribe(listener) {\n    if (this.reason) {\n      listener(this.reason);\n      return;\n    }\n\n    if (this._listeners) {\n      this._listeners.push(listener);\n    } else {\n      this._listeners = [listener];\n    }\n  }\n\n  /**\n   * Unsubscribe from the cancel signal\n   */\n\n  unsubscribe(listener) {\n    if (!this._listeners) {\n      return;\n    }\n    const index = this._listeners.indexOf(listener);\n    if (index !== -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Returns an object that contains a new `CancelToken` and a function that, when called,\n   * cancels the `CancelToken`.\n   */\n  static source() {\n    let cancel;\n    const token = new CancelToken(function executor(c) {\n      cancel = c;\n    });\n    return {\n      token,\n      cancel\n    };\n  }\n}\n\nexport default CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\nexport default function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n","'use strict';\n\nimport utils from './../utils.js';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n *\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nexport default function isAxiosError(payload) {\n  return utils.isObject(payload) && (payload.isAxiosError === true);\n}\n","const HttpStatusCode = {\n  Continue: 100,\n  SwitchingProtocols: 101,\n  Processing: 102,\n  EarlyHints: 103,\n  Ok: 200,\n  Created: 201,\n  Accepted: 202,\n  NonAuthoritativeInformation: 203,\n  NoContent: 204,\n  ResetContent: 205,\n  PartialContent: 206,\n  MultiStatus: 207,\n  AlreadyReported: 208,\n  ImUsed: 226,\n  MultipleChoices: 300,\n  MovedPermanently: 301,\n  Found: 302,\n  SeeOther: 303,\n  NotModified: 304,\n  UseProxy: 305,\n  Unused: 306,\n  TemporaryRedirect: 307,\n  PermanentRedirect: 308,\n  BadRequest: 400,\n  Unauthorized: 401,\n  PaymentRequired: 402,\n  Forbidden: 403,\n  NotFound: 404,\n  MethodNotAllowed: 405,\n  NotAcceptable: 406,\n  ProxyAuthenticationRequired: 407,\n  RequestTimeout: 408,\n  Conflict: 409,\n  Gone: 410,\n  LengthRequired: 411,\n  PreconditionFailed: 412,\n  PayloadTooLarge: 413,\n  UriTooLong: 414,\n  UnsupportedMediaType: 415,\n  RangeNotSatisfiable: 416,\n  ExpectationFailed: 417,\n  ImATeapot: 418,\n  MisdirectedRequest: 421,\n  UnprocessableEntity: 422,\n  Locked: 423,\n  FailedDependency: 424,\n  TooEarly: 425,\n  UpgradeRequired: 426,\n  PreconditionRequired: 428,\n  TooManyRequests: 429,\n  RequestHeaderFieldsTooLarge: 431,\n  UnavailableForLegalReasons: 451,\n  InternalServerError: 500,\n  NotImplemented: 501,\n  BadGateway: 502,\n  ServiceUnavailable: 503,\n  GatewayTimeout: 504,\n  HttpVersionNotSupported: 505,\n  VariantAlsoNegotiates: 506,\n  InsufficientStorage: 507,\n  LoopDetected: 508,\n  NotExtended: 510,\n  NetworkAuthenticationRequired: 511,\n};\n\nObject.entries(HttpStatusCode).forEach(([key, value]) => {\n  HttpStatusCode[value] = key;\n});\n\nexport default HttpStatusCode;\n","'use strict';\n\nimport utils from './utils.js';\nimport bind from './helpers/bind.js';\nimport Axios from './core/Axios.js';\nimport mergeConfig from './core/mergeConfig.js';\nimport defaults from './defaults/index.js';\nimport formDataToJSON from './helpers/formDataToJSON.js';\nimport CanceledError from './cancel/CanceledError.js';\nimport CancelToken from './cancel/CancelToken.js';\nimport isCancel from './cancel/isCancel.js';\nimport {VERSION} from './env/data.js';\nimport toFormData from './helpers/toFormData.js';\nimport AxiosError from './core/AxiosError.js';\nimport spread from './helpers/spread.js';\nimport isAxiosError from './helpers/isAxiosError.js';\nimport AxiosHeaders from \"./core/AxiosHeaders.js\";\nimport adapters from './adapters/adapters.js';\nimport HttpStatusCode from './helpers/HttpStatusCode.js';\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n *\n * @returns {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  const context = new Axios(defaultConfig);\n  const instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context, {allOwnKeys: true});\n\n  // Copy context to instance\n  utils.extend(instance, context, null, {allOwnKeys: true});\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nconst axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.CanceledError = CanceledError;\naxios.CancelToken = CancelToken;\naxios.isCancel = isCancel;\naxios.VERSION = VERSION;\naxios.toFormData = toFormData;\n\n// Expose AxiosError class\naxios.AxiosError = AxiosError;\n\n// alias for CanceledError for backward compatibility\naxios.Cancel = axios.CanceledError;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\n\naxios.spread = spread;\n\n// Expose isAxiosError\naxios.isAxiosError = isAxiosError;\n\n// Expose mergeConfig\naxios.mergeConfig = mergeConfig;\n\naxios.AxiosHeaders = AxiosHeaders;\n\naxios.formToJSON = thing => formDataToJSON(utils.isHTMLForm(thing) ? new FormData(thing) : thing);\n\naxios.getAdapter = adapters.getAdapter;\n\naxios.HttpStatusCode = HttpStatusCode;\n\naxios.default = axios;\n\n// this module should only have a default export\nexport default axios\n","import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport type { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport axios from 'axios';\nimport https from 'https';\nimport type WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { CheckSignature, DevToken, JWTUserToken } from './signing';\nimport { TokenManager } from './token_manager';\nimport { WSConnectionFallback } from './connection_fallback';\nimport { Campaign } from './campaign';\nimport { Segment } from './segment';\nimport { isErrorResponse, isWSFailure } from './errors';\nimport {\n  addFileToFormData,\n  axiosParamsSerializer,\n  chatCodes,\n  generateChannelTempCid,\n  isFunction,\n  isOnline,\n  isOwnUserBaseProperty,\n  messageSetPagination,\n  normalizeQuerySort,\n  randomId,\n  retryInterval,\n  sleep,\n  toUpdatedMessagePayload,\n} from './utils';\n\nimport type {\n  APIErrorResponse,\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BaseDeviceFields,\n  BlockList,\n  BlockListResponse,\n  BlockUserAPIResponse,\n  CampaignData,\n  CampaignFilters,\n  CampaignQueryOptions,\n  CampaignResponse,\n  CampaignSort,\n  CastVoteAPIResponse,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelResponse,\n  ChannelSort,\n  ChannelStateOptions,\n  CheckPushResponse,\n  CheckSNSResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CreateImportOptions,\n  CreateImportResponse,\n  CreateImportURLResponse,\n  CreatePollAPIResponse,\n  CreatePollData,\n  CreatePollOptionAPIResponse,\n  CreateReminderOptions,\n  CustomPermissionOptions,\n  DeactivateUsersOptions,\n  DeleteChannelsResponse,\n  DeleteCommandResponse,\n  DeleteUserOptions,\n  Device,\n  DeviceIdentifier,\n  DraftFilters,\n  DraftSort,\n  EndpointName,\n  Event,\n  EventHandler,\n  ExportChannelOptions,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  ExportUsersRequest,\n  ExportUsersResponse,\n  FlagMessageResponse,\n  FlagReportsFilters,\n  FlagReportsPaginationOptions,\n  FlagReportsResponse,\n  FlagsFilters,\n  FlagsPaginationOptions,\n  FlagsResponse,\n  FlagUserResponse,\n  GetBlockedUsersAPIResponse,\n  GetCampaignOptions,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetImportResponse,\n  GetMessageAPIResponse,\n  GetMessageOptions,\n  GetPollAPIResponse,\n  GetPollOptionAPIResponse,\n  GetRateLimitsResponse,\n  GetThreadAPIResponse,\n  GetThreadOptions,\n  GetUnreadCountAPIResponse,\n  GetUnreadCountBatchAPIResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  ListImportsPaginationOptions,\n  ListImportsResponse,\n  LocalMessage,\n  Logger,\n  MarkChannelsReadOptions,\n  MessageFilters,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  NewMemberPayload,\n  OGAttachment,\n  OwnUserResponse,\n  Pager,\n  PartialMessageUpdate,\n  PartialPollUpdate,\n  PartialThreadUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  PollAnswersAPIResponse,\n  PollData,\n  PollOptionData,\n  PollSort,\n  PollVote,\n  PollVoteData,\n  PollVotesAPIResponse,\n  PushPreference,\n  PushProvider,\n  PushProviderConfig,\n  PushProviderID,\n  PushProviderListResponse,\n  PushProviderUpsertResponse,\n  QueryChannelsAPIResponse,\n  QueryDraftsResponse,\n  QueryMessageHistoryFilters,\n  QueryMessageHistoryOptions,\n  QueryMessageHistoryResponse,\n  QueryMessageHistorySort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n  QueryPollsResponse,\n  QueryReactionsAPIResponse,\n  QueryReactionsOptions,\n  QueryRemindersOptions,\n  QueryRemindersResponse,\n  QuerySegmentsOptions,\n  QuerySegmentTargetsFilter,\n  QueryThreadsAPIResponse,\n  QueryThreadsOptions,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  ReactionFilters,\n  ReactionResponse,\n  ReactionSort,\n  ReactivateUserOptions,\n  ReactivateUsersOptions,\n  ReminderAPIResponse,\n  ReviewFlagReportOptions,\n  ReviewFlagReportResponse,\n  SdkIdentifier,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SegmentData,\n  SegmentResponse,\n  SegmentTargetsResponse,\n  SegmentType,\n  SendFileAPIResponse,\n  SortParam,\n  StreamChatOptions,\n  SyncOptions,\n  SyncResponse,\n  TaskResponse,\n  TaskStatus,\n  TestPushDataInput,\n  TestSNSDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  TranslateResponse,\n  UnBanUserOptions,\n  UpdateChannelTypeRequest,\n  UpdateChannelTypeResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdateMessageAPIResponse,\n  UpdateMessageOptions,\n  UpdatePollAPIResponse,\n  UpdatePollOptionAPIResponse,\n  UpdateReminderOptions,\n  UpdateSegmentData,\n  UpsertPushPreferencesResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n  VoteSort,\n} from './types';\nimport { ErrorFromResponse } from './types';\nimport { InsightMetrics, postInsights } from './insights';\nimport { Thread } from './thread';\nimport { Moderation } from './moderation';\nimport { ThreadManager } from './thread_manager';\nimport { DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE } from './constants';\nimport { PollManager } from './poll_manager';\nimport type {\n  ChannelManagerEventHandlerOverrides,\n  ChannelManagerOptions,\n} from './channel_manager';\nimport { ChannelManager } from './channel_manager';\nimport { NotificationManager } from './notifications';\nimport { ReminderManager } from './reminders';\nimport { StateStore } from './store';\nimport type { MessageComposer } from './messageComposer';\nimport type { AbstractOfflineDB } from './offline-support';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\ntype MessageComposerTearDownFunction = () => void;\n\ntype MessageComposerSetupFunction = ({\n  composer,\n}: {\n  composer: MessageComposer;\n}) => void | MessageComposerTearDownFunction;\n\nexport type MessageComposerSetupState = {\n  /**\n   * Each `MessageComposer` runs this function each time its signature changes or\n   * whenever you run `MessageComposer.registerSubscriptions`. Function returned\n   * from `applyModifications` will be used as a cleanup function - it will be stored\n   * and ran before new modification is applied. Cleaning up only the\n   * modified parts is the general way to go but if your setup gets a bit\n   * complicated, feel free to restore the whole composer with `MessageComposer.restore`.\n   */\n  setupFunction: MessageComposerSetupFunction | null;\n};\n\nexport class StreamChat {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse | UserResponse;\n  appSettingsPromise?: Promise<AppSettingsAPIResponse>;\n  activeChannels: {\n    [key: string]: Channel;\n  };\n  threads: ThreadManager;\n  polls: PollManager;\n  offlineDb?: AbstractOfflineDB;\n  notifications: NotificationManager;\n  reminders: ReminderManager;\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs;\n  key: string;\n  listeners: Record<string, Array<(event: Event) => void>>;\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  moderation: Moderation;\n  mutedChannels: ChannelMute[];\n  mutedUsers: Mute[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse | null;\n  state: ClientState;\n  tokenManager: TokenManager;\n  user?: OwnUserResponse | UserResponse;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection | null;\n  wsFallback?: WSConnectionFallback;\n  wsPromise: ConnectAPIResponse | null;\n  consecutiveFailures: number;\n  insightMetrics: InsightMetrics;\n  defaultWSTimeoutWithFallback: number;\n  defaultWSTimeout: number;\n  sdkIdentifier?: SdkIdentifier;\n  deviceIdentifier?: DeviceIdentifier;\n  private nextRequestAbortController: AbortController | null = null;\n  /**\n   * @private\n   */\n  _messageComposerSetupState = new StateStore<MessageComposerSetupState>({\n    setupFunction: null,\n  });\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState({ client: this });\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    this.moderation = new Moderation(this);\n\n    this.notifications = options?.notifications ?? new NotificationManager();\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : secretOrOptions && !isString(secretOrOptions)\n        ? secretOrOptions\n        : {};\n\n    this.browser =\n      typeof inputOptions.browser !== 'undefined'\n        ? inputOptions.browser\n        : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      disableCache: false,\n      wsUrlParams: new URLSearchParams({}),\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');\n\n    if (\n      typeof process !== 'undefined' &&\n      'env' in process &&\n      process.env.STREAM_LOCAL_TEST_RUN\n    ) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (\n      typeof process !== 'undefined' &&\n      'env' in process &&\n      process.env.STREAM_LOCAL_TEST_HOST\n    ) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n\n    this.defaultWSTimeoutWithFallback = 6 * 1000;\n    this.defaultWSTimeout = 15 * 1000;\n\n    this.axiosInstance.defaults.paramsSerializer = axiosParamsSerializer;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     *    logger = (logLevel, message, extraData) => {\n     *      console.log(message);\n     *    }\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     *    tags: ['api', 'api_request', 'client'],\n     *    url: string,\n     *    payload: object,\n     *    config: object\n     * }\n     * 2. {\n     *    tags: ['api', 'api_response', 'client'],\n     *    url: string,\n     *    response: object\n     * }\n     * 3. {\n     *    tags: ['api', 'api_response', 'client'],\n     *    url: string,\n     *    error: object\n     * }\n     * 4. {\n     *    tags: ['event', 'client'],\n     *    event: object\n     * }\n     * 5. {\n     *    tags: ['channel'],\n     *    channel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n    this.threads = new ThreadManager({ client: this });\n    this.polls = new PollManager({ client: this });\n    this.reminders = new ReminderManager({ client: this });\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance(key: string, options?: StreamChatOptions): StreamChat;\n  public static getInstance(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat;\n  public static getInstance(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat;\n  }\n\n  setOfflineDBApi(offlineDBInstance: AbstractOfflineDB) {\n    if (this.offlineDb) {\n      return;\n    }\n\n    this.offlineDb = offlineDBInstance;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _getConnectionID = () =>\n    this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  public setMessageComposerSetupFunction = (\n    setupFunction: MessageComposerSetupState['setupFunction'],\n  ) => {\n    this._messageComposerSetupState.partialNext({ setupFunction });\n  };\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse | UserResponse} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: OwnUserResponse | UserResponse,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        this.closeConnection();\n      } else {\n        this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse | UserResponse} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(user: OwnUserResponse | UserResponse) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    await Promise.all([\n      this.wsConnection?.disconnect(timeout),\n      this.wsFallback?.disconnect(timeout),\n    ]);\n\n    this.offlineDb?.executeQuerySafely(\n      async (db) => {\n        if (this.userID) {\n          await db.upsertUserSyncStatus({\n            userId: this.userID,\n            lastSyncedAt: new Date().toString(),\n          });\n        }\n      },\n      { method: 'upsertUserSyncStatus' },\n    );\n\n    return Promise.resolve();\n  };\n\n  /**\n   * Creates an instance of ChannelManager.\n   *\n   * @internal\n   *\n   * @param eventHandlerOverrides - the overrides for event handlers to be used\n   * @param options - the options used for the channel manager\n   */\n  createChannelManager = ({\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides;\n    options?: ChannelManagerOptions;\n  }) => new ChannelManager({ client: this, eventHandlerOverrides, options });\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = () => {\n    if (!this.userID) {\n      throw Error(\n        'User is not set on client, use client.connectUser or client.connectAnonymousUser instead',\n      );\n    }\n\n    if (this.wsConnection?.isConnecting && this.wsPromise) {\n      this.logger('info', 'client:openConnection() - connection already in progress', {\n        tags: ['connection', 'client'],\n      });\n      return this.wsPromise;\n    }\n\n    if (\n      (this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) &&\n      this._hasConnectionID()\n    ) {\n      this.logger(\n        'info',\n        'client:openConnection() - openConnection called twice, healthy connection already exists',\n        {\n          tags: ['connection', 'client'],\n        },\n      );\n\n      return;\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n   * updateAppSettings - updates application settings\n   *\n   * @param {AppSettings} options App settings.\n   * IE: {\n      'apn_config': {\n        'auth_type': 'token',\n        'auth_key\": fs.readFileSync(\n          './apn-push-auth-key.p8',\n          'utf-8',\n        ),\n        'key_id': 'keyid',\n        'team_id': 'teamid',\n        'notification_template\": 'notification handlebars template',\n        'bundle_id': 'com.apple.your.app',\n        'development': true\n      },\n      'firebase_config': {\n        'server_key': 'server key from fcm',\n        'notification_template': 'notification handlebars template',\n        'data_template': 'data handlebars template',\n        'apn_template': 'apn notification handlebars template under v2'\n      },\n      'webhook_url': 'https://acme.com/my/awesome/webhook/',\n      'event_hooks': [\n        {\n          'hook_type': 'webhook',\n          'enabled': true,\n          'event_types': ['message.new'],\n          'webhook_url': 'https://acme.com/my/awesome/webhook/'\n        },\n        {\n          'hook_type': 'sqs',\n          'enabled': true,\n          'event_types': ['message.new'],\n          'sqs_url': 'https://sqs.us-east-1.amazonaws.com/1234567890/my-queue',\n          'sqs_auth_type': 'key',\n          'sqs_key': 'my-access-key',\n          'sqs_secret': 'my-secret-key'\n        }\n      ]\n    }\n   */\n  async updateAppSettings(options: AppSettings) {\n    const apn_config = options.apn_config;\n    if (apn_config?.p12_cert) {\n      options = {\n        ...options,\n        apn_config: {\n          ...apn_config,\n          p12_cert: Buffer.from(apn_config.p12_cert).toString('base64'),\n        },\n      };\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\n        \"Don't pass blank string for since, use null instead if resetting the token revoke\",\n      );\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    this.appSettingsPromise = this.get<AppSettingsAPIResponse>(this.baseURL + '/app');\n    return await this.appSettingsPromise;\n  }\n\n  /**\n   * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   *  IE: {\n   messageID: 'id-of-message', // will error if message does not exist\n   apnTemplate: '{}', // if app doesn't have apn configured it will error\n   firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n   firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n   skipDevices: true, // skip config/device checks and sending to real devices\n   pushProviderName: 'staging' // one of your configured push providers\n   pushProviderType: 'apn' // one of supported provider types\n   }\n   */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate\n        ? { firebase_data_template: data.firebaseDataTemplate }\n        : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n      ...(data.pushProviderName ? { push_provider_name: data.pushProviderName } : {}),\n      ...(data.pushProviderType ? { push_provider_type: data.pushProviderType } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n   *  IE: {\n   sqs_key: 'auth_key',\n   sqs_secret: 'auth_secret',\n   sqs_url: 'url_to_queue',\n   }\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * testSNSSettings - Tests that the given or configured SNS configuration is valid\n   *\n   * @param {TestSNSDataInput} [data] Overrides SNS settings for testing if needed\n   *  IE: {\n   sns_key: 'auth_key',\n   sns_secret: 'auth_secret',\n   sns_topic_arn: 'topic_to_publish_to',\n   }\n   */\n  async testSNSSettings(data: TestSNSDataInput = {}) {\n    return await this.post<CheckSNSResponse>(this.baseURL + '/check_sns', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState({ client: this });\n    // reset thread manager\n    this.threads.resetState();\n    // reset token manager\n    setTimeout(this.tokenManager.reset); // delay reseting to use token for disconnect calls\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse) {\n    let response: { access_token: string; user: UserResponse } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & {\n          access_token: string;\n          user: UserResponse;\n        }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(guestUser as UserResponse, response.access_token);\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in.\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(callback: EventHandler): { unsubscribe: () => void };\n  on(eventType: string, callback: EventHandler): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler | string,\n    callbackOrNothing?: EventHandler,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(callback: EventHandler): void;\n  off(eventType: string, callback: EventHandler): void;\n  off(callbackOrString: EventHandler | string, callbackOrNothing?: EventHandler) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing\n      ? callbackOrNothing\n      : (callbackOrString as EventHandler);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger(\n      'info',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        tags: ['api', 'api_response', 'client'],\n        url,\n        response,\n      },\n    );\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'postForm':\n          response = await this.axiosInstance.postForm(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        /** connection_fallback depends on this token expiration logic */\n        if (\n          e.response.data.code === chatCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse,\n  ) {\n    const data = addFileToFormData(uri, name, contentType || 'multipart/form-data');\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('postForm', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse(response: AxiosResponse<APIErrorResponse>) {\n    const message =\n      typeof response.data.code !== 'undefined'\n        ? `StreamChat error code ${response.data.code}: ${response.data.message}`\n        : `StreamChat error HTTP code: ${response.status}`;\n\n    return new ErrorFromResponse<APIErrorResponse>(message, {\n      code: response.data.code ?? null,\n      response,\n      status: response.status,\n    });\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (event: Event) => {\n    if (!event.received_at) event.received_at = new Date();\n\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n\n    this.offlineDb?.executeQuerySafely((db) => db.handleEvent({ event }), {\n      method: `handleEvent;${event.type}`,\n    });\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event;\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members, watchers and read references of the currently active channels that contain this user\n   *\n   * @param {UserResponse} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n        if (channel.state.read[user.id]) {\n          channel.state.read[user.id].user = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse} user\n   */\n  _updateUserMessageReferences = (user: UserResponse) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n\n      if (!channel) continue;\n\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      if (channel) {\n        const state = channel.state;\n\n        /** deleted the messages from this user. */\n        state?.deleteUserMessages(user, hardDelete);\n      }\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (event: Event) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...this.user } as NonNullable<StreamChat['user']>;\n        const _user = { ...this._user } as NonNullable<StreamChat['_user']>;\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          const deleteKey = key as keyof typeof user;\n\n          delete user[deleteKey];\n          delete _user[deleteKey];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in _user) {\n          const updateKey = key as keyof typeof _user;\n\n          if (updateKey in event.user) {\n            // @ts-expect-error it has an issue with this, not sure why\n            _user[updateKey] = event.user[updateKey];\n          }\n        }\n\n        this._user = _user;\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (\n      event.type === 'user.deleted' &&\n      event.user.deleted_at &&\n      (event.mark_messages_deleted || event.hard_delete)\n    ) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(event: Event) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger(\n      'info',\n      `client:_handleClientEvent - Received event of type { ${event.type} }`,\n      {\n        tags: ['event', 'client'],\n        event,\n      },\n    );\n\n    if (\n      event.type === 'user.presence.changed' ||\n      event.type === 'user.updated' ||\n      event.type === 'user.deleted'\n    ) {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      const { channel } = event;\n      this._addChannelConfig(channel);\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (event.type === 'notification.mark_read' && event.unread_channels === 0) {\n      const activeChannelKeys = Object.keys(this.activeChannels);\n      activeChannelKeys.forEach(\n        (activeChannelKey) =>\n          (this.activeChannels[activeChannelKey].state.unreadCount = 0),\n      );\n    }\n\n    if (\n      (event.type === 'channel.deleted' ||\n        event.type === 'notification.channel_deleted') &&\n      event.cid\n    ) {\n      const { cid } = event;\n      client.state.deleteAllChannelReference(cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!cid) return;\n\n        delete this.activeChannels[cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires\n            ? new Date(mute.expires).getTime() > new Date().getTime()\n            : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (event: Event) => {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<(event: Event) => void> = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger(\n      'info',\n      `client:recoverState() - Start of recoverState with connectionID ${this._getConnectionID()}`,\n      {\n        tags: ['connection'],\n      },\n    );\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger(\n        'info',\n        `client:recoverState() - Start the querying of ${cids.length} channels`,\n        {\n          tags: ['connection', 'client'],\n        },\n      );\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', {\n        tags: ['connection', 'client'],\n      });\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    if (!this.userID || !this._user) {\n      throw Error(\n        'Call connectUser or connectAnonymousUser before starting the connection',\n      );\n    }\n    if (!this.wsBaseURL) {\n      throw Error('Websocket base url not set');\n    }\n    if (!this.clientID) {\n      throw Error('clientID is not set');\n    }\n\n    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n      this._sayHi();\n    }\n    // The StableWSConnection handles all the reconnection logic.\n    if (this.options.wsConnection && this.node) {\n      // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n      (this.options.wsConnection as unknown as StableWSConnection).setClient(this);\n      this.wsConnection = this.options.wsConnection as unknown as StableWSConnection;\n    } else {\n      this.wsConnection = new StableWSConnection({\n        client: this,\n      });\n    }\n\n    try {\n      // if fallback is used before, continue using it instead of waiting for WS to fail\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n\n      // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n      return await this.wsConnection.connect(\n        this.options.enableWSFallback\n          ? this.defaultWSTimeoutWithFallback\n          : this.defaultWSTimeout,\n      );\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      // run fallback only if it's WS/Network error and not a normal API error\n      // make sure browser is online before even trying the longpoll\n      if (this.options.enableWSFallback && isWSFailure(error) && isOnline()) {\n        this.logger('info', 'client:connect() - WS failed, fallback to longpoll', {\n          tags: ['connection', 'client'],\n        });\n        this.dispatchEvent({ type: 'transport.changed', mode: 'longpoll' });\n\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then(); // close WS so no retry\n        this.wsFallback = new WSConnectionFallback({\n          client: this,\n        });\n        return await this.wsFallback.connect();\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi() {\n    const client_request_id = randomId();\n    const opts = { headers: { 'x-client-request-id': client_request_id } };\n    this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch((e) => {\n      if (this.options.enableInsights) {\n        postInsights('http_hi_failed', {\n          api_key: this.key,\n          err: e,\n          client_request_id,\n        });\n      }\n    });\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters} filterConditions MongoDB style filter conditions\n   * @param {UserSort} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<{ users: Array<UserResponse> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters,\n    sort: UserSort = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<APIResponse & { users: Array<UserResponse> }>(\n      this.baseURL + '/users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...defaultOptions,\n          ...options,\n        },\n      },\n    );\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0, exclude_expired_bans: true}\n   *\n   * @return {Promise<BannedUsersResponse>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse>(this.baseURL + '/query_banned_users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse>} Message Flags Response\n   */\n  async queryMessageFlags(\n    filterConditions: MessageFlagsFilters = {},\n    options: MessageFlagsPaginationOptions = {},\n  ) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse>(\n      this.baseURL + '/moderation/flags/message',\n      {\n        payload: { filter_conditions: filterConditions, ...options },\n      },\n    );\n  }\n\n  /**\n   * queryChannelsRequest - Queries channels and returns the raw response\n   *\n   * @param {ChannelFilters} filterConditions object MongoDB style filters\n   * @param {ChannelSort} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   *\n   * @return {Promise<Array<ChannelAPIResponse>>} search channels response\n   */\n  async queryChannelsRequest(\n    filterConditions: ChannelFilters,\n    sort: ChannelSort = [],\n    options: ChannelOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<QueryChannelsAPIResponse>(\n      this.baseURL + '/channels',\n      payload,\n    );\n\n    return data.channels;\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters} filterConditions object MongoDB style filters\n   * @param {ChannelSort} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   * - stateOptions.skipHydration - Skips returning the channels as instances of the Channel class and rather returns the raw query response.\n   *\n   * @return {Promise<Array<Channel>>} search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters,\n    sort: ChannelSort = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const channels = await this.queryChannelsRequest(filterConditions, sort, options);\n\n    this.dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels,\n        isLatestMessageSet: true,\n      },\n    });\n    if (channels?.length && this.offlineDb?.upsertChannels) {\n      await this.offlineDb.upsertChannels({\n        channels,\n        isLatestMessagesSet: true,\n      });\n    }\n\n    return this.hydrateActiveChannels(channels, stateOptions, options);\n  }\n\n  /**\n   * queryReactions - Query reactions\n   *\n   * @param {ReactionFilters} filter object MongoDB style filters\n   * @param {ReactionSort} [sort] Sort options, for instance {created_at: -1}.\n   * @param {QueryReactionsOptions} [options] Pagination object\n   *\n   * @return {Promise<{ QueryReactionsAPIResponse } search channels response\n   */\n  async queryReactions(\n    messageID: string,\n    filter: ReactionFilters,\n    sort: ReactionSort = [],\n    options: QueryReactionsOptions = {},\n  ) {\n    const payload = {\n      filter,\n      sort: normalizeQuerySort(sort),\n      ...options,\n    };\n\n    if (this.offlineDb?.getReactions && !options.next) {\n      try {\n        const reactionsFromDb = await this.offlineDb.getReactions({\n          messageId: messageID,\n          filters: filter,\n          sort,\n          limit: options.limit,\n        });\n\n        if (reactionsFromDb) {\n          this.dispatchEvent({\n            type: 'offline_reactions.queried',\n            offlineReactions: reactionsFromDb as ReactionResponse[],\n          });\n        }\n      } catch (e) {\n        this.logger('warn', 'An error has occurred while querying offline reactions', {\n          error: e,\n        });\n      }\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    return await this.post<QueryReactionsAPIResponse>(\n      this.baseURL + '/messages/' + encodeURIComponent(messageID) + '/reactions',\n      payload,\n    );\n  }\n\n  hydrateActiveChannels(\n    channelsFromApi: ChannelAPIResponse[] = [],\n    stateOptions: ChannelStateOptions = {},\n    queryChannelsOptions?: ChannelOptions,\n  ) {\n    const { skipInitialization, offlineMode = false } = stateOptions;\n    const channels: Channel[] = [];\n\n    for (const channelState of channelsFromApi) {\n      this._addChannelConfig(channelState.channel);\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.offlineMode = offlineMode;\n      c.initialized = !offlineMode;\n      c.push_preferences = channelState.push_preferences;\n\n      let updatedMessagesSet;\n      if (skipInitialization === undefined) {\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        const { messageSet } = c._initializeState(channelState, 'latest');\n        updatedMessagesSet = messageSet;\n      }\n\n      if (updatedMessagesSet) {\n        updatedMessagesSet.pagination = {\n          ...updatedMessagesSet.pagination,\n          ...messageSetPagination({\n            parentSet: updatedMessagesSet,\n            requestedPageSize:\n              queryChannelsOptions?.message_limit ||\n              DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE,\n            returnedPage: channelState.messages,\n            logger: this.logger,\n          }),\n        };\n        this.polls.hydratePollCache(channelState.messages, true);\n        this.reminders.hydrateState(channelState.messages);\n      }\n\n      c.messageComposer.initStateFromChannelResponse(channelState);\n\n      channels.push(c);\n    }\n\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters | string} query search query or object MongoDB style filters\n   * @param {SearchOptions} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters,\n    query: string | MessageFilters,\n    options: SearchOptions = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    const payload: SearchPayload = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    return await this.get<SearchAPIResponse>(this.baseURL + '/search', { payload });\n  }\n\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider\n   *\n   */\n  setLocalDevice(device: BaseDeviceFields) {\n    if (\n      (this.wsConnection?.isConnecting && this.wsPromise) ||\n      ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) &&\n        this._hasConnectionID())\n    ) {\n      throw new Error('you can only set device before opening a websocket connection');\n    }\n\n    this.options.device = device;\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {PushProvider} push_provider the push provider\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n   *\n   */\n  async addDevice(\n    id: string,\n    push_provider: PushProvider,\n    userID?: string,\n    push_provider_name?: string,\n  ) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {Device[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * getUnreadCount - Returns unread counts for a single user\n   *\n   * @param {string} [userID] User ID.\n   *\n   * @return {<GetUnreadCountAPIResponse>}\n   */\n  async getUnreadCount(userID?: string) {\n    return await this.get<GetUnreadCountAPIResponse>(\n      this.baseURL + '/unread',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * getUnreadCountBatch - Returns unread counts for multiple users at once. Only works server side.\n   *\n   * @param {string[]} [userIDs] List of user IDs to fetch unread counts for.\n   *\n   * @return {<GetUnreadCountBatchAPIResponse>}\n   */\n  async getUnreadCountBatch(userIDs: string[]) {\n    return await this.post<GetUnreadCountBatchAPIResponse>(\n      this.baseURL + '/unread_batch',\n      { user_ids: userIDs },\n    );\n  }\n\n  /**\n   * setPushPreferences - Applies the list of push preferences.\n   *\n   * @param {PushPreference[]} A list of push preferences.\n   *\n   * @return {<UpsertPushPreferencesResponse>}\n   */\n  async setPushPreferences(preferences: PushPreference[]) {\n    return await this.post<UpsertPushPreferencesResponse>(\n      this.baseURL + '/push_preferences',\n      { preferences },\n    );\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig({ cid, config }: ChannelResponse) {\n    if (this._cacheEnabled()) {\n      this.configs[cid] = config;\n    }\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(channelType: string, channelID?: string | null, custom?: ChannelData): Channel;\n  channel(channelType: string, custom?: ChannelData): Channel;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData | null,\n    custom: ChannelData = {},\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw new Error(\n        `Invalid channel group ${channelType}, can't contain the : character`,\n      );\n    }\n\n    // support channel(\"messaging\", {options})\n    if (channelIDOrCustom && typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    // support channel(\"messaging\", undefined, {options})\n    if (!channelIDOrCustom && typeof custom === 'object' && custom.members?.length) {\n      return this.getChannelByMembers(channelType, custom);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (!channelIDOrCustom) {\n      return new Channel(this, channelType, undefined, custom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const memberIds = (custom.members ?? []).map((member: string | NewMemberPayload) =>\n      typeof member === 'string' ? member : (member.user_id ?? ''),\n    );\n    const membersStr = memberIds.sort().join(',');\n    const tempCid = generateChannelTempCid(channelType, memberIds);\n\n    if (!tempCid) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members)\n          .sort()\n          .join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    if (this._cacheEnabled()) {\n      this.activeChannels[tempCid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (channelType: string, channelID: string, custom: ChannelData) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (\n      cid in this.activeChannels &&\n      this.activeChannels[cid] &&\n      !this.activeChannels[cid].disconnected\n    ) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = { ...channel.data, ...custom };\n        channel._data = { ...channel._data, ...custom };\n      }\n      return channel;\n    }\n    const channel = new Channel(this, channelType, channelID, custom);\n    if (this._cacheEnabled()) {\n      this.activeChannels[channel.cid] = channel;\n    }\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse[]} users list of users\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  async upsertUsers(users: UserResponse[]) {\n    const userMap: { [key: string]: UserResponse } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse };\n      }\n    >(this.baseURL + '/users', { users: userMap });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse[]} users list of users\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  upsertUser(userObject: UserResponse) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate[]} users list of partial update requests\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse };\n      }\n    >(this.baseURL + '/users', { users });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & { user: UserResponse } & {\n        task_id?: string;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}`, params);\n  }\n\n  /**\n   * restoreUsers - Restore soft deleted users\n   *\n   * @param {string[]} user_ids which users to restore\n   *\n   * @return {APIResponse} An API response\n   */\n  async restoreUsers(user_ids: string[]) {\n    return await this.post<APIResponse>(this.baseURL + `/users/restore`, {\n      user_ids,\n    });\n  }\n\n  /**\n   * reactivateUser - Reactivate one user\n   *\n   * @param {string} userID which user to reactivate\n   * @param {ReactivateUserOptions} [options]\n   *\n   * @return {UserResponse} Reactivated user\n   */\n  async reactivateUser(userID: string, options?: ReactivateUserOptions) {\n    return await this.post<APIResponse & { user: UserResponse }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/reactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * reactivateUsers - Reactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to reactivate\n   * @param {ReactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async reactivateUsers(user_ids: string[], options?: ReactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(\n      this.baseURL + `/users/reactivate`,\n      { user_ids, ...options },\n    );\n  }\n\n  /**\n   * deactivateUser - Deactivate one user\n   *\n   * @param {string} userID which user to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {UserResponse} Deactivated user\n   */\n  async deactivateUser(userID: string, options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & { user: UserResponse }>(\n      this.baseURL + `/users/${encodeURIComponent(userID)}/deactivate`,\n      { ...options },\n    );\n  }\n\n  /**\n   * deactivateUsers - Deactivate many users asynchronously\n   *\n   * @param {string[]} user_ids which users to deactivate\n   * @param {DeactivateUsersOptions} [options]\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deactivateUsers(user_ids: string[], options?: DeactivateUsersOptions) {\n    return await this.post<APIResponse & TaskResponse>(\n      this.baseURL + `/users/deactivate`,\n      { user_ids, ...options },\n    );\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse[];\n        reactions: ReactionResponse[];\n        user: UserResponse;\n      }\n    >(this.baseURL + `/users/${encodeURIComponent(userID)}/export`, { ...options });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  async blockUser(blockedUserID: string, user_id?: string) {\n    return await this.post<BlockUserAPIResponse>(this.baseURL + '/users/block', {\n      blocked_user_id: blockedUserID,\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n\n  async getBlockedUsers(user_id?: string) {\n    return await this.get<GetBlockedUsersAPIResponse>(this.baseURL + '/users/block', {\n      ...(user_id ? { user_id } : {}),\n    });\n  }\n\n  async unBlockUser(blockedUserID: string, userID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/users/unblock', {\n      blocked_user_id: blockedUserID,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions} [options]\n   * @returns {Promise<MuteUserResponse>}\n   */\n  async muteUser(targetID: string, userID?: string, options: MuteUserOptions = {}) {\n    return await this.post<MuteUserResponse>(this.baseURL + '/moderation/mute', {\n      target_id: targetID,\n      ...(userID ? { user_id: userID } : {}),\n      ...options,\n    });\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(\n    targetMessageID: string,\n    options: { reason?: string; user_id?: string } = {},\n  ) {\n    return await this.post<FlagMessageResponse>(this.baseURL + '/moderation/flag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { reason?: string; user_id?: string } = {}) {\n    return await this.post<FlagUserResponse>(this.baseURL + '/moderation/flag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse>(this.baseURL + '/moderation/unflag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse>(this.baseURL + '/moderation/unflag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * _queryFlags - Query flags.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagsResponse>} Flags Response\n   */\n  async _queryFlags(\n    filterConditions: FlagsFilters = {},\n    options: FlagsPaginationOptions = {},\n  ) {\n    // Return a list of flags\n    return await this.post<FlagsResponse>(this.baseURL + '/moderation/flags', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _queryFlagReports - Query flag reports.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagReportsResponse>} Flag Reports Response\n   */\n  async _queryFlagReports(\n    filterConditions: FlagReportsFilters = {},\n    options: FlagReportsPaginationOptions = {},\n  ) {\n    // Return a list of message flags\n    return await this.post<FlagReportsResponse>(this.baseURL + '/moderation/reports', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _reviewFlagReport - review flag report\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} [id] flag report to review\n   * @param {string} [reviewResult] flag report review result\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @param {string} [options.review_details] custom information about review result\n   * @returns {Promise<ReviewFlagReportResponse>>}\n   */\n  async _reviewFlagReport(\n    id: string,\n    reviewResult: string,\n    options: ReviewFlagReportOptions = {},\n  ) {\n    return await this.patch<ReviewFlagReportResponse>(\n      this.baseURL + `/moderation/reports/${encodeURIComponent(id)}`,\n      {\n        review_result: reviewResult,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * unblockMessage - unblocks message blocked by automod\n   *\n   *\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unblockMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unblock_message', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  // alias for backwards compatibility\n  _unblockMessage = this.unblockMessage;\n\n  /**\n   * @deprecated use markChannelsRead instead\n   *\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  markAllRead = this.markChannelsRead;\n\n  /**\n   * markChannelsRead - marks channels read -\n   * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n   *\n   * @param {MarkChannelsReadOptions } [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markChannelsRead(data: MarkChannelsReadOptions = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', { ...data });\n  }\n\n  createCommand(data: CreateCommandOptions) {\n    return this.post<CreateCommandResponse>(this.baseURL + '/commands', data);\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n    );\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions) {\n    return this.put<UpdateCommandResponse>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse>(\n      this.baseURL + `/commands/${encodeURIComponent(name)}`,\n    );\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse>(this.baseURL + '/channeltypes', channelData);\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n    );\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelTypeRequest) {\n    return this.put<UpdateChannelTypeResponse>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n      data,\n    );\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(\n      this.baseURL + `/channeltypes/${encodeURIComponent(channelType)}`,\n    );\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {MessageResponse} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<APIResponse & MessageResponse>(\n      this.baseURL + `/messages/${encodeURIComponent(messageId)}/translate`,\n      { language },\n    );\n  }\n\n  /**\n   * translate - translates the given text to provided language\n   *\n   * @param {string} text\n   * @param {string} destination_language\n   * @param {string} source_language\n   *\n   * @return {TranslateResponse} Response that includes the message\n   */\n  async translate(text: string, destination_language: string, source_language: string) {\n    return await this.post<APIResponse & TranslateResponse>(this.baseURL + `/translate`, {\n      text,\n      source_language,\n      destination_language,\n    });\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: null | string = null;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(\n    messageOrMessageId: string | { id: string },\n    errorText: string,\n  ) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n   * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    pinnedBy?: string | { id: string },\n    pinnedAt?: number | string | Date,\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n          pinned_at: this._normalizeExpiration(pinnedAt),\n        },\n      } as unknown as PartialMessageUpdate,\n      pinnedBy,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(\n    messageOrMessageId: string | { id: string },\n    userId?: string | { id: string },\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      {\n        set: { pinned: false },\n      } as unknown as PartialMessageUpdate,\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [partialUserOrUserId]\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: LocalMessage | MessageResponse }} Response that includes the message\n   */\n  async updateMessage(\n    message: LocalMessage | Partial<MessageResponse>,\n    partialUserOrUserId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message.id when calling updateMessage');\n    }\n\n    // should not include user object\n    const payload = toUpdatedMessagePayload(message);\n\n    // add user_id (if exists)\n    if (typeof partialUserOrUserId === 'string') {\n      payload.user_id = partialUserOrUserId;\n    } else if (typeof partialUserOrUserId?.id === 'string') {\n      payload.user_id = partialUserOrUserId.id;\n    }\n\n    return await this.post<UpdateMessageAPIResponse>(\n      this.baseURL + `/messages/${encodeURIComponent(message.id as string)}`,\n      {\n        message: payload,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate,\n    partialUserOrUserId?: string | { id: string },\n    options?: UpdateMessageOptions,\n  ) {\n    if (!id) {\n      throw Error('Please specify the message.id when calling partialUpdateMessage');\n    }\n\n    let user: { id: string } | undefined = undefined;\n\n    if (typeof partialUserOrUserId === 'string') {\n      user = { id: partialUserOrUserId };\n    } else if (typeof partialUserOrUserId?.id === 'string') {\n      user = { id: partialUserOrUserId.id };\n    }\n\n    return await this.put<UpdateMessageAPIResponse>(\n      this.baseURL + `/messages/${encodeURIComponent(id)}`,\n      {\n        ...partialMessageObject,\n        ...options,\n        user,\n      },\n    );\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    try {\n      if (this.offlineDb) {\n        if (hardDelete) {\n          await this.offlineDb.hardDeleteMessage({ id: messageID });\n        } else {\n          await this.offlineDb.softDeleteMessage({ id: messageID });\n        }\n        return await this.offlineDb.queueTask<APIResponse & { message: MessageResponse }>(\n          {\n            task: {\n              messageId: messageID,\n              payload: [messageID, hardDelete],\n              type: 'delete-message',\n            },\n          },\n        );\n      }\n    } catch (error) {\n      this.logger('error', `offlineDb:deleteMessage`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n\n    return this._deleteMessage(messageID, hardDelete);\n  }\n\n  async _deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<APIResponse & { message: MessageResponse }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      params,\n    );\n  }\n\n  /**\n   * undeleteMessage - Undelete a message\n   *\n   * undeletes a message that was previous soft deleted. Hard deleted messages\n   * cannot be undeleted. This is only allowed to be called from server-side\n   * clients.\n   *\n   * @param {string} messageID The id of the message to undelete\n   * @param {string} userID The id of the user who undeleted the message\n   *\n   * @return {{ message: MessageResponse }} Response that includes the message\n   */\n  async undeleteMessage(messageID: string, userID: string) {\n    return await this.post<APIResponse & { message: MessageResponse }>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}/undelete`,\n      { undeleted_by: userID },\n    );\n  }\n\n  async getMessage(messageID: string, options?: GetMessageOptions) {\n    return await this.get<GetMessageAPIResponse>(\n      this.baseURL + `/messages/${encodeURIComponent(messageID)}`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * queryThreads - returns the list of threads of current user.\n   *\n   * @param {QueryThreadsOptions} options Options object for pagination and limiting the participants and replies.\n   * @param {number}  options.limit Limits the number of threads to be returned.\n   * @param {boolean} options.watch Subscribes the user to the channels of the threads.\n   * @param {number}  options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}  options.reply_limit Limits the number of replies returned per threads.\n   * @param {ThreadFilters} options.filter MongoDB style filters for threads\n   * @param {ThreadSort} options.sort MongoDB style sort for threads\n   *\n   * @returns {{ threads: Thread[], next: string }} Returns the list of threads and the next cursor.\n   */\n  async queryThreads(options: QueryThreadsOptions = {}) {\n    const optionsWithDefaults = {\n      limit: 10,\n      participant_limit: 10,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const requestBody: Record<string, unknown> = {\n      ...optionsWithDefaults,\n    };\n\n    if (\n      optionsWithDefaults.filter &&\n      Object.keys(optionsWithDefaults.filter).length > 0\n    ) {\n      requestBody.filter = optionsWithDefaults.filter;\n    }\n\n    if (\n      optionsWithDefaults.sort &&\n      (Array.isArray(optionsWithDefaults.sort)\n        ? optionsWithDefaults.sort.length > 0\n        : Object.keys(optionsWithDefaults.sort).length > 0)\n    ) {\n      requestBody.sort = normalizeQuerySort(optionsWithDefaults.sort);\n    }\n\n    const response = await this.post<QueryThreadsAPIResponse>(\n      `${this.baseURL}/threads`,\n      requestBody,\n    );\n\n    return {\n      threads: response.threads.map(\n        (thread) => new Thread({ client: this, threadData: thread }),\n      ),\n      next: response.next,\n    };\n  }\n\n  /**\n   * getThread - returns the thread of a message by its id.\n   *\n   * @param {string}            messageId The message id\n   * @param {GetThreadOptions}  options Options object for pagination and limiting the participants and replies.\n   * @param {boolean}           options.watch Subscribes the user to the channel of the thread.\n   * @param {number}            options.participant_limit Limits the number of participants returned per threads.\n   * @param {number}            options.reply_limit Limits the number of replies returned per threads.\n   *\n   * @returns {Thread} Returns the thread.\n   */\n  async getThread(messageId: string, options: GetThreadOptions = {}) {\n    if (!messageId) {\n      throw new Error('Please specify the messageId when calling getThread');\n    }\n\n    const optionsWithDefaults = {\n      participant_limit: 100,\n      reply_limit: 3,\n      watch: true,\n      ...options,\n    };\n\n    const response = await this.get<GetThreadAPIResponse>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      optionsWithDefaults,\n    );\n\n    return new Thread({ client: this, threadData: response.thread });\n  }\n\n  /**\n   * partialUpdateThread - updates the given thread\n   *\n   * @param {string}              messageId The id of the thread message which needs to be updated.\n   * @param {PartialThreadUpdate} partialThreadObject should contain \"set\" or \"unset\" params for any of the thread's non-reserved fields.\n   *\n   * @returns {GetThreadAPIResponse} Returns the updated thread.\n   */\n  async partialUpdateThread(messageId: string, partialThreadObject: PartialThreadUpdate) {\n    if (!messageId) {\n      throw Error('Please specify the message id when calling partialUpdateThread');\n    }\n\n    // check for reserved fields from ThreadResponse type within partialThreadObject's set and unset.\n    // Throw error if any of the reserved field is found.\n    const reservedThreadFields = [\n      'created_at',\n      'id',\n      'last_message_at',\n      'type',\n      'updated_at',\n      'user',\n      'reply_count',\n      'participants',\n      'channel',\n      'custom',\n    ];\n\n    for (const key in { ...partialThreadObject.set, ...partialThreadObject.unset }) {\n      if (reservedThreadFields.includes(key)) {\n        throw Error(\n          `You cannot set ${key} field on Thread object. ${key} is reserved for server-side use. Please omit ${key} from your set object.`,\n        );\n      }\n    }\n\n    return await this.patch<GetThreadAPIResponse>(\n      `${this.baseURL}/threads/${encodeURIComponent(messageId)}`,\n      partialThreadObject,\n    );\n  }\n\n  getUserAgent() {\n    if (this.userAgent) {\n      return this.userAgent;\n    }\n\n    const version = process.env.PKG_VERSION;\n    const clientBundle = process.env.CLIENT_BUNDLE;\n\n    let userAgentString = '';\n    if (this.sdkIdentifier) {\n      userAgentString = `stream-chat-${this.sdkIdentifier.name}-v${this.sdkIdentifier.version}-llc-v${version}`;\n    } else {\n      userAgentString = `stream-chat-js-v${version}-${this.node ? 'node' : 'browser'}`;\n    }\n\n    const { os, model } = this.deviceIdentifier ?? {};\n\n    return (\n      [\n        // reports the device OS, if provided\n        ['os', os],\n        // reports the device model, if provided\n        ['device_model', model],\n        // reports which bundle is being picked from the exports\n        ['client_bundle', clientBundle],\n      ] as const\n    ).reduce(\n      (withArguments, [key, value]) =>\n        value && value.length > 0\n          ? withArguments.concat(`|${key}=${value}`)\n          : withArguments,\n      userAgentString,\n    );\n  }\n\n  /**\n   * @deprecated use sdkIdentifier instead\n   * @param userAgent\n   */\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _cacheEnabled = () => !this._isUsingServerAuth() || !this.options.disableCache;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig {\n    const token = this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n    let signal: AbortSignal | null = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': randomId(),\n      };\n    }\n\n    const {\n      params: axiosRequestConfigParams,\n      headers: axiosRequestConfigHeaders,\n      ...axiosRequestConfigRest\n    } = this.options.axiosRequestConfig || {};\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n        ...(axiosRequestConfigParams || {}),\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n        ...(axiosRequestConfigHeaders || {}),\n      },\n      ...(signal ? { signal } : {}),\n      ...options.config,\n      ...(axiosRequestConfigRest || {}),\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  /**\n   * encode ws url payload\n   * @private\n   * @returns json string\n   */\n  _buildWSPayload = (client_request_id?: string) =>\n    JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      device: this.options.device,\n      client_request_id,\n    });\n\n  /**\n   * checks signature of a request\n   * @param {string | Buffer} rawBody\n   * @param {string} signature from HTTP header\n   * @returns {boolean}\n   */\n  verifyWebhook(requestBody: string | Buffer, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(\n      `${this.baseURL}/permissions/${encodeURIComponent(name)}`,\n    );\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(\n      `${this.baseURL}/permissions/${encodeURIComponent(id)}`,\n      {\n        ...permissionData,\n      },\n    );\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(\n      `${this.baseURL}/permissions/${encodeURIComponent(name)}`,\n    );\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${encodeURIComponent(name)}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   * @param {SyncOptions} options See JSDoc in the type fields for more info\n   *\n   * @returns {Promise<SyncResponse>}\n   */\n  sync(channel_cids: string[], last_sync_at: string, options: SyncOptions = {}) {\n    return this.post<SyncResponse>(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n      ...options,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(\n      `${this.baseURL}/users/${encodeURIComponent(targetUserID)}/event`,\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Creates a new block list\n   *\n   * @param {BlockList} blockList - The block list to create\n   * @param {string} blockList.name - The name of the block list\n   * @param {string[]} blockList.words - List of words to block\n   * @param {string} [blockList.team] - Team ID the block list belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  /**\n   * Lists all block lists\n   *\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID to filter block lists by\n   *\n   * @returns {Promise<APIResponse & {blocklists: BlockListResponse[]}>} Response containing array of block lists\n   */\n  listBlockLists(data?: { team?: string }) {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(\n      `${this.baseURL}/blocklists`,\n      data,\n    );\n  }\n\n  /**\n   * Gets a specific block list\n   *\n   * @param {string} name - The name of the block list to retrieve\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse & {blocklist: BlockListResponse}>} Response containing the block list\n   */\n  getBlockList(name: string, data?: { team?: string }) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(\n      `${this.baseURL}/blocklists/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  /**\n   * Updates an existing block list\n   *\n   * @param {string} name - The name of the block list to update\n   * @param {Object} data - The update data\n   * @param {string[]} data.words - New list of words to block\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  updateBlockList(name: string, data: { words: string[]; team?: string }) {\n    return this.put<APIResponse>(\n      `${this.baseURL}/blocklists/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  /**\n   * Deletes a block list\n   *\n   * @param {string} name - The name of the block list to delete\n   * @param {Object} [data] - Query parameters\n   * @param {string} [data.team] - Team ID that blocklist belongs to\n   *\n   * @returns {Promise<APIResponse>} The server response\n   */\n  deleteBlockList(name: string, data?: { team?: string }) {\n    return this.delete<APIResponse>(\n      `${this.baseURL}/blocklists/${encodeURIComponent(name)}`,\n      data,\n    );\n  }\n\n  exportChannels(\n    request: Array<ExportChannelRequest>,\n    options: ExportChannelOptions = {},\n  ) {\n    const payload = { channels: request, ...options };\n    return this.post<APIResponse & ExportChannelResponse>(\n      `${this.baseURL}/export_channels`,\n      payload,\n    );\n  }\n\n  exportUsers(request: ExportUsersRequest) {\n    return this.post<APIResponse & ExportUsersResponse>(\n      `${this.baseURL}/export/users`,\n      request,\n    );\n  }\n\n  exportChannel(request: ExportChannelRequest, options?: ExportChannelOptions) {\n    return this.exportChannels([request], options);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(\n      `${this.baseURL}/export_channels/${encodeURIComponent(id)}`,\n    );\n  }\n\n  campaign(idOrData: string | CampaignData, data?: CampaignData) {\n    if (idOrData && typeof idOrData === 'object') {\n      return new Campaign(this, null, idOrData);\n    }\n\n    return new Campaign(this, idOrData, data);\n  }\n\n  segment(type: SegmentType, idOrData: string | SegmentData, data?: SegmentData) {\n    if (typeof idOrData === 'string') {\n      return new Segment(this, type, idOrData, data);\n    }\n\n    return new Segment(this, type, null, idOrData);\n  }\n\n  validateServerSideAuth() {\n    if (!this.secret) {\n      throw new Error(\n        'Campaigns is a server-side only feature. Please initialize the client with a secret to use this feature.',\n      );\n    }\n  }\n\n  /**\n   * createSegment - Creates a segment\n   *\n   * @private\n   * @param {SegmentType} type Segment type\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} params Segment data\n   *\n   * @return {{segment: SegmentResponse} & APIResponse} The created Segment\n   */\n  createSegment(type: SegmentType, id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    const body = {\n      id,\n      type,\n      ...data,\n    };\n    return this.post<{ segment: SegmentResponse }>(this.baseURL + `/segments`, body);\n  }\n\n  /**\n   * createUserSegment - Creates a user segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  createUserSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('user', id, data);\n  }\n\n  /**\n   * createChannelSegment - Creates a channel segment\n   *\n   * @param {string} id Segment ID\n   * @param {string} name Segment name\n   * @param {SegmentData} data Segment data\n   *\n   * @return {Segment} The created Segment\n   */\n  createChannelSegment(id: string | null, data?: SegmentData) {\n    this.validateServerSideAuth();\n    return this.createSegment('channel', id, data);\n  }\n\n  getSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.get<{ segment: SegmentResponse } & APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}`,\n    );\n  }\n\n  /**\n   * updateSegment - Update a segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<UpdateSegmentData>} data Data to update\n   *\n   * @return {Segment} Updated Segment\n   */\n  updateSegment(id: string, data: Partial<UpdateSegmentData>) {\n    this.validateServerSideAuth();\n    return this.put<{ segment: SegmentResponse }>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}`,\n      data,\n    );\n  }\n\n  /**\n   * addSegmentTargets - Add targets to a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  addSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}/addtargets`,\n      body,\n    );\n  }\n\n  querySegmentTargets(\n    id: string,\n    filter: QuerySegmentTargetsFilter | null = {},\n    sort: SortParam[] | null | [] = [],\n    options = {},\n  ) {\n    this.validateServerSideAuth();\n    return this.post<{ targets: SegmentTargetsResponse[]; next?: string } & APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}/targets/query`,\n      {\n        filter: filter || {},\n        sort: sort || [],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * removeSegmentTargets - Remove targets from a segment\n   *\n   * @param {string} id Segment ID\n   * @param {string[]} targets Targets to add to the segment\n   *\n   * @return {APIResponse} API response\n   */\n  removeSegmentTargets(id: string, targets: string[]) {\n    this.validateServerSideAuth();\n    const body = { target_ids: targets };\n    return this.post<APIResponse>(\n      this.baseURL + `/segments/${encodeURIComponent(id)}/deletetargets`,\n      body,\n    );\n  }\n\n  /**\n   * querySegments - Query Segments\n   *\n   * @param {filter} filter MongoDB style filter conditions\n   * @param {QuerySegmentsOptions} options Options for sorting/paginating the results\n   *\n   * @return {Segment[]} Segments\n   */\n  querySegments(filter: {}, sort?: SortParam[], options: QuerySegmentsOptions = {}) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        segments: SegmentResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/segments/query`, {\n      filter,\n      sort,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  deleteSegment(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(this.baseURL + `/segments/${encodeURIComponent(id)}`);\n  }\n\n  /**\n   * segmentTargetExists - Check if a target exists in a segment\n   *\n   * @param {string} segmentId Segment ID\n   * @param {string} targetId Target ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  segmentTargetExists(segmentId: string, targetId: string) {\n    this.validateServerSideAuth();\n    return this.get<APIResponse>(\n      this.baseURL +\n        `/segments/${encodeURIComponent(segmentId)}/target/${encodeURIComponent(targetId)}`,\n    );\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  createCampaign(params: CampaignData) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns`, { ...params });\n  }\n\n  getCampaign(id: string, options?: GetCampaignOptions) {\n    this.validateServerSideAuth();\n    return this.get<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, { ...options?.users });\n  }\n\n  startCampaign(id: string, options?: { scheduledFor?: string; stopAt?: string }) {\n    this.validateServerSideAuth();\n    return this.post<\n      {\n        campaign: CampaignResponse;\n        users: {\n          next?: string;\n          prev?: string;\n        };\n      } & APIResponse\n    >(this.baseURL + `/campaigns/${encodeURIComponent(id)}/start`, {\n      scheduled_for: options?.scheduledFor,\n      stop_at: options?.stopAt,\n    });\n  }\n\n  /**\n   * queryCampaigns - Query Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async queryCampaigns(\n    filter: CampaignFilters,\n    sort?: CampaignSort,\n    options?: CampaignQueryOptions,\n  ) {\n    this.validateServerSideAuth();\n    return await this.post<\n      {\n        campaigns: CampaignResponse[];\n        next?: string;\n        prev?: string;\n      } & APIResponse\n    >(this.baseURL + `/campaigns/query`, {\n      filter,\n      sort,\n      ...(options || {}),\n    });\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  updateCampaign(id: string, params: Partial<CampaignData>) {\n    this.validateServerSideAuth();\n    return this.put<{\n      campaign: CampaignResponse;\n      users: {\n        next?: string;\n        prev?: string;\n      };\n    }>(this.baseURL + `/campaigns/${encodeURIComponent(id)}`, params);\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  deleteCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.delete<APIResponse>(\n      this.baseURL + `/campaigns/${encodeURIComponent(id)}`,\n    );\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  stopCampaign(id: string) {\n    this.validateServerSideAuth();\n    return this.post<{ campaign: CampaignResponse }>(\n      this.baseURL + `/campaigns/${encodeURIComponent(id)}/stop`,\n    );\n  }\n\n  /**\n   * enrichURL - Get OpenGraph data of the given link\n   *\n   * @param {string} url link\n   * @return {OGAttachment} OG Attachment\n   */\n  enrichURL(url: string) {\n    return this.get<APIResponse & OGAttachment>(this.baseURL + `/og`, { url });\n  }\n\n  /**\n   * getTask - Gets status of a long running task\n   *\n   * @param {string} id Task ID\n   *\n   * @return {TaskStatus} The task status\n   */\n  getTask(id: string) {\n    return this.get<APIResponse & TaskStatus>(\n      `${this.baseURL}/tasks/${encodeURIComponent(id)}`,\n    );\n  }\n\n  /**\n   * deleteChannels - Deletes a list of channel\n   *\n   * @param {string[]} cids Channel CIDs\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n   */\n  async deleteChannels(cids: string[], options: { hard_delete?: boolean } = {}) {\n    return await this.post<APIResponse & DeleteChannelsResponse>(\n      this.baseURL + `/channels/delete`,\n      {\n        cids,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * deleteUsers - Batch Delete Users\n   *\n   * @param {string[]} user_ids which users to delete\n   * @param {DeleteUserOptions} options Configuration how to delete users\n   *\n   * @return {TaskResponse} A task ID\n   */\n  async deleteUsers(user_ids: string[], options: DeleteUserOptions = {}) {\n    if (\n      typeof options.user !== 'undefined' &&\n      !['soft', 'hard', 'pruning'].includes(options.user)\n    ) {\n      throw new Error(\n        'Invalid delete user options. user must be one of [soft hard pruning]',\n      );\n    }\n    if (\n      typeof options.conversations !== 'undefined' &&\n      !['soft', 'hard'].includes(options.conversations)\n    ) {\n      throw new Error(\n        'Invalid delete user options. conversations must be one of [soft hard]',\n      );\n    }\n    if (\n      typeof options.messages !== 'undefined' &&\n      !['soft', 'hard', 'pruning'].includes(options.messages)\n    ) {\n      throw new Error(\n        'Invalid delete user options. messages must be one of [soft hard pruning]',\n      );\n    }\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/delete`, {\n      user_ids,\n      ...options,\n    });\n  }\n\n  /**\n   * _createImportURL - Create an Import upload url.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} filename filename of uploaded data\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImportURL(filename: string) {\n    return await this.post<APIResponse & CreateImportURLResponse>(\n      this.baseURL + `/import_urls`,\n      {\n        filename,\n      },\n    );\n  }\n\n  /**\n   * _createImport - Create an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} path path of uploaded data\n   * @param {CreateImportOptions} options import options\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImport(path: string, options: CreateImportOptions = { mode: 'upsert' }) {\n    return await this.post<APIResponse & CreateImportResponse>(\n      this.baseURL + `/imports`,\n      {\n        path,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * _getImport - Get an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} id id of Import Task\n   *\n   * @return {APIResponse & GetImportResponse} An ImportTask\n   */\n  async _getImport(id: string) {\n    return await this.get<APIResponse & GetImportResponse>(\n      this.baseURL + `/imports/${encodeURIComponent(id)}`,\n    );\n  }\n\n  /**\n   * _listImports - Lists Import Tasks.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {ListImportsPaginationOptions} options pagination options\n   *\n   * @return {APIResponse & ListImportsResponse} An ImportTask\n   */\n  async _listImports(options: ListImportsPaginationOptions) {\n    return await this.get<APIResponse & ListImportsResponse>(\n      this.baseURL + `/imports`,\n      options,\n    );\n  }\n\n  /**\n   * upsertPushProvider - Create or Update a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderConfig} configuration of the provider you want to create or update\n   *\n   * @return {APIResponse & PushProviderUpsertResponse} A push provider\n   */\n  async upsertPushProvider(pushProvider: PushProviderConfig) {\n    return await this.post<APIResponse & PushProviderUpsertResponse>(\n      this.baseURL + `/push_providers`,\n      {\n        push_provider: pushProvider,\n      },\n    );\n  }\n\n  /**\n   * deletePushProvider - Delete a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderID} type and foreign id of the push provider to be deleted\n   *\n   * @return {APIResponse} An API response\n   */\n  async deletePushProvider({ type, name }: PushProviderID) {\n    return await this.delete<APIResponse>(\n      this.baseURL +\n        `/push_providers/${encodeURIComponent(type)}/${encodeURIComponent(name)}`,\n    );\n  }\n\n  /**\n   * listPushProviders - Get all push providers in the app\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @return {APIResponse & PushProviderListResponse} A push provider\n   */\n  async listPushProviders() {\n    return await this.get<APIResponse & PushProviderListResponse>(\n      this.baseURL + `/push_providers`,\n    );\n  }\n\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest() {\n    return (this.nextRequestAbortController = new AbortController());\n  }\n\n  /**\n   * commits a pending message, making it visible in the channel and for other users\n   * @param id the message id\n   *\n   * @return {APIResponse & MessageResponse} The message\n   */\n  async commitMessage(id: string) {\n    return await this.post<APIResponse & MessageResponse>(\n      this.baseURL + `/messages/${encodeURIComponent(id)}/commit`,\n    );\n  }\n\n  /**\n   * Creates a poll\n   * @param poll PollData The poll that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CreatePollAPIResponse} The poll\n   */\n  async createPoll(poll: CreatePollData, userId?: string) {\n    return await this.post<APIResponse & CreatePollAPIResponse>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Retrieves a poll\n   * @param id string The poll id\n   *  @param userId string The user id (only serverside)\n   * @returns {APIResponse & GetPollAPIResponse} The poll\n   */\n  async getPoll(id: string, userId?: string): Promise<APIResponse & GetPollAPIResponse> {\n    return await this.get<APIResponse & GetPollAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll\n   * @param poll PollData The poll that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollResponse} The poll\n   */\n  async updatePoll(poll: PollData, userId?: string) {\n    return await this.put<APIResponse & UpdatePollAPIResponse>(this.baseURL + `/polls`, {\n      ...poll,\n      ...(userId ? { user_id: userId } : {}),\n    });\n  }\n\n  /**\n   * Partially updates a poll\n   * @param id string The poll id\n   * @param {PartialPollUpdate} partialPollObject which should contain id and any of \"set\" or \"unset\" params;\n   * @param userId string The user id (only serverside)\n   * example: {id: \"44f26af5-f2be-4fa7-9dac-71cf893781de\", set:{field: value}, unset:[\"field2\"]}\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  async partialUpdatePoll(\n    id: string,\n    partialPollObject: PartialPollUpdate,\n    userId?: string,\n  ): Promise<APIResponse & UpdatePollAPIResponse> {\n    return await this.patch<APIResponse & UpdatePollAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      {\n        ...partialPollObject,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async deletePoll(id: string, userId?: string): Promise<APIResponse> {\n    return await this.delete<APIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(id)}`,\n      {\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Close a poll\n   * @param id string The poll id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & UpdatePollAPIResponse} The poll\n   */\n  closePoll(id: string, userId?: string): Promise<APIResponse & UpdatePollAPIResponse> {\n    return this.partialUpdatePoll(\n      id,\n      {\n        set: {\n          is_closed: true,\n        } as PartialPollUpdate['set'],\n      },\n      userId,\n    );\n  }\n\n  /**\n   * Creates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be created\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async createPollOption(pollId: string, option: PollOptionData, userId?: string) {\n    return await this.post<APIResponse & CreatePollOptionAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Retrieves a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollOptionResponse} The poll option\n   */\n  async getPollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.get<APIResponse & GetPollOptionAPIResponse>(\n      this.baseURL +\n        `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Updates a poll option\n   * @param pollId string The poll id\n   * @param option PollOptionData The poll option that will be updated\n   * @param userId string The user id (only serverside)\n   * @returns\n   */\n  async updatePollOption(pollId: string, option: PollOptionData, userId?: string) {\n    return await this.put<APIResponse & UpdatePollOptionAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/options`,\n      {\n        ...option,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Delete a poll option\n   * @param pollId string The poll id\n   * @param optionId string The poll option id\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse} The poll option\n   */\n  async deletePollOption(pollId: string, optionId: string, userId?: string) {\n    return await this.delete<APIResponse>(\n      this.baseURL +\n        `/polls/${encodeURIComponent(pollId)}/options/${encodeURIComponent(optionId)}`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * Cast vote on a poll\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param vote PollVoteData The vote that will be casted\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & CastVoteAPIResponse} The poll vote\n   */\n  async castPollVote(\n    messageId: string,\n    pollId: string,\n    vote: PollVoteData,\n    userId?: string,\n  ) {\n    return await this.post<APIResponse & CastVoteAPIResponse>(\n      this.baseURL +\n        `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote`,\n      {\n        vote,\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Add a poll answer\n   * @param messageId string The message id\n   * @param pollId string The poll id\n   * @param answerText string The answer text\n   * @param userId string The user id (only serverside)\n   */\n  addPollAnswer(messageId: string, pollId: string, answerText: string, userId?: string) {\n    return this.castPollVote(\n      messageId,\n      pollId,\n      {\n        answer_text: answerText,\n      },\n      userId,\n    );\n  }\n\n  async removePollVote(\n    messageId: string,\n    pollId: string,\n    voteId: string,\n    userId?: string,\n  ) {\n    return await this.delete<APIResponse & { vote: PollVote }>(\n      this.baseURL +\n        `/messages/${encodeURIComponent(messageId)}/polls/${encodeURIComponent(pollId)}/vote/${encodeURIComponent(\n          voteId,\n        )}`,\n      {\n        ...(userId ? { user_id: userId } : {}),\n      },\n    );\n  }\n\n  /**\n   * Queries polls\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & QueryPollsResponse} The polls\n   */\n  async queryPolls(\n    filter: QueryPollsFilters = {},\n    sort: PollSort = [],\n    options: QueryPollsOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & QueryPollsResponse> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & QueryPollsResponse>(\n      this.baseURL + `/polls/query${q}`,\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Queries poll votes\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollVotesAPIResponse} The poll votes\n   */\n  async queryPollVotes(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollVotesAPIResponse> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollVotesAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Queries poll answers\n   * @param pollId\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10, offset:0}\n   * @param userId string The user id (only serverside)\n   * @returns {APIResponse & PollAnswersAPIResponse} The poll votes\n   */\n  async queryPollAnswers(\n    pollId: string,\n    filter: QueryVotesFilters = {},\n    sort: VoteSort = [],\n    options: QueryVotesOptions = {},\n    userId?: string,\n  ): Promise<APIResponse & PollAnswersAPIResponse> {\n    const q = userId ? `?user_id=${userId}` : '';\n    return await this.post<APIResponse & PollAnswersAPIResponse>(\n      this.baseURL + `/polls/${encodeURIComponent(pollId)}/votes${q}`,\n      {\n        filter: { ...filter, is_answer: true },\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query message history\n   * @param filter\n   * @param sort\n   * @param options Option object, {limit: 10}\n   * @returns {APIResponse & QueryMessageHistoryResponse} The message histories\n   */\n  async queryMessageHistory(\n    filter: QueryMessageHistoryFilters = {},\n    sort: QueryMessageHistorySort = [],\n    options: QueryMessageHistoryOptions = {},\n  ): Promise<APIResponse & QueryMessageHistoryResponse> {\n    return await this.post<APIResponse & QueryMessageHistoryResponse>(\n      this.baseURL + '/messages/history',\n      {\n        filter,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * updateFlags - reviews/unflags flagged message\n   *\n   * @param {string[]} message_ids list of message IDs\n   * @param {string} options Option object in case user ID is set to review all the flagged messages by the user\n   * @param {string} reviewed_by user ID who reviewed the flagged message\n   * @returns {APIResponse}\n   */\n  async updateFlags(\n    message_ids: string[],\n    reviewed_by: string,\n    options: { user_id?: string } = {},\n  ) {\n    return await this.post<APIResponse>(\n      this.baseURL + '/automod/v1/moderation/update_flags',\n      {\n        message_ids,\n        reviewed_by,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * queryDrafts - Queries drafts for the current user\n   *\n   * @param {object} [options] Query options\n   * @param {object} [options.filter] Filters for the query\n   * @param {number} [options.sort] Sort parameters\n   * @param {number} [options.limit] Limit the number of results\n   * @param {string} [options.next] Pagination parameter\n   * @param {string} [options.prev] Pagination parameter\n   * @param {string} [options.user_id] Has to be provided when called server-side\n   *\n   * @return {Promise<APIResponse & { drafts: DraftResponse[]; next?: string }>} Response containing the drafts\n   */\n  async queryDrafts(\n    options: Pager & {\n      filter?: DraftFilters;\n      sort?: DraftSort;\n      user_id?: string;\n    } = {},\n  ) {\n    const payload = {\n      ...options,\n      sort: options.sort ? normalizeQuerySort(options.sort) : undefined,\n    };\n\n    return await this.post<QueryDraftsResponse>(this.baseURL + '/drafts/query', payload);\n  }\n\n  /**\n   * createReminder - Creates a reminder for a message\n   *\n   * @param {CreateReminderOptions} options The options for creating the reminder\n   * @returns {Promise<ReminderAPIResponse>}\n   */\n  async createReminder({ messageId, ...options }: CreateReminderOptions) {\n    return await this.post<ReminderAPIResponse>(\n      `${this.baseURL}/messages/${messageId}/reminders`,\n      options,\n    );\n  }\n\n  /**\n   * updateReminder - Updates an existing reminder for a message\n   *\n   * @param {UpdateReminderOptions} options The options for updating the reminder\n   * @returns {Promise<ReminderAPIResponse>}\n   */\n  async updateReminder({ messageId, ...options }: UpdateReminderOptions) {\n    return await this.patch<ReminderAPIResponse>(\n      `${this.baseURL}/messages/${messageId}/reminders`,\n      options,\n    );\n  }\n\n  /**\n   * deleteReminder - Deletes a reminder for a message\n   *\n   * @param {string} messageId The ID of the message whose reminder to delete\n   * @param {string} [userId] Optional user ID, required for server-side operations\n   * @returns {Promise<APIResponse>}\n   */\n  async deleteReminder(messageId: string, userId?: string): Promise<APIResponse> {\n    return await this.delete<APIResponse>(\n      `${this.baseURL}/messages/${messageId}/reminders`,\n      userId ? { user_id: userId } : {},\n    );\n  }\n\n  /**\n   * queryReminders - Queries reminders based on given filters\n   *\n   * @param {QueryRemindersOptions} options The options for querying reminders\n   * @returns {Promise<QueryRemindersResponse>}\n   */\n  async queryReminders({ filter, sort, ...rest }: QueryRemindersOptions = {}) {\n    return await this.post<QueryRemindersResponse>(`${this.baseURL}/reminders/query`, {\n      filter_conditions: filter,\n      sort: sort && normalizeQuerySort(sort),\n      ...rest,\n    });\n  }\n\n  /**\n   * uploadFile - Uploads a file to the configured storage (defaults to Stream CDN)\n   *\n   * @param {string|NodeJS.ReadableStream|Buffer|File} uri The file to upload\n   * @param {string} [name] The name of the file\n   * @param {string} [contentType] The content type of the file\n   * @param {UserResponse} [user] Optional user information\n   *\n   * @return {Promise<SendFileAPIResponse>} Response containing the file URL\n   */\n  uploadFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse,\n  ) {\n    return this.sendFile(`${this.baseURL}/uploads/file`, uri, name, contentType, user);\n  }\n\n  /**\n   * uploadImage - Uploads an image to the configured storage (defaults to Stream CDN)\n   *\n   * @param {string|NodeJS.ReadableStream|File} uri The image to upload\n   * @param {string} [name] The name of the image\n   * @param {string} [contentType] The content type of the image\n   * @param {UserResponse} [user] Optional user information\n   *\n   * @return {Promise<SendFileAPIResponse>} Response containing the image URL\n   */\n  uploadImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse,\n  ) {\n    return this.sendFile(`${this.baseURL}/uploads/image`, uri, name, contentType, user);\n  }\n\n  /**\n   * deleteFile - Deletes a file from the configured storage\n   *\n   * @param {string} url The URL of the file to delete\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  deleteFile(url: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/uploads/file`, { url });\n  }\n\n  /**\n   * deleteImage - Deletes an image from the configured storage\n   *\n   * @param {string} url The URL of the image to delete\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  deleteImage(url: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/uploads/image`, { url });\n  }\n}\n","import FormData from 'form-data';\nimport type {\n  AscDesc,\n  ChannelFilters,\n  ChannelQueryOptions,\n  ChannelSort,\n  ChannelSortBase,\n  LocalMessage,\n  LocalMessageBase,\n  Logger,\n  Message,\n  MessagePaginationOptions,\n  MessageResponse,\n  MessageResponseBase,\n  MessageSet,\n  OwnUserBase,\n  OwnUserResponse,\n  PromoteChannelParams,\n  QueryChannelAPIResponse,\n  ReactionGroupResponse,\n  UpdatedMessage,\n  UserResponse,\n} from './types';\nimport type { StreamChat } from './client';\nimport type { Channel } from './channel';\nimport type { AxiosRequestConfig } from 'axios';\nimport { LOCAL_MESSAGE_FIELDS, RESERVED_UPDATED_MESSAGE_FIELDS } from './constants';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction(value: unknown): value is (...args: unknown[]) => unknown {\n  return (\n    typeof value === 'function' ||\n    value instanceof Function ||\n    Object.prototype.toString.call(value) === '[object Function]'\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable ||\n      typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error expected\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error expected\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser(\n  user?: OwnUserResponse | UserResponse,\n): user is OwnUserResponse {\n  return (user as OwnUserResponse)?.total_unread_count !== undefined;\n}\n\nfunction isBlobWebAPI(uri: unknown): uri is Blob {\n  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    unread_threads: true,\n    invisible: true,\n    privacy_settings: true,\n    roles: true,\n    push_preferences: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(\n  sort: T | T[],\n) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function randomId() {\n  return generateUUIDv4();\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return (\n    hex(bytes.subarray(0, 4)) +\n    '-' +\n    hex(bytes.subarray(4, 6)) +\n    '-' +\n    hex(bytes.subarray(6, 8)) +\n    '-' +\n    hex(bytes.subarray(8, 10)) +\n    '-' +\n    hex(bytes.subarray(10, 16))\n  );\n}\n\nfunction getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n  const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\ndeclare const msCrypto: Crypto;\n\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && typeof crypto?.getRandomValues !== 'undefined') {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\nexport function convertErrorToJson(err: Error) {\n  const jsonObj = {} as Record<string, unknown>;\n\n  if (!err) return jsonObj;\n\n  try {\n    Object.getOwnPropertyNames(err).forEach((key) => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error',\n    };\n  }\n\n  return jsonObj;\n}\n\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\nexport function isOnline() {\n  const nav =\n    typeof navigator !== 'undefined'\n      ? navigator\n      : typeof window !== 'undefined' && window.navigator\n        ? window.navigator\n        : undefined;\n\n  if (!nav) {\n    console.warn(\n      'isOnline failed to access window.navigator and assume browser is online',\n    );\n    return true;\n  }\n\n  // RN navigator has undefined for onLine\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n\n  return nav.onLine;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n\nexport const axiosParamsSerializer: AxiosRequestConfig['paramsSerializer'] = (params) => {\n  const newParams = [];\n  for (const k in params) {\n    // Stream backend doesn't treat \"undefined\" value same as value not being present.\n    // So, we need to skip the undefined values.\n    if (params[k] === undefined) continue;\n\n    if (Array.isArray(params[k]) || typeof params[k] === 'object') {\n      newParams.push(`${k}=${encodeURIComponent(JSON.stringify(params[k]))}`);\n    } else {\n      newParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  }\n\n  return newParams.join('&');\n};\n\n/**\n * Takes the message object, parses the dates, sets `__html`\n * and sets the status to `received` if missing; returns a new LocalMessage object.\n *\n * @param {LocalMessage} message `LocalMessage` object\n */\nexport function formatMessage(\n  message: MessageResponse | MessageResponseBase | LocalMessage,\n): LocalMessage {\n  const toLocalMessageBase = (\n    msg: MessageResponse | MessageResponseBase | LocalMessage | null | undefined,\n  ): LocalMessageBase | null => {\n    if (!msg) return null;\n    return {\n      ...msg,\n      created_at: message.created_at ? new Date(message.created_at) : new Date(),\n      deleted_at: message.deleted_at ? new Date(message.deleted_at) : null,\n      pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n      reaction_groups: maybeGetReactionGroupsFallback(\n        message.reaction_groups,\n        message.reaction_counts,\n        message.reaction_scores,\n      ),\n      status: message.status || 'received',\n      updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n    };\n  };\n\n  return {\n    ...toLocalMessageBase(message),\n    error: (message as LocalMessage).error ?? null,\n    quoted_message: toLocalMessageBase((message as MessageResponse).quoted_message),\n  } as LocalMessage;\n}\n\n/**\n * @private\n *\n * Takes a LocalMessage, parses the dates back to strings,\n * and converts the message back to a MessageResponse.\n *\n * @param {MessageResponse} message `MessageResponse` object\n */\nexport function unformatMessage(message: LocalMessage): MessageResponse {\n  const toMessageResponseBase = (\n    msg: LocalMessage | null | undefined,\n  ): MessageResponseBase | null => {\n    if (!msg) return null;\n    const newDateString = new Date().toISOString();\n    return {\n      ...msg,\n      created_at: message.created_at ? message.created_at.toISOString() : newDateString,\n      deleted_at: message.deleted_at ? message.deleted_at.toISOString() : undefined,\n      pinned_at: message.pinned_at ? message.pinned_at.toISOString() : undefined,\n      updated_at: message.updated_at ? message.updated_at.toISOString() : newDateString,\n    };\n  };\n\n  return {\n    ...toMessageResponseBase(message),\n    quoted_message: toMessageResponseBase((message as LocalMessage).quoted_message),\n  } as MessageResponse;\n}\n\nexport const localMessageToNewMessagePayload = (localMessage: LocalMessage): Message => {\n  /* eslint-disable @typescript-eslint/no-unused-vars */\n  const {\n    // Remove all timestamp fields and client-specific fields.\n    // Field pinned_at can therefore be earlier than created_at as new message payload can hold it.\n    created_at,\n    updated_at,\n    deleted_at,\n    // Client-specific fields\n    error,\n    status,\n    // Reaction related fields\n    latest_reactions,\n    own_reactions,\n    reaction_counts,\n    reaction_scores,\n    reply_count,\n    // Message text related fields that shouldn't be in update\n    command,\n    html,\n    i18n,\n    quoted_message,\n    mentioned_users,\n    // Message content related fields\n    ...messageFields\n  } = localMessage;\n\n  return {\n    ...messageFields,\n    pinned_at: messageFields.pinned_at?.toISOString(),\n    mentioned_users: mentioned_users?.map((user) => user.id),\n  };\n};\n\nexport const toUpdatedMessagePayload = (\n  message: LocalMessage | Partial<MessageResponse>,\n): UpdatedMessage => {\n  const reservedKeys = {\n    ...RESERVED_UPDATED_MESSAGE_FIELDS,\n    ...LOCAL_MESSAGE_FIELDS,\n  } as const;\n\n  const messageFields = Object.fromEntries(\n    Object.entries(message).filter(\n      ([key]) => !reservedKeys[key as keyof typeof reservedKeys],\n    ),\n  ) as UpdatedMessage;\n\n  return {\n    ...messageFields,\n    pinned: !!message.pinned_at,\n    mentioned_users: message.mentioned_users?.map((user) =>\n      typeof user === 'string' ? user : user.id,\n    ),\n  };\n};\n\nexport const findIndexInSortedArray = <T, L>({\n  needle,\n  sortedArray,\n  selectKey,\n  selectValueToCompare = (e) => e,\n  sortDirection = 'ascending',\n}: {\n  needle: T;\n  sortedArray: readonly T[];\n  /**\n   * In an array of objects (like messages), pick a unique property identifying\n   * an element. It will be used to find a direct match for the needle element\n   * in case compare values are not unique.\n   *\n   * @example\n   * ```ts\n   * selectKey: (message) => message.id\n   * ```\n   */\n  selectKey?: (arrayElement: T) => string;\n  /**\n   * In an array of objects (like messages), pick a specific\n   * property to compare the needle value to.\n   *\n   * @example\n   * ```ts\n   * selectValueToCompare: (message) => message.created_at.getTime()\n   * ```\n   */\n  selectValueToCompare?: (arrayElement: T) => L | T;\n  /**\n   * @default ascending\n   * @description\n   * ```md\n   * ascending  - [1,2,3,4,5...]\n   * descending - [...5,4,3,2,1]\n   * ```\n   */\n  sortDirection?: 'ascending' | 'descending';\n}) => {\n  if (!sortedArray.length) return 0;\n\n  let left = 0;\n  let right = sortedArray.length - 1;\n  let middle = 0;\n\n  const recalculateMiddle = () => {\n    middle = Math.round((left + right) / 2);\n  };\n\n  const comparableNeedle = selectValueToCompare(needle);\n\n  while (left <= right) {\n    recalculateMiddle();\n\n    const comparableMiddle = selectValueToCompare(sortedArray[middle]);\n\n    if (\n      (sortDirection === 'ascending' && comparableNeedle < comparableMiddle) ||\n      (sortDirection === 'descending' && comparableNeedle >= comparableMiddle)\n    ) {\n      right = middle - 1;\n    } else {\n      left = middle + 1;\n    }\n  }\n\n  // In case there are several array elements with the same comparable value, search around the insertion\n  // point to possibly find an element with the same key. If found, prefer it.\n  // This, for example, prevents duplication of messages with the same creation date.\n  if (selectKey) {\n    const needleKey = selectKey(needle);\n    const step = sortDirection === 'ascending' ? -1 : +1;\n    for (\n      let i = left + step;\n      0 <= i &&\n      i < sortedArray.length &&\n      selectValueToCompare(sortedArray[i]) === comparableNeedle;\n      i += step\n    ) {\n      if (selectKey(sortedArray[i]) === needleKey) {\n        return i;\n      }\n    }\n  }\n\n  return left;\n};\n\nexport function addToMessageList<T extends LocalMessage>(\n  messages: readonly T[],\n  newMessage: T,\n  timestampChanged = false,\n  sortBy: 'pinned_at' | 'created_at' = 'created_at',\n  addIfDoesNotExist = true,\n) {\n  const addMessageToList = addIfDoesNotExist || timestampChanged;\n  let newMessages = [...messages];\n\n  // if created_at has changed, message should be filtered and re-inserted in correct order\n  // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n  if (timestampChanged) {\n    newMessages = newMessages.filter(\n      (message) => !(message.id && newMessage.id === message.id),\n    );\n  }\n\n  // for empty list just concat and return unless it's an update or deletion\n  if (newMessages.length === 0 && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (newMessages.length === 0) {\n    return newMessages;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageTime = newMessage[sortBy]!.getTime();\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const messageIsNewest = newMessages.at(-1)![sortBy]!.getTime() < messageTime;\n\n  // if message is newer than last item in the list concat and return unless it's an update or deletion\n  if (messageIsNewest && addMessageToList) {\n    return newMessages.concat(newMessage);\n  } else if (messageIsNewest) {\n    return newMessages;\n  }\n\n  // find the closest index to push the new message\n  const insertionIndex = findIndexInSortedArray({\n    needle: newMessage,\n    sortedArray: newMessages,\n    sortDirection: 'ascending',\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    selectValueToCompare: (m) => m[sortBy]!.getTime(),\n    selectKey: (m) => m.id,\n  });\n\n  // message already exists and not filtered with timestampChanged, update and return\n  if (\n    !timestampChanged &&\n    newMessage.id &&\n    newMessages[insertionIndex] &&\n    newMessage.id === newMessages[insertionIndex].id\n  ) {\n    newMessages[insertionIndex] = newMessage;\n    return newMessages;\n  }\n\n  // do not add updated or deleted messages to the list if they already exist or come with a timestamp change\n  if (addMessageToList) {\n    newMessages.splice(insertionIndex, 0, newMessage);\n  }\n\n  return newMessages;\n}\n\nfunction maybeGetReactionGroupsFallback(\n  groups: { [key: string]: ReactionGroupResponse } | null | undefined,\n  counts: { [key: string]: number } | null | undefined,\n  scores: { [key: string]: number } | null | undefined,\n): { [key: string]: ReactionGroupResponse } | null {\n  if (groups) {\n    return groups;\n  }\n\n  if (counts && scores) {\n    const fallback: { [key: string]: ReactionGroupResponse } = {};\n\n    for (const type of Object.keys(counts)) {\n      fallback[type] = {\n        count: counts[type],\n        sum_scores: scores[type],\n      };\n    }\n\n    return fallback;\n  }\n\n  return null;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface DebouncedFunc<T extends (...args: any[]) => any> {\n  /**\n   * Call the original function, but applying the debounce rules.\n   *\n   * If the debounced function can be run immediately, this calls it and returns its return\n   * value.\n   *\n   * Otherwise, it returns the return value of the last invocation, or undefined if the debounced\n   * function was not invoked yet.\n   */\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n\n  /**\n   * Throw away any pending invocation of the debounced function.\n   */\n  cancel(): void;\n\n  /**\n   * If there is a pending invocation of the debounced function, invoke it immediately and return\n   * its return value.\n   *\n   * Otherwise, return the value from the last invocation, or undefined if the debounced function\n   * was never invoked.\n   */\n  flush(): ReturnType<T> | undefined;\n}\n\n// works exactly the same as lodash.debounce\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const debounce = <T extends (...args: any[]) => any>(\n  fn: T,\n  timeout = 0,\n  { leading = false, trailing = true }: { leading?: boolean; trailing?: boolean } = {},\n): DebouncedFunc<T> => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let argsForTrailingExecution: Parameters<T> | null = null;\n  let lastResult: ReturnType<T> | undefined;\n\n  const debouncedFn = (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n    } else if (leading) {\n      lastResult = fn(...args);\n    }\n    if (trailing) argsForTrailingExecution = args;\n\n    const timeoutHandler = () => {\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n        argsForTrailingExecution = null;\n      }\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n    return lastResult;\n  };\n\n  debouncedFn.cancel = () => {\n    if (runningTimeout) clearTimeout(runningTimeout);\n  };\n\n  debouncedFn.flush = () => {\n    if (runningTimeout) {\n      clearTimeout(runningTimeout);\n      runningTimeout = null;\n      if (argsForTrailingExecution) {\n        lastResult = fn(...argsForTrailingExecution);\n      }\n    }\n    return lastResult;\n  };\n  return debouncedFn;\n};\n\n// works exactly the same as lodash.throttle\nexport const throttle = <T extends (...args: unknown[]) => unknown>(\n  fn: T,\n  timeout = 200,\n  { leading = true, trailing = false }: { leading?: boolean; trailing?: boolean } = {},\n) => {\n  let runningTimeout: null | NodeJS.Timeout = null;\n  let storedArgs: Parameters<T> | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (runningTimeout) {\n      if (trailing) storedArgs = args;\n      return;\n    }\n\n    if (leading) fn(...args);\n\n    const timeoutHandler = () => {\n      if (storedArgs) {\n        fn(...storedArgs);\n        storedArgs = null;\n        runningTimeout = setTimeout(timeoutHandler, timeout);\n\n        return;\n      }\n\n      runningTimeout = null;\n    };\n\n    runningTimeout = setTimeout(timeoutHandler, timeout);\n  };\n};\n\nconst get = <T>(obj: T, path: string): unknown =>\n  path.split('.').reduce<unknown>((acc, key) => {\n    if (acc && typeof acc === 'object' && key in acc) {\n      return (acc as Record<string, unknown>)[key];\n    }\n    return undefined;\n  }, obj);\n\n// works exactly the same as lodash.uniqBy\nexport const uniqBy = <T>(\n  array: T[] | unknown,\n  iteratee: ((item: T) => unknown) | keyof T,\n): T[] => {\n  if (!Array.isArray(array)) return [];\n\n  const seen = new Set<unknown>();\n  return array.filter((item) => {\n    const key =\n      typeof iteratee === 'function' ? iteratee(item) : get(item, iteratee as string);\n    if (seen.has(key)) return false;\n    seen.add(key);\n    return true;\n  });\n};\n\ntype MessagePaginationUpdatedParams = {\n  parentSet: MessageSet;\n  requestedPageSize: number;\n  returnedPage: MessageResponse[];\n  logger?: Logger;\n  messagePaginationOptions?: MessagePaginationOptions;\n};\n\nexport function binarySearchByDateEqualOrNearestGreater(\n  array: {\n    created_at?: string;\n  }[],\n  targetDate: Date,\n): number {\n  let left = 0;\n  let right = array.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2);\n    const midCreatedAt = array[mid].created_at;\n    if (!midCreatedAt) {\n      left += 1;\n      continue;\n    }\n    const midDate = new Date(midCreatedAt);\n\n    if (midDate.getTime() === targetDate.getTime()) {\n      return mid;\n    } else if (midDate.getTime() < targetDate.getTime()) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  return left;\n}\n\nconst messagePaginationCreatedAtAround = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams) => {\n  const newPagination = { ...parentSet.pagination };\n  if (!messagePaginationOptions?.created_at_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n  let updateHasPrev;\n  let updateHasNext;\n  const createdAtAroundDate = new Date(messagePaginationOptions.created_at_around);\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n\n  // expect ASC order (from oldest to newest)\n  const wholePageHasNewerMessages =\n    !!firstPageMsg?.created_at && new Date(firstPageMsg.created_at) > createdAtAroundDate;\n  const wholePageHasOlderMessages =\n    !!lastPageMsg?.created_at && new Date(lastPageMsg.created_at) < createdAtAroundDate;\n\n  const requestedPageSizeNotMet =\n    requestedPageSize > parentSet.messages.length &&\n    requestedPageSize > returnedPage.length;\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length ||\n      parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (wholePageHasNewerMessages) {\n    hasPrev = false;\n    updateHasPrev = true;\n    if (requestedPageSizeNotMet) {\n      hasNext = false;\n      updateHasNext = true;\n    }\n  } else if (wholePageHasOlderMessages) {\n    hasNext = false;\n    updateHasNext = true;\n    if (requestedPageSizeNotMet) {\n      hasPrev = false;\n      updateHasPrev = true;\n    }\n  } else if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else {\n    const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n      firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n      lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n    ];\n    updateHasPrev = firstPageMsgIsFirstInSet;\n    updateHasNext = lastPageMsgIsLastInSet;\n    const midPointByCount = Math.floor(returnedPage.length / 2);\n    const midPointByCreationDate = binarySearchByDateEqualOrNearestGreater(\n      returnedPage,\n      createdAtAroundDate,\n    );\n\n    if (midPointByCreationDate !== -1) {\n      hasPrev = midPointByCount <= midPointByCreationDate;\n      hasNext = midPointByCount >= midPointByCreationDate;\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationIdAround = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams) => {\n  const newPagination = { ...parentSet.pagination };\n  const { id_around } = messagePaginationOptions || {};\n  if (!id_around) return newPagination;\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n  let updateHasPrev = firstPageMsgIsFirstInSet;\n  let updateHasNext = lastPageMsgIsLastInSet;\n\n  const midPoint = Math.floor(returnedPage.length / 2);\n  const noMoreMessages =\n    (requestedPageSize > parentSet.messages.length ||\n      parentSet.messages.length >= returnedPage.length) &&\n    requestedPageSize > returnedPage.length;\n\n  if (noMoreMessages) {\n    hasNext = hasPrev = false;\n    updateHasPrev = updateHasNext = true;\n  } else if (!returnedPage[midPoint]) {\n    return newPagination;\n  } else if (returnedPage[midPoint].id === id_around) {\n    hasPrev = hasNext = true;\n  } else {\n    let targetMsg;\n    const halves = [returnedPage.slice(0, midPoint), returnedPage.slice(midPoint)];\n    hasPrev = hasNext = true;\n    for (let i = 0; i < halves.length; i++) {\n      targetMsg = halves[i].find((message) => message.id === id_around);\n      if (targetMsg && i === 0) {\n        hasPrev = false;\n      }\n      if (targetMsg && i === 1) {\n        hasNext = false;\n      }\n    }\n  }\n\n  if (updateHasPrev && typeof hasPrev !== 'undefined') newPagination.hasPrev = hasPrev;\n  if (updateHasNext && typeof hasNext !== 'undefined') newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nconst messagePaginationLinear = ({\n  parentSet,\n  requestedPageSize,\n  returnedPage,\n  messagePaginationOptions,\n}: MessagePaginationUpdatedParams) => {\n  const newPagination = { ...parentSet.pagination };\n\n  let hasPrev;\n  let hasNext;\n\n  const [firstPageMsg, lastPageMsg] = [returnedPage[0], returnedPage.slice(-1)[0]];\n  const [firstPageMsgIsFirstInSet, lastPageMsgIsLastInSet] = [\n    firstPageMsg?.id && firstPageMsg.id === parentSet.messages[0]?.id,\n    lastPageMsg?.id && lastPageMsg.id === parentSet.messages.slice(-1)[0]?.id,\n  ];\n\n  const queriedNextMessages =\n    messagePaginationOptions &&\n    (messagePaginationOptions.created_at_after_or_equal ||\n      messagePaginationOptions.created_at_after ||\n      messagePaginationOptions.id_gt ||\n      messagePaginationOptions.id_gte);\n\n  const queriedPrevMessages =\n    typeof messagePaginationOptions === 'undefined'\n      ? true\n      : messagePaginationOptions.created_at_before_or_equal ||\n        messagePaginationOptions.created_at_before ||\n        messagePaginationOptions.id_lt ||\n        messagePaginationOptions.id_lte ||\n        messagePaginationOptions.offset;\n\n  const containsUnrecognizedOptionsOnly =\n    !queriedNextMessages &&\n    !queriedPrevMessages &&\n    !messagePaginationOptions?.id_around &&\n    !messagePaginationOptions?.created_at_around;\n\n  const hasMore = returnedPage.length >= requestedPageSize;\n\n  if (typeof queriedPrevMessages !== 'undefined' || containsUnrecognizedOptionsOnly) {\n    hasPrev = hasMore;\n  }\n  if (typeof queriedNextMessages !== 'undefined') {\n    hasNext = hasMore;\n  }\n  const returnedPageIsEmpty = returnedPage.length === 0;\n\n  if ((firstPageMsgIsFirstInSet || returnedPageIsEmpty) && typeof hasPrev !== 'undefined')\n    newPagination.hasPrev = hasPrev;\n  if ((lastPageMsgIsLastInSet || returnedPageIsEmpty) && typeof hasNext !== 'undefined')\n    newPagination.hasNext = hasNext;\n\n  return newPagination;\n};\n\nexport const messageSetPagination = (params: MessagePaginationUpdatedParams) => {\n  if (params.parentSet.messages.length < params.returnedPage.length) {\n    params.logger?.(\n      'error',\n      'Corrupted message set state: parent set size < returned page size',\n    );\n    return params.parentSet.pagination;\n  }\n\n  if (params.messagePaginationOptions?.created_at_around) {\n    return messagePaginationCreatedAtAround(params);\n  } else if (params.messagePaginationOptions?.id_around) {\n    return messagePaginationIdAround(params);\n  } else {\n    return messagePaginationLinear(params);\n  }\n};\n\n/**\n * A utility object used to prevent duplicate invocation of channel.watch() to be triggered when\n * 'notification.message_new' and 'notification.added_to_channel' events arrive at the same time.\n */\nconst WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL: Record<\n  string,\n  Promise<QueryChannelAPIResponse> | undefined\n> = {};\n\ntype GetChannelParams = {\n  client: StreamChat;\n  channel?: Channel;\n  id?: string;\n  members?: string[];\n  options?: ChannelQueryOptions;\n  type?: string;\n};\n/**\n * Calls channel.watch() if it was not already recently called. Waits for watch promise to resolve even if it was invoked previously.\n * If the channel is not passed as a property, it will get it either by its channel.cid or by its members list and do the same.\n * @param client\n * @param members\n * @param options\n * @param type\n * @param id\n * @param channel\n */\nexport const getAndWatchChannel = async ({\n  channel,\n  client,\n  id,\n  members,\n  options,\n  type,\n}: GetChannelParams) => {\n  if (!channel && !type) {\n    throw new Error('Channel or channel type have to be provided to query a channel.');\n  }\n\n  // unfortunately typescript is not able to infer that if (!channel && !type) === false, then channel or type has to be truthy\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const channelToWatch = channel || client.channel(type!, id, { members });\n\n  // need to keep as with call to channel.watch the id can be changed from undefined to an actual ID generated server-side\n  const originalCid = channelToWatch.id\n    ? channelToWatch.cid\n    : members && members.length\n      ? generateChannelTempCid(channelToWatch.type, members)\n      : undefined;\n\n  if (!originalCid) {\n    throw new Error(\n      'Channel ID or channel members array have to be provided to query a channel.',\n    );\n  }\n\n  const queryPromise = WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n\n  if (queryPromise) {\n    await queryPromise;\n  } else {\n    try {\n      WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid] = channelToWatch.watch(options);\n      await WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    } finally {\n      delete WATCH_QUERY_IN_PROGRESS_FOR_CHANNEL[originalCid];\n    }\n  }\n\n  return channelToWatch;\n};\n\n/**\n * Generates a temporary channel.cid for channels created without ID, as they need to be referenced\n * by an identifier until the back-end generates the final ID. The cid is generated by its member IDs\n * which are sorted and can be recreated the same every time given the same arguments.\n * @param channelType\n * @param members\n */\nexport const generateChannelTempCid = (channelType: string, members: string[]) => {\n  if (!members) return;\n  const membersStr = [...members].sort().join(',');\n  if (!membersStr) return;\n  return `${channelType}:!members-${membersStr}`;\n};\n\n/**\n * Checks if a channel is pinned or not. Will return true only if channel.state.membership.pinned_at exists.\n * @param channel\n */\nexport const isChannelPinned = (channel: Channel) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.pinned_at;\n};\n\n/**\n * Checks if a channel is archived or not. Will return true only if channel.state.membership.archived_at exists.\n * @param channel\n */\nexport const isChannelArchived = (channel: Channel) => {\n  if (!channel) return false;\n\n  const member = channel.state.membership;\n\n  return !!member?.archived_at;\n};\n\n/**\n * A utility that tells us whether we should consider archived channels or not based\n * on filters. Will return true only if filters.archived exists and is a boolean value.\n * @param filters\n */\nexport const shouldConsiderArchivedChannels = (filters: ChannelFilters) => {\n  if (!filters) return false;\n\n  return typeof filters.archived === 'boolean';\n};\n\n/**\n * Extracts the value of the sort parameter at a given index, for a targeted key. Can\n * handle both array and object versions of sort. Will return null if the index/key\n * combination does not exist.\n * @param atIndex - the index at which we'll examine the sort value, if it's an array one\n * @param sort - the sort value - both array and object notations are accepted\n * @param targetKey - the target key which needs to exist for the sort at a certain index\n */\nexport const extractSortValue = ({\n  atIndex,\n  sort,\n  targetKey,\n}: {\n  atIndex: number;\n  targetKey: keyof ChannelSortBase;\n  sort?: ChannelSort;\n}) => {\n  if (!sort) return null;\n  let option: null | ChannelSortBase = null;\n\n  if (Array.isArray(sort)) {\n    option = sort[atIndex] ?? null;\n  } else {\n    let index = 0;\n    for (const key in sort) {\n      if (index !== atIndex) {\n        index++;\n        continue;\n      }\n\n      if (key !== targetKey) {\n        return null;\n      }\n\n      option = sort;\n\n      break;\n    }\n  }\n\n  return option?.[targetKey] ?? null;\n};\n\n/**\n * Returns true only if `{ pinned_at: -1 }` or `{ pinned_at: 1 }` option is first within the `sort` array.\n */\nexport const shouldConsiderPinnedChannels = (sort: ChannelSort) => {\n  const value = findPinnedAtSortOrder({ sort });\n\n  if (typeof value !== 'number') return false;\n\n  return Math.abs(value) === 1;\n};\n\n/**\n * Checks whether the sort value of type object contains a pinned_at value or if\n * an array sort value type has the first value be an object containing pinned_at.\n * @param sort\n */\nexport const findPinnedAtSortOrder = ({ sort }: { sort: ChannelSort }) =>\n  extractSortValue({\n    atIndex: 0,\n    sort,\n    targetKey: 'pinned_at',\n  });\n\n/**\n * Finds the index of the last consecutively pinned channel, starting from the start of the\n * array. Will not consider any pinned channels after the contiguous subsequence at the\n * start of the array.\n * @param channels\n */\nexport const findLastPinnedChannelIndex = ({ channels }: { channels: Channel[] }) => {\n  let lastPinnedChannelIndex: number | null = null;\n\n  for (const channel of channels) {\n    if (!isChannelPinned(channel)) break;\n\n    if (typeof lastPinnedChannelIndex === 'number') {\n      lastPinnedChannelIndex++;\n    } else {\n      lastPinnedChannelIndex = 0;\n    }\n  }\n\n  return lastPinnedChannelIndex;\n};\n\n/**\n * A utility used to move a channel towards the beginning of a list of channels (promote it to a higher position). It\n * considers pinned channels in the process if needed and makes sure to only update the list reference if the list\n * should actually change. It will try to move the channel as high as it can within the list.\n * @param channels - the list of channels we want to modify\n * @param channelToMove - the channel we want to promote\n * @param channelToMoveIndexWithinChannels - optionally, the index of the channel we want to move if we know it (will skip a manual check)\n * @param sort - the sort value used to check for pinned channels\n */\nexport const promoteChannel = ({\n  channels,\n  channelToMove,\n  channelToMoveIndexWithinChannels,\n  sort,\n}: PromoteChannelParams) => {\n  // get index of channel to move up\n  const targetChannelIndex =\n    channelToMoveIndexWithinChannels ??\n    channels.findIndex((channel) => channel.cid === channelToMove.cid);\n\n  const targetChannelExistsWithinList = targetChannelIndex >= 0;\n  const targetChannelAlreadyAtTheTop = targetChannelIndex === 0;\n\n  // pinned channels should not move within the list based on recent activity, channels which\n  // receive messages and are not pinned should move upwards but only under the last pinned channel\n  // in the list\n  const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n  const isTargetChannelPinned = isChannelPinned(channelToMove);\n\n  if (targetChannelAlreadyAtTheTop || (considerPinnedChannels && isTargetChannelPinned)) {\n    return channels;\n  }\n\n  const newChannels = [...channels];\n\n  // target channel index is known, remove it from the list\n  if (targetChannelExistsWithinList) {\n    newChannels.splice(targetChannelIndex, 1);\n  }\n\n  // as position of pinned channels has to stay unchanged, we need to\n  // find last pinned channel in the list to move the target channel after\n  let lastPinnedChannelIndex: number | null = null;\n  if (considerPinnedChannels) {\n    lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n  }\n\n  // re-insert it at the new place (to specific index if pinned channels are considered)\n  newChannels.splice(\n    typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0,\n    0,\n    channelToMove,\n  );\n\n  return newChannels;\n};\n\nexport const isDate = (value: unknown): value is Date => !!(value as Date).getTime;\n\nexport const isLocalMessage = (message: unknown): message is LocalMessage =>\n  isDate((message as LocalMessage).created_at);\n\nexport const runDetached = <T>(\n  callback: Promise<void | T>,\n  options?: {\n    context?: string;\n    onSuccessCallback?: (res: T | void) => void | Promise<void>;\n    onErrorCallback?: (error: Error) => void | Promise<void>;\n  },\n) => {\n  const { context, onSuccessCallback = () => undefined, onErrorCallback } = options ?? {};\n  const defaultOnError = (error: Error) => {\n    console.log(`An error has occurred in context ${context}: ${error}`);\n  };\n  const onError = onErrorCallback ?? defaultOnError;\n\n  let promise = callback;\n\n  if (onSuccessCallback) {\n    promise = promise.then(onSuccessCallback);\n  }\n\n  promise.catch(onError);\n};\n","export const DEFAULT_QUERY_CHANNELS_MESSAGE_LIST_PAGE_SIZE = 25;\nexport const DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE = 100;\nexport const DEFAULT_MESSAGE_SET_PAGINATION = { hasNext: false, hasPrev: false };\nexport const DEFAULT_UPLOAD_SIZE_LIMIT_BYTES = 100 * 1024 * 1024; // 100 MB\nexport const API_MAX_FILES_ALLOWED_PER_MESSAGE = 10;\nexport const MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY = 100;\nexport const RESERVED_UPDATED_MESSAGE_FIELDS = {\n  // Dates should not be converted back to ISO strings as JS looses precision on them (milliseconds)\n  created_at: true,\n  deleted_at: true,\n  pinned_at: true,\n  updated_at: true,\n  command: true,\n  // Back-end enriches these fields\n  mentioned_users: true,\n  quoted_message: true,\n  // Client-specific fields\n  latest_reactions: true,\n  own_reactions: true,\n  reaction_counts: true,\n  reply_count: true,\n  // Message text related fields that shouldn't be in update\n  i18n: true,\n  type: true,\n  html: true,\n  __html: true,\n  user: true,\n} as const;\nexport const LOCAL_MESSAGE_FIELDS = { error: true } as const;\nexport const DEFAULT_QUERY_CHANNELS_RETRY_COUNT = 3;\nexport const DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES = 1000; // 1 second\n","import type { Channel } from './channel';\nimport type {\n  ChannelMemberResponse,\n  Event,\n  LocalMessage,\n  MessageResponse,\n  MessageResponseBase,\n  MessageSet,\n  MessageSetType,\n  PendingMessageResponse,\n  ReactionResponse,\n  UserResponse,\n} from './types';\nimport { addToMessageList, formatMessage } from './utils';\nimport { DEFAULT_MESSAGE_SET_PAGINATION } from './constants';\n\ntype ChannelReadStatus = Record<\n  string,\n  {\n    last_read: Date;\n    unread_messages: number;\n    user: UserResponse;\n    first_unread_message_id?: string;\n    last_read_message_id?: string;\n  }\n>;\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState {\n  _channel: Channel;\n  watcher_count: number;\n  typing: Record<string, Event>;\n  read: ChannelReadStatus;\n  pinnedMessages: Array<ReturnType<ChannelState['formatMessage']>>;\n  pending_messages: Array<PendingMessageResponse>;\n  threads: Record<string, Array<ReturnType<ChannelState['formatMessage']>>>;\n  mutedUsers: Array<UserResponse>;\n  watchers: Record<string, UserResponse>;\n  members: Record<string, ChannelMemberResponse>;\n  unreadCount: number;\n  membership: ChannelMemberResponse;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */\n  messageSets: MessageSet[] = [];\n\n  constructor(channel: Channel) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at =\n      channel?.state?.last_message_at != null\n        ? new Date(channel.state.last_message_at)\n        : null;\n  }\n\n  get messages() {\n    return this.messageSets.find((s) => s.isCurrent)?.messages || [];\n  }\n\n  set messages(messages: Array<ReturnType<ChannelState['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isCurrent);\n    this.messageSets[index].messages = messages;\n  }\n\n  /**\n   * The list of latest messages\n   * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n   */\n  get latestMessages() {\n    return this.messageSets.find((s) => s.isLatest)?.messages || [];\n  }\n\n  set latestMessages(messages: Array<ReturnType<ChannelState['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isLatest);\n    this.messageSets[index].messages = messages;\n  }\n\n  get messagePagination() {\n    return (\n      this.messageSets.find((s) => s.isCurrent)?.pagination ||\n      DEFAULT_MESSAGE_SET_PAGINATION\n    );\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n   */\n  addMessageSorted(\n    newMessage: MessageResponse | LocalMessage,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n  }\n\n  /**\n   * Takes the message object, parses the dates, sets `__html`\n   * and sets the status to `received` if missing; returns a new message object.\n   *\n   * @param {MessageResponse} message `MessageResponse` object\n   */\n  formatMessage = (message: MessageResponse | MessageResponseBase | LocalMessage) =>\n    formatMessage(message);\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n   *\n   */\n  addMessagesSorted(\n    newMessages: (MessageResponse | LocalMessage)[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    const { messagesToAdd, targetMessageSetIndex } = this.findTargetMessageSet(\n      newMessages,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n\n    for (let i = 0; i < messagesToAdd.length; i += 1) {\n      const isFromShadowBannedUser = messagesToAdd[i].shadowed;\n      if (isFromShadowBannedUser) {\n        continue;\n      }\n      // If message is already formatted we can skip the tasks below\n      // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n      // This will be also true for message previews used by some SDKs\n      const isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n      let message: ReturnType<ChannelState['formatMessage']>;\n      if (isMessageFormatted) {\n        message = messagesToAdd[i] as ReturnType<ChannelState['formatMessage']>;\n      } else {\n        message = this.formatMessage(messagesToAdd[i]);\n\n        if (message.user && this._channel?.cid) {\n          /**\n           * Store the reference to user for this channel, so that when we have to\n           * handle updates to user, we can use the reference map, to determine which\n           * channels need to be updated with updated user object.\n           */\n          this._channel\n            .getClient()\n            .state.updateUserReference(message.user, this._channel.cid);\n        }\n\n        if (initializing && message.id && this.threads[message.id]) {\n          // If we are initializing the state of channel (e.g., in case of connection recovery),\n          // then in that case we remove thread related to this message from threads object.\n          // This way we can ensure that we don't have any stale data in thread object\n          // and consumer can refetch the replies.\n          delete this.threads[message.id];\n        }\n\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the given message set\n      if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(\n          this.messageSets[targetMessageSetIndex].messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        this.threads[parentID] = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n    }\n\n    return {\n      messageSet: this.messageSets[targetMessageSetIndex],\n    };\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(pinnedMessages: MessageResponse[]) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(pinnedMessage: MessageResponse) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse} message message to remove\n   *\n   */\n  removePinnedMessage(message: MessageResponse) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse,\n    message?: MessageResponse,\n    enforce_unique?: boolean,\n  ) {\n    const messageWithReaction = message;\n    let messageFromState: LocalMessage | undefined;\n    if (!messageWithReaction) {\n      messageFromState = this.findMessage(reaction.message_id);\n    }\n\n    if (!messageWithReaction && !messageFromState) {\n      return;\n    }\n\n    const messageToUpdate = messageWithReaction ?? messageFromState;\n    const updateData = {\n      id: messageToUpdate?.id,\n      parent_id: messageToUpdate?.parent_id,\n      pinned: messageToUpdate?.pinned,\n      show_in_channel: messageToUpdate?.show_in_channel,\n    };\n\n    this._updateMessage(updateData, (msg) => {\n      if (messageWithReaction) {\n        const updatedMessage = { ...messageWithReaction };\n        // This part will remove own_reactions from what is essentially\n        // a copy of event.message; we do not want to return that as someone\n        // else reaction would remove our own_reactions needlessly. This\n        // only happens when we are not the sender of the reaction. We need\n        // the variable itself so that the event can be properly enriched\n        // later on.\n        messageWithReaction.own_reactions = this._addOwnReactionToMessage(\n          msg.own_reactions,\n          reaction,\n          enforce_unique,\n        );\n        // Whenever we are the ones sending the reaction, the helper enriches\n        // own_reactions as normal so we can use that, otherwise we fallback\n        // to whatever state we had.\n        updatedMessage.own_reactions =\n          this._channel.getClient().userID === reaction.user_id\n            ? messageWithReaction.own_reactions\n            : msg.own_reactions;\n        return this.formatMessage(updatedMessage);\n      }\n\n      if (messageFromState) {\n        return this._addReactionToState(messageFromState, reaction, enforce_unique);\n      }\n\n      return msg;\n    });\n    return messageWithReaction ?? messageFromState;\n  }\n\n  _addReactionToState(\n    messageFromState: LocalMessage,\n    reaction: ReactionResponse,\n    enforce_unique?: boolean,\n  ) {\n    if (!messageFromState.reaction_groups) {\n      messageFromState.reaction_groups = {};\n    }\n\n    // 1. Firstly, get rid of all of our own reactions from the reaction_groups\n    //    if enforce_unique is enabled.\n    if (enforce_unique) {\n      for (const ownReaction of messageFromState.own_reactions ?? []) {\n        const oldOwnReactionTypeData = messageFromState.reaction_groups[ownReaction.type];\n        messageFromState.reaction_groups[ownReaction.type] = {\n          ...oldOwnReactionTypeData,\n          count: oldOwnReactionTypeData.count - 1,\n          sum_scores: oldOwnReactionTypeData.sum_scores - (ownReaction.score ?? 1),\n        };\n        // If there are no reactions left in this group, simply remove it.\n        if (messageFromState.reaction_groups[ownReaction.type].count < 1) {\n          delete messageFromState.reaction_groups[ownReaction.type];\n        }\n      }\n    }\n\n    const newReactionGroups = messageFromState.reaction_groups;\n    const oldReactionTypeData = newReactionGroups[reaction.type];\n    const score = reaction.score ?? 1;\n\n    // 2. Next, update the reaction_groups with the new reaction.\n    messageFromState.reaction_groups[reaction.type] = oldReactionTypeData\n      ? {\n          ...oldReactionTypeData,\n          count: oldReactionTypeData.count + 1,\n          sum_scores: oldReactionTypeData.sum_scores + score,\n          last_reaction_at: reaction.created_at,\n        }\n      : {\n          count: 1,\n          first_reaction_at: reaction.created_at,\n          last_reaction_at: reaction.created_at,\n          sum_scores: score,\n        };\n\n    // 3. Update the own_reactions with the new reaction.\n    messageFromState.own_reactions = this._addOwnReactionToMessage(\n      messageFromState.own_reactions,\n      reaction,\n      enforce_unique,\n    );\n\n    // 4. Finally, update the latest_reactions with the new reaction,\n    //    while respecting enforce_unique.\n    const userId = this._channel.getClient().userID;\n    messageFromState.latest_reactions = enforce_unique\n      ? [\n          ...(messageFromState.latest_reactions || []).filter(\n            (r) => r.user_id !== userId,\n          ),\n          reaction,\n        ]\n      : [...(messageFromState.latest_reactions || []), reaction];\n\n    return messageFromState;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse[] | null | undefined,\n    reaction: ReactionResponse,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse[] | null | undefined,\n    reaction: ReactionResponse,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter(\n        (item) => item.user_id !== reaction.user_id || item.type !== reaction.type,\n      );\n    }\n    return ownReactions;\n  }\n\n  removeReaction(reaction: ReactionResponse, message?: MessageResponse) {\n    const messageWithRemovedReaction = message;\n    let messageFromState: LocalMessage | undefined;\n    if (!messageWithRemovedReaction) {\n      messageFromState = this.findMessage(reaction.message_id);\n    }\n\n    if (!messageWithRemovedReaction && !messageFromState) {\n      return;\n    }\n\n    const messageToUpdate = messageWithRemovedReaction ?? messageFromState;\n    const updateData = {\n      id: messageToUpdate?.id,\n      parent_id: messageToUpdate?.parent_id,\n      pinned: messageToUpdate?.pinned,\n      show_in_channel: messageToUpdate?.show_in_channel,\n    };\n    this._updateMessage(updateData, (msg) => {\n      if (messageWithRemovedReaction) {\n        messageWithRemovedReaction.own_reactions = this._removeOwnReactionFromMessage(\n          msg.own_reactions,\n          reaction,\n        );\n        return this.formatMessage(messageWithRemovedReaction);\n      }\n\n      if (messageFromState) {\n        return this._removeReactionFromState(messageFromState, reaction);\n      }\n\n      return msg;\n    });\n    return messageWithRemovedReaction;\n  }\n\n  _removeReactionFromState(messageFromState: LocalMessage, reaction: ReactionResponse) {\n    const reactionToRemove = messageFromState.own_reactions?.find(\n      (r) => r.type === reaction.type,\n    );\n    if (reactionToRemove && messageFromState.reaction_groups?.[reactionToRemove.type]) {\n      const newReactionGroup = messageFromState.reaction_groups[reactionToRemove.type];\n      messageFromState.reaction_groups[reactionToRemove.type] = {\n        ...newReactionGroup,\n        count: newReactionGroup.count - 1,\n        sum_scores: newReactionGroup.sum_scores - (reactionToRemove.score ?? 1),\n      };\n      // If there are no reactions left in this group, simply remove it.\n      if (messageFromState.reaction_groups[reactionToRemove.type].count < 1) {\n        delete messageFromState.reaction_groups[reactionToRemove.type];\n      }\n    }\n    messageFromState.own_reactions = messageFromState.own_reactions?.filter(\n      (r) => r.type !== reaction.type,\n    );\n    const userId = this._channel.getClient().userID;\n    messageFromState.latest_reactions = messageFromState.latest_reactions?.filter(\n      (r) => !(r.user_id === userId && r.type === reaction.type),\n    );\n    return messageFromState;\n  }\n\n  _updateQuotedMessageReferences({\n    message,\n    remove,\n  }: {\n    message: MessageResponse;\n    remove?: boolean;\n  }) {\n    const parseMessage = (m: ReturnType<ChannelState['formatMessage']>) =>\n      ({\n        ...m,\n        created_at: m.created_at.toISOString(),\n        pinned_at: m.pinned_at?.toISOString(),\n        updated_at: m.updated_at?.toISOString(),\n      }) as unknown as MessageResponse;\n\n    const update = (messages: LocalMessage[]) => {\n      const updatedMessages = messages.reduce<MessageResponse[]>((acc, msg) => {\n        if (msg.quoted_message_id === message.id) {\n          acc.push({\n            ...parseMessage(msg),\n            quoted_message: remove ? { ...message, attachments: [] } : message,\n          });\n        }\n        return acc;\n      }, []);\n      this.addMessagesSorted(updatedMessages, true);\n    };\n\n    if (!message.parent_id) {\n      this.messageSets.forEach((set) => update(set.messages));\n    } else if (message.parent_id && this.threads[message.parent_id]) {\n      // prevent going through all the threads even though it is possible to quote a message from another thread\n      update(this.threads[message.parent_id]);\n    }\n  }\n\n  removeQuotedMessageReferences(message: MessageResponse) {\n    this._updateQuotedMessageReferences({ message, remove: true });\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<ChannelState['formatMessage']>,\n    ) => ReturnType<ChannelState['formatMessage']>,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const messageSetIndex = this.findMessageSetIndex(message);\n      if (messageSetIndex !== -1) {\n        const msgIndex = this.messageSets[messageSetIndex].messages.findIndex(\n          (msg) => msg.id === message.id,\n        );\n        if (msgIndex !== -1) {\n          const upMsg = updateFunc(this.messageSets[messageSetIndex].messages[msgIndex]);\n          this.messageSets[messageSetIndex].messages[msgIndex] = upMsg;\n        }\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<ReturnType<ChannelState['formatMessage']>>,\n    message: ReturnType<ChannelState['formatMessage']>,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    return addToMessageList(\n      messages,\n      message,\n      timestampChanged,\n      sortBy,\n      addIfDoesNotExist,\n    );\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: {\n    id: string;\n    messageSetIndex?: number;\n    parent_id?: string;\n  }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const messageSetIndex =\n        messageToRemove.messageSetIndex ?? this.findMessageSetIndex(messageToRemove);\n      if (messageSetIndex !== -1) {\n        const { removed, result: messages } = this.removeMessageFromArray(\n          this.messageSets[messageSetIndex].messages,\n          messageToRemove,\n        );\n        this.messageSets[messageSetIndex].messages = messages;\n        isRemoved = removed;\n      }\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<ReturnType<ChannelState['formatMessage']>>,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter(\n      (message) => !(!!message.id && !!msg.id && message.id === msg.id),\n    );\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse} user\n   */\n  updateUserMessages = (user: UserResponse) => {\n    const _updateUserMessages = (\n      messages: Array<ReturnType<ChannelState['formatMessage']>>,\n      user: UserResponse,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _updateUserMessages(set.messages, user));\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<ReturnType<ChannelState['formatMessage']>>,\n      user: UserResponse,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = {\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown as ReturnType<ChannelState['formatMessage']>;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at ? new Date(user.deleted_at) : null,\n          };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) =>\n      _deleteUserMessages(set.messages, user, hardDelete),\n    );\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.latestMessages.filter(\n      (message) => message.type !== 'error',\n    );\n\n    this.latestMessages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.initMessages();\n    this.pinnedMessages = [];\n  }\n\n  initMessages() {\n    this.messageSets = [\n      {\n        messages: [],\n        isLatest: true,\n        isCurrent: true,\n        pagination: DEFAULT_MESSAGE_SET_PAGINATION,\n      },\n    ];\n  }\n\n  /**\n   * loadMessageIntoState - Loads a given message (and messages around it) into the state\n   *\n   * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   * @param {number} limit The page size if the message has to be queried from the server\n   */\n  async loadMessageIntoState(\n    messageId: string | 'latest',\n    parentMessageId?: string,\n    limit = 25,\n  ) {\n    let messageSetIndex: number;\n    let switchedToMessageSet = false;\n    let loadedMessageThread = false;\n    const messageIdToFind = parentMessageId || messageId;\n    if (messageId === 'latest') {\n      if (this.messages === this.latestMessages) {\n        return;\n      }\n      messageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n    } else {\n      messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    }\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n      switchedToMessageSet = true;\n    }\n    loadedMessageThread =\n      !parentMessageId ||\n      !!this.threads[parentMessageId]?.find((m) => m.id === messageId);\n    if (switchedToMessageSet && loadedMessageThread) {\n      return;\n    }\n    if (!switchedToMessageSet) {\n      await this._channel.query(\n        { messages: { id_around: messageIdToFind, limit } },\n        'new',\n      );\n    }\n    if (!loadedMessageThread && parentMessageId) {\n      await this._channel.getReplies(parentMessageId, { id_around: messageId, limit });\n    }\n    messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n    }\n  }\n\n  /**\n   * findMessage - Finds a message inside the state\n   *\n   * @param {string} messageId The id of the message\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   *\n   * @return {ReturnType<ChannelState['formatMessage']>} Returns the message, or undefined if the message wasn't found\n   */\n  findMessage(messageId: string, parentMessageId?: string) {\n    if (parentMessageId) {\n      const messages = this.threads[parentMessageId];\n      if (!messages) {\n        return undefined;\n      }\n      return messages.find((m) => m.id === messageId);\n    }\n\n    const messageSetIndex = this.findMessageSetIndex({ id: messageId });\n    if (messageSetIndex === -1) {\n      return undefined;\n    }\n    return this.messageSets[messageSetIndex].messages.find((m) => m.id === messageId);\n  }\n\n  private switchToMessageSet(index: number) {\n    const currentMessages = this.messageSets.find((s) => s.isCurrent);\n    if (!currentMessages) {\n      return;\n    }\n    currentMessages.isCurrent = false;\n    this.messageSets[index].isCurrent = true;\n  }\n\n  private areMessageSetsOverlap(\n    messages1: Array<{ id: string }>,\n    messages2: Array<{ id: string }>,\n  ) {\n    return messages1.some((m1) => messages2.find((m2) => m1.id === m2.id));\n  }\n\n  private findMessageSetIndex(message: { id?: string }) {\n    return this.messageSets.findIndex(\n      (set) => !!set.messages.find((m) => m.id === message.id),\n    );\n  }\n\n  private findTargetMessageSet(\n    newMessages: (MessageResponse | LocalMessage)[],\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    let messagesToAdd: (MessageResponse | LocalMessage)[] = newMessages;\n    let targetMessageSetIndex!: number;\n    if (addIfDoesNotExist) {\n      const overlappingMessageSetIndices = this.messageSets\n        .map((_, i) => i)\n        .filter((i) =>\n          this.areMessageSetsOverlap(this.messageSets[i].messages, newMessages),\n        );\n      switch (messageSetToAddToIfDoesNotExist) {\n        case 'new':\n          if (overlappingMessageSetIndices.length > 0) {\n            targetMessageSetIndex = overlappingMessageSetIndices[0];\n            // No new message set is created if newMessages only contains thread replies\n          } else if (newMessages.some((m) => !m.parent_id)) {\n            this.messageSets.push({\n              messages: [],\n              isCurrent: false,\n              isLatest: false,\n              pagination: DEFAULT_MESSAGE_SET_PAGINATION,\n            });\n            targetMessageSetIndex = this.messageSets.length - 1;\n          }\n          break;\n        case 'current':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isCurrent);\n          break;\n        case 'latest':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n          break;\n        default:\n          targetMessageSetIndex = -1;\n      }\n      // when merging the target set will be the first one from the overlapping message sets\n      const mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n      const mergeSourceMessageSetIndices = [...overlappingMessageSetIndices];\n      if (\n        mergeTargetMessageSetIndex !== undefined &&\n        mergeTargetMessageSetIndex !== targetMessageSetIndex\n      ) {\n        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n      }\n      // merge message sets\n      if (mergeSourceMessageSetIndices.length > 0) {\n        const target = this.messageSets[mergeTargetMessageSetIndex];\n        const sources = this.messageSets.filter(\n          (_, i) => mergeSourceMessageSetIndices.indexOf(i) !== -1,\n        );\n        sources.forEach((messageSet) => {\n          target.isLatest = target.isLatest || messageSet.isLatest;\n          target.isCurrent = target.isCurrent || messageSet.isCurrent;\n          target.pagination.hasPrev =\n            messageSet.messages[0].created_at < target.messages[0].created_at\n              ? messageSet.pagination.hasPrev\n              : target.pagination.hasPrev;\n          target.pagination.hasNext =\n            target.messages.slice(-1)[0].created_at <\n            messageSet.messages.slice(-1)[0].created_at\n              ? messageSet.pagination.hasNext\n              : target.pagination.hasNext;\n          messagesToAdd = [...messagesToAdd, ...messageSet.messages];\n        });\n        sources.forEach((s) => this.messageSets.splice(this.messageSets.indexOf(s), 1));\n        const overlappingMessageSetIndex = this.messageSets.findIndex((s) =>\n          this.areMessageSetsOverlap(s.messages, newMessages),\n        );\n        targetMessageSetIndex = overlappingMessageSetIndex;\n      }\n    } else {\n      // assumes that all new messages belong to the same set\n      targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n    }\n\n    return { targetMessageSetIndex, messagesToAdd };\n  }\n}\n","import type { Attachment } from '../types';\nimport type {\n  AudioAttachment,\n  FileAttachment,\n  ImageAttachment,\n  LocalAttachment,\n  LocalAudioAttachment,\n  LocalFileAttachment,\n  LocalImageAttachment,\n  LocalUploadAttachment,\n  LocalVideoAttachment,\n  LocalVoiceRecordingAttachment,\n  UploadedAttachment,\n  VideoAttachment,\n  VoiceRecordingAttachment,\n} from './types';\n\nexport const isScrapedContent = (attachment: Attachment) =>\n  !!attachment?.og_scrape_url || !!attachment?.title_link;\n\nexport const isLocalAttachment = (attachment: unknown): attachment is LocalAttachment =>\n  !!(attachment as LocalAttachment)?.localMetadata?.id;\n\nexport const isLocalUploadAttachment = (\n  attachment: unknown,\n): attachment is LocalUploadAttachment =>\n  !!(attachment as LocalAttachment)?.localMetadata?.uploadState;\n\nexport const isFileAttachment = (\n  attachment: Attachment | LocalAttachment,\n  supportedVideoFormat: string[] = [],\n): attachment is FileAttachment =>\n  attachment.type === 'file' ||\n  !!(\n    attachment.mime_type &&\n    supportedVideoFormat.indexOf(attachment.mime_type) === -1 &&\n    attachment.type !== 'video'\n  );\n\nexport const isLocalFileAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is LocalFileAttachment =>\n  isFileAttachment(attachment) && isLocalAttachment(attachment);\n\nexport const isImageAttachment = (\n  attachment: Attachment,\n): attachment is ImageAttachment =>\n  attachment.type === 'image' && !isScrapedContent(attachment);\n\nexport const isLocalImageAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is LocalImageAttachment =>\n  isImageAttachment(attachment) && isLocalAttachment(attachment);\n\nexport const isAudioAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is AudioAttachment => attachment.type === 'audio';\n\nexport const isLocalAudioAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is LocalAudioAttachment =>\n  isAudioAttachment(attachment) && isLocalAttachment(attachment);\n\nexport const isVoiceRecordingAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is VoiceRecordingAttachment => attachment.type === 'voiceRecording';\n\nexport const isLocalVoiceRecordingAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is LocalVoiceRecordingAttachment =>\n  isVoiceRecordingAttachment(attachment) && isLocalAttachment(attachment);\n\nexport const isVideoAttachment = (\n  attachment: Attachment | LocalAttachment,\n  supportedVideoFormat: string[] = [],\n): attachment is VideoAttachment =>\n  attachment.type === 'video' ||\n  !!(attachment.mime_type && supportedVideoFormat.indexOf(attachment.mime_type) !== -1);\n\nexport const isLocalVideoAttachment = (\n  attachment: Attachment | LocalAttachment,\n): attachment is LocalVideoAttachment =>\n  isVideoAttachment(attachment) && isLocalAttachment(attachment);\n\nexport const isUploadedAttachment = (\n  attachment: Attachment,\n): attachment is UploadedAttachment =>\n  isAudioAttachment(attachment) ||\n  isFileAttachment(attachment) ||\n  isImageAttachment(attachment) ||\n  isVideoAttachment(attachment) ||\n  isVoiceRecordingAttachment(attachment);\n","import type { Attachment } from '../types';\nimport { generateUUIDv4 } from '../utils';\nimport { isLocalAttachment } from './attachmentIdentity';\nimport type {\n  BaseLocalAttachmentMetadata,\n  FileLike,\n  FileReference,\n  LocalAttachment,\n} from './types';\n\nexport const isFile = (fileLike: FileReference | File | Blob): fileLike is File =>\n  !!(fileLike as File).lastModified && !('uri' in fileLike);\n\nexport const isFileList = (obj: unknown): obj is FileList => {\n  if (obj === null || obj === undefined) return false;\n  if (typeof obj !== 'object') return false;\n\n  return (\n    (typeof FileList !== 'undefined' && (obj as object) instanceof FileList) ||\n    ('item' in obj && 'length' in obj && !Array.isArray(obj))\n  );\n};\n\nexport const isBlobButNotFile = (obj: unknown): obj is Blob =>\n  obj instanceof Blob && !(obj instanceof File);\n\nexport const isFileReference = (obj: FileReference | FileLike): obj is FileReference =>\n  obj !== null &&\n  typeof obj === 'object' &&\n  !isFile(obj) &&\n  !isBlobButNotFile(obj) &&\n  typeof obj.name === 'string' &&\n  typeof obj.uri === 'string' &&\n  typeof obj.size === 'number' &&\n  typeof obj.type === 'string';\n\nexport const createFileFromBlobs = ({\n  blobsArray,\n  fileName,\n  mimeType,\n}: {\n  blobsArray: Blob[];\n  fileName: string;\n  mimeType: string;\n}) => {\n  const concatenatedBlob = new Blob(blobsArray, { type: mimeType });\n  return new File([concatenatedBlob], fileName, { type: concatenatedBlob.type });\n};\n\nexport const getExtensionFromMimeType = (mimeType: string) => {\n  const match = mimeType.match(/\\/([^/;]+)/);\n  return match?.[1];\n};\n\nexport const readFileAsArrayBuffer = (file: File): Promise<ArrayBuffer> =>\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result as ArrayBuffer);\n    };\n\n    fileReader.onerror = () => {\n      reject(fileReader.error);\n    };\n\n    fileReader.readAsArrayBuffer(file);\n  });\n\nexport const generateFileName = (mimeType: string) => {\n  const extension = getExtensionFromMimeType(mimeType);\n  return `file_${new Date().toISOString()}${extension ? '.' + extension : ''}`;\n};\n\nexport const isImageFile = (fileLike: FileReference | FileLike) => {\n  const mimeType = fileLike.type;\n  return mimeType.startsWith('image/') && !mimeType.endsWith('.photoshop'); // photoshop files begin with 'image/'\n};\n\nexport const getAttachmentTypeFromMimeType = (mimeType: string) => {\n  if (mimeType.startsWith('image/') && !mimeType.endsWith('.photoshop')) return 'image';\n  if (mimeType.includes('video/')) return 'video';\n  if (mimeType.includes('audio/')) return 'audio';\n  return 'file';\n};\n\nexport const ensureIsLocalAttachment = (\n  attachment: Attachment | LocalAttachment,\n): LocalAttachment | null => {\n  if (!attachment) return null;\n  if (isLocalAttachment(attachment)) {\n    return attachment;\n  }\n  // local is considered local only if localMetadata has `id` so this is to doublecheck\n  const { localMetadata, ...rest } = attachment as LocalAttachment;\n  return {\n    localMetadata: {\n      ...(localMetadata ?? {}),\n      id: (localMetadata as BaseLocalAttachmentMetadata)?.id || generateUUIDv4(),\n    },\n    ...rest,\n  };\n};\n","export type Patch<T> = (value: T) => T;\nexport type ValueOrPatch<T> = T | Patch<T>;\nexport type Handler<T> = (nextValue: T, previousValue: T | undefined) => void;\nexport type Unsubscribe = () => void;\n// aliases\nexport type RemovePreprocessor = Unsubscribe;\nexport type Preprocessor<T> = Handler<T>;\n\nexport const isPatch = <T>(value: ValueOrPatch<T>): value is Patch<T> =>\n  typeof value === 'function';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\nexport class StateStore<T extends Record<string, unknown>> {\n  protected handlers = new Set<Handler<T>>();\n  protected preprocessors = new Set<Preprocessor<T>>();\n\n  constructor(protected value: T) {}\n\n  /**\n   * Allows merging two stores only if their keys differ otherwise there's no way to ensure the data type stability.\n   * @experimental\n   * This method is experimental and may change in future versions.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public merge<Q extends StateStore<any>>(\n    stateStore: Q extends StateStore<infer L>\n      ? Extract<keyof T, keyof L> extends never\n        ? Q\n        : never\n      : never,\n  ) {\n    return new MergedStateStore<T, Q extends StateStore<infer L> ? L : never>({\n      original: this,\n      merged: stateStore,\n    });\n  }\n\n  public next(newValueOrPatch: ValueOrPatch<T>): void {\n    // newValue (or patch output) should never be a mutated previous value\n    const newValue = isPatch(newValueOrPatch)\n      ? newValueOrPatch(this.value)\n      : newValueOrPatch;\n\n    // do not notify subscribers if the value hasn't changed\n    if (newValue === this.value) return;\n\n    this.preprocessors.forEach((preprocessor) => preprocessor(newValue, this.value));\n\n    const oldValue = this.value;\n    this.value = newValue;\n\n    this.handlers.forEach((handler) => handler(this.value, oldValue));\n  }\n\n  public partialNext = (partial: Partial<T>): void =>\n    this.next((current) => ({ ...current, ...partial }));\n\n  public getLatestValue(): T {\n    return this.value;\n  }\n\n  public subscribe(handler: Handler<T>): Unsubscribe {\n    handler(this.value, undefined);\n    this.handlers.add(handler);\n    return () => {\n      this.handlers.delete(handler);\n    };\n  }\n\n  public subscribeWithSelector = <\n    O extends Readonly<Record<string, unknown>> | Readonly<unknown[]>,\n  >(\n    selector: (nextValue: T) => O,\n    handler: Handler<O>,\n  ) => {\n    // begin with undefined to reduce amount of selector calls\n    let previouslySelectedValues: O | undefined;\n\n    const wrappedHandler: Handler<T> = (nextValue) => {\n      const newlySelectedValues = selector(nextValue);\n\n      let hasUpdatedValues = typeof previouslySelectedValues === 'undefined';\n\n      for (const key in previouslySelectedValues) {\n        if (previouslySelectedValues[key] === newlySelectedValues[key]) continue;\n        hasUpdatedValues = true;\n        break;\n      }\n\n      if (!hasUpdatedValues) return;\n\n      // save a copy of previouslySelectedValues before running\n      // handler - if previouslySelectedValues are set to\n      // newlySelectedValues after the handler call, there's a chance\n      // that it'll never get set as handler can throw and flow might\n      // go out of sync\n      const previouslySelectedValuesCopy = previouslySelectedValues;\n      previouslySelectedValues = newlySelectedValues;\n\n      handler(newlySelectedValues, previouslySelectedValuesCopy);\n    };\n\n    return this.subscribe(wrappedHandler);\n  };\n\n  /**\n   * Registers a preprocessor function that will be called before the state is updated.\n   *\n   * Preprocessors are invoked with the new and previous values whenever `next` or `partialNext` methods\n   * are called, allowing you to mutate or react to the new value before it is set. Preprocessors run in the\n   * order they were registered.\n   *\n   * @example\n   * ```ts\n   * const store = new StateStore<{ count: number; isMaxValue: bool; }>({ count: 0, isMaxValue: false });\n   *\n   * store.addPreprocessor((nextValue, prevValue) => {\n   *   if (nextValue.count > 10) {\n   *     nextValue.count = 10; // Clamp the value to a maximum of 10\n   *   }\n   *\n   *   if (nextValue.count === 10) {\n   *     nextValue.isMaxValue = true; // Set isMaxValue to true if count is 10\n   *   } else {\n   *     nextValue.isMaxValue = false; // Reset isMaxValue otherwise\n   *   }\n   * });\n   *\n   * store.partialNext({ count: 15 });\n   *\n   * store.getLatestValue(); // { count: 10, isMaxValue: true }\n   *\n   * store.partialNext({ count: 5 });\n   *\n   * store.getLatestValue(); // { count: 5, isMaxValue: false }\n   * ```\n   *\n   * @param preprocessor - The function to be called with the next and previous values before the state is updated.\n   * @returns A `RemovePreprocessor` function that removes the preprocessor when called.\n   */\n  public addPreprocessor(preprocessor: Preprocessor<T>): RemovePreprocessor {\n    this.preprocessors.add(preprocessor);\n\n    return () => {\n      this.preprocessors.delete(preprocessor);\n    };\n  }\n}\n\n/**\n * Represents a merged state store that combines two separate state stores into one.\n *\n * The MergedStateStore allows combining two stores with non-overlapping keys.\n * It extends StateStore with the combined type of both source stores.\n * Changes to either the original or merged store will propagate to the combined store.\n *\n * Note: Direct mutations (next, partialNext, addPreprocessor) are disabled on the merged store.\n * You should instead call these methods on the original or merged stores.\n *\n * @template O The type of the original state store\n * @template M The type of the merged state store\n *\n * @experimental\n * This class is experimental and may change in future versions.\n */\nexport class MergedStateStore<\n  O extends Record<string, unknown>,\n  M extends Record<string, unknown>,\n> extends StateStore<O & M> {\n  public readonly original: StateStore<O>;\n  public readonly merged: StateStore<M>;\n  private cachedOriginalValue: O;\n  private cachedMergedValue: M;\n\n  constructor({ original, merged }: { original: StateStore<O>; merged: StateStore<M> }) {\n    const originalValue = original.getLatestValue();\n    const mergedValue = merged.getLatestValue();\n\n    super({\n      ...originalValue,\n      ...mergedValue,\n    });\n\n    this.cachedOriginalValue = originalValue;\n    this.cachedMergedValue = mergedValue;\n\n    this.original = original;\n    this.merged = merged;\n  }\n\n  /**\n   * Subscribes to changes in the merged state store.\n   *\n   * This method extends the base subscribe functionality to handle the merged nature of this store:\n   * 1. The first subscriber triggers registration of helper subscribers that listen to both source stores\n   * 2. Changes from either source store are propagated to this merged store\n   * 3. Source store values are cached to prevent unnecessary updates\n   *\n   * When the first subscriber is added, the method sets up listeners on both original and merged stores.\n   * These listeners update the combined store value whenever either source store changes.\n   * All subscriptions (helpers and the actual handler) are tracked so they can be properly cleaned up.\n   *\n   * @param handler - The callback function that will be executed when the state changes\n   * @returns An unsubscribe function that, when called, removes the subscription and any helper subscriptions\n   */\n  public subscribe(handler: Handler<O & M>) {\n    const unsubscribeFunctions: Unsubscribe[] = [];\n\n    // first subscriber will also register helpers which listen to changes of the\n    // \"original\" and \"merged\" stores, combined outputs will be emitted through super.next\n    // whenever cached values do not equal (always apart from the initial subscription)\n    // since the actual handler subscription is registered after helpers, the actual\n    // handler will run only once\n    if (!this.handlers.size) {\n      const base = (nextValue: O | M) => {\n        super.next((currentValue) => ({\n          ...currentValue,\n          ...nextValue,\n        }));\n      };\n\n      unsubscribeFunctions.push(\n        this.original.subscribe((nextValue) => {\n          if (nextValue === this.cachedOriginalValue) return;\n          this.cachedOriginalValue = nextValue;\n          base(nextValue);\n        }),\n        this.merged.subscribe((nextValue) => {\n          if (nextValue === this.cachedMergedValue) return;\n          this.cachedMergedValue = nextValue;\n          base(nextValue);\n        }),\n      );\n    }\n\n    unsubscribeFunctions.push(super.subscribe(handler));\n\n    return () => {\n      unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n    };\n  }\n\n  /**\n   * Retrieves the latest combined state from both original and merged stores.\n   *\n   * This method extends the base getLatestValue functionality to ensure the merged store\n   * remains in sync with its source stores even when there are no active subscribers.\n   *\n   * When there are no handlers registered, the method:\n   * 1. Fetches the latest values from both source stores\n   * 2. Compares them with the cached values to detect changes\n   * 3. If changes are detected, updates the internal value and caches\n   *    the new source values to maintain consistency\n   *\n   * This approach ensures that calling getLatestValue() always returns the most\n   * up-to-date combined state, even if the merged store hasn't been actively\n   * receiving updates through subscriptions.\n   *\n   * @returns The latest combined state from both original and merged stores\n   */\n  public getLatestValue() {\n    // if there are no handlers registered to MergedStore then the local value might be out-of-sync\n    // pull latest and compare against cached - if they differ, cache latest and produce new combined\n    if (!this.handlers.size) {\n      const originalValue = this.original.getLatestValue();\n      const mergedValue = this.merged.getLatestValue();\n\n      if (\n        originalValue !== this.cachedOriginalValue ||\n        mergedValue !== this.cachedMergedValue\n      ) {\n        this.value = {\n          ...originalValue,\n          ...mergedValue,\n        };\n        this.cachedMergedValue = mergedValue;\n        this.cachedOriginalValue = originalValue;\n      }\n    }\n\n    return super.getLatestValue();\n  }\n\n  // override original methods and \"disable\" them\n  public next = () => {\n    console.warn(\n      `${MergedStateStore.name}.next is disabled, call original.next or merged.next instead`,\n    );\n  };\n  public partialNext = () => {\n    console.warn(\n      `${MergedStateStore.name}.partialNext is disabled, call original.partialNext or merged.partialNext instead`,\n    );\n  };\n  public addPreprocessor() {\n    console.warn(\n      `${MergedStateStore.name}.addPreprocessor is disabled, call original.addPreprocessor or merged.addPreprocessor instead`,\n    );\n    return noop;\n  }\n}\n","/**\n * Core utility functions and types for mergeWith functionality.\n * This file contains shared logic used by both mergeWith and mergeWithDiff functions.\n */\n\nexport type MergeWithCustomizer<T extends object> = (\n  objValue: unknown,\n  srcValue: unknown,\n  key: string | symbol,\n  object: T,\n  source: object,\n  stack: Set<unknown>,\n) => unknown | undefined;\n\nexport type PendingMerge = {\n  sourceKey: string | symbol;\n  parentTarget: object;\n  source: object;\n  target: object;\n};\n\nexport type ChangeType = 'added' | 'updated' | 'circular' | (string & {});\n\nexport interface DiffNode {\n  type?: ChangeType;\n  children: Record<string | symbol, DiffNode>;\n  value?: unknown;\n  oldValue?: unknown;\n}\n\nexport const isClassInstance = (value: unknown): boolean => {\n  if (!value || typeof value !== 'object') return false;\n\n  // Arrays are not class instances\n  if (Array.isArray(value)) return false;\n\n  // Get the prototype chain\n  const proto = Object.getPrototypeOf(value);\n\n  // If it's null or Object.prototype, it's a plain object\n  if (proto === null || proto === Object.prototype) return false;\n\n  // Check if it has a constructor that's not Object\n  return value.constructor && value.constructor !== Object;\n};\n\n/**\n * Performs a deep comparison between two values to determine if they are equivalent.\n * This is similar to Lodash's isEqual implementation but simplified.\n */\nexport const isEqual = (\n  value1: unknown,\n  value2: unknown,\n  compareStack = new Set<[unknown, unknown]>(),\n  objectStack1 = new WeakSet<object>(),\n  objectStack2 = new WeakSet<object>(),\n): boolean => {\n  // Handle simple equality cases first\n  if (value1 === value2) return true;\n\n  // If either is null/undefined, they're not equal (already checked ===)\n  if (value1 == null || value2 == null) return false;\n\n  // Get the type of both values\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n\n  // Different types mean they're not equal\n  if (type1 !== type2) return false;\n\n  // Handle non-object types that need special comparison\n  if (type1 !== 'object') {\n    // Special case for NaN\n    // eslint-disable-next-line no-self-compare\n    if (value1 !== value1 && value2 !== value2) return true;\n    return value1 === value2;\n  }\n\n  // At this point, both values are objects\n  const obj1 = value1 as object;\n  const obj2 = value2 as object;\n\n  // Check for circular references in each object\n  if (objectStack1.has(obj1) || objectStack2.has(obj2)) {\n    // If either object has been seen before, consider them equal\n    // if they're both in a circular reference\n    return objectStack1.has(obj1) && objectStack2.has(obj2);\n  }\n\n  // Add objects to their respective stacks\n  objectStack1.add(obj1);\n  objectStack2.add(obj2);\n\n  // Handle Date objects - needs to be before the class instance check\n  if (value1 instanceof Date && value2 instanceof Date) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return value1.getTime() === value2.getTime();\n  }\n\n  // Handle RegExp objects - needs to be before the class instance check\n  if (value1 instanceof RegExp && value2 instanceof RegExp) {\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return value1.toString() === value2.toString();\n  }\n\n  // If either is a class instance, use reference equality (already checked above)\n  if (isClassInstance(value1) || isClassInstance(value2)) {\n    // Clean up before returning\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n\n  // Handle arrays\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    // Clean up before returning\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n\n  if (isArray1 && isArray2) {\n    const arr1 = value1 as unknown[];\n    const arr2 = value2 as unknown[];\n\n    if (arr1.length !== arr2.length) {\n      // Clean up before returning\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n\n    // Check for circular references in the comparison context\n    const pairKey: [unknown, unknown] = [value1, value2];\n    if (compareStack.has(pairKey)) {\n      // Clean up before returning\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return true;\n    }\n    compareStack.add(pairKey);\n\n    // Compare each element\n    for (let i = 0; i < arr1.length; i++) {\n      if (!isEqual(arr1[i], arr2[i], compareStack, objectStack1, objectStack2)) {\n        compareStack.delete(pairKey);\n        // Clean up before returning\n        objectStack1.delete(obj1);\n        objectStack2.delete(obj2);\n        return false;\n      }\n    }\n\n    compareStack.delete(pairKey);\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return true;\n  }\n\n  // Handle plain objects\n  const plainObj1 = value1 as Record<string, unknown>;\n  const plainObj2 = value2 as Record<string, unknown>;\n\n  const keys1 = Object.keys(plainObj1);\n  const keys2 = Object.keys(plainObj2);\n\n  // If key counts differ, objects aren't equal\n  if (keys1.length !== keys2.length) {\n    // Clean up before returning\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return false;\n  }\n\n  // Verify all keys in obj2 are in obj1 (we already checked counts, so this\n  // also ensures all keys in obj1 are in obj2)\n  for (const key of keys2) {\n    if (!Object.prototype.hasOwnProperty.call(plainObj1, key)) {\n      // Clean up before returning\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n  }\n\n  // Check for circular references in the comparison context\n  const pairKey: [unknown, unknown] = [value1, value2];\n  if (compareStack.has(pairKey)) {\n    // Clean up before returning\n    objectStack1.delete(obj1);\n    objectStack2.delete(obj2);\n    return true;\n  }\n  compareStack.add(pairKey);\n\n  // Compare each property's value\n  for (const key of keys1) {\n    if (\n      !isEqual(plainObj1[key], plainObj2[key], compareStack, objectStack1, objectStack2)\n    ) {\n      compareStack.delete(pairKey);\n      // Clean up before returning\n      objectStack1.delete(obj1);\n      objectStack2.delete(obj2);\n      return false;\n    }\n  }\n\n  compareStack.delete(pairKey);\n  // Clean up before returning successful comparison\n  objectStack1.delete(obj1);\n  objectStack2.delete(obj2);\n  return true;\n};\n\n/**\n * Generates a diff between original and modified objects.\n * This is used after the merge operation to track what has changed.\n */\nexport function generateDiff(original: unknown, modified: unknown): DiffNode | null {\n  // Root diff node\n  const diffRoot: DiffNode = { children: {} };\n\n  // Compare the objects and build the diff tree\n  compareAndBuildDiff(original, modified, diffRoot);\n\n  // Clean up the diff tree (remove empty nodes)\n  return cleanupDiffTree(diffRoot);\n}\n\n/**\n * Helper function to compare and build the diff tree\n */\nfunction compareAndBuildDiff(\n  original: unknown,\n  modified: unknown,\n  parentDiffNode: DiffNode,\n  key?: string | symbol,\n  /**\n   * Tracks pairs of objects being compared\n   *  - It stores pairs of values that are being compared `[original, modified]`\n   *  - This helps detect when we're comparing the same pair of objects again\n   *  - It prevents infinite recursion when comparing complex object structures\n   */\n  compareStack = new Set<[unknown, unknown]>(),\n  /**\n   * Tracks individual objects that are being processed in the current traversal path\n   *  - It's used to detect when we encounter the same object multiple times in a single traversal path\n   *  - This helps identify self-referential or circular structures within a single object (e.g., when an object references itself)\n   *  - When an object appears in `objectStack` again, we know it's a circular reference within the same object\n   */\n  objectStack = new Set<unknown>(),\n): void {\n  // If values are equal, no diff to record\n  if (isEqual(original, modified, new Set(compareStack))) {\n    return;\n  }\n\n  // Handle additions (value in modified but not in original)\n  if (original === undefined || original === null) {\n    if (key !== undefined) {\n      parentDiffNode.children[String(key)] = {\n        type: 'added',\n        value: modified,\n        children: {},\n      };\n    }\n    return;\n  }\n\n  // Check for circular references in objects\n  if (typeof original === 'object' && original !== null) {\n    if (objectStack.has(original)) {\n      if (key !== undefined) {\n        parentDiffNode.children[String(key)] = {\n          type: 'circular',\n          value: modified,\n          oldValue: original,\n          children: {},\n        };\n      }\n      return;\n    }\n    objectStack.add(original);\n  }\n\n  // Check if we're dealing with non-objects or special object types that should be treated atomically\n  const shouldTreatAtomically =\n    typeof original !== 'object' ||\n    typeof modified !== 'object' ||\n    original === null ||\n    modified === null ||\n    Array.isArray(original) !== Array.isArray(modified) ||\n    isClassInstance(original) ||\n    isClassInstance(modified);\n\n  if (shouldTreatAtomically) {\n    if (key !== undefined) {\n      parentDiffNode.children[String(key)] = {\n        type: 'updated',\n        value: modified,\n        oldValue: original,\n        children: {},\n      };\n    }\n\n    // Remove from object stack if it was added\n    if (typeof original === 'object' && original !== null) {\n      objectStack.delete(original);\n    }\n    return;\n  }\n\n  // Handle objects\n  const originalObj = original as Record<string | symbol, unknown>;\n  const modifiedObj = modified as Record<string | symbol, unknown>;\n\n  // Create a diff node for this level if we're processing a property\n  const currentDiffNode =\n    key !== undefined\n      ? {\n          type: 'updated' as ChangeType,\n          children: {},\n          oldValue: original,\n          value: modified,\n        }\n      : parentDiffNode;\n\n  if (key !== undefined) {\n    parentDiffNode.children[String(key)] = currentDiffNode;\n  }\n\n  // Check for circular references in comparison\n  const pairKey: [unknown, unknown] = [original, modified];\n  if (compareStack.has(pairKey)) {\n    // Remove from object stack before returning\n    if (typeof original === 'object' && original !== null) {\n      objectStack.delete(original);\n    }\n    return;\n  }\n  compareStack.add(pairKey);\n\n  // Process all keys from both objects\n  const allKeys = new Set([\n    ...Object.keys(originalObj),\n    ...Object.getOwnPropertySymbols(originalObj),\n    ...Object.keys(modifiedObj),\n    ...Object.getOwnPropertySymbols(modifiedObj),\n  ]);\n\n  for (const childKey of allKeys) {\n    const originalValue = originalObj[childKey];\n    const modifiedValue = modifiedObj[childKey];\n\n    // Handle deleted properties (they exist in original but not in modified)\n    if (!(childKey in modifiedObj)) {\n      // Currently we don't track deletions, but could be added here if needed\n      continue;\n    }\n\n    // Handle added properties (they exist in modified but not in original)\n    if (!(childKey in originalObj)) {\n      currentDiffNode.children[String(childKey)] = {\n        type: 'added',\n        value: modifiedValue,\n        children: {},\n      };\n      continue;\n    }\n\n    // Process properties that exist in both but may have changed\n    compareAndBuildDiff(\n      originalValue,\n      modifiedValue,\n      currentDiffNode,\n      childKey,\n      compareStack,\n      objectStack,\n    );\n  }\n\n  compareStack.delete(pairKey);\n\n  // Remove from object stack before returning\n  if (typeof original === 'object' && original !== null) {\n    objectStack.delete(original);\n  }\n}\n\nexport function createMergeCore<T extends object>(options: { trackDiff?: boolean } = {}) {\n  const { trackDiff = false } = options;\n\n  return function mergeCore({\n    target,\n    source,\n    customizer,\n  }: {\n    target: T;\n    source: object | object[];\n    customizer?: MergeWithCustomizer<T>;\n  }): { result: T; diff: DiffNode | null } {\n    const sources = Array.isArray(source) ? source : [source];\n\n    // Store the original target if we need to track diffs\n    const originalTarget = trackDiff ? structuredClone(target) : undefined;\n\n    function handleCustomizer(\n      targetValue: unknown,\n      srcValue: unknown,\n      sourceKey: string | symbol,\n      target: object,\n      src: object,\n      stack: Set<unknown>,\n    ): boolean {\n      const customValue = customizer?.(\n        targetValue,\n        srcValue,\n        sourceKey,\n        target as T,\n        src,\n        stack,\n      );\n      if (customValue !== undefined) {\n        Object.defineProperty(target, sourceKey, {\n          value: customValue,\n          enumerable: true,\n          writable: true,\n          configurable: true,\n        });\n        return true;\n      }\n      return false;\n    }\n\n    function createNewTarget(targetValue: unknown, srcValue: object): object {\n      if (targetValue === null || typeof targetValue === 'undefined') {\n        return srcValue;\n      }\n      if (!Array.isArray(targetValue) && typeof targetValue !== 'object') {\n        return srcValue;\n      }\n      if (targetValue && typeof targetValue === 'object') {\n        // Check if it's a class instance (not a plain object)\n        const isTargetClassInstance = isClassInstance(targetValue);\n        const isSourceClassInstance = isClassInstance(srcValue);\n\n        // If either is a class instance, don't try to merge them\n        if (isTargetClassInstance || isSourceClassInstance) {\n          // If source is a class instance, use it\n          if (isSourceClassInstance) {\n            return srcValue as object;\n          }\n          // Otherwise preserve the target\n          return targetValue;\n        }\n\n        // For plain objects, use normal merging\n        return Array.isArray(targetValue) ? [...targetValue] : { ...targetValue };\n      }\n      return Array.isArray(srcValue) ? [] : {};\n    }\n\n    function processSourceValue(\n      target: object,\n      src: object,\n      sourceKey: string | symbol,\n      stack: Set<unknown>,\n      pendingMerges: PendingMerge[],\n    ): void {\n      const srcValue = src[sourceKey as keyof typeof src];\n      const targetValue = target[sourceKey as keyof typeof target];\n\n      if (handleCustomizer(targetValue, srcValue, sourceKey, target, src, stack)) {\n        return;\n      }\n\n      if (srcValue && typeof srcValue === 'object') {\n        if (!stack.has(srcValue)) {\n          const newTarget = createNewTarget(targetValue, srcValue);\n          Object.defineProperty(target, sourceKey, {\n            value: newTarget,\n            enumerable: true,\n            writable: true,\n            configurable: true,\n          });\n\n          if (isClassInstance(newTarget)) return;\n\n          pendingMerges.push({\n            target: newTarget,\n            source: srcValue,\n            sourceKey,\n            parentTarget: target,\n          });\n        }\n      } else if (srcValue !== undefined) {\n        target[sourceKey as keyof typeof target] = srcValue;\n      }\n    }\n\n    function processKeys(\n      target: object,\n      source: object,\n      stack: Set<unknown>,\n      pendingMerges: PendingMerge[],\n    ): void {\n      const sourceKeys = [\n        ...Object.keys(source),\n        ...Object.getOwnPropertySymbols(source),\n      ];\n      for (const sourceKey of sourceKeys) {\n        processSourceValue(target, source, sourceKey, stack, pendingMerges);\n      }\n    }\n\n    function processPendingMerge(\n      { target, source, sourceKey, parentTarget }: PendingMerge,\n      stack: Set<unknown>,\n      pendingMerges: PendingMerge[],\n    ): void {\n      if (stack.has(source)) {\n        // We've detected a circular reference in the source object\n        // Just skip this merge to avoid infinite recursion\n\n        // If we're tracking diffs, we need to mark this as a circular reference\n        if (trackDiff && sourceKey && parentTarget) {\n          Object.defineProperty(parentTarget, sourceKey, {\n            value: target,\n            enumerable: true,\n            writable: true,\n            configurable: true,\n          });\n        }\n        return;\n      }\n\n      if (!stack.has(target) && !stack.has(source)) {\n        stack.add(target);\n        stack.add(source);\n        processKeys(target, source, stack, pendingMerges);\n        stack.delete(source);\n        stack.delete(target);\n      }\n    }\n\n    function baseMerge(object: T, source: object, stack = new Set<unknown>()): T {\n      // prevent infinite recursion\n      if (stack.has(object) || stack.has(source)) {\n        return { ...object };\n      }\n\n      const result = { ...object };\n      const pendingMerges: PendingMerge[] = [];\n      stack.add(result);\n      stack.add(source);\n\n      processKeys(result, source, stack, pendingMerges);\n\n      while (pendingMerges.length) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        processPendingMerge(pendingMerges.pop()!, stack, pendingMerges);\n      }\n\n      stack.delete(source);\n      stack.delete(result);\n\n      return result;\n    }\n\n    const result = sources.reduce<T>((result, source) => baseMerge(result, source) as T, {\n      ...target,\n    } as T);\n\n    // If diff tracking is enabled, generate the diff after the merge is complete\n    const diff =\n      trackDiff && originalTarget ? generateDiff(originalTarget, result) : null;\n\n    return { result, diff };\n  };\n}\n\n// Utility function to clean up the diff tree by removing empty child nodes\nexport function cleanupDiffTree(diffNode: DiffNode): DiffNode | null {\n  const cleanChildren: Record<string | symbol, DiffNode> = {};\n  let hasChildren = false;\n\n  for (const key in diffNode.children) {\n    const childNode = cleanupDiffTree(diffNode.children[key]);\n    if (childNode) {\n      cleanChildren[key] = childNode;\n      hasChildren = true;\n    }\n  }\n\n  // If this node has a type (added/updated) or has children, keep it\n  if (diffNode.type || hasChildren) {\n    return {\n      ...diffNode,\n      children: cleanChildren,\n    };\n  }\n\n  return null;\n}\n","/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined` merging is handled by the\n * method instead. The `customizer` is invoked with seven arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * @category Object\n * @param object The destination object.\n * @param source A single source object or an array of objects to be merged into the .\n * @param customizer The function to customize assigned values.\n * @returns Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = {\n *   'fruits': ['apple'],\n *   'vegetables': ['beet']\n * };\n *\n * var other = {\n *   'fruits': ['banana'],\n *   'vegetables': ['carrot']\n * };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n */\nimport type { MergeWithCustomizer } from './mergeWithCore';\nimport { createMergeCore } from './mergeWithCore';\n\nexport function mergeWith<T extends object>(\n  target: T,\n  source: object | object[],\n  customizer?: MergeWithCustomizer<T>,\n): T {\n  const mergeCore = createMergeCore<T>();\n  return mergeCore({ target, source, customizer }).result;\n}\n","/**\n * This method is like `mergeWith` except that it also returns information about\n * which keys have been added or updated during the merge operation.\n *\n * @category Object\n * @param object The destination object.\n * @param source A single source object or an array of objects to be merged into the object.\n * @param customizer The function to customize assigned values.\n * @returns Returns an object containing the merged result and a hierarchical diff object.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (Array.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = {\n *   'fruits': ['apple'],\n *   'vegetables': ['beet']\n * };\n *\n * var other = {\n *   'fruits': ['banana'],\n *   'vegetables': ['carrot'],\n *   'grains': ['wheat']\n * };\n *\n * const { result, diff } = mergeWithDiff({ target: object, source: other, customizer });\n * // result => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'], 'grains': ['wheat'] }\n * // diff => {\n * //   children: {\n * //     'fruits': { type: 'updated', value: ['banana'], oldValue: ['apple'], children: {} },\n * //     'vegetables': { type: 'updated', value: ['carrot'], oldValue: ['beet'], children: {} },\n * //     'grains': { type: 'added', value: ['wheat'], children: {} }\n * //   }\n * // }\n */\nimport { cleanupDiffTree, createMergeCore } from './mergeWithCore';\nimport type { DiffNode, MergeWithCustomizer } from './mergeWithCore';\n\nexport function mergeWithDiff<T extends object>(\n  target: T,\n  source: object | object[],\n  customizer?: MergeWithCustomizer<T>,\n): { result: T; diff: DiffNode } {\n  const mergeCore = createMergeCore<T>({ trackDiff: true });\n  const { result, diff } = mergeCore({ target, source, customizer });\n\n  // Clean up the diff tree to remove empty nodes\n\n  return { result, diff: cleanupDiffTree(diff ?? { children: {} }) || { children: {} } };\n}\n","import type {\n  AttachmentManagerConfig,\n  MinimumUploadRequestResult,\n  UploadRequestFn,\n} from './configuration';\nimport { isLocalImageAttachment, isUploadedAttachment } from './attachmentIdentity';\nimport {\n  createFileFromBlobs,\n  ensureIsLocalAttachment,\n  generateFileName,\n  getAttachmentTypeFromMimeType,\n  isFile,\n  isFileList,\n  isFileReference,\n  isImageFile,\n} from './fileUtils';\nimport { StateStore } from '../store';\nimport { generateUUIDv4 } from '../utils';\nimport { DEFAULT_UPLOAD_SIZE_LIMIT_BYTES } from '../constants';\nimport type {\n  AttachmentLoadingState,\n  FileLike,\n  FileReference,\n  LocalAttachment,\n  LocalAudioAttachment,\n  LocalFileAttachment,\n  LocalUploadAttachment,\n  LocalVideoAttachment,\n  LocalVoiceRecordingAttachment,\n  UploadPermissionCheckResult,\n} from './types';\nimport type { ChannelResponse, DraftMessage, LocalMessage } from '../types';\nimport type { MessageComposer } from './messageComposer';\nimport { mergeWithDiff } from '../utils/mergeWith';\n\ntype LocalNotImageAttachment =\n  | LocalFileAttachment\n  | LocalAudioAttachment\n  | LocalVideoAttachment\n  | LocalVoiceRecordingAttachment;\n\nexport type FileUploadFilter = (file: Partial<LocalUploadAttachment>) => boolean;\n\nexport type AttachmentManagerState = {\n  attachments: LocalAttachment[];\n};\n\nexport type AttachmentManagerOptions = {\n  composer: MessageComposer;\n  message?: DraftMessage | LocalMessage;\n};\n\nconst initState = ({\n  message,\n}: {\n  message?: DraftMessage | LocalMessage;\n}): AttachmentManagerState => ({\n  attachments: (message?.attachments ?? [])\n    ?.filter(({ og_scrape_url }) => !og_scrape_url)\n    .map((att) => {\n      const localMetadata = isUploadedAttachment(att)\n        ? { id: generateUUIDv4(), uploadState: 'finished' }\n        : { id: generateUUIDv4() };\n      return {\n        ...att,\n        localMetadata,\n      } as LocalAttachment;\n    }),\n});\n\nexport class AttachmentManager {\n  readonly state: StateStore<AttachmentManagerState>;\n  readonly composer: MessageComposer;\n  private attachmentsByIdGetterCache: {\n    attachmentsById: Record<string, LocalAttachment>;\n    attachments: LocalAttachment[];\n  };\n\n  constructor({ composer, message }: AttachmentManagerOptions) {\n    this.composer = composer;\n    this.state = new StateStore<AttachmentManagerState>(initState({ message }));\n    this.attachmentsByIdGetterCache = { attachmentsById: {}, attachments: [] };\n  }\n\n  get attachmentsById() {\n    const { attachments } = this.state.getLatestValue();\n\n    if (attachments !== this.attachmentsByIdGetterCache.attachments) {\n      this.attachmentsByIdGetterCache.attachments = attachments;\n      this.attachmentsByIdGetterCache.attachmentsById = attachments.reduce<\n        Record<string, LocalAttachment>\n      >((newAttachmentsById, attachment) => {\n        // should never happen but does not hurt to check\n        if (!attachment.localMetadata.id) return newAttachmentsById;\n\n        newAttachmentsById[attachment.localMetadata.id] ??= attachment;\n\n        return newAttachmentsById;\n      }, {});\n    }\n\n    return this.attachmentsByIdGetterCache.attachmentsById;\n  }\n\n  get client() {\n    return this.composer.client;\n  }\n\n  get channel() {\n    return this.composer.channel;\n  }\n\n  get config() {\n    return this.composer.config.attachments;\n  }\n\n  get acceptedFiles() {\n    return this.config.acceptedFiles;\n  }\n\n  set acceptedFiles(acceptedFiles: AttachmentManagerConfig['acceptedFiles']) {\n    this.composer.updateConfig({ attachments: { acceptedFiles } });\n  }\n\n  get fileUploadFilter() {\n    return this.config.fileUploadFilter;\n  }\n\n  set fileUploadFilter(fileUploadFilter: AttachmentManagerConfig['fileUploadFilter']) {\n    this.composer.updateConfig({ attachments: { fileUploadFilter } });\n  }\n\n  get maxNumberOfFilesPerMessage() {\n    return this.config.maxNumberOfFilesPerMessage;\n  }\n\n  set maxNumberOfFilesPerMessage(\n    maxNumberOfFilesPerMessage: AttachmentManagerConfig['maxNumberOfFilesPerMessage'],\n  ) {\n    if (maxNumberOfFilesPerMessage === this.maxNumberOfFilesPerMessage) return;\n    this.composer.updateConfig({ attachments: { maxNumberOfFilesPerMessage } });\n  }\n\n  setCustomUploadFn = (doUploadRequest: UploadRequestFn) => {\n    this.composer.updateConfig({ attachments: { doUploadRequest } });\n  };\n\n  get attachments() {\n    return this.state.getLatestValue().attachments;\n  }\n\n  get hasUploadPermission() {\n    return !!(\n      this.channel.data?.own_capabilities as ChannelResponse['own_capabilities']\n    )?.includes('upload-file');\n  }\n\n  get isUploadEnabled() {\n    return this.hasUploadPermission && this.availableUploadSlots > 0;\n  }\n\n  get successfulUploads() {\n    return this.getUploadsByState('finished');\n  }\n\n  get successfulUploadsCount() {\n    return this.successfulUploads.length;\n  }\n\n  get uploadsInProgressCount() {\n    return this.getUploadsByState('uploading').length;\n  }\n\n  get failedUploadsCount() {\n    return this.getUploadsByState('failed').length;\n  }\n\n  get blockedUploadsCount() {\n    return this.getUploadsByState('blocked').length;\n  }\n\n  get pendingUploadsCount() {\n    return this.getUploadsByState('pending').length;\n  }\n\n  get availableUploadSlots() {\n    return (\n      this.config.maxNumberOfFilesPerMessage -\n      this.successfulUploadsCount -\n      this.uploadsInProgressCount\n    );\n  }\n\n  getUploadsByState(state: AttachmentLoadingState) {\n    return Object.values(this.attachments).filter(\n      ({ localMetadata }) => localMetadata.uploadState === state,\n    );\n  }\n\n  initState = ({ message }: { message?: DraftMessage | LocalMessage } = {}) => {\n    this.state.next(initState({ message }));\n  };\n\n  getAttachmentIndex = (localId: string) => {\n    const attachmentsById = this.attachmentsById;\n\n    return this.attachments.indexOf(attachmentsById[localId]);\n  };\n\n  private prepareAttachmentUpdate = (attachmentToUpdate: LocalAttachment) => {\n    const stateAttachments = this.attachments;\n    const attachments = [...this.attachments];\n    const attachmentIndex = this.getAttachmentIndex(attachmentToUpdate.localMetadata.id);\n    if (attachmentIndex === -1) return null;\n    // do not re-organize newAttachments array otherwise indexing would no longer work\n    // replace in place only with the attachments with the same id's\n    const merged = mergeWithDiff<LocalAttachment>(\n      stateAttachments[attachmentIndex],\n      attachmentToUpdate,\n    );\n    const updatesOnMerge = merged.diff && Object.keys(merged.diff.children).length;\n    if (updatesOnMerge) {\n      const localAttachment = ensureIsLocalAttachment(merged.result);\n      if (localAttachment) {\n        attachments.splice(attachmentIndex, 1, localAttachment);\n        return attachments;\n      }\n    }\n    return null;\n  };\n\n  updateAttachment = (attachmentToUpdate: LocalAttachment) => {\n    const updatedAttachments = this.prepareAttachmentUpdate(attachmentToUpdate);\n    if (updatedAttachments) {\n      this.state.partialNext({ attachments: updatedAttachments });\n    }\n  };\n\n  upsertAttachments = (attachmentsToUpsert: LocalAttachment[]) => {\n    if (!attachmentsToUpsert.length) return;\n    let attachments = [...this.attachments];\n    let hasUpdates = false;\n    attachmentsToUpsert.forEach((attachment) => {\n      const updatedAttachments = this.prepareAttachmentUpdate(attachment);\n      if (updatedAttachments) {\n        attachments = updatedAttachments;\n        hasUpdates = true;\n      } else {\n        const localAttachment = ensureIsLocalAttachment(attachment);\n        if (localAttachment) {\n          attachments.push(localAttachment);\n          hasUpdates = true;\n        }\n      }\n    });\n    if (hasUpdates) {\n      this.state.partialNext({ attachments });\n    }\n  };\n\n  removeAttachments = (localAttachmentIds: string[]) => {\n    this.state.partialNext({\n      attachments: this.attachments.filter(\n        (attachment) => !localAttachmentIds.includes(attachment.localMetadata?.id),\n      ),\n    });\n  };\n\n  getUploadConfigCheck = async (\n    fileLike: FileReference | FileLike,\n  ): Promise<UploadPermissionCheckResult> => {\n    const client = this.channel.getClient();\n    let appSettings;\n    if (!client.appSettingsPromise) {\n      appSettings = await client.getAppSettings();\n    } else {\n      appSettings = await client.appSettingsPromise;\n    }\n    const uploadConfig = isImageFile(fileLike)\n      ? appSettings?.app?.image_upload_config\n      : appSettings?.app?.file_upload_config;\n    if (!uploadConfig) return { uploadBlocked: false };\n\n    const {\n      allowed_file_extensions,\n      allowed_mime_types,\n      blocked_file_extensions,\n      blocked_mime_types,\n      size_limit,\n    } = uploadConfig;\n\n    const sizeLimit = size_limit || DEFAULT_UPLOAD_SIZE_LIMIT_BYTES;\n    const mimeType = fileLike.type;\n\n    if (isFile(fileLike) || isFileReference(fileLike)) {\n      if (\n        allowed_file_extensions?.length &&\n        !allowed_file_extensions.some((ext) =>\n          fileLike.name.toLowerCase().endsWith(ext.toLowerCase()),\n        )\n      ) {\n        return { uploadBlocked: true, reason: 'allowed_file_extensions' };\n      }\n\n      if (\n        blocked_file_extensions?.length &&\n        blocked_file_extensions.some((ext) =>\n          fileLike.name.toLowerCase().endsWith(ext.toLowerCase()),\n        )\n      ) {\n        return { uploadBlocked: true, reason: 'blocked_file_extensions' };\n      }\n    }\n\n    if (\n      allowed_mime_types?.length &&\n      !allowed_mime_types.some((type) => type.toLowerCase() === mimeType?.toLowerCase())\n    ) {\n      return { uploadBlocked: true, reason: 'allowed_mime_types' };\n    }\n\n    if (\n      blocked_mime_types?.length &&\n      blocked_mime_types.some((type) => type.toLowerCase() === mimeType?.toLowerCase())\n    ) {\n      return { uploadBlocked: true, reason: 'blocked_mime_types' };\n    }\n\n    if (fileLike.size && fileLike.size > sizeLimit) {\n      return { uploadBlocked: true, reason: 'size_limit' };\n    }\n\n    return { uploadBlocked: false };\n  };\n\n  fileToLocalUploadAttachment = async (\n    fileLike: FileReference | FileLike,\n  ): Promise<LocalUploadAttachment> => {\n    const file =\n      isFileReference(fileLike) || isFile(fileLike)\n        ? fileLike\n        : createFileFromBlobs({\n            blobsArray: [fileLike],\n            fileName: generateFileName(fileLike.type),\n            mimeType: fileLike.type,\n          });\n\n    const uploadPermissionCheck = await this.getUploadConfigCheck(file);\n\n    const localAttachment: LocalUploadAttachment = {\n      file_size: file.size,\n      mime_type: file.type,\n      localMetadata: {\n        file,\n        id: generateUUIDv4(),\n        uploadPermissionCheck,\n        uploadState: uploadPermissionCheck.uploadBlocked ? 'blocked' : 'pending',\n      },\n      type: getAttachmentTypeFromMimeType(file.type),\n    };\n\n    localAttachment[isImageFile(file) ? 'fallback' : 'title'] = file.name;\n\n    if (isImageFile(file)) {\n      localAttachment.localMetadata.previewUri = isFileReference(fileLike)\n        ? fileLike.uri\n        : URL.createObjectURL?.(fileLike);\n\n      if (isFileReference(fileLike) && fileLike.height && fileLike.width) {\n        localAttachment.original_height = fileLike.height;\n        localAttachment.original_width = fileLike.width;\n      }\n    }\n\n    if (isFileReference(fileLike) && fileLike.thumb_url) {\n      localAttachment.thumb_url = fileLike.thumb_url;\n    }\n\n    return localAttachment;\n  };\n\n  private ensureLocalUploadAttachment = async (\n    attachment: Partial<LocalUploadAttachment>,\n  ) => {\n    if (!attachment.localMetadata?.file || !attachment.localMetadata.id) {\n      this.client.notifications.addError({\n        message: 'File is required for upload attachment',\n        origin: { emitter: 'AttachmentManager', context: { attachment } },\n        options: { type: 'validation:attachment:file:missing' },\n      });\n      return;\n    }\n\n    if (!this.fileUploadFilter(attachment)) return;\n\n    const newAttachment = await this.fileToLocalUploadAttachment(\n      attachment.localMetadata.file,\n    );\n    if (attachment.localMetadata.id) {\n      newAttachment.localMetadata.id = attachment.localMetadata.id;\n    }\n    return newAttachment;\n  };\n\n  /**\n   * Method to perform the default upload behavior without checking for custom upload functions\n   * to prevent recursive calls\n   */\n  doDefaultUploadRequest = async (fileLike: FileReference | FileLike) => {\n    if (isFileReference(fileLike)) {\n      return this.channel[isImageFile(fileLike) ? 'sendImage' : 'sendFile'](\n        fileLike.uri,\n        fileLike.name,\n        fileLike.type,\n      );\n    }\n\n    const file = isFile(fileLike)\n      ? fileLike\n      : createFileFromBlobs({\n          blobsArray: [fileLike],\n          fileName: generateFileName(fileLike.type),\n          mimeType: fileLike.type,\n        });\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { duration, ...result } =\n      await this.channel[isImageFile(fileLike) ? 'sendImage' : 'sendFile'](file);\n    return result;\n  };\n\n  /**\n   * todo: docs how to customize the image and file upload by overriding do\n   */\n\n  doUploadRequest = async (fileLike: FileReference | FileLike) => {\n    const customUploadFn = this.config.doUploadRequest;\n    if (customUploadFn) {\n      return await customUploadFn(fileLike);\n    }\n\n    return this.doDefaultUploadRequest(fileLike);\n  };\n\n  uploadAttachment = async (attachment: LocalUploadAttachment) => {\n    if (!this.isUploadEnabled) return;\n\n    const localAttachment = await this.ensureLocalUploadAttachment(attachment);\n\n    if (typeof localAttachment === 'undefined') return;\n\n    if (localAttachment.localMetadata.uploadState === 'blocked') {\n      this.upsertAttachments([localAttachment]);\n      this.client.notifications.addError({\n        message: `The attachment upload was blocked`,\n        origin: {\n          emitter: 'AttachmentManager',\n          context: { attachment, blockedAttachment: localAttachment },\n        },\n        options: {\n          type: 'validation:attachment:upload:blocked',\n          metadata: {\n            reason: localAttachment.localMetadata.uploadPermissionCheck?.reason,\n          },\n        },\n      });\n      return localAttachment;\n    }\n\n    this.upsertAttachments([\n      {\n        ...attachment,\n        localMetadata: {\n          ...attachment.localMetadata,\n          uploadState: 'uploading',\n        },\n      },\n    ]);\n\n    let response: MinimumUploadRequestResult;\n    try {\n      response = await this.doUploadRequest(localAttachment.localMetadata.file);\n    } catch (error) {\n      const reason = error instanceof Error ? error.message : 'unknown error';\n      const failedAttachment: LocalUploadAttachment = {\n        ...attachment,\n        localMetadata: {\n          ...attachment.localMetadata,\n          uploadState: 'failed',\n        },\n      };\n\n      this.client.notifications.addError({\n        message: 'Error uploading attachment',\n        origin: {\n          emitter: 'AttachmentManager',\n          context: { attachment, failedAttachment },\n        },\n        options: {\n          type: 'api:attachment:upload:failed',\n          metadata: { reason },\n          originalError: error instanceof Error ? error : undefined,\n        },\n      });\n\n      this.updateAttachment(failedAttachment);\n      return failedAttachment;\n    }\n\n    if (!response) {\n      // Copied this from useImageUpload / useFileUpload.\n\n      // If doUploadRequest returns any falsy value, then don't create the upload preview.\n      // This is for the case if someone wants to handle failure on app level.\n      this.removeAttachments([attachment.localMetadata.id]);\n      return;\n    }\n\n    const uploadedAttachment: LocalUploadAttachment = {\n      ...attachment,\n      localMetadata: {\n        ...attachment.localMetadata,\n        uploadState: 'finished',\n      },\n    };\n\n    if (isLocalImageAttachment(uploadedAttachment)) {\n      if (uploadedAttachment.localMetadata.previewUri) {\n        URL.revokeObjectURL(uploadedAttachment.localMetadata.previewUri);\n        delete uploadedAttachment.localMetadata.previewUri;\n      }\n      uploadedAttachment.image_url = response.file;\n    } else {\n      (uploadedAttachment as LocalNotImageAttachment).asset_url = response.file;\n    }\n    if (response.thumb_url) {\n      (uploadedAttachment as LocalNotImageAttachment).thumb_url = response.thumb_url;\n    }\n\n    this.updateAttachment(uploadedAttachment);\n\n    return uploadedAttachment;\n  };\n\n  uploadFiles = async (files: FileReference[] | FileList | FileLike[]) => {\n    if (!this.isUploadEnabled) return;\n    const iterableFiles: FileReference[] | FileLike[] = isFileList(files)\n      ? Array.from(files)\n      : files;\n    const attachments = await Promise.all(\n      iterableFiles.map(this.fileToLocalUploadAttachment),\n    );\n\n    return Promise.all(\n      attachments\n        .filter(this.fileUploadFilter)\n        .slice(0, this.availableUploadSlots)\n        .map(this.uploadAttachment),\n    );\n  };\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster6d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';\n\n/**\n * @template A\n * @template B\n * @param {A} target\n * @param {B} properties\n * @return {A & B}\n */\nconst assign = (target, properties) => {\n  for (const key in properties) {\n    target[key] = properties[key];\n  }\n  return target;\n};\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token = null) {\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly = false) {\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\nconst ASCIINUMERICAL = 'ASCIINUMERICAL'; // contains a-z, 0-9\nconst ALPHANUMERICAL = 'ALPHANUMERICAL'; // contains numbers and letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL = 'NL'; // \\n\n\n// Opening/closing bracket classes\n// TODO: Rename OPEN -> LEFT and CLOSE -> RIGHT in v5 to fit with Unicode names\n// Also rename angle brackes to LESSTHAN and GREATER THAN\nconst OPENBRACE = 'OPENBRACE'; // {\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst FULLWIDTHLEFTPAREN = 'FULLWIDTHLEFTPAREN'; // （\nconst FULLWIDTHRIGHTPAREN = 'FULLWIDTHRIGHTPAREN'; // ）\nconst LEFTCORNERBRACKET = 'LEFTCORNERBRACKET'; // 「\nconst RIGHTCORNERBRACKET = 'RIGHTCORNERBRACKET'; // 」\nconst LEFTWHITECORNERBRACKET = 'LEFTWHITECORNERBRACKET'; // 『\nconst RIGHTWHITECORNERBRACKET = 'RIGHTWHITECORNERBRACKET'; // 』\nconst FULLWIDTHLESSTHAN = 'FULLWIDTHLESSTHAN'; // ＜\nconst FULLWIDTHGREATERTHAN = 'FULLWIDTHGREATERTHAN'; // ＞\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\nconst FULLWIDTHMIDDLEDOT = 'FULLWIDTHMIDDLEDOT'; // ・\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tWORD: WORD,\n\tUWORD: UWORD,\n\tASCIINUMERICAL: ASCIINUMERICAL,\n\tALPHANUMERICAL: ALPHANUMERICAL,\n\tLOCALHOST: LOCALHOST,\n\tTLD: TLD,\n\tUTLD: UTLD,\n\tSCHEME: SCHEME,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tNUM: NUM,\n\tWS: WS,\n\tNL: NL,\n\tOPENBRACE: OPENBRACE,\n\tCLOSEBRACE: CLOSEBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tCLOSEPAREN: CLOSEPAREN,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tFULLWIDTHLEFTPAREN: FULLWIDTHLEFTPAREN,\n\tFULLWIDTHRIGHTPAREN: FULLWIDTHRIGHTPAREN,\n\tLEFTCORNERBRACKET: LEFTCORNERBRACKET,\n\tRIGHTCORNERBRACKET: RIGHTCORNERBRACKET,\n\tLEFTWHITECORNERBRACKET: LEFTWHITECORNERBRACKET,\n\tRIGHTWHITECORNERBRACKET: RIGHTWHITECORNERBRACKET,\n\tFULLWIDTHLESSTHAN: FULLWIDTHLESSTHAN,\n\tFULLWIDTHGREATERTHAN: FULLWIDTHGREATERTHAN,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tHYPHEN: HYPHEN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tFULLWIDTHMIDDLEDOT: FULLWIDTHMIDDLEDOT,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tTILDE: TILDE,\n\tUNDERSCORE: UNDERSCORE,\n\tEMOJI: EMOJI$1,\n\tSYM: SYM\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tLETTER: LETTER,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tDIGIT: DIGIT,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\nconst CR = '\\r'; // carriage-return character\nconst LF = '\\n'; // line-feed character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\nconst OBJECT_REPLACEMENT = '\\ufffc'; // whitespace placeholder that sometimes appears in rich text editors\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes = []) {\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, '（', FULLWIDTHLEFTPAREN);\n  tt(Start, '）', FULLWIDTHRIGHTPAREN);\n  tt(Start, '「', LEFTCORNERBRACKET);\n  tt(Start, '」', RIGHTCORNERBRACKET);\n  tt(Start, '『', LEFTWHITECORNERBRACKET);\n  tt(Start, '』', RIGHTWHITECORNERBRACKET);\n  tt(Start, '＜', FULLWIDTHLESSTHAN);\n  tt(Start, '＞', FULLWIDTHGREATERTHAN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  tt(Start, '・', FULLWIDTHMIDDLEDOT);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {\n    [asciinumeric]: true\n  });\n  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {\n    [alphanumeric]: true\n  });\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, DIGIT, Asciinumeric);\n  tr(Word, ASCII_LETTER, Word);\n  tr(Asciinumeric, DIGIT, Asciinumeric);\n  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, DIGIT, Alphanumeric);\n  tr(UWord, LETTER, UWord);\n  tr(Alphanumeric, DIGIT, Alphanumeric);\n  tr(Alphanumeric, ASCII_LETTER); // Non-accepting\n  tr(Alphanumeric, LETTER, Alphanumeric); // Non-accepting\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Nl = tt(Start, LF, NL, {\n    [whitespace]: true\n  });\n  const Cr = tt(Start, CR, WS, {\n    [whitespace]: true\n  });\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, OBJECT_REPLACEMENT, Ws);\n  tt(Cr, LF, Nl); // \\r\\n\n  tt(Cr, OBJECT_REPLACEMENT, Ws);\n  tr(Cr, SPACE, Ws);\n  tt(Ws, CR); // non-accepting state to avoid mixing whitespaces\n  tt(Ws, LF); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n  tt(Ws, OBJECT_REPLACEMENT, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tt(Emoji, '#'); // no transition, emoji regex seems to match #\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tt(EmojiJoiner, '#');\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender = null) {\n  let o = assign({}, defaults);\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdefaults: defaults,\n\tOptions: Options,\n\tassign: assign\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n   */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol = defaults.defaultProtocol) {\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme = defaults.defaultProtocol) {\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tMultiToken: MultiToken,\n\tBase: MultiToken,\n\tcreateTokenClass: createTokenClass,\n\tEmail: Email,\n\tText: Text,\n\tNl: Nl,\n\tUrl: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1({\n  groups\n}) {\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port number\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  tt(DomainHyphen, HYPHEN, DomainHyphen);\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  tt(SchemeColon, QUERY, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n  const bracketPairs = [[OPENBRACE, CLOSEBRACE],\n  // {}\n  [OPENBRACKET, CLOSEBRACKET],\n  // []\n  [OPENPAREN, CLOSEPAREN],\n  // ()\n  [OPENANGLEBRACKET, CLOSEANGLEBRACKET],\n  // <>\n  [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],\n  // （）\n  [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],\n  // 「」\n  [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],\n  // 『』\n  [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN] // ＜＞\n  ];\n  for (let i = 0; i < bracketPairs.length; i++) {\n    const [OPEN, CLOSE] = bracketPairs[i];\n    const UrlOpen = tt(Url$1, OPEN); // URL followed by open bracket\n\n    // Continue not accepting for open brackets\n    tt(UrlNonaccept, OPEN, UrlOpen);\n\n    // Closing bracket component. This character WILL be included in the URL\n    tt(UrlOpen, CLOSE, Url$1);\n\n    // URL that beings with an opening bracket, followed by a symbols.\n    // Note that the final state can still be `UrlOpen` (if the URL has a\n    // single opening bracket for some reason).\n    const UrlOpenQ = makeState(Url);\n    ta(UrlOpen, qsAccepting, UrlOpenQ);\n    const UrlOpenSyms = makeState(); // UrlOpen followed by some symbols it cannot end it\n    ta(UrlOpen, qsNonAccepting);\n\n    // URL that begins with an opening bracket, followed by some symbols\n    ta(UrlOpenQ, qsAccepting, UrlOpenQ);\n    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);\n    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);\n    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);\n\n    // Close brace/bracket to become regular URL\n    tt(UrlOpenQ, CLOSE, Url$1);\n    tt(UrlOpenSyms, CLOSE, Url$1);\n  }\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n  return INIT;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} scheme\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash = false) {\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error(`linkifyjs: incorrect scheme format.\n1. Must only contain digits, lowercase ASCII letters or \"-\"\n2. Cannot start or end with \"-\"\n3. \"-\" cannot repeat`);\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n  return INIT;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\ntokenize.scan = run$1; // for testing\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n */\nfunction find(str, type = null, opts = null) {\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type) && options.check(token)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type = null) {\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, multi as text, tokenize };\n","import { find } from 'linkifyjs';\nimport { API_MAX_FILES_ALLOWED_PER_MESSAGE } from '../../constants';\nimport type {\n  AttachmentManagerConfig,\n  LinkPreviewsManagerConfig,\n  MessageComposerConfig,\n} from './types';\nimport type { TextComposerConfig } from './types';\n\nexport const DEFAULT_LINK_PREVIEW_MANAGER_CONFIG: LinkPreviewsManagerConfig = {\n  debounceURLEnrichmentMs: 1500,\n  enabled: false,\n  findURLFn: (text: string): string[] =>\n    find(text, 'url', { defaultProtocol: 'https' }).reduce<string[]>((acc, link) => {\n      try {\n        const url = new URL(link.href);\n        // Check for valid hostname with at least one dot and valid TLD\n        if (link.isLink && /^[a-zA-Z0-9-.]+\\.[a-zA-Z]{2,}$/.test(url.hostname)) {\n          acc.push(link.href);\n        }\n      } catch {\n        // Invalid URL, skip it\n      }\n      return acc;\n    }, []),\n};\n\nexport const DEFAULT_ATTACHMENT_MANAGER_CONFIG: AttachmentManagerConfig = {\n  acceptedFiles: [], // an empty array means all files are accepted\n  fileUploadFilter: () => true,\n  maxNumberOfFilesPerMessage: API_MAX_FILES_ALLOWED_PER_MESSAGE,\n};\n\nexport const DEFAULT_TEXT_COMPOSER_CONFIG: TextComposerConfig = {\n  enabled: true,\n  publishTypingEvents: true,\n};\n\nexport const DEFAULT_COMPOSER_CONFIG: MessageComposerConfig = {\n  attachments: DEFAULT_ATTACHMENT_MANAGER_CONFIG,\n  drafts: { enabled: false },\n  linkPreviews: DEFAULT_LINK_PREVIEW_MANAGER_CONFIG,\n  text: DEFAULT_TEXT_COMPOSER_CONFIG,\n};\n","import { StateStore } from '..';\nimport type {\n  CustomMessageComposerData,\n  CustomMessageData,\n  DraftMessage,\n  LocalMessage,\n} from '..';\nimport type { MessageComposer } from './messageComposer';\nimport type { DeepPartial } from '../types.utility';\n\nexport type CustomDataManagerState = {\n  message: CustomMessageData;\n  custom: CustomMessageComposerData;\n};\n\nexport type CustomDataManagerOptions = {\n  composer: MessageComposer;\n  message?: DraftMessage | LocalMessage;\n};\n\nconst initState = (options: CustomDataManagerOptions): CustomDataManagerState => {\n  if (!options)\n    return { message: {} as CustomMessageData, custom: {} as CustomMessageComposerData };\n  return { message: {} as CustomMessageData, custom: {} as CustomMessageComposerData };\n};\n\nexport class CustomDataManager {\n  composer: MessageComposer;\n  state: StateStore<CustomDataManagerState>;\n\n  constructor({ composer, message }: CustomDataManagerOptions) {\n    this.composer = composer;\n    this.state = new StateStore<CustomDataManagerState>(initState({ composer, message }));\n  }\n\n  get customMessageData() {\n    return this.state.getLatestValue().message;\n  }\n\n  get customComposerData() {\n    return this.state.getLatestValue().custom;\n  }\n\n  isMessageDataEqual = (\n    nextState: CustomDataManagerState,\n    previousState?: CustomDataManagerState,\n  ) => JSON.stringify(nextState.message) === JSON.stringify(previousState?.message);\n\n  initState = ({ message }: { message?: DraftMessage | LocalMessage } = {}) => {\n    this.state.next(initState({ composer: this.composer, message }));\n  };\n\n  setMessageData(data: DeepPartial<CustomMessageData>) {\n    this.state.partialNext({\n      message: {\n        ...this.state.getLatestValue().message,\n        ...data,\n      },\n    });\n  }\n\n  setCustomData(data: DeepPartial<CustomMessageComposerData>) {\n    this.state.partialNext({\n      custom: {\n        ...this.state.getLatestValue().custom,\n        ...data,\n      },\n    });\n  }\n}\n","import { StateStore } from '../store';\nimport type { DebouncedFunc } from '../utils';\nimport { debounce } from '../utils';\nimport { mergeWithDiff } from '../utils/mergeWith';\nimport type { DraftMessage, LocalMessage, OGAttachment } from '../types';\nimport type { LinkPreviewsManagerConfig } from './configuration/types';\nimport type { MessageComposer } from './messageComposer';\n\nexport type LinkPreview = OGAttachment & {\n  status: LinkPreviewStatus;\n};\n\nexport interface ILinkPreviewsManager {\n  /** Function cancels all the scheduled or in-progress URL enrichment queries and resets the state. */\n  cancelURLEnrichment: () => void;\n  /** Function that triggers the search for URLs and their enrichment. */\n  findAndEnrichUrls?: DebouncedFunc<(text: string) => void>;\n}\n\nexport enum LinkPreviewStatus {\n  /** Link preview has been dismissed using **/\n  DISMISSED = 'dismissed',\n  /** Link preview could not be loaded, the enrichment request has failed. **/\n  FAILED = 'failed',\n  /** Link preview has been successfully loaded. **/\n  LOADED = 'loaded',\n  /** The enrichment query is in progress for a given link. **/\n  LOADING = 'loading',\n  /** The preview reference enrichment has not begun. Default status if not set. */\n  PENDING = 'pending',\n}\n\nexport type LinkURL = string;\n\nexport type LinkPreviewMap = Map<LinkURL, LinkPreview>;\n\nexport type LinkPreviewsManagerState = {\n  previews: LinkPreviewMap;\n};\n\nexport type LinkPreviewsManagerOptions = {\n  composer: MessageComposer;\n  message?: DraftMessage | LocalMessage;\n};\n\nconst linkPreviewArrayToMap = (linkPreviews: LinkPreview[]) =>\n  new Map(linkPreviews.map((linkPreview) => [linkPreview.og_scrape_url, linkPreview]));\n\nconst initState = ({\n  message,\n}: {\n  message?: DraftMessage | LocalMessage;\n}): LinkPreviewsManagerState =>\n  message\n    ? {\n        previews:\n          message.attachments?.reduce<LinkPreviewMap>((acc, attachment) => {\n            if (!attachment.og_scrape_url) return acc;\n            acc.set(attachment.og_scrape_url, {\n              ...(attachment as OGAttachment),\n              status: LinkPreviewStatus.LOADED,\n            });\n            return acc;\n          }, new Map()) ?? new Map(),\n      }\n    : {\n        previews: new Map<LinkURL, LinkPreview>(),\n      };\n\n/*\ndocs:\nYou can customize  function to identify URLs in a string and request OG data by overriding findURLFn?: (text: string) => string[];\n */\n\nexport class LinkPreviewsManager implements ILinkPreviewsManager {\n  findAndEnrichUrls: DebouncedFunc<(text: string) => void>;\n  readonly state: StateStore<LinkPreviewsManagerState>;\n  readonly composer: MessageComposer;\n  private shouldDiscardEnrichQueries = false;\n\n  constructor({ composer, message }: LinkPreviewsManagerOptions) {\n    this.composer = composer;\n    this.state = new StateStore<LinkPreviewsManagerState>(\n      initState({ message: this.enabled ? message : undefined }),\n    );\n\n    this.findAndEnrichUrls = debounce(\n      this._findAndEnrichUrls.bind(this),\n      this.config.debounceURLEnrichmentMs,\n    );\n  }\n\n  get client() {\n    return this.composer.client;\n  }\n\n  get channel() {\n    return this.composer.channel;\n  }\n\n  get previews() {\n    return this.state.getLatestValue().previews;\n  }\n\n  get loadingPreviews() {\n    return Array.from(this.previews.values()).filter((linkPreview) =>\n      LinkPreviewsManager.previewIsLoading(linkPreview),\n    );\n  }\n\n  get loadedPreviews() {\n    return Array.from(this.previews.values()).filter((linkPreview) =>\n      LinkPreviewsManager.previewIsLoaded(linkPreview),\n    );\n  }\n\n  get dismissedPreviews() {\n    return Array.from(this.previews.values()).filter((linkPreview) =>\n      LinkPreviewsManager.previewIsDismissed(linkPreview),\n    );\n  }\n\n  get failedPreviews() {\n    return Array.from(this.previews.values()).filter((linkPreview) =>\n      LinkPreviewsManager.previewIsFailed(linkPreview),\n    );\n  }\n\n  get pendingPreviews() {\n    return Array.from(this.previews.values()).filter((linkPreview) =>\n      LinkPreviewsManager.previewIsPending(linkPreview),\n    );\n  }\n\n  get config() {\n    return this.composer.config.linkPreviews;\n  }\n\n  get debounceURLEnrichmentMs() {\n    return this.config.debounceURLEnrichmentMs;\n  }\n\n  set debounceURLEnrichmentMs(\n    debounceURLEnrichmentMs: LinkPreviewsManagerConfig['debounceURLEnrichmentMs'],\n  ) {\n    this.cancelURLEnrichment();\n\n    this.findAndEnrichUrls = debounce(\n      this._findAndEnrichUrls.bind(this),\n      this.config.debounceURLEnrichmentMs,\n    );\n\n    this.composer.updateConfig({ linkPreviews: { debounceURLEnrichmentMs } });\n  }\n\n  get enabled() {\n    /**\n     * We have to check whether the message will be enriched server side (url_enrichment).\n     * If not, then it does not make sense to do previews in composer.\n     */\n    return (\n      !!this.channel.getConfig()?.url_enrichment &&\n      this.composer.config.linkPreviews.enabled\n    );\n  }\n\n  set enabled(enabled: LinkPreviewsManagerConfig['enabled']) {\n    if (enabled === this.enabled) return;\n    this.composer.updateConfig({ linkPreviews: { enabled } });\n  }\n\n  get findURLFn() {\n    return this.config.findURLFn;\n  }\n\n  set findURLFn(fn: LinkPreviewsManagerConfig['findURLFn']) {\n    this.composer.updateConfig({ linkPreviews: { findURLFn: fn } });\n  }\n\n  get onLinkPreviewDismissed() {\n    return this.config.onLinkPreviewDismissed;\n  }\n\n  set onLinkPreviewDismissed(fn: LinkPreviewsManagerConfig['onLinkPreviewDismissed']) {\n    this.composer.updateConfig({ linkPreviews: { onLinkPreviewDismissed: fn } });\n  }\n\n  initState = ({ message }: { message?: DraftMessage | LocalMessage } = {}) => {\n    this.state.next(initState({ message: this.enabled ? message : undefined }));\n  };\n\n  private _findAndEnrichUrls = async (text: string) => {\n    if (!this.enabled) return;\n    const urls = this.config.findURLFn(text);\n\n    this.shouldDiscardEnrichQueries = !urls.length;\n    if (this.shouldDiscardEnrichQueries) {\n      this.state.next({ previews: new Map() });\n      return;\n    }\n    const keptPreviews = new Map(\n      Array.from(this.previews).filter(\n        ([previewUrl]) => urls.includes(previewUrl) || urls.includes(previewUrl + '/'),\n      ),\n    );\n\n    const newLinkPreviews = urls\n      .filter((url) => {\n        const existingPreviews = this.previews;\n        // account for trailing slashes added by the back-end\n        const existingPreviewLink =\n          existingPreviews.get(url) || existingPreviews.get(url + '/');\n        return !existingPreviewLink;\n      })\n      .map(\n        (url) =>\n          ({\n            og_scrape_url: url.trim(),\n            status: LinkPreviewStatus.LOADING,\n          }) as LinkPreview,\n      );\n\n    if (!newLinkPreviews.length) return;\n\n    this.state.partialNext({\n      previews: new Map([...keptPreviews, ...linkPreviewArrayToMap(newLinkPreviews)]),\n    });\n\n    await Promise.all(\n      newLinkPreviews.map(async (linkPreview) => {\n        try {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { duration, ...ogAttachment } = await this.client.enrichURL(\n            linkPreview.og_scrape_url,\n          );\n          if (this.shouldDiscardEnrichQueries) return;\n          // due to typing and text changes, the URL may not be anymore in the store\n          if (this.previews.has(linkPreview.og_scrape_url)) {\n            this.updatePreview(linkPreview.og_scrape_url, {\n              status: LinkPreviewStatus.LOADED,\n              ...ogAttachment,\n            });\n          }\n        } catch (error) {\n          if (this.previews.has(linkPreview.og_scrape_url)) {\n            this.updatePreview(linkPreview.og_scrape_url, {\n              status: LinkPreviewStatus.FAILED,\n            });\n          }\n        }\n        return linkPreview;\n      }),\n    );\n  };\n\n  cancelURLEnrichment = () => {\n    this.findAndEnrichUrls.cancel();\n    this.findAndEnrichUrls.flush();\n  };\n\n  /**\n   * Clears all non-dismissed previews when the text composer is cleared.\n   * This ensures that dismissed previews are not re-enriched in the future.\n   */\n  clearPreviews = () => {\n    const currentPreviews = this.previews;\n    const newPreviews = new Map<LinkURL, LinkPreview>();\n\n    // Keep only dismissed previews\n    currentPreviews.forEach((preview, url) => {\n      if (LinkPreviewsManager.previewIsDismissed(preview)) {\n        newPreviews.set(url, preview);\n      }\n    });\n\n    this.state.partialNext({ previews: newPreviews });\n  };\n\n  updatePreview = (url: LinkURL, preview: Partial<LinkPreview>) => {\n    if (!url) return;\n    const existingPreview = this.previews.get(url);\n    const status =\n      preview.status ?? this.previews.get(url)?.status ?? LinkPreviewStatus.PENDING;\n    let finalPreview = preview;\n    if (existingPreview) {\n      const merged = mergeWithDiff(existingPreview, preview);\n      const isSame = !merged.diff || Object.keys(merged.diff).length === 0;\n      if (isSame) return;\n      finalPreview = merged.result;\n    }\n    this.state.partialNext({\n      previews: new Map(this.previews).set(url, {\n        ...finalPreview,\n        og_scrape_url: url,\n        status,\n      }),\n    });\n  };\n\n  dismissPreview = (url: LinkURL) => {\n    const preview = this.previews.get(url);\n    if (preview) {\n      this.onLinkPreviewDismissed?.(preview);\n      this.updatePreview(url, { status: LinkPreviewStatus.DISMISSED });\n    }\n  };\n\n  static previewIsLoading = (preview: LinkPreview) =>\n    preview.status === LinkPreviewStatus.LOADING;\n\n  static previewIsLoaded = (preview: LinkPreview) =>\n    preview.status === LinkPreviewStatus.LOADED;\n\n  static previewIsDismissed = (preview: LinkPreview) =>\n    preview.status === LinkPreviewStatus.DISMISSED;\n\n  static previewIsFailed = (preview: LinkPreview) =>\n    preview.status === LinkPreviewStatus.FAILED;\n\n  static previewIsPending = (preview: LinkPreview) =>\n    preview.status === LinkPreviewStatus.PENDING;\n\n  static getPreviewData = (preview: LinkPreview) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { status, ...data } = preview;\n    return data;\n  };\n}\n","interface PendingPromise {\n  onContinued: () => void;\n  promise: Promise<unknown>;\n}\n\ntype AsyncWrapper<P extends unknown[], T> = (\n  tag: string | symbol,\n  cb: (...args: P) => Promise<T>,\n) => {\n  cb: () => Promise<T>;\n  onContinued: () => void;\n};\n\n/**\n * Runs async functions serially. Useful for wrapping async actions that\n * should never run simultaneously: if marked with the same tag, functions\n * will run one after another.\n *\n * @param tag Async functions with the same tag will run serially. Async functions\n * with different tags can run in parallel.\n * @param cb Async function to run.\n * @returns Promise that resolves when async functions returns.\n */\nexport const withoutConcurrency = createRunner(wrapWithContinuationTracking);\n\n/**\n * Runs async functions serially, and cancels all other actions with the same tag\n * when a new action is scheduled. Useful for wrapping async actions that override\n * each other (e.g. enabling and disabling camera).\n *\n * If an async function hasn't started yet and was canceled, it will never run.\n * If an async function is already running and was canceled, it will be notified\n * via an abort signal passed as an argument.\n *\n * @param tag Async functions with the same tag will run serially and are canceled\n * when a new action with the same tag is scheduled.\n * @param cb Async function to run. Receives AbortSignal as the only argument.\n * @returns Promise that resolves when async functions returns. If the function didn't\n * start and was canceled, will resolve with 'canceled'. If the function started to run,\n * it's up to the function to decide how to react to cancelation.\n */\nexport const withCancellation = createRunner(wrapWithCancellation);\n\nconst pendingPromises = new Map<string | symbol, PendingPromise>();\n\nexport function hasPending(tag: string | symbol) {\n  return pendingPromises.has(tag);\n}\n\nexport async function settled(tag: string | symbol) {\n  await pendingPromises.get(tag)?.promise;\n}\n\n/**\n * Implements common functionality of running async functions serially, by chaining\n * their promises one after another.\n *\n * Before running, async function is \"wrapped\" using the provided wrapper. This wrapper\n * can add additional steps to run before or after the function.\n *\n * When async function is scheduled to run, the previous function is notified\n * by calling the associated onContinued callback. This behavior of this callback\n * is defined by the wrapper.\n */\nfunction createRunner<P extends unknown[], T>(wrapper: AsyncWrapper<P, T>) {\n  return function run(tag: string | symbol, cb: (...args: P) => Promise<T>) {\n    const { cb: wrapped, onContinued } = wrapper(tag, cb);\n    const pending = pendingPromises.get(tag);\n    pending?.onContinued();\n    const promise = pending ? pending.promise.then(wrapped, wrapped) : wrapped();\n    pendingPromises.set(tag, { promise, onContinued });\n    return promise;\n  };\n}\n\n/**\n * Wraps an async function with an additional step run after the function:\n * if the function is the last in the queue, it cleans up the whole chain\n * of promises after finishing.\n */\nfunction wrapWithContinuationTracking<T>(tag: string | symbol, cb: () => Promise<T>) {\n  let hasContinuation = false;\n  const wrapped = () =>\n    cb().finally(() => {\n      if (!hasContinuation) {\n        pendingPromises.delete(tag);\n      }\n    });\n  const onContinued = () => (hasContinuation = true);\n  return { cb: wrapped, onContinued };\n}\n\n/**\n * Wraps an async function with additional functionality:\n * 1. Associates an abort signal with every function, that is passed to it\n *    as an argument. When a new function is scheduled to run after the current\n *    one, current signal is aborted.\n * 2. If current function didn't start and was aborted, in will never start.\n * 3. If the function is the last in the queue, it cleans up the whole chain\n *    of promises after finishing.\n *\n *    The cb is passed the AbortController instance for a given execution.\n *    The cb should implement own cancellation logic to reflect that the given AbortController has been aborted.\n *\n *  ```\n *    const cb = async (signal: AbortSignal) => {\n *         await new Promise(resolve => setTimeout(resolve, 50));\n *         if (signal.aborted) {\n *           abortedSignals.push(signal);\n *           return 'canceled';\n *         }\n *         return 1;\n *       };\n *   const result = withCancellation('tag-x', cb); // the result variable may acquire value \"canceled\" or 1\n *  ```\n */\nfunction wrapWithCancellation<T>(\n  tag: string | symbol,\n  cb: (signal: AbortSignal) => Promise<T | 'canceled'>,\n) {\n  const ac = new AbortController();\n  const wrapped = () => {\n    if (ac.signal.aborted) {\n      return Promise.resolve('canceled' as const);\n    }\n\n    return cb(ac.signal).finally(() => {\n      if (!ac.signal.aborted) {\n        pendingPromises.delete(tag);\n      }\n    });\n  };\n  const onContinued = () => ac.abort();\n  return { cb: wrapped, onContinued };\n}\n","import { withCancellation } from './utils/concurrency';\nimport { generateUUIDv4 } from './utils';\n\nexport type InsertPosition =\n  | {\n      after: string;\n      before?: never;\n    }\n  | {\n      after?: never;\n      before: string;\n    };\n\nexport type MiddlewareStatus = 'complete' | 'discard';\n\nexport type MiddlewareExecutionResult<TValue> = {\n  state: TValue;\n  status?: MiddlewareStatus;\n};\n\nexport type ExecuteParams<TValue> = {\n  eventName: string;\n  initialValue: TValue;\n};\n\nexport type MiddlewareHandlerParams<TValue> = {\n  state: TValue;\n  next: (state: TValue) => Promise<MiddlewareExecutionResult<TValue>>;\n  complete: (state: TValue) => Promise<MiddlewareExecutionResult<TValue>>;\n  discard: () => Promise<MiddlewareExecutionResult<TValue>>;\n  forward: () => Promise<MiddlewareExecutionResult<TValue>>;\n};\n\nexport type MiddlewareHandler<TValue> = (\n  params: MiddlewareHandlerParams<TValue>,\n) => Promise<MiddlewareExecutionResult<TValue>>;\n\nexport type MiddlewareHandlers<TValue, THandlers extends string> = {\n  [K in THandlers]: MiddlewareHandler<TValue>;\n};\n\nexport type Middleware<TValue, THandlers extends string> = {\n  id: string;\n  handlers: MiddlewareHandlers<TValue, THandlers>;\n};\n\nexport class MiddlewareExecutor<TValue, THandlers extends string> {\n  readonly id: string;\n  private middleware: Middleware<TValue, THandlers>[] = [];\n\n  constructor() {\n    this.id = generateUUIDv4();\n  }\n\n  use(middleware: Middleware<TValue, THandlers> | Middleware<TValue, THandlers>[]) {\n    this.middleware = this.middleware.concat(middleware);\n    return this;\n  }\n\n  // todo: document how to re-arrange the order of middleware using replace\n  replace(middleware: Middleware<TValue, THandlers>[]) {\n    const newMiddleware = [...this.middleware];\n    middleware.forEach((upserted) => {\n      const existingIndex = this.middleware.findIndex(\n        (existing) => existing.id === upserted.id,\n      );\n      if (existingIndex >= 0) {\n        newMiddleware.splice(existingIndex, 1, upserted);\n      } else {\n        newMiddleware.push(upserted);\n      }\n    });\n    this.middleware = newMiddleware;\n    return this;\n  }\n\n  insert({\n    middleware,\n    position,\n    unique,\n  }: {\n    middleware: Middleware<TValue, THandlers>[];\n    position: InsertPosition;\n    unique?: boolean;\n  }) {\n    if (unique) {\n      middleware.forEach((md) => {\n        const existingMiddlewareIndex = this.middleware.findIndex((m) => m.id === md.id);\n        if (existingMiddlewareIndex >= 0) {\n          this.middleware.splice(existingMiddlewareIndex, 1);\n        }\n      });\n    }\n    const targetId = position.after || position.before;\n    const targetIndex = this.middleware.findIndex((m) => m.id === targetId);\n    const insertionIndex = position.after ? targetIndex + 1 : targetIndex;\n    this.middleware.splice(insertionIndex, 0, ...middleware);\n    return this;\n  }\n\n  setOrder(order: string[]) {\n    this.middleware = order\n      .map((id) => this.middleware.find((middleware) => middleware.id === id))\n      .filter(Boolean) as Middleware<TValue, THandlers>[];\n  }\n\n  protected async executeMiddlewareChain({\n    eventName,\n    initialValue,\n  }: ExecuteParams<TValue>): Promise<MiddlewareExecutionResult<TValue>> {\n    let index = -1;\n\n    const execute = async (\n      i: number,\n      state: TValue,\n      status?: MiddlewareStatus,\n    ): Promise<MiddlewareExecutionResult<TValue>> => {\n      if (i <= index) {\n        throw new Error('next() called multiple times');\n      }\n\n      index = i;\n\n      const returnFromChain =\n        i === this.middleware.length ||\n        (status && ['complete', 'discard'].includes(status));\n      if (returnFromChain) return { state, status };\n\n      const middleware = this.middleware[i];\n      const handler = middleware.handlers[eventName as THandlers];\n\n      if (!handler) {\n        return execute(i + 1, state, status);\n      }\n\n      const next = (adjustedState: TValue) => execute(i + 1, adjustedState);\n      const complete = (adjustedState: TValue) =>\n        execute(i + 1, adjustedState, 'complete');\n      const discard = () => execute(i + 1, state, 'discard');\n      const forward = () => execute(i + 1, state);\n\n      return await handler({\n        state,\n        next,\n        complete,\n        discard,\n        forward,\n      });\n    };\n\n    const result = await withCancellation(\n      `middleware-execution-${this.id}-${eventName}`,\n      async (abortSignal) => {\n        const result = await execute(0, initialValue);\n        if (abortSignal.aborted) {\n          return 'canceled';\n        }\n        return result;\n      },\n    );\n\n    return result === 'canceled' ? { state: initialValue, status: 'discard' } : result;\n  }\n\n  async execute({\n    eventName,\n    initialValue: initialState,\n  }: ExecuteParams<TValue>): Promise<MiddlewareExecutionResult<TValue>> {\n    return await this.executeMiddlewareChain({\n      eventName,\n      initialValue: initialState,\n    });\n  }\n}\n","import type { Middleware, MiddlewareHandlerParams } from '../../../middleware';\nimport { generateUUIDv4 } from '../../../utils';\nimport type {\n  PollComposerFieldErrors,\n  PollComposerState,\n  PollComposerStateChangeMiddlewareValue,\n  TargetedPollOptionTextUpdate,\n} from './types';\n\nexport const VALID_MAX_VOTES_VALUE_REGEX = /^([2-9]|10)$/;\n\nexport const MAX_POLL_OPTIONS = 100 as const;\n\nconst textFieldIsEmpty = (text: string) => !text.trim();\n\nexport type PollStateValidationOutput = Partial<\n  Omit<Record<keyof PollComposerState['data'], string>, 'options'> & {\n    options?: Record<string, string>;\n  }\n>;\n\nexport type PollStateChangeValidator = (params: {\n  data: PollComposerState['data'];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n  currentError?: PollComposerFieldErrors[keyof PollComposerFieldErrors];\n}) => PollStateValidationOutput;\n\nexport const pollStateChangeValidators: Partial<\n  Record<keyof PollComposerState['data'], PollStateChangeValidator>\n> = {\n  enforce_unique_vote: () => ({ max_votes_allowed: undefined }),\n  max_votes_allowed: ({ data, value }) => {\n    if (data.enforce_unique_vote && value)\n      return { max_votes_allowed: 'Enforce unique vote is enabled' };\n    const numericMatch = value.match(/^[0-9]+$/);\n    if (!numericMatch && value) {\n      return { max_votes_allowed: 'Only numbers are allowed' };\n    }\n    if (value?.length > 1 && !value.match(VALID_MAX_VOTES_VALUE_REGEX))\n      return { max_votes_allowed: 'Type a number from 2 to 10' };\n    return { max_votes_allowed: undefined };\n  },\n  options: ({ value: options }) => {\n    const errors: Record<string, string> = {};\n    const seenOptions = new Set<string>();\n\n    options.forEach((option: { id: string; text: string }) => {\n      if (seenOptions.has(option.text) && option.text.length) {\n        errors[option.id] = 'Option already exists';\n      } else {\n        seenOptions.add(option.text);\n      }\n    });\n\n    return Object.keys(errors).length > 0 ? { options: errors } : { options: undefined };\n  },\n};\n\nexport const defaultPollFieldChangeEventValidators: Partial<\n  Record<keyof PollComposerState['data'], PollStateChangeValidator>\n> = {\n  name: ({ currentError, value }) =>\n    value && currentError\n      ? { name: undefined }\n      : { name: typeof currentError === 'string' ? currentError : undefined },\n};\n\nexport const defaultPollFieldBlurEventValidators: Partial<\n  Record<keyof PollComposerState['data'], PollStateChangeValidator>\n> = {\n  max_votes_allowed: ({ value }) => {\n    if (value && !value.match(VALID_MAX_VOTES_VALUE_REGEX))\n      return { max_votes_allowed: 'Type a number from 2 to 10' };\n    return { max_votes_allowed: undefined };\n  },\n  name: ({ value }) => {\n    if (textFieldIsEmpty(value)) return { name: 'Question is required' };\n    return { name: undefined };\n  },\n  options: (params) => {\n    const defaultResult = pollStateChangeValidators.options?.(params);\n    const errors = defaultResult?.options ?? {};\n    params.value.forEach((option: { id: string; text: string }, index: number) => {\n      const isTheLastOption = index === params.value.length - 1;\n      if (textFieldIsEmpty(option.text) && !isTheLastOption) {\n        errors[option.id] = 'Option is empty';\n      }\n    });\n    return Object.keys(errors).length > 0 ? { options: errors } : { options: undefined };\n  },\n};\n\nexport type PollCompositionStateProcessorOutput = Partial<PollComposerState['data']>;\n\nexport type PollCompositionStateProcessor = (params: {\n  data: PollComposerState['data'];\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n}) => PollCompositionStateProcessorOutput;\n\nexport const isTargetedOptionTextUpdate = (\n  value: unknown,\n): value is TargetedPollOptionTextUpdate =>\n  !Array.isArray(value) &&\n  typeof (value as TargetedPollOptionTextUpdate)?.index === 'number' &&\n  typeof (value as TargetedPollOptionTextUpdate)?.text === 'string';\n\nexport const pollCompositionStateProcessors: Partial<\n  Record<keyof PollComposerState['data'], PollCompositionStateProcessor>\n> = {\n  enforce_unique_vote: ({ value }) => ({\n    enforce_unique_vote: value,\n    max_votes_allowed: '',\n  }),\n  options: ({ value, data }) => {\n    // If it's a direct array update (like drag-drop reordering)\n    if (Array.isArray(value)) {\n      return {\n        options: value.map((option) => ({\n          id: option.id,\n          text: option.text.trim(),\n        })),\n      };\n    }\n\n    // For single option updates\n    const { index, text } = value;\n    const prevOptions = data.options || [];\n\n    const shouldRemoveOption =\n      prevOptions && prevOptions.slice(index + 1).length > 0 && !text;\n\n    const optionListHead = prevOptions.slice(0, index);\n    const optionListTail = prevOptions.slice(index + 1);\n\n    const newOptions = [\n      ...optionListHead,\n      ...(shouldRemoveOption ? [] : [{ ...prevOptions[index], text }]),\n      ...optionListTail,\n    ];\n\n    const shouldAddNewOption =\n      prevOptions.length < MAX_POLL_OPTIONS &&\n      !newOptions.some((option) => !option.text.trim());\n\n    if (shouldAddNewOption) {\n      newOptions.push({ id: generateUUIDv4(), text: '' });\n    }\n\n    return { options: newOptions };\n  },\n};\n\nexport type PollComposerStateMiddlewareFactoryOptions = {\n  processors?: {\n    handleFieldChange?: Partial<\n      Record<keyof PollComposerState['data'], PollCompositionStateProcessor>\n    >;\n    handleFieldBlur?: Partial<\n      Record<keyof PollComposerState['data'], PollCompositionStateProcessor>\n    >;\n  };\n  validators?: {\n    handleFieldChange?: Partial<\n      Record<keyof PollComposerState['data'], PollStateChangeValidator>\n    >;\n    handleFieldBlur?: Partial<\n      Record<keyof PollComposerState['data'], PollStateChangeValidator>\n    >;\n  };\n};\n\nexport type PollComposerStateMiddleware = Middleware<\n  PollComposerStateChangeMiddlewareValue,\n  'handleFieldChange' | 'handleFieldBlur'\n>;\n\nexport const createPollComposerStateMiddleware = ({\n  processors: customProcessors,\n  validators: customValidators,\n}: PollComposerStateMiddlewareFactoryOptions = {}): PollComposerStateMiddleware => {\n  const universalHandler = ({\n    state,\n    validators,\n    processors,\n  }: {\n    state: PollComposerStateChangeMiddlewareValue;\n    validators: Partial<\n      Record<keyof PollComposerState['data'], PollStateChangeValidator>\n    >;\n    processors?: Partial<\n      Record<keyof PollComposerState['data'], PollCompositionStateProcessor>\n    >;\n  }) => {\n    const { previousState, targetFields } = state;\n\n    let newData: Partial<PollComposerState['data']>;\n    if (!processors && isTargetedOptionTextUpdate(targetFields.options)) {\n      const options = [...previousState.data.options];\n      const targetOption = previousState.data.options[targetFields.options.index];\n      if (targetOption) {\n        targetOption.text = targetFields.options.text;\n        options.splice(targetFields.options.index, 1, targetOption);\n      }\n      newData = { ...targetFields, options };\n    } else if (!processors) {\n      newData = targetFields as PollComposerState['data'];\n    } else {\n      newData = Object.entries(targetFields).reduce(\n        (acc, [key, value]) => {\n          const processor = processors[key as keyof PollComposerState['data']];\n          acc = {\n            ...acc,\n            ...(processor\n              ? processor({ data: previousState.data, value })\n              : { [key]: value }),\n          };\n          return acc;\n        },\n        {} as PollComposerState['data'],\n      );\n    }\n\n    const newErrors = Object.keys(targetFields).reduce((acc, key) => {\n      const validator = validators[key as keyof PollComposerState['data']];\n      if (validator) {\n        const error = validator({\n          currentError: previousState.errors[key as keyof PollComposerState['data']],\n          data: previousState.data,\n          value: newData[key as keyof PollComposerState['data']],\n        });\n        acc = { ...acc, ...error };\n      }\n      return acc;\n    }, {} as PollComposerFieldErrors);\n\n    return { newData, newErrors };\n  };\n\n  return {\n    id: 'stream-io/poll-composer-state-processing',\n    handlers: {\n      handleFieldChange: ({\n        state,\n        next,\n        forward,\n      }: MiddlewareHandlerParams<PollComposerStateChangeMiddlewareValue>) => {\n        if (!state.targetFields) return forward();\n        const { previousState, injectedFieldErrors } = state;\n\n        const { newData, newErrors } = universalHandler({\n          processors: {\n            ...pollCompositionStateProcessors,\n            ...customProcessors?.handleFieldChange,\n          },\n          state,\n          validators: {\n            ...pollStateChangeValidators,\n            ...defaultPollFieldChangeEventValidators,\n            ...customValidators?.handleFieldChange,\n          },\n        });\n\n        return next({\n          ...state,\n          nextState: {\n            ...previousState,\n            data: { ...previousState.data, ...newData },\n            errors: { ...previousState.errors, ...newErrors, ...injectedFieldErrors },\n          },\n        });\n      },\n      handleFieldBlur: ({\n        state,\n        next,\n        forward,\n      }: MiddlewareHandlerParams<PollComposerStateChangeMiddlewareValue>) => {\n        if (!state.targetFields) return forward();\n\n        const { previousState } = state;\n        const { newData, newErrors } = universalHandler({\n          processors: customProcessors?.handleFieldBlur,\n          state,\n          validators: {\n            ...pollStateChangeValidators,\n            ...defaultPollFieldBlurEventValidators,\n            ...customValidators?.handleFieldBlur,\n          },\n        });\n\n        return next({\n          ...state,\n          nextState: {\n            ...previousState,\n            data: { ...previousState.data, ...newData },\n            errors: {\n              ...previousState.errors,\n              ...newErrors,\n              ...state.injectedFieldErrors,\n            },\n          },\n        });\n      },\n    },\n  };\n};\n","import type { Middleware, MiddlewareHandlerParams } from '../../../middleware';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { PollComposerCompositionMiddlewareValueState } from './types';\n\nexport type PollCompositionValidationMiddleware = Middleware<\n  PollComposerCompositionMiddlewareValueState,\n  'compose'\n>;\n\nexport const createPollCompositionValidationMiddleware = (\n  composer: MessageComposer,\n): PollCompositionValidationMiddleware => ({\n  id: 'stream-io/poll-composer-composition',\n  handlers: {\n    compose: ({\n      discard,\n      forward,\n    }: MiddlewareHandlerParams<PollComposerCompositionMiddlewareValueState>) => {\n      if (composer.pollComposer.canCreatePoll) return forward();\n      return discard();\n    },\n  },\n});\n","import { MiddlewareExecutor } from '../../../middleware';\nimport { createPollComposerStateMiddleware } from './state';\nimport { createPollCompositionValidationMiddleware } from './composition';\nimport type {\n  PollComposerCompositionMiddlewareValueState,\n  PollComposerStateChangeMiddlewareValue,\n} from './types';\nimport type { MessageComposer } from '../../messageComposer';\n\nexport type PollComposerMiddlewareExecutorOptions = {\n  composer: MessageComposer;\n};\n\nexport class PollComposerCompositionMiddlewareExecutor extends MiddlewareExecutor<\n  PollComposerCompositionMiddlewareValueState,\n  'compose'\n> {\n  constructor({ composer }: PollComposerMiddlewareExecutorOptions) {\n    super();\n    this.use([createPollCompositionValidationMiddleware(composer)]);\n  }\n}\n\nexport class PollComposerStateMiddlewareExecutor extends MiddlewareExecutor<\n  PollComposerStateChangeMiddlewareValue,\n  'handleFieldChange' | 'handleFieldBlur'\n> {\n  constructor() {\n    super();\n    this.use([createPollComposerStateMiddleware()]);\n  }\n}\n","import type { EVENT_MAP } from './events';\nimport type { Channel } from './channel';\nimport type { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport type { StableWSConnection } from './connection';\nimport type { Role } from './permissions';\nimport type {\n  CustomAttachmentData,\n  CustomChannelData,\n  CustomCommandData,\n  CustomEventData,\n  CustomMemberData,\n  CustomMessageData,\n  CustomPollData,\n  CustomPollOptionData,\n  CustomReactionData,\n  CustomThreadData,\n  CustomUserData,\n} from './custom_types';\nimport type { NotificationManager } from './notifications';\nimport type { RESERVED_UPDATED_MESSAGE_FIELDS } from './constants';\n\n/**\n * Utility Types\n */\n\nexport type Readable<T> = {\n  [key in keyof T]: T[key];\n} & {};\n\nexport type ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\nexport type ArrayTwoOrMore<T> = {\n  0: T;\n  1: T;\n} & Array<T>;\n\nexport type KnownKeys<T> = {\n  [K in keyof T]: string extends K ? never : number extends K ? never : K;\n} extends { [_ in keyof T]: infer U }\n  ? U\n  : never;\n\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Omit<T, K>>;\n}[keyof T];\n\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Omit<T, Keys> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\n  }[Keys];\n\nexport type PartializeKeys<T, K extends keyof T> = Partial<Pick<T, K>> & Omit<T, K>;\n\n/* Unknown Record */\nexport type UR = Record<string, unknown>;\nexport type UnknownType = UR; // alias to avoid breaking change\n\nexport type Unpacked<T> = T extends (infer U)[]\n  ? U // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : T extends (...args: any[]) => infer U\n    ? U\n    : T extends Promise<infer U>\n      ? U\n      : T;\n\n/**\n * Response Types\n */\n\nexport type APIResponse = {\n  duration: string;\n};\n\nexport type TranslateResponse = {\n  language: string;\n  translated_text: string;\n};\n\nexport type AppSettingsAPIResponse = APIResponse & {\n  app?: {\n    // TODO\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call_types: any;\n    channel_configs: Record<\n      string,\n      {\n        reminders: boolean;\n        automod?: ChannelConfigAutomod;\n        automod_behavior?: ChannelConfigAutomodBehavior;\n        automod_thresholds?: ChannelConfigAutomodThresholds;\n        blocklist_behavior?: ChannelConfigAutomodBehavior;\n        commands?: CommandVariants[];\n        connect_events?: boolean;\n        created_at?: string;\n        custom_events?: boolean;\n        mark_messages_pending?: boolean;\n        max_message_length?: number;\n        message_retention?: string;\n        mutes?: boolean;\n        name?: string;\n        polls?: boolean;\n        push_notifications?: boolean;\n        quotes?: boolean;\n        reactions?: boolean;\n        read_events?: boolean;\n        replies?: boolean;\n        search?: boolean;\n        typing_events?: boolean;\n        updated_at?: string;\n        uploads?: boolean;\n        url_enrichment?: boolean;\n        user_message_reminders?: boolean;\n      }\n    >;\n    reminders_interval: number;\n    async_moderation_config?: AsyncModerationOptions;\n    async_url_enrich_enabled?: boolean;\n    auto_translation_enabled?: boolean;\n    before_message_send_hook_url?: string;\n    campaign_enabled?: boolean;\n    cdn_expiration_seconds?: number;\n    custom_action_handler_url?: string;\n    datadog_info?: {\n      api_key: string;\n      site: string;\n      enabled?: boolean;\n    };\n    disable_auth_checks?: boolean;\n    disable_permissions_checks?: boolean;\n    enforce_unique_usernames?: 'no' | 'app' | 'team';\n    event_hooks?: Array<EventHook>;\n    file_upload_config?: FileUploadConfig;\n    geofences?: Array<{\n      country_codes: Array<string>;\n      description: string;\n      name: string;\n      type: string;\n    }>;\n    grants?: Record<string, string[]>;\n    image_moderation_enabled?: boolean;\n    image_upload_config?: FileUploadConfig;\n    multi_tenant_enabled?: boolean;\n    name?: string;\n    organization?: string;\n    permission_version?: string;\n    policies?: Record<string, Policy[]>;\n    poll_enabled?: boolean;\n    push_notifications?: {\n      offline_only: boolean;\n      version: string;\n      apn?: APNConfig;\n      firebase?: FirebaseConfig;\n      huawei?: HuaweiConfig;\n      providers?: PushProviderConfig[];\n      xiaomi?: XiaomiConfig;\n    };\n    revoke_tokens_issued_before?: string | null;\n    search_backend?: 'disabled' | 'elasticsearch' | 'postgres';\n    sns_key?: string;\n    sns_secret?: string;\n    sns_topic_arn?: string;\n    sqs_key?: string;\n    sqs_secret?: string;\n    sqs_url?: string;\n    suspended?: boolean;\n    suspended_explanation?: string;\n    user_search_disallowed_roles?: string[] | null;\n    video_provider?: string;\n    webhook_events?: Array<string>;\n    webhook_url?: string;\n  };\n};\n\nexport type ModerationResult = {\n  action: string;\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n  user_bad_karma: boolean;\n  user_karma: number;\n  blocked_word?: string;\n  blocklist_name?: string;\n  moderated_by?: string;\n};\n\nexport type AutomodDetails = {\n  action?: string;\n  image_labels?: Array<string>;\n  original_message_type?: string;\n  result?: ModerationResult;\n};\n\nexport type FlagDetails = {\n  automod?: AutomodDetails;\n};\n\nexport type Flag = {\n  created_at: string;\n  created_by_automod: boolean;\n  updated_at: string;\n  details?: FlagDetails;\n  target_message?: MessageResponse;\n  target_user?: UserResponse;\n  user?: UserResponse;\n};\n\nexport type FlagsResponse = APIResponse & {\n  flags?: Array<Flag>;\n};\n\nexport type MessageFlagsResponse = APIResponse & {\n  flags?: Array<{\n    message: MessageResponse;\n    user: UserResponse;\n    approved_at?: string;\n    created_at?: string;\n    created_by_automod?: boolean;\n    moderation_result?: ModerationResult;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: UserResponse;\n    updated_at?: string;\n  }>;\n};\n\nexport type FlagReport = {\n  flags_count: number;\n  id: string;\n  message: MessageResponse;\n  user: UserResponse;\n  created_at?: string;\n  details?: FlagDetails;\n  first_reporter?: UserResponse;\n  review_result?: string;\n  reviewed_at?: string;\n  reviewed_by?: UserResponse;\n  updated_at?: string;\n};\n\nexport type FlagReportsResponse = APIResponse & {\n  flag_reports: Array<FlagReport>;\n};\n\nexport type ReviewFlagReportResponse = APIResponse & {\n  flag_report: FlagReport;\n};\n\nexport type BannedUsersResponse = APIResponse & {\n  bans?: Array<{\n    user: UserResponse;\n    banned_by?: UserResponse;\n    channel?: ChannelResponse;\n    expires?: string;\n    ip_ban?: boolean;\n    reason?: string;\n    timeout?: number;\n  }>;\n};\n\nexport type BlockListResponse = BlockList & {\n  created_at?: string;\n  type?: string;\n  updated_at?: string;\n};\n\nexport type ChannelResponse = CustomChannelData & {\n  cid: string;\n  disabled: boolean;\n  frozen: boolean;\n  id: string;\n  type: string;\n  blocked?: boolean;\n  auto_translation_enabled?: boolean;\n  auto_translation_language?: TranslationLanguages;\n  hide_messages_before?: string;\n  config?: ChannelConfigWithInfo;\n  cooldown?: number;\n  created_at?: string;\n  created_by?: UserResponse | null;\n  created_by_id?: string;\n  deleted_at?: string;\n  hidden?: boolean;\n  invites?: string[];\n  joined?: boolean;\n  last_message_at?: string;\n  member_count?: number;\n  members?: ChannelMemberResponse[];\n  muted?: boolean;\n  mute_expires_at?: string;\n  own_capabilities?: string[];\n  team?: string;\n  truncated_at?: string;\n  truncated_by?: UserResponse;\n  truncated_by_id?: string;\n  updated_at?: string;\n};\n\nexport type QueryReactionsOptions = Pager;\n\nexport type QueryReactionsAPIResponse = APIResponse & {\n  reactions: ReactionResponse[];\n  next?: string;\n};\n\nexport type QueryChannelsAPIResponse = APIResponse & {\n  channels: Omit<ChannelAPIResponse, keyof APIResponse>[];\n};\n\nexport type QueryChannelAPIResponse = APIResponse & ChannelAPIResponse;\n\nexport type ChannelAPIResponse = {\n  channel: ChannelResponse;\n  members: ChannelMemberResponse[];\n  messages: MessageResponse[];\n  pinned_messages: MessageResponse[];\n  draft?: DraftResponse;\n  hidden?: boolean;\n  membership?: ChannelMemberResponse | null;\n  pending_messages?: PendingMessageResponse[];\n  push_preferences?: PushPreference;\n  read?: ReadResponse[];\n  threads?: ThreadResponse[];\n  watcher_count?: number;\n  watchers?: UserResponse[];\n};\n\nexport type ChannelUpdateOptions = {\n  hide_history?: boolean;\n  skip_push?: boolean;\n};\n\nexport type ChannelMemberAPIResponse = APIResponse & {\n  members: ChannelMemberResponse[];\n};\n\nexport type ChannelMemberUpdates = CustomMemberData & {\n  archived?: boolean;\n  channel_role?: Role;\n  pinned?: boolean;\n};\n\nexport type ChannelMemberResponse = CustomMemberData & {\n  archived_at?: string | null;\n  ban_expires?: string;\n  banned?: boolean;\n  channel_role?: Role;\n  created_at?: string;\n  invite_accepted_at?: string;\n  invite_rejected_at?: string;\n  invited?: boolean;\n  is_moderator?: boolean;\n  notifications_muted?: boolean;\n  pinned_at?: string | null;\n  role?: string;\n  shadow_banned?: boolean;\n  status?: InviteStatus;\n  updated_at?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type PartialUpdateMemberAPIResponse = APIResponse & {\n  channel_member: ChannelMemberResponse;\n};\n\nexport type CheckPushResponse = APIResponse & {\n  device_errors?: {\n    [deviceID: string]: {\n      error_message?: string;\n      provider?: PushProvider;\n      provider_name?: string;\n    };\n  };\n  general_errors?: string[];\n  rendered_apn_template?: string;\n  rendered_firebase_template?: string;\n  rendered_message?: {};\n  skip_devices?: boolean;\n};\n\nexport type CheckSQSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CheckSNSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CommandResponse = Partial<CreatedAtUpdatedAt> & {\n  args?: string;\n  description?: string;\n  name?: CommandVariants;\n  set?: CommandVariants;\n};\n\nexport type ConnectAPIResponse = Promise<void | ConnectionOpen>;\n\nexport type CreateChannelResponse = APIResponse &\n  Omit<CreateChannelOptions, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n    grants?: Record<string, string[]>;\n  };\n\nexport type CreateCommandResponse = APIResponse & {\n  command: CreateCommandOptions & CreatedAtUpdatedAt;\n};\n\nexport type DeleteChannelAPIResponse = APIResponse & {\n  channel: ChannelResponse;\n};\n\nexport type DeleteCommandResponse = APIResponse & {\n  name?: CommandVariants;\n};\n\nexport type EventAPIResponse = APIResponse & {\n  event: Event;\n};\n\nexport type ExportChannelResponse = {\n  task_id: string;\n};\n\nexport type ExportUsersResponse = {\n  task_id: string;\n};\n\nexport type ExportChannelStatusResponse = {\n  created_at?: string;\n  error?: {};\n  result?: {};\n  updated_at?: string;\n};\n\nexport type FlagMessageResponse = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_message_id: string;\n    updated_at: string;\n    user: UserResponse;\n    approved_at?: string;\n    channel_cid?: string;\n    details?: object; // Any JSON\n    message_user_id?: string;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type FlagUserResponse = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_user: UserResponse;\n    updated_at: string;\n    user: UserResponse;\n    approved_at?: string;\n    details?: object; // Any JSON\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n  review_queue_item_id?: string;\n};\n\nexport type LocalMessageBase = Omit<\n  MessageResponseBase,\n  'created_at' | 'deleted_at' | 'pinned_at' | 'status' | 'updated_at'\n> & {\n  created_at: Date;\n  deleted_at: Date | null;\n  pinned_at: Date | null;\n  status: string;\n  updated_at: Date;\n};\n\nexport type LocalMessage = LocalMessageBase & {\n  error?: ErrorFromResponse<APIErrorResponse>;\n  quoted_message?: LocalMessageBase;\n};\n\n/**\n * @deprecated in favor of LocalMessage\n */\nexport type FormatMessageResponse = LocalMessage;\n\nexport type GetCommandResponse = APIResponse & CreateCommandOptions & CreatedAtUpdatedAt;\n\nexport type GetMessageAPIResponse = SendMessageAPIResponse;\n\nexport interface ThreadResponse extends CustomThreadData {\n  // FIXME: according to OpenAPI, `channel` could be undefined but since cid is provided I'll asume that it's wrong\n  channel: ChannelResponse;\n  channel_cid: string;\n  created_at: string;\n  created_by_user_id: string;\n  latest_replies: Array<MessageResponse>;\n  parent_message: MessageResponse;\n  parent_message_id: string;\n  title: string;\n  updated_at: string;\n  active_participant_count?: number;\n  created_by?: UserResponse;\n  deleted_at?: string;\n  draft?: DraftResponse;\n  last_message_at?: string;\n  participant_count?: number;\n  read?: Array<ReadResponse>;\n  reply_count?: number;\n  thread_participants?: Array<{\n    channel_cid: string;\n    created_at: string;\n    last_read_at: string;\n    last_thread_message_at?: string;\n    left_thread_at?: string;\n    thread_id?: string;\n    user?: UserResponse;\n    user_id?: string;\n  }>;\n  // TODO: when moving to API v2 we should do this instead\n  // custom: CustomThreadType;\n}\n\n// TODO: Figure out a way to strongly type set and unset.\nexport type PartialThreadUpdate = {\n  set?: Partial<Record<string, unknown>>;\n  unset?: Array<string>;\n};\n\nexport type QueryThreadsOptions = {\n  filter?: ThreadFilters;\n  limit?: number;\n  member_limit?: number;\n  next?: string;\n  participant_limit?: number;\n  reply_limit?: number;\n  sort?: ThreadSort;\n  watch?: boolean;\n};\n\nexport type QueryThreadsAPIResponse = APIResponse & {\n  threads: ThreadResponse[];\n  next?: string;\n};\n\nexport type GetThreadOptions = {\n  member_limit?: number;\n  participant_limit?: number;\n  reply_limit?: number;\n  watch?: boolean;\n};\n\nexport type GetThreadAPIResponse = APIResponse & {\n  thread: ThreadResponse;\n};\n\nexport type GetMultipleMessagesAPIResponse = APIResponse & {\n  messages: MessageResponse[];\n};\n\nexport type GetRateLimitsResponse = APIResponse & {\n  android?: RateLimitsMap;\n  ios?: RateLimitsMap;\n  server_side?: RateLimitsMap;\n  web?: RateLimitsMap;\n};\n\nexport type GetReactionsAPIResponse = APIResponse & {\n  reactions: ReactionResponse[];\n};\n\nexport type GetRepliesAPIResponse = APIResponse & {\n  messages: MessageResponse[];\n};\n\nexport type GetUnreadCountAPIResponse = APIResponse & {\n  channel_type: {\n    channel_count: number;\n    channel_type: string;\n    unread_count: number;\n  }[];\n  channels: {\n    channel_id: string;\n    last_read: string;\n    unread_count: number;\n  }[];\n  threads: {\n    last_read: string;\n    last_read_message_id: string;\n    parent_message_id: string;\n    unread_count: number;\n  }[];\n  total_unread_count: number;\n  total_unread_threads_count: number;\n};\n\nexport type ChatLevelPushPreference = 'all' | 'none' | 'mentions' | (string & {});\n\nexport type PushPreference = {\n  callLevel?: 'all' | 'none' | (string & {});\n  chatLevel?: ChatLevelPushPreference;\n  disabledUntil?: string; // snooze till this time\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type ChannelPushPreference = {\n  chatLevel?: ChatLevelPushPreference; // \"all\", \"none\", \"mentions\", or other custom strings\n  disabledUntil?: string;\n  removeDisable?: boolean; // Temporary flag for resetting disabledUntil\n};\n\nexport type UpsertPushPreferencesResponse = APIResponse & {\n  // Mapping of user IDs to their push preferences\n  userChannelPreferences: Record<string, Record<string, ChannelPushPreference>>;\n  userPreferences: Record<string, PushPreference>; // Mapping of user -> channel id -> push preferences\n};\n\nexport type GetUnreadCountBatchAPIResponse = APIResponse & {\n  counts_by_user: { [userId: string]: GetUnreadCountAPIResponse };\n};\n\nexport type ListChannelResponse = APIResponse & {\n  channel_types: Record<\n    string,\n    Omit<CreateChannelOptions, 'client_id' | 'connection_id' | 'commands'> & {\n      commands: CommandResponse[];\n      created_at: string;\n      updated_at: string;\n      grants?: Record<string, string[]>;\n    }\n  >;\n};\n\nexport type ListChannelTypesAPIResponse = ListChannelResponse;\n\nexport type ListCommandsResponse = APIResponse & {\n  commands: Array<CreateCommandOptions & Partial<CreatedAtUpdatedAt>>;\n};\n\nexport type MuteChannelAPIResponse = APIResponse & {\n  channel_mute: ChannelMute;\n  own_user: OwnUserResponse;\n  channel_mutes?: ChannelMute[];\n  mute?: MuteResponse;\n};\n\nexport type MessageResponse = MessageResponseBase & {\n  quoted_message?: MessageResponseBase;\n};\n\nexport type MessageResponseBase = MessageBase & {\n  type: MessageLabel;\n  args?: string;\n  before_message_send_failed?: boolean;\n  channel?: ChannelResponse;\n  cid?: string;\n  command?: string;\n  command_info?: { name?: string };\n  created_at?: string;\n  deleted_at?: string;\n  deleted_reply_count?: number;\n  i18n?: RequireAtLeastOne<Record<`${TranslationLanguages}_text`, string>> & {\n    language: TranslationLanguages;\n  };\n  latest_reactions?: ReactionResponse[];\n  mentioned_users?: UserResponse[];\n  message_text_updated_at?: string;\n  moderation?: ModerationResponse; // present only with Moderation v2\n  moderation_details?: ModerationDetailsResponse; // present only with Moderation v1\n  own_reactions?: ReactionResponse[] | null;\n  pin_expires?: string | null;\n  pinned_at?: string | null;\n  pinned_by?: UserResponse | null;\n  poll?: PollResponse;\n  reaction_counts?: { [key: string]: number } | null;\n  reaction_groups?: { [key: string]: ReactionGroupResponse } | null;\n  reaction_scores?: { [key: string]: number } | null;\n  reminder?: ReminderResponseBase;\n  reply_count?: number;\n  shadowed?: boolean;\n  status?: string;\n  thread_participants?: UserResponse[];\n  updated_at?: string;\n};\n\nexport type ReactionGroupResponse = {\n  count: number;\n  sum_scores: number;\n  first_reaction_at?: string;\n  last_reaction_at?: string;\n};\n\nexport type ModerationDetailsResponse = {\n  action: 'MESSAGE_RESPONSE_ACTION_BOUNCE' | (string & {});\n  error_msg: string;\n  harms: ModerationHarmResponse[];\n  original_text: string;\n};\n\nexport type ModerationHarmResponse = {\n  name: string;\n  phrase_list_ids: number[];\n};\n\nexport type ModerationAction = 'bounce' | 'flag' | 'remove' | 'shadow';\n\nexport type ModerationResponse = {\n  action: ModerationAction;\n  original_text: string;\n};\n\nexport type MuteResponse = {\n  user: UserResponse;\n  created_at?: string;\n  expires?: string;\n  target?: UserResponse;\n  updated_at?: string;\n};\n\nexport type MuteUserResponse = APIResponse & {\n  mute?: MuteResponse;\n  mutes?: Array<Mute>;\n  own_user?: OwnUserResponse;\n};\n\nexport type BlockUserAPIResponse = APIResponse & {\n  blocked_at: string;\n  blocked_by_user_id: string;\n  blocked_user_id: string;\n};\n\nexport type GetBlockedUsersAPIResponse = APIResponse & {\n  blocks: BlockedUserDetails[];\n};\nexport type BlockedUserDetails = APIResponse & {\n  blocked_user: UserResponse;\n  blocked_user_id: string;\n  created_at: string;\n  user: UserResponse;\n  user_id: string;\n};\n\nexport type OwnUserBase = {\n  channel_mutes: ChannelMute[];\n  devices: Device[];\n  mutes: Mute[];\n  total_unread_count: number;\n  unread_channels: number;\n  unread_count: number;\n  unread_threads: number;\n  invisible?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_preferences?: PushPreference;\n  roles?: string[];\n};\n\nexport type OwnUserResponse = UserResponse & OwnUserBase;\n\nexport type PartialUpdateChannelAPIResponse = APIResponse & {\n  channel: ChannelResponse;\n  members: ChannelMemberResponse[];\n};\n\nexport type PermissionAPIResponse = APIResponse & {\n  permission?: PermissionAPIObject;\n};\n\nexport type PermissionsAPIResponse = APIResponse & {\n  permissions?: PermissionAPIObject[];\n};\n\nexport type ReactionAPIResponse = APIResponse & {\n  message: MessageResponse;\n  reaction: ReactionResponse;\n};\n\nexport type ReactionResponse = Reaction & {\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n};\n\nexport type ReadResponse = {\n  last_read: string;\n  user: UserResponse;\n  last_read_message_id?: string;\n  unread_messages?: number;\n};\n\nexport type SearchAPIResponse = APIResponse & {\n  results: {\n    message: MessageResponse;\n  }[];\n  next?: string;\n  previous?: string;\n  results_warning?: SearchWarning | null;\n};\n\nexport type SearchWarning = {\n  channel_search_cids: string[];\n  channel_search_count: number;\n  warning_code: number;\n  warning_description: string;\n};\n\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\nexport type SendFileAPIResponse = APIResponse & { file: string; thumb_url?: string };\n\nexport type SendMessageAPIResponse = APIResponse & {\n  message: MessageResponse;\n  pending_message_metadata?: Record<string, string> | null;\n};\n\nexport type SyncResponse = APIResponse & {\n  events: Event[];\n  inaccessible_cids?: string[];\n};\n\nexport type TruncateChannelAPIResponse = APIResponse & {\n  channel: ChannelResponse;\n  message?: MessageResponse;\n};\n\nexport type UpdateChannelAPIResponse = APIResponse & {\n  channel: ChannelResponse;\n  members: ChannelMemberResponse[];\n  message?: MessageResponse;\n};\n\nexport type UpdateChannelResponse = APIResponse &\n  Omit<CreateChannelOptions, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n  };\n\nexport type UpdateCommandResponse = APIResponse & {\n  command: UpdateCommandOptions &\n    CreatedAtUpdatedAt & {\n      name: CommandVariants;\n    };\n};\n\nexport type UpdateMessageAPIResponse = APIResponse & {\n  message: MessageResponse;\n};\n\nexport type UsersAPIResponse = APIResponse & {\n  users: Array<UserResponse>;\n};\n\nexport type UpdateUsersAPIResponse = APIResponse & {\n  users: { [key: string]: UserResponse };\n};\n\nexport type UserResponse = CustomUserData & {\n  id: string;\n  anon?: boolean;\n  banned?: boolean;\n  blocked_user_ids?: string[];\n  created_at?: string;\n  deactivated_at?: string;\n  deleted_at?: string;\n  image?: string;\n  language?: TranslationLanguages | '';\n  last_active?: string;\n  name?: string;\n  notifications_muted?: boolean;\n  online?: boolean;\n  privacy_settings?: PrivacySettings;\n  push_notifications?: PushNotificationSettings;\n  revoke_tokens_issued_before?: string;\n  role?: string;\n  shadow_banned?: boolean;\n  teams?: string[];\n  teams_role?: TeamsRole;\n  updated_at?: string;\n  username?: string;\n};\n\nexport type TeamsRole = { [team: string]: string };\n\nexport type PrivacySettings = {\n  read_receipts?: {\n    enabled?: boolean;\n  };\n  typing_indicators?: {\n    enabled?: boolean;\n  };\n};\n\nexport type PushNotificationSettings = {\n  disabled?: boolean;\n  disabled_until?: string | null;\n};\n\n/**\n * Option Types\n */\n\nexport type MessageFlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagReportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ReviewFlagReportOptions = {\n  review_details?: object;\n  user_id?: string;\n};\n\nexport type BannedUsersPaginationOptions = Omit<\n  PaginationOptions,\n  'id_gt' | 'id_gte' | 'id_lt' | 'id_lte'\n> & {\n  exclude_expired_bans?: boolean;\n};\n\nexport type BanUserOptions = UnBanUserOptions & {\n  banned_by?: UserResponse;\n  banned_by_id?: string;\n  ip_ban?: boolean;\n  reason?: string;\n  timeout?: number;\n  delete_messages?: DeleteMessagesOptions;\n};\n\nexport type ChannelOptions = {\n  limit?: number;\n  member_limit?: number;\n  message_limit?: number;\n  offset?: number;\n  presence?: boolean;\n  state?: boolean;\n  user_id?: string;\n  watch?: boolean;\n};\n\nexport type ChannelQueryOptions = {\n  client_id?: string;\n  connection_id?: string;\n  created_by?: UserResponse | null;\n  created_by_id?: UserResponse['id'];\n  data?: ChannelResponse;\n  hide_for_creator?: boolean;\n  members?: PaginationOptions;\n  messages?: MessagePaginationOptions;\n  presence?: boolean;\n  state?: boolean;\n  watch?: boolean;\n  watchers?: PaginationOptions;\n};\n\nexport type ChannelStateOptions = {\n  offlineMode?: boolean;\n  skipInitialization?: string[];\n  skipHydration?: boolean;\n};\n\nexport type CreateChannelOptions = {\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist?: string;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  client_id?: string;\n  commands?: CommandVariants[];\n  connect_events?: boolean;\n  connection_id?: string;\n  custom_events?: boolean;\n  grants?: Record<string, string[]>;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  permissions?: PermissionObject[];\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  reminders?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  skip_last_msg_update_for_system_msgs?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n  user_message_reminders?: boolean;\n};\n\nexport type CreateCommandOptions = {\n  description: string;\n  name: CommandVariants;\n  args?: string;\n  set?: CommandVariants;\n};\n\nexport type CustomPermissionOptions = {\n  action: string;\n  condition: object;\n  id: string;\n  name: string;\n  description?: string;\n  owner?: boolean;\n  same_team?: boolean;\n};\n\nexport type DeactivateUsersOptions = {\n  created_by_id?: string;\n  mark_messages_deleted?: boolean;\n};\n\nexport type NewMemberPayload = CustomMemberData &\n  Pick<ChannelMemberResponse, 'user_id' | 'channel_role'>;\n\nexport type Thresholds = Record<\n  'explicit' | 'spam' | 'toxic',\n  Partial<{ block: number; flag: number }>\n>;\n\nexport type BlockListOptions = {\n  behavior: BlocklistBehavior;\n  blocklist: string;\n};\n\nexport type PolicyRequest = {\n  action: 'Deny' | 'Allow' | (string & {});\n  /**\n   * @description User-friendly policy name\n   */\n  name: string;\n  /**\n   * @description Whether policy applies to resource owner or not\n   */\n  owner: boolean;\n  priority: number;\n  /**\n   * @description List of resources to apply policy to\n   */\n  resources: string[];\n  /**\n   * @description List of roles to apply policy to\n   */\n  roles: string[];\n};\n\nexport type Automod = 'disabled' | 'simple' | 'AI' | (string & {});\nexport type AutomodBehavior = 'flag' | 'block' | 'shadow_block' | (string & {});\nexport type BlocklistBehavior = AutomodBehavior;\nexport type Command = {\n  args: string;\n  description: string;\n  name: string;\n  set: string;\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport type UpdateChannelTypeRequest =\n  // these three properties are required in OpenAPI spec but omitted in some QA tests\n  Partial<{\n    automod: Automod;\n    automod_behavior: AutomodBehavior;\n    max_message_length: number;\n  }> & {\n    allowed_flag_reasons?: string[];\n    automod_thresholds?: Thresholds;\n    blocklist?: string;\n    blocklist_behavior?: BlocklistBehavior;\n    blocklists?: BlockListOptions[];\n    commands?: CommandVariants[];\n    connect_events?: boolean;\n    custom_events?: boolean;\n    grants?: Record<string, string[]>;\n    mark_messages_pending?: boolean;\n    mutes?: boolean;\n    partition_size?: number;\n    /**\n     * @example 24h\n     */\n    partition_ttl?: string | null;\n    permissions?: PolicyRequest[];\n    polls?: boolean;\n    push_notifications?: boolean;\n    quotes?: boolean;\n    reactions?: boolean;\n    read_events?: boolean;\n    reminders?: boolean;\n    replies?: boolean;\n    search?: boolean;\n    skip_last_msg_update_for_system_msgs?: boolean;\n    typing_events?: boolean;\n    uploads?: boolean;\n    url_enrichment?: boolean;\n  };\n\nexport type UpdateChannelTypeResponse = {\n  automod: Automod;\n  automod_behavior: AutomodBehavior;\n  commands: CommandVariants[];\n  connect_events: boolean;\n  created_at: string;\n  custom_events: boolean;\n  duration: string;\n  grants: Record<string, string[]>;\n  mark_messages_pending: boolean;\n  max_message_length: number;\n  mutes: boolean;\n  name: string;\n  permissions: PolicyRequest[];\n  polls: boolean;\n  push_notifications: boolean;\n  quotes: boolean;\n  reactions: boolean;\n  read_events: boolean;\n  reminders: boolean;\n  replies: boolean;\n  search: boolean;\n  skip_last_msg_update_for_system_msgs: boolean;\n  typing_events: boolean;\n  updated_at: string;\n  uploads: boolean;\n  url_enrichment: boolean;\n  allowed_flag_reasons?: string[];\n  automod_thresholds?: Thresholds;\n  blocklist?: string;\n  blocklist_behavior?: BlocklistBehavior;\n  blocklists?: BlockListOptions[];\n  partition_size?: number;\n  partition_ttl?: string;\n};\n\nexport type GetChannelTypeResponse = {\n  automod: Automod;\n  automod_behavior: AutomodBehavior;\n  commands: Command[];\n  connect_events: boolean;\n  created_at: string;\n  custom_events: boolean;\n  duration: string;\n  grants: Record<string, string[]>;\n  mark_messages_pending: boolean;\n  max_message_length: number;\n  mutes: boolean;\n  name: string;\n  permissions: PolicyRequest[];\n  polls: boolean;\n  push_notifications: boolean;\n  quotes: boolean;\n  reactions: boolean;\n  read_events: boolean;\n  reminders: boolean;\n  replies: boolean;\n  search: boolean;\n  skip_last_msg_update_for_system_msgs: boolean;\n  typing_events: boolean;\n  updated_at: string;\n  uploads: boolean;\n  url_enrichment: boolean;\n  allowed_flag_reasons?: string[];\n  automod_thresholds?: Thresholds;\n  blocklist?: string;\n  blocklist_behavior?: BlocklistBehavior;\n  blocklists?: BlockListOptions[];\n  partition_size?: number;\n  partition_ttl?: string;\n};\n\nexport type UpdateChannelOptions = Partial<{\n  accept_invite: boolean;\n  add_members: string[];\n  add_moderators: string[];\n  client_id: string;\n  connection_id: string;\n  data: Omit<ChannelResponse, 'id' | 'cid'>;\n  demote_moderators: string[];\n  invites: string[];\n  message: MessageResponse;\n  reject_invite: boolean;\n  remove_members: string[];\n  user: UserResponse;\n  user_id: string;\n}>;\n\nexport type MarkChannelsReadOptions = {\n  client_id?: string;\n  connection_id?: string;\n  read_by_channel?: Record<string, string>;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type MarkReadOptions = {\n  client_id?: string;\n  connection_id?: string;\n  thread_id?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type MarkUnreadOptions = {\n  client_id?: string;\n  connection_id?: string;\n  message_id?: string;\n  thread_id?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type MuteUserOptions = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  reason?: string;\n  target_user_id?: string;\n  timeout?: number;\n  type?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type PaginationOptions = {\n  created_at_after?: string | Date;\n  created_at_after_or_equal?: string | Date;\n  created_at_before?: string | Date;\n  created_at_before_or_equal?: string | Date;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number; // should be avoided with channel.query()\n};\n\nexport type MessagePaginationOptions = PaginationOptions & {\n  created_at_around?: string | Date;\n  id_around?: string;\n};\n\nexport type PinnedMessagePaginationOptions = {\n  id_around?: string;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number;\n  pinned_at_after?: string | Date;\n  pinned_at_after_or_equal?: string | Date;\n  pinned_at_around?: string | Date;\n  pinned_at_before?: string | Date;\n  pinned_at_before_or_equal?: string | Date;\n};\n\nexport type QueryMembersOptions = {\n  // Pagination option: select members created after the date (RFC399)\n  created_at_after?: string;\n  // Pagination option: select members created after or equal the date (RFC399)\n  created_at_after_or_equal?: string;\n  // Pagination option: select members created before the date (RFC399)\n  created_at_before?: string;\n  // Pagination option: select members created before or equal the date (RFC399)\n  created_at_before_or_equal?: string;\n  // Number of members to return, default 100\n  limit?: number;\n  // Offset (max is 1000)\n  offset?: number;\n  // \tPagination option: excludes members with ID less or equal the value\n  user_id_gt?: string;\n  // Pagination option: excludes members with ID less than the value\n  user_id_gte?: string;\n  // Pagination option: excludes members with ID greater or equal the value\n  user_id_lt?: string;\n  // \tPagination option: excludes members with ID greater than the value\n  user_id_lte?: string;\n};\n\nexport type ReactivateUserOptions = {\n  created_by_id?: string;\n  name?: string;\n  restore_messages?: boolean;\n};\n\nexport type ReactivateUsersOptions = {\n  created_by_id?: string;\n  restore_messages?: boolean;\n};\n\nexport type SearchOptions = {\n  limit?: number;\n  next?: string;\n  offset?: number;\n  sort?: SearchMessageSort;\n};\n\nexport type StreamChatOptions = AxiosRequestConfig & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  axiosRequestConfig?: AxiosRequestConfig;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  device?: BaseDeviceFields;\n  /**\n   * Disables the hydration of all caches within the JS Client. This includes this.activeChannels,\n   * this.polls.pollCache and this.config.\n   * It is mainly meant to be used for integrations where stream-chat is used as a server-side service\n   * interacting with Stream's REST API, not depending on any state and purely serving as a wrapper\n   * around HTTP requests. Using this property on either the client side or a backend implementation\n   * that also relies on WS events will break these functionalities, so please use carefully.\n   */\n  disableCache?: boolean;\n  enableInsights?: boolean;\n  /** experimental feature, please contact support if you want this feature enabled for you */\n  enableWSFallback?: boolean;\n  logger?: Logger;\n  /**\n   * Custom notification manager service to use for the client.\n   * If not provided, a default notification manager will be created.\n   * Notifications are used to communicate events like errors, warnings, info, etc. Other services can publish notifications or subscribe to the NotificationManager state changes.\n   */\n  notifications?: NotificationManager;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  warmUp?: boolean;\n  /**\n   * Set the instance of StableWSConnection on chat client. Its purely for testing purpose and should\n   * not be used in production apps.\n   */\n  wsConnection?: StableWSConnection;\n  /**\n   * Sets a suffix to the wsUrl when it is being built in `wsConnection`. Is meant to be\n   * used purely in testing suites and should not be used in production apps.\n   */\n  wsUrlParams?: URLSearchParams;\n};\n\nexport type SyncOptions = {\n  /**\n   * This will behave as queryChannels option.\n   */\n  watch?: boolean;\n  /**\n   * Return channels from request that user does not have access to in a separate\n   * field in the response called 'inaccessible_cids' instead of\n   * adding them as 'notification.removed_from_channel' events.\n   */\n  with_inaccessible_cids?: boolean;\n};\n\nexport type UnBanUserOptions = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  shadow?: boolean;\n  target_user_id?: string;\n  type?: string;\n};\n\nexport type UpdateCommandOptions = {\n  description: string;\n  args?: string;\n  set?: CommandVariants;\n};\n\nexport type UserOptions = {\n  include_deactivated_users?: boolean;\n  limit?: number;\n  offset?: number;\n  presence?: boolean;\n};\n\n/**\n * Event Types\n */\n\nexport type ConnectionChangeEvent = {\n  type: EventTypes;\n  online?: boolean;\n};\n\nexport type Event = CustomEventData & {\n  type: EventTypes;\n  ai_message?: string;\n  ai_state?: AIState;\n  channel?: ChannelResponse;\n  channel_id?: string;\n  channel_type?: string;\n  cid?: string;\n  clear_history?: boolean;\n  connection_id?: string;\n  // event creation timestamp, format Date ISO string\n  created_at?: string;\n  draft?: DraftResponse;\n  // id of the message that was marked as unread - all the following messages are considered unread. (notification.mark_unread)\n  first_unread_message_id?: string;\n  hard_delete?: boolean;\n  // creation date of a message with last_read_message_id, formatted as Date ISO string\n  last_read_at?: string;\n  last_read_message_id?: string;\n  mark_messages_deleted?: boolean;\n  me?: OwnUserResponse;\n  member?: ChannelMemberResponse;\n  message?: MessageResponse;\n  message_id?: string;\n  mode?: string;\n  online?: boolean;\n  own_capabilities?: string[];\n  parent_id?: string;\n  poll?: PollResponse;\n  poll_vote?: PollVote | PollAnswer;\n  queriedChannels?: {\n    channels: ChannelAPIResponse[];\n    isLatestMessageSet?: boolean;\n  };\n  offlineReactions?: ReactionResponse[];\n  reaction?: ReactionResponse;\n  received_at?: string | Date;\n  reminder?: ReminderResponse;\n  shadow?: boolean;\n  team?: string;\n  thread?: ThreadResponse;\n  // @deprecated number of all unread messages across all current user's unread channels, equals unread_count\n  total_unread_count?: number;\n  // number of all current user's channels with at least one unread message including the channel in this event\n  unread_channels?: number;\n  // number of all unread messages across all current user's unread channels\n  unread_count?: number;\n  // number of unread messages in the channel from this event (notification.mark_unread)\n  unread_messages?: number;\n  unread_thread_messages?: number;\n  unread_threads?: number;\n  user?: UserResponse;\n  user_id?: string;\n  watcher_count?: number;\n  channel_last_message_at?: string;\n  app?: Record<string, unknown>; // TODO: further specify type\n};\n\nexport type UserCustomEvent = CustomEventData & {\n  type: string;\n};\n\nexport type EventHandler = (event: Event) => void;\n\nexport type EventTypes = 'all' | keyof typeof EVENT_MAP;\n\n/**\n * Filter Types\n */\n\nexport type AscDesc = 1 | -1;\n\nexport type MessageFlagsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  team?: string;\n  user_id?: string;\n};\n\nexport type MessageFlagsFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageFlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<MessageFlagsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageFlagsFiltersOptions['team']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<MessageFlagsFiltersOptions['team']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageFlagsFiltersOptions['user_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<MessageFlagsFiltersOptions['user_id']>;\n  } & {\n    [Key in keyof Omit<\n      MessageFlagsFiltersOptions,\n      'channel_cid' | 'user_id' | 'is_reviewed'\n    >]:\n      | RequireOnlyOne<QueryFilter<MessageFlagsFiltersOptions[Key]>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions[Key]>;\n  }\n>;\n\nexport type FlagsFiltersOptions = {\n  channel_cid?: string;\n  message_id?: string;\n  message_user_id?: string;\n  reporter_id?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagsFilters = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagsFiltersOptions['message_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagsFiltersOptions['message_user_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagsFiltersOptions['channel_cid']>;\n  } & {\n    reporter_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagsFiltersOptions['reporter_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagsFiltersOptions['reporter_id']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['team']>;\n  }\n>;\n\nexport type FlagReportsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  message_id?: string;\n  message_user_id?: string;\n  report_id?: string;\n  review_result?: string;\n  reviewed_by?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagReportsFilters = QueryFilters<\n  {\n    report_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['report_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['report_id']>;\n  } & {\n    review_result?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['review_result']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['review_result']>;\n  } & {\n    reviewed_by?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['reviewed_by']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['reviewed_by']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['user_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['message_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['message_user_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['channel_cid']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<FlagReportsFiltersOptions['team']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<FlagReportsFiltersOptions['team']>;\n  } & {\n    [Key in keyof Omit<\n      FlagReportsFiltersOptions,\n      'report_id' | 'user_id' | 'message_id' | 'review_result' | 'reviewed_by'\n    >]:\n      | RequireOnlyOne<QueryFilter<FlagReportsFiltersOptions[Key]>>\n      | PrimitiveFilter<FlagReportsFiltersOptions[Key]>;\n  }\n>;\n\nexport type BannedUsersFilterOptions = {\n  banned_by_id?: string;\n  channel_cid?: string;\n  created_at?: string;\n  reason?: string;\n  user_id?: string;\n};\n\nexport type BannedUsersFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<BannedUsersFilterOptions['channel_cid']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<BannedUsersFilterOptions['channel_cid']>;\n  } & {\n    reason?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: BannedUsersFilterOptions['reason'];\n          } & QueryFilter<BannedUsersFilterOptions['reason']>\n        >\n      | PrimitiveFilter<BannedUsersFilterOptions['reason']>;\n  } & {\n    [Key in keyof Omit<BannedUsersFilterOptions, 'channel_cid' | 'reason'>]:\n      | RequireOnlyOne<QueryFilter<BannedUsersFilterOptions[Key]>>\n      | PrimitiveFilter<BannedUsersFilterOptions[Key]>;\n  }\n>;\n\nexport type ReactionFilters = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReactionResponse['user_id']>;\n  } & {\n    type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReactionResponse['type']>, '$eq'>>\n      | PrimitiveFilter<ReactionResponse['type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['created_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['created_at']>;\n  }\n>;\n\nexport type ChannelFilters = QueryFilters<\n  ContainsOperator<Omit<CustomChannelData, 'name'>> & {\n    archived?: boolean;\n    'member.user.name'?:\n      | RequireOnlyOne<{\n          $autocomplete?: string;\n          $eq?: string;\n        }>\n      | string;\n\n    members?:\n      | RequireOnlyOne<Pick<QueryFilter<string>, '$in'>>\n      | RequireOnlyOne<Pick<QueryFilter<string[]>, '$eq'>>\n      | PrimitiveFilter<string[]>;\n    name?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: string;\n          } & QueryFilter<string>\n        >\n      | PrimitiveFilter<string>;\n    pinned?: boolean;\n  } & {\n    [Key in keyof Omit<ChannelResponse, 'name' | 'members' | keyof CustomChannelData>]:\n      | RequireOnlyOne<QueryFilter<ChannelResponse[Key]>>\n      | PrimitiveFilter<ChannelResponse[Key]>;\n  }\n>;\n\nexport type DraftFilters = {\n  channel_cid?:\n    | RequireOnlyOne<Pick<QueryFilter<DraftResponse['channel_cid']>, '$in' | '$eq'>>\n    | PrimitiveFilter<DraftResponse['channel_cid']>;\n  created_at?:\n    | RequireOnlyOne<\n        Pick<\n          QueryFilter<DraftResponse['created_at']>,\n          '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n        >\n      >\n    | PrimitiveFilter<DraftResponse['created_at']>;\n  parent_id?:\n    | RequireOnlyOne<\n        Pick<QueryFilter<DraftResponse['created_at']>, '$in' | '$eq' | '$exists'>\n      >\n    | PrimitiveFilter<DraftResponse['parent_id']>;\n};\n\nexport type QueryPollsParams = {\n  filter?: QueryPollsFilters;\n  options?: QueryPollsOptions;\n  sort?: PollSort;\n};\n\nexport type QueryPollsOptions = Pager;\n\nexport type VotesFiltersOptions = {\n  is_answer?: boolean;\n  option_id?: string;\n  user_id?: string;\n};\n\nexport type QueryVotesOptions = Pager;\n\nexport type QueryPollsFilters = QueryFilters<\n  {\n    id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    is_closed?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['is_closed']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['is_closed']>;\n  } & {\n    max_votes_allowed?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['max_votes_allowed']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['max_votes_allowed']>;\n  } & {\n    allow_answers?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['allow_answers']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['allow_answers']>;\n  } & {\n    allow_user_suggested_options?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<PollResponse['allow_user_suggested_options']>, '$eq'>\n        >\n      | PrimitiveFilter<PollResponse['allow_user_suggested_options']>;\n  } & {\n    voting_visibility?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['voting_visibility']>, '$eq'>>\n      | PrimitiveFilter<PollResponse['voting_visibility']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['created_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['updated_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  } & {\n    name?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['name']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['name']>;\n  }\n>;\n\nexport type QueryVotesFilters = QueryFilters<\n  {\n    id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['id']>;\n  } & {\n    option_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['option_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['option_id']>;\n  } & {\n    is_answer?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['is_answer']>, '$eq'>>\n      | PrimitiveFilter<VotesFiltersOptions['is_answer']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<VotesFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<VotesFiltersOptions['user_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['created_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['created_at']>;\n  } & {\n    created_by_id?:\n      | RequireOnlyOne<Pick<QueryFilter<PollResponse['created_by_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<PollResponse['created_by_id']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<PollResponse['updated_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<PollResponse['updated_at']>;\n  }\n>;\n\nexport type ContainsOperator<CustomType = {}> = {\n  [Key in keyof CustomType]?: CustomType[Key] extends (infer ContainType)[]\n    ?\n        | RequireOnlyOne<\n            {\n              $contains?: ContainType extends object\n                ? PrimitiveFilter<RequireAtLeastOne<ContainType>>\n                : PrimitiveFilter<ContainType>;\n            } & QueryFilter<PrimitiveFilter<ContainType>[]>\n          >\n        | PrimitiveFilter<PrimitiveFilter<ContainType>[]>\n    : RequireOnlyOne<QueryFilter<CustomType[Key]>> | PrimitiveFilter<CustomType[Key]>;\n};\n\nexport type MessageFilters = QueryFilters<\n  ContainsOperator<CustomMessageData> & {\n    'attachments.type'?:\n      | RequireOnlyOne<{\n          $eq: PrimitiveFilter<Attachment['type']>;\n          $in: PrimitiveFilter<Attachment['type']>[];\n        }>\n      | PrimitiveFilter<Attachment['type']>;\n    'mentioned_users.id'?: RequireOnlyOne<{\n      $contains: PrimitiveFilter<UserResponse['id']>;\n    }>;\n    text?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: MessageResponse['text'];\n            $q?: MessageResponse['text'];\n          } & QueryFilter<MessageResponse['text']>\n        >\n      | PrimitiveFilter<MessageResponse['text']>;\n    'user.id'?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: UserResponse['id'];\n          } & QueryFilter<UserResponse['id']>\n        >\n      | PrimitiveFilter<UserResponse['id']>;\n  } & {\n    [Key in keyof Omit<MessageResponse, 'text' | keyof CustomMessageData>]?:\n      | RequireOnlyOne<QueryFilter<MessageResponse[Key]>>\n      | PrimitiveFilter<MessageResponse[Key]>;\n  }\n>;\n\nexport type MessageOptions = {\n  include_thread_participants?: boolean;\n};\n\nexport type PrimitiveFilter<ObjectType> = ObjectType | null;\n\nexport type QueryFilter<ObjectType = string> =\n  NonNullable<ObjectType> extends string | number | boolean\n    ? {\n        $eq?: PrimitiveFilter<ObjectType>;\n        $exists?: boolean;\n        $gt?: PrimitiveFilter<ObjectType>;\n        $gte?: PrimitiveFilter<ObjectType>;\n        $in?: PrimitiveFilter<ObjectType>[];\n        $lt?: PrimitiveFilter<ObjectType>;\n        $lte?: PrimitiveFilter<ObjectType>;\n      }\n    : {\n        $eq?: PrimitiveFilter<ObjectType>;\n        $exists?: boolean;\n        $in?: PrimitiveFilter<ObjectType>[];\n      };\n\nexport type QueryFilters<Operators = {}> = {\n  [Key in keyof Operators]?: Operators[Key];\n} & QueryLogicalOperators<Operators>;\n\nexport type QueryLogicalOperators<Operators> = {\n  $and?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $nor?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $or?: ArrayTwoOrMore<QueryFilters<Operators>>;\n};\n\nexport type UserFilters = QueryFilters<\n  ContainsOperator<CustomUserData> & {\n    id?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse['id'] } & QueryFilter<UserResponse['id']>\n        >\n      | PrimitiveFilter<UserResponse['id']>;\n    name?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse['name'] } & QueryFilter<UserResponse['name']>\n        >\n      | PrimitiveFilter<UserResponse['name']>;\n    notifications_muted?:\n      | RequireOnlyOne<{\n          $eq?: PrimitiveFilter<UserResponse['notifications_muted']>;\n        }>\n      | boolean;\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<UserResponse['teams']>;\n          $in?: PrimitiveFilter<UserResponse['teams']>;\n        }>\n      | PrimitiveFilter<UserResponse['teams']>;\n    username?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse['username'] } & QueryFilter<\n            UserResponse['username']\n          >\n        >\n      | PrimitiveFilter<UserResponse['username']>;\n  } & {\n    [Key in keyof Omit<\n      UserResponse,\n      'id' | 'name' | 'teams' | 'username' | keyof CustomUserData\n    >]?:\n      | RequireOnlyOne<QueryFilter<UserResponse[Key]>>\n      | PrimitiveFilter<UserResponse[Key]>;\n  }\n>;\n\nexport type InviteStatus = 'pending' | 'accepted' | 'rejected';\n\n// https://getstream.io/chat/docs/react/channel_member/#update-channel-members\nexport type MemberFilters = QueryFilters<\n  {\n    banned?: { $eq?: ChannelMemberResponse['banned'] } | ChannelMemberResponse['banned'];\n    channel_role?:\n      | { $eq?: ChannelMemberResponse['channel_role'] }\n      | ChannelMemberResponse['channel_role'];\n    cid?: { $eq?: ChannelResponse['cid'] } | ChannelResponse['cid'];\n    created_at?:\n      | {\n          $eq?: ChannelMemberResponse['created_at'];\n          $gt?: ChannelMemberResponse['created_at'];\n          $gte?: ChannelMemberResponse['created_at'];\n          $lt?: ChannelMemberResponse['created_at'];\n          $lte?: ChannelMemberResponse['created_at'];\n        }\n      | ChannelMemberResponse['created_at'];\n    id?:\n      | RequireOnlyOne<{\n          $eq?: UserResponse['id'];\n          $in?: UserResponse['id'][];\n        }>\n      | UserResponse['id'];\n    invite?: { $eq?: ChannelMemberResponse['status'] } | ChannelMemberResponse['status'];\n    is_moderator?:\n      | RequireOnlyOne<{ $eq?: ChannelMemberResponse['is_moderator'] }>\n      | ChannelMemberResponse['is_moderator'];\n    joined?: { $eq?: boolean } | boolean;\n    last_active?:\n      | {\n          $eq?: UserResponse['last_active'];\n          $gt?: UserResponse['last_active'];\n          $gte?: UserResponse['last_active'];\n          $lt?: UserResponse['last_active'];\n          $lte?: UserResponse['last_active'];\n        }\n      | UserResponse['last_active'];\n    name?:\n      | RequireOnlyOne<{\n          $autocomplete?: NonNullable<ChannelMemberResponse['user']>['name'];\n          $eq?: NonNullable<ChannelMemberResponse['user']>['name'];\n          $in?: NonNullable<ChannelMemberResponse['user']>['name'][];\n          $q?: NonNullable<ChannelMemberResponse['user']>['name'];\n        }>\n      | PrimitiveFilter<NonNullable<ChannelMemberResponse['user']>['name']>;\n    notifications_muted?:\n      | RequireOnlyOne<{ $eq?: ChannelMemberResponse['notifications_muted'] }>\n      | ChannelMemberResponse['notifications_muted'];\n    updated_at?:\n      | {\n          $eq?: ChannelMemberResponse['updated_at'];\n          $gt?: ChannelMemberResponse['updated_at'];\n          $gte?: ChannelMemberResponse['updated_at'];\n          $lt?: ChannelMemberResponse['updated_at'];\n          $lte?: ChannelMemberResponse['updated_at'];\n        }\n      | ChannelMemberResponse['updated_at'];\n    'user.email'?:\n      | RequireOnlyOne<{\n          $autocomplete?: string;\n          $eq?: string;\n          $in?: string;\n        }>\n      | string;\n    user_id?:\n      | RequireOnlyOne<{\n          $eq?: ChannelMemberResponse['user_id'];\n          $in?: ChannelMemberResponse['user_id'][];\n        }>\n      | PrimitiveFilter<ChannelMemberResponse['user_id']>;\n  } & {\n    [Key in keyof ContainsOperator<CustomMemberData>]?:\n      | RequireOnlyOne<QueryFilter<ContainsOperator<CustomMemberData>[Key]>>\n      | PrimitiveFilter<ContainsOperator<CustomMemberData>[Key]>;\n  }\n>;\n\n/**\n * Sort Types\n */\n\nexport type BannedUsersSort = BannedUsersSortBase | Array<BannedUsersSortBase>;\n\nexport type BannedUsersSortBase = { created_at?: AscDesc };\n\nexport type ReactionSort = ReactionSortBase | Array<ReactionSortBase>;\n\nexport type ReactionSortBase = Sort<CustomReactionData> & {\n  created_at?: AscDesc;\n};\n\nexport type ChannelSort = ChannelSortBase | Array<ChannelSortBase>;\n\nexport type ChannelSortBase = Sort<CustomChannelData> & {\n  created_at?: AscDesc;\n  has_unread?: AscDesc;\n  last_message_at?: AscDesc;\n  last_updated?: AscDesc;\n  member_count?: AscDesc;\n  pinned_at?: AscDesc;\n  unread_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type PinnedMessagesSort = PinnedMessagesSortBase | Array<PinnedMessagesSortBase>;\nexport type PinnedMessagesSortBase = { pinned_at?: AscDesc };\n\nexport type Sort<T> = {\n  [P in keyof T]?: AscDesc;\n};\n\nexport type UserSort = Sort<UserResponse> | Array<Sort<UserResponse>>;\n\nexport type MemberSort =\n  | Sort<\n      Pick<UserResponse, 'created_at' | 'last_active' | 'name' | 'updated_at'> & {\n        user_id?: string;\n      }\n    >\n  | Array<\n      Sort<\n        Pick<UserResponse, 'created_at' | 'last_active' | 'name' | 'updated_at'> & {\n          user_id?: string;\n        }\n      >\n    >;\n\nexport type SearchMessageSortBase = Sort<CustomMessageData> & {\n  attachments?: AscDesc;\n  'attachments.type'?: AscDesc;\n  created_at?: AscDesc;\n  id?: AscDesc;\n  'mentioned_users.id'?: AscDesc;\n  parent_id?: AscDesc;\n  pinned?: AscDesc;\n  relevance?: AscDesc;\n  reply_count?: AscDesc;\n  text?: AscDesc;\n  type?: AscDesc;\n  updated_at?: AscDesc;\n  'user.id'?: AscDesc;\n};\n\nexport type SearchMessageSort = SearchMessageSortBase | Array<SearchMessageSortBase>;\n\nexport type QuerySort = BannedUsersSort | ChannelSort | SearchMessageSort | UserSort;\n\nexport type DraftSortBase = {\n  created_at?: AscDesc;\n};\n\nexport type DraftSort = DraftSortBase | Array<DraftSortBase>;\n\nexport type PollSort = PollSortBase | Array<PollSortBase>;\n\nexport type PollSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type VoteSort = VoteSortBase | Array<VoteSortBase>;\n\nexport type VoteSortBase = {\n  created_at?: AscDesc;\n  id?: AscDesc;\n  is_closed?: AscDesc;\n  name?: AscDesc;\n  updated_at?: AscDesc;\n};\n\n/**\n * Base Types\n */\n\nexport type Action = {\n  name?: string;\n  style?: string;\n  text?: string;\n  type?: string;\n  value?: string;\n};\n\nexport type AnonUserType = {};\n\nexport type APNConfig = {\n  auth_key?: string;\n  auth_type?: string;\n  bundle_id?: string;\n  development?: boolean;\n  enabled?: boolean;\n  host?: string;\n  key_id?: string;\n  notification_template?: string;\n  p12_cert?: string;\n  team_id?: string;\n};\n\nexport type AsyncModerationOptions = {\n  callback?: {\n    mode?: 'CALLBACK_MODE_NONE' | 'CALLBACK_MODE_REST' | 'CALLBACK_MODE_TWIRP';\n    server_url?: string;\n  };\n  timeout_ms?: number;\n};\n\nexport type AppSettings = {\n  allowed_flag_reasons?: string[];\n  apn_config?: {\n    auth_key?: string;\n    auth_type?: string;\n    bundle_id?: string;\n    development?: boolean;\n    host?: string;\n    key_id?: string;\n    notification_template?: string;\n    p12_cert?: string;\n    team_id?: string;\n  };\n  async_moderation_config?: AsyncModerationOptions;\n  async_url_enrich_enabled?: boolean;\n  auto_translation_enabled?: boolean;\n  before_message_send_hook_url?: string;\n  cdn_expiration_seconds?: number;\n  custom_action_handler_url?: string;\n  disable_auth_checks?: boolean;\n  disable_permissions_checks?: boolean;\n  enforce_unique_usernames?: 'no' | 'app' | 'team';\n  event_hooks?: Array<EventHook> | null;\n  // all possible file mime types are https://www.iana.org/assignments/media-types/media-types.xhtml\n  file_upload_config?: FileUploadConfig;\n  firebase_config?: {\n    apn_template?: string;\n    credentials_json?: string;\n    data_template?: string;\n    notification_template?: string;\n    server_key?: string;\n  };\n  grants?: Record<string, string[]>;\n  huawei_config?: {\n    id: string;\n    secret: string;\n  };\n  image_moderation_enabled?: boolean;\n  image_upload_config?: FileUploadConfig;\n  migrate_permissions_to_v2?: boolean;\n  multi_tenant_enabled?: boolean;\n  permission_version?: 'v1' | 'v2';\n  push_config?: {\n    offline_only?: boolean;\n    version?: string;\n  };\n  reminders_interval?: number;\n  revoke_tokens_issued_before?: string | null;\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n  video_provider?: string;\n  webhook_events?: Array<string> | null;\n  webhook_url?: string;\n  xiaomi_config?: {\n    package_name: string;\n    secret: string;\n  };\n};\n\nexport type Attachment = CustomAttachmentData & {\n  actions?: Action[];\n  asset_url?: string;\n  author_icon?: string;\n  author_link?: string;\n  author_name?: string;\n  color?: string;\n  duration?: number;\n  fallback?: string;\n  fields?: Field[];\n  file_size?: number | string;\n  footer?: string;\n  footer_icon?: string;\n  giphy?: GiphyData;\n  image_url?: string;\n  latitude?: number;\n  longitude?: number;\n  mime_type?: string;\n  og_scrape_url?: string;\n  original_height?: number;\n  original_width?: number;\n  pretext?: string;\n  stopped_sharing?: boolean;\n  text?: string;\n  thumb_url?: string;\n  title?: string;\n  title_link?: string;\n  type?: string;\n  waveform_data?: Array<number>;\n};\n\nexport type OGAttachment = {\n  og_scrape_url: string;\n  asset_url?: string; // og:video | og:audio\n  author_link?: string; // og:site\n  author_name?: string; // og:site_name\n  image_url?: string; // og:image\n  text?: string; // og:description\n  thumb_url?: string; // og:image\n  title?: string; // og:title\n  title_link?: string; // og:url\n  type?: string | 'video' | 'audio' | 'image';\n};\n\nexport type BlockList = {\n  name: string;\n  words: string[];\n  team?: string;\n  type?: string;\n  validate?: boolean;\n};\n\nexport type ChannelConfig = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandVariants[];\n  };\n\nexport type ChannelConfigAutomod = Automod;\n\nexport type ChannelConfigAutomodBehavior = AutomodBehavior;\n\nexport type ChannelConfigAutomodThresholds = null | Thresholds;\n\nexport type ChannelConfigFields = {\n  reminders: boolean;\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  connect_events?: boolean;\n  custom_events?: boolean;\n  mark_messages_pending?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  polls?: boolean;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n  user_message_reminders?: boolean; // Feature flag for user message reminders\n};\n\nexport type ChannelConfigWithInfo = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandResponse[];\n  };\n\nexport type ChannelData = CustomChannelData &\n  Partial<{\n    blocked: boolean;\n    created_by: UserResponse | null;\n    created_by_id: UserResponse['id'];\n    members: string[] | Array<NewMemberPayload>;\n    blocklist_behavior: AutomodBehavior;\n    automod: Automod;\n  }>;\n\nexport type ChannelMute = {\n  user: UserResponse;\n  channel?: ChannelResponse;\n  created_at?: string;\n  expires?: string;\n  updated_at?: string;\n};\n\nexport type ChannelRole = {\n  custom?: boolean;\n  name?: string;\n  owner?: boolean;\n  resource?: string;\n  same_team?: boolean;\n};\n\nexport type CheckPushInput = {\n  apn_template?: string;\n  client_id?: string;\n  connection_id?: string;\n  firebase_data_template?: string;\n  firebase_template?: string;\n  message_id?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type PushProvider = 'apn' | 'firebase' | 'huawei' | 'xiaomi';\n\nexport type PushProviderConfig = PushProviderCommon &\n  PushProviderID &\n  PushProviderAPN &\n  PushProviderFirebase &\n  PushProviderHuawei &\n  PushProviderXiaomi;\n\nexport type PushProviderID = {\n  name: string;\n  type: PushProvider;\n};\n\nexport type PushProviderCommon = {\n  created_at: string;\n  updated_at: string;\n  description?: string;\n  disabled_at?: string;\n  disabled_reason?: string;\n};\n\nexport type PushProviderAPN = {\n  apn_auth_key?: string;\n  apn_auth_type?: 'token' | 'certificate';\n  apn_development?: boolean;\n  apn_host?: string;\n  apn_key_id?: string;\n  apn_notification_template?: string;\n  apn_p12_cert?: string;\n  apn_team_id?: string;\n  apn_topic?: string;\n};\n\nexport type PushProviderFirebase = {\n  firebase_apn_template?: string;\n  firebase_credentials?: string;\n  firebase_data_template?: string;\n  firebase_notification_template?: string;\n  firebase_server_key?: string;\n};\n\nexport type PushProviderHuawei = {\n  huawei_app_id?: string;\n  huawei_app_secret?: string;\n};\n\nexport type PushProviderXiaomi = {\n  xiaomi_package_name?: string;\n  xiaomi_secret?: string;\n};\n\nexport type CommandVariants =\n  | 'all'\n  | 'ban'\n  | 'fun_set'\n  | 'giphy'\n  | 'moderation_set'\n  | 'mute'\n  | 'unban'\n  | 'unmute'\n  | keyof CustomCommandData;\n\nexport type Configs = Record<string, ChannelConfigWithInfo | undefined>;\n\nexport type ConnectionOpen = {\n  connection_id: string;\n  cid?: string;\n  created_at?: string;\n  me?: OwnUserResponse;\n  type?: string;\n};\n\nexport type CreatedAtUpdatedAt = {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type Device = DeviceFields & {\n  provider?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type BaseDeviceFields = {\n  id: string;\n  push_provider: PushProvider;\n  push_provider_name?: string;\n};\n\nexport type DeviceFields = BaseDeviceFields & {\n  created_at: string;\n  disabled?: boolean;\n  disabled_reason?: string;\n};\n\nexport type EndpointName =\n  | 'Connect'\n  | 'LongPoll'\n  | 'DeleteFile'\n  | 'DeleteImage'\n  | 'DeleteMessage'\n  | 'DeleteUser'\n  | 'DeleteUsers'\n  | 'DeactivateUser'\n  | 'ExportUser'\n  | 'DeleteReaction'\n  | 'UpdateChannel'\n  | 'UpdateChannelPartial'\n  | 'UpdateMessage'\n  | 'UpdateMessagePartial'\n  | 'GetMessage'\n  | 'GetManyMessages'\n  | 'UpdateUsers'\n  | 'UpdateUsersPartial'\n  | 'CreateGuest'\n  | 'GetOrCreateChannel'\n  | 'StopWatchingChannel'\n  | 'QueryChannels'\n  | 'Search'\n  | 'QueryUsers'\n  | 'QueryMembers'\n  | 'QueryBannedUsers'\n  | 'QueryFlags'\n  | 'QueryMessageFlags'\n  | 'GetReactions'\n  | 'GetReplies'\n  | 'GetPinnedMessages'\n  | 'Ban'\n  | 'Unban'\n  | 'MuteUser'\n  | 'MuteChannel'\n  | 'UnmuteChannel'\n  | 'UnmuteUser'\n  | 'RunMessageAction'\n  | 'SendEvent'\n  | 'SendUserCustomEvent'\n  | 'MarkRead'\n  | 'MarkChannelsRead'\n  | 'SendMessage'\n  | 'ImportChannelMessages'\n  | 'UploadFile'\n  | 'UploadImage'\n  | 'UpdateApp'\n  | 'GetApp'\n  | 'CreateDevice'\n  | 'DeleteDevice'\n  | 'SendReaction'\n  | 'Flag'\n  | 'Unflag'\n  | 'Unblock'\n  | 'QueryFlagReports'\n  | 'FlagReportReview'\n  | 'CreateChannelType'\n  | 'DeleteChannel'\n  | 'DeleteChannels'\n  | 'DBDeleteChannelType'\n  | 'GetChannelType'\n  | 'ListChannelTypes'\n  | 'ListDevices'\n  | 'TruncateChannel'\n  | 'UpdateChannelType'\n  | 'CheckPush'\n  | 'PrivateSubmitModeration'\n  | 'ReactivateUser'\n  | 'HideChannel'\n  | 'ShowChannel'\n  | 'CreatePermission'\n  | 'UpdatePermission'\n  | 'GetPermission'\n  | 'DeletePermission'\n  | 'ListPermissions'\n  | 'CreateRole'\n  | 'DeleteRole'\n  | 'ListRoles'\n  | 'ListCustomRoles'\n  | 'Sync'\n  | 'TranslateMessage'\n  | 'CreateCommand'\n  | 'GetCommand'\n  | 'UpdateCommand'\n  | 'DeleteCommand'\n  | 'ListCommands'\n  | 'CreateBlockList'\n  | 'UpdateBlockList'\n  | 'GetBlockList'\n  | 'ListBlockLists'\n  | 'DeleteBlockList'\n  | 'ExportChannels'\n  | 'GetExportChannelsStatus'\n  | 'CheckSQS'\n  | 'GetRateLimits'\n  | 'CreateSegment'\n  | 'GetSegment'\n  | 'QuerySegments'\n  | 'UpdateSegment'\n  | 'DeleteSegment'\n  | 'CreateCampaign'\n  | 'GetCampaign'\n  | 'ListCampaigns'\n  | 'UpdateCampaign'\n  | 'DeleteCampaign'\n  | 'ScheduleCampaign'\n  | 'StopCampaign'\n  | 'ResumeCampaign'\n  | 'TestCampaign'\n  | 'GetOG'\n  | 'GetTask'\n  | 'ExportUsers'\n  | 'CreateImport'\n  | 'CreateImportURL'\n  | 'GetImport'\n  | 'ListImports'\n  | 'UpsertPushProvider'\n  | 'DeletePushProvider'\n  | 'ListPushProviders'\n  | 'CreatePoll';\n\nexport type ExportChannelRequest = (\n  | {\n      id: string;\n      type: string;\n    }\n  | {\n      cid: string;\n    }\n) & { messages_since?: Date; messages_until?: Date };\n\nexport type ExportChannelOptions = {\n  clear_deleted_message_text?: boolean;\n  export_users?: boolean;\n  include_soft_deleted_channels?: boolean;\n  include_truncated_messages?: boolean;\n  version?: string;\n};\n\nexport type ExportUsersRequest = {\n  user_ids: string[];\n};\n\nexport type Field = {\n  short?: boolean;\n  title?: string;\n  value?: string;\n};\n\nexport type FileUploadConfig = {\n  allowed_file_extensions?: string[] | null;\n  allowed_mime_types?: string[] | null;\n  blocked_file_extensions?: string[] | null;\n  blocked_mime_types?: string[] | null;\n  size_limit?: number | null;\n};\n\nexport type FirebaseConfig = {\n  apn_template?: string;\n  credentials_json?: string;\n  data_template?: string;\n  enabled?: boolean;\n  notification_template?: string;\n  server_key?: string;\n};\n\ntype GiphyVersionInfo = {\n  height: string;\n  url: string;\n  width: string;\n  frames?: string;\n  size?: string;\n};\n\ntype GiphyVersions =\n  | 'original'\n  | 'fixed_height'\n  | 'fixed_height_still'\n  | 'fixed_height_downsampled'\n  | 'fixed_width'\n  | 'fixed_width_still'\n  | 'fixed_width_downsampled';\n\ntype GiphyData = {\n  [key in GiphyVersions]: GiphyVersionInfo;\n};\n\nexport type HuaweiConfig = {\n  enabled?: boolean;\n  id?: string;\n  secret?: string;\n};\n\nexport type XiaomiConfig = {\n  enabled?: boolean;\n  package_name?: string;\n  secret?: string;\n};\n\nexport type LiteralStringForUnion = string & {};\n\nexport type LogLevel = 'info' | 'error' | 'warn';\n\nexport type Logger = (\n  logLevel: LogLevel,\n  message: string,\n  extraData?: Record<string, unknown>,\n) => void;\n\nexport type Message = Partial<\n  MessageBase & {\n    mentioned_users: string[];\n  }\n>;\n\nexport type MessageBase = CustomMessageData & {\n  id: string;\n  attachments?: Attachment[];\n  html?: string;\n  mml?: string;\n  parent_id?: string;\n  pin_expires?: string | null;\n  pinned?: boolean;\n  pinned_at?: string | null;\n  poll_id?: string;\n  quoted_message_id?: string;\n  restricted_visibility?: string[];\n  show_in_channel?: boolean;\n  silent?: boolean;\n  text?: string;\n  type?: MessageLabel;\n  user?: UserResponse | null;\n  user_id?: string;\n};\n\nexport type MessageLabel =\n  | 'deleted'\n  | 'ephemeral'\n  | 'error'\n  | 'regular'\n  | 'reply'\n  | 'system';\n\nexport type SendMessageOptions = {\n  force_moderation?: boolean;\n  // @deprecated use `pending` instead\n  is_pending_message?: boolean;\n  keep_channel_hidden?: boolean;\n  pending?: boolean;\n  pending_message_metadata?: Record<string, string>;\n  skip_enrich_url?: boolean;\n  skip_push?: boolean;\n};\n\nexport type UpdateMessageOptions = {\n  skip_enrich_url?: boolean;\n};\n\nexport type GetMessageOptions = {\n  show_deleted_message?: boolean;\n};\n\nexport type Mute = {\n  created_at: string;\n  target: UserResponse;\n  updated_at: string;\n  user: UserResponse;\n};\n\nexport type PartialUpdateChannel = {\n  set?: Partial<ChannelResponse>;\n  unset?: Array<keyof ChannelResponse>;\n};\n\nexport type PartialUpdateMember = {\n  set?: ChannelMemberUpdates;\n  unset?: Array<keyof ChannelMemberUpdates>;\n};\n\nexport type PartialUserUpdate = {\n  id: string;\n  set?: Partial<UserResponse>;\n  unset?: Array<keyof UserResponse>;\n};\n\nexport type MessageUpdatableFields = Omit<\n  MessageResponse,\n  'cid' | 'created_at' | 'updated_at' | 'deleted_at' | 'user' | 'user_id'\n>;\n\nexport type PartialMessageUpdate = {\n  set?: Partial<MessageUpdatableFields>;\n  unset?: Array<keyof MessageUpdatableFields>;\n};\n\nexport type PendingMessageResponse = {\n  message: MessageResponse;\n  pending_message_metadata?: Record<string, string>;\n};\n\nexport type PermissionAPIObject = {\n  action?: string;\n  condition?: object;\n  custom?: boolean;\n  description?: string;\n  id?: string;\n  level?: string;\n  name?: string;\n  owner?: boolean;\n  same_team?: boolean;\n  tags?: string[];\n};\n\nexport type PermissionObject = {\n  action?: 'Deny' | 'Allow';\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[];\n};\n\nexport type Policy = {\n  action?: 0 | 1;\n  created_at?: string;\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[] | null;\n  updated_at?: string;\n};\n\nexport type RateLimitsInfo = {\n  limit: number;\n  remaining: number;\n  reset: number;\n};\n\nexport type RateLimitsMap = Record<EndpointName, RateLimitsInfo>;\n\nexport type Reaction = CustomReactionData & {\n  type: string;\n  message_id?: string;\n  score?: number;\n  user?: UserResponse | null;\n  user_id?: string;\n};\n\nexport type Resource =\n  | 'AddLinks'\n  | 'BanUser'\n  | 'CreateChannel'\n  | 'CreateMessage'\n  | 'CreateReaction'\n  | 'DeleteAttachment'\n  | 'DeleteChannel'\n  | 'DeleteMessage'\n  | 'DeleteReaction'\n  | 'EditUser'\n  | 'MuteUser'\n  | 'ReadChannel'\n  | 'RunMessageAction'\n  | 'UpdateChannel'\n  | 'UpdateChannelMembers'\n  | 'UpdateMessage'\n  | 'UpdateUser'\n  | 'UploadAttachment';\n\nexport type SearchPayload = Omit<SearchOptions, 'sort'> & {\n  client_id?: string;\n  connection_id?: string;\n  filter_conditions?: ChannelFilters;\n  message_filter_conditions?: MessageFilters;\n  message_options?: MessageOptions;\n  query?: string;\n  sort?: Array<{\n    direction: AscDesc;\n    field: keyof SearchMessageSortBase;\n  }>;\n};\n\nexport type TestPushDataInput = {\n  apnTemplate?: string;\n  firebaseDataTemplate?: string;\n  firebaseTemplate?: string;\n  messageID?: string;\n  pushProviderName?: string;\n  pushProviderType?: PushProvider;\n  skipDevices?: boolean;\n};\n\nexport type TestSQSDataInput = {\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n};\n\nexport type TestSNSDataInput = {\n  sns_key?: string;\n  sns_secret?: string;\n  sns_topic_arn?: string;\n};\n\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n\nexport type TokenProvider = () => Promise<string>;\n\nexport type TranslationLanguages =\n  | 'af'\n  | 'am'\n  | 'ar'\n  | 'az'\n  | 'bg'\n  | 'bn'\n  | 'bs'\n  | 'cs'\n  | 'da'\n  | 'de'\n  | 'el'\n  | 'en'\n  | 'es'\n  | 'es-MX'\n  | 'et'\n  | 'fa'\n  | 'fa-AF'\n  | 'fi'\n  | 'fr'\n  | 'fr-CA'\n  | 'ha'\n  | 'he'\n  | 'hi'\n  | 'hr'\n  | 'hu'\n  | 'id'\n  | 'it'\n  | 'ja'\n  | 'ka'\n  | 'ko'\n  | 'lt'\n  | 'lv'\n  | 'ms'\n  | 'nl'\n  | 'no'\n  | 'pl'\n  | 'ps'\n  | 'pt'\n  | 'ro'\n  | 'ru'\n  | 'sk'\n  | 'sl'\n  | 'so'\n  | 'sq'\n  | 'sr'\n  | 'sv'\n  | 'sw'\n  | 'ta'\n  | 'th'\n  | 'tl'\n  | 'tr'\n  | 'uk'\n  | 'ur'\n  | 'vi'\n  | 'zh'\n  | 'zh-TW'\n  | (string & {});\n\nexport type TypingStartEvent = Event;\n\nexport type ReservedUpdatedMessageFields = keyof typeof RESERVED_UPDATED_MESSAGE_FIELDS;\n\nexport type UpdatedMessage = Omit<MessageResponse, ReservedUpdatedMessageFields> & {\n  mentioned_users?: string[];\n  type?: MessageLabel;\n};\n\n/**\n * @description type alias for UserResponse\n */\nexport type User = UserResponse;\n\nexport type TaskResponse = {\n  task_id: string;\n};\n\nexport type DeleteChannelsResponse = {\n  result: Record<string, string>;\n} & Partial<TaskResponse>;\n\nexport type DeleteType = 'soft' | 'hard' | 'pruning';\n\n/*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user`:\n    - soft: marks user as deleted and retains all user data\n    - pruning: marks user as deleted and nullifies user information\n    - hard: deletes user completely - this requires hard option for messages and conversation as well\n  `conversations`:\n    - soft: marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled)\n    - hard: deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled)\n  `messages`:\n    - soft: marks all user messages as deleted without removing any related message data\n    - pruning: marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags\n    - hard: deletes messages completely with all related information\n  `new_channel_owner_id`: any channels owned by the hard-deleted user will be transferred to this user ID\n */\nexport type DeleteUserOptions = {\n  conversations?: Exclude<DeleteType, 'pruning'>;\n  messages?: DeleteType;\n  new_channel_owner_id?: string;\n  user?: DeleteType;\n};\n\nexport type SegmentType = 'channel' | 'user';\n\nexport type SegmentData = {\n  all_sender_channels?: boolean;\n  all_users?: boolean;\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport type SegmentResponse = {\n  created_at: string;\n  deleted_at: string;\n  id: string;\n  locked: boolean;\n  size: number;\n  task_id: string;\n  type: SegmentType;\n  updated_at: string;\n} & SegmentData;\n\nexport type UpdateSegmentData = {\n  name: string;\n} & SegmentData;\n\nexport type SegmentTargetsResponse = {\n  created_at: string;\n  segment_id: string;\n  target_id: string;\n};\n\nexport type SortParam = {\n  field: string;\n  direction?: AscDesc;\n};\n\nexport type Pager = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n};\n\nexport type QuerySegmentsOptions = Pager;\n\nexport type QuerySegmentTargetsFilter = {\n  target_id?: {\n    $eq?: string;\n    $gte?: string;\n    $in?: string[];\n    $lte?: string;\n  };\n};\nexport type QuerySegmentTargetsOptions = Pick<Pager, 'next' | 'limit'>;\n\nexport type GetCampaignOptions = {\n  users?: { limit?: number; next?: string; prev?: string };\n};\n\nexport type CampaignSort = {\n  field: string;\n  direction?: number;\n}[];\n\nexport type CampaignQueryOptions = {\n  limit?: number;\n  next?: string;\n  prev?: string;\n  sort?: CampaignSort;\n  user_limit?: number;\n};\n\nexport type SegmentQueryOptions = CampaignQueryOptions;\n\n// TODO: add better typing\nexport type CampaignFilters = {};\n\nexport type CampaignData = {\n  channel_template?: {\n    type: string;\n    custom?: {};\n    id?: string;\n    members?: string[];\n    team?: string;\n  };\n  create_channels?: boolean;\n  deleted_at?: string;\n  description?: string;\n  id?: string | null;\n  message_template?: {\n    text: string;\n    attachments?: Attachment[];\n    custom?: {};\n    poll_id?: string;\n  };\n  name?: string;\n  segment_ids?: string[];\n  sender_id?: string;\n  sender_mode?: 'exclude' | 'include' | null;\n  show_channels?: boolean;\n  skip_push?: boolean;\n  skip_webhook?: boolean;\n  user_ids?: string[];\n};\n\nexport type CampaignStats = {\n  progress?: number;\n  stats_channels_created?: number;\n  stats_completed_at?: string;\n  stats_messages_sent?: number;\n  stats_started_at?: string;\n  stats_users_read?: number;\n  stats_users_sent?: number;\n};\nexport type CampaignResponse = {\n  created_at: string;\n  id: string;\n  segments: SegmentResponse[];\n  sender: UserResponse;\n  stats: CampaignStats;\n  status: 'draft' | 'scheduled' | 'in_progress' | 'completed' | 'stopped';\n  updated_at: string;\n  users: UserResponse[];\n  scheduled_for?: string;\n} & CampaignData;\n\nexport type DeleteCampaignOptions = {};\n\nexport type TaskStatus = {\n  created_at: string;\n  status: string;\n  task_id: string;\n  updated_at: string;\n  error?: {\n    description: string;\n    type: string;\n  };\n  result?: UR;\n};\n\nexport type TruncateOptions = {\n  hard_delete?: boolean;\n  message?: Message;\n  skip_push?: boolean;\n  truncated_at?: Date;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type CreateImportURLResponse = {\n  path: string;\n  upload_url: string;\n};\n\nexport type CreateImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type GetImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type CreateImportOptions = {\n  mode: 'insert' | 'upsert';\n};\n\nexport type ListImportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ListImportsResponse = {\n  import_tasks: ImportTask[];\n};\n\nexport type ImportTaskHistory = {\n  created_at: string;\n  next_state: string;\n  prev_state: string;\n};\n\nexport type ImportTask = {\n  created_at: string;\n  history: ImportTaskHistory[];\n  id: string;\n  path: string;\n  state: string;\n  updated_at: string;\n  result?: UR;\n  size?: number;\n};\n\nexport type MessageSetType = 'latest' | 'current' | 'new';\nexport type MessageSet = {\n  isCurrent: boolean;\n  isLatest: boolean;\n  messages: LocalMessage[];\n  pagination: { hasNext: boolean; hasPrev: boolean };\n};\n\nexport type PushProviderUpsertResponse = {\n  push_provider: PushProvider;\n};\n\nexport type PushProviderListResponse = {\n  push_providers: PushProvider[];\n};\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  code?: number;\n  details?: ErrorResponseDetails;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  public code: number | null;\n  public status: number;\n  public response: AxiosResponse<T>;\n  public name = 'ErrorFromResponse';\n\n  constructor(\n    message: string,\n    {\n      code,\n      status,\n      response,\n    }: {\n      code: ErrorFromResponse<T>['code'];\n      response: ErrorFromResponse<T>['response'];\n      status: ErrorFromResponse<T>['status'];\n    },\n  ) {\n    super(message);\n    this.code = code;\n    this.response = response;\n    this.status = status;\n  }\n\n  // Vitest helper (serialized errors are too large to read)\n  // https://github.com/vitest-dev/vitest/blob/v3.1.3/packages/utils/src/error.ts#L60-L62\n  toJSON() {\n    const extra = [\n      ['status', this.status],\n      ['code', this.code],\n    ] as const;\n\n    const joinable = [];\n\n    for (const [key, value] of extra) {\n      if (typeof value !== 'undefined' && value !== null) {\n        joinable.push(`${key}: ${value}`);\n      }\n    }\n\n    return {\n      message: `(${joinable.join(', ')}) - ${this.message}`,\n      stack: this.stack,\n      name: this.name,\n      code: this.code,\n      status: this.status,\n    } as const;\n  }\n}\n\nexport type QueryPollsResponse = {\n  polls: PollResponse[];\n  next?: string;\n};\n\nexport type CreatePollAPIResponse = {\n  poll: PollResponse;\n};\n\nexport type GetPollAPIResponse = {\n  poll: PollResponse;\n};\n\nexport type UpdatePollAPIResponse = {\n  poll: PollResponse;\n};\n\nexport type PollResponse = CustomPollData &\n  PollEnrichData & {\n    created_at: string;\n    created_by: UserResponse | null;\n    created_by_id: string;\n    enforce_unique_vote: boolean;\n    id: string;\n    max_votes_allowed: number;\n    name: string;\n    options: PollOption[];\n    updated_at: string;\n    allow_answers?: boolean;\n    allow_user_suggested_options?: boolean;\n    description?: string;\n    is_closed?: boolean;\n    voting_visibility?: VotingVisibility;\n  };\n\nexport type PollOption = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote[];\n};\n\nexport enum VotingVisibility {\n  anonymous = 'anonymous',\n  public = 'public',\n}\n\nexport type PollEnrichData = {\n  answers_count: number;\n  latest_answers: PollAnswer[]; // not updated with WS events, ordered DESC by created_at, seems like updated_at cannot be different from created_at\n  latest_votes_by_option: Record<string, PollVote[]>; // not updated with WS events; always null in anonymous polls\n  vote_count: number;\n  vote_counts_by_option: Record<string, number>;\n  own_votes?: (PollVote | PollAnswer)[]; // not updated with WS events\n};\n\nexport type PollData = CustomPollData & {\n  id: string;\n  name: string;\n  allow_answers?: boolean;\n  allow_user_suggested_options?: boolean;\n  description?: string;\n  enforce_unique_vote?: boolean;\n  is_closed?: boolean;\n  max_votes_allowed?: number;\n  options?: PollOptionData[];\n  user_id?: string;\n  voting_visibility?: VotingVisibility;\n};\n\nexport type CreatePollData = Partial<PollData> & Pick<PollData, 'name'>;\n\nexport type PartialPollUpdate = {\n  set?: Partial<PollData>;\n  unset?: Array<keyof PollData>;\n};\n\nexport type PollOptionData = CustomPollOptionData & {\n  text: string;\n  id?: string;\n  position?: number;\n};\n\nexport type PartialPollOptionUpdate = {\n  set?: Partial<PollOptionResponse>;\n  unset?: Array<keyof PollOptionResponse>;\n};\n\nexport type PollVoteData = {\n  answer_text?: string;\n  is_answer?: boolean;\n  option_id?: string;\n};\n\nexport type PollPaginationOptions = {\n  limit?: number;\n  next?: string;\n};\n\nexport type CreatePollOptionAPIResponse = {\n  poll_option: PollOptionResponse;\n};\n\nexport type GetPollOptionAPIResponse = CreatePollOptionAPIResponse;\nexport type UpdatePollOptionAPIResponse = CreatePollOptionAPIResponse;\n\nexport type PollOptionResponse = CustomPollData & {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  position: number;\n  text: string;\n  updated_at: string;\n  vote_count: number;\n  votes?: PollVote[];\n};\n\nexport type PollVote = {\n  created_at: string;\n  id: string;\n  poll_id: string;\n  updated_at: string;\n  option_id?: string;\n  user?: UserResponse;\n  user_id?: string;\n};\n\nexport type PollAnswer = Exclude<PollVote, 'option_id'> & {\n  answer_text: string;\n  is_answer: boolean; // this is absolutely redundant prop as answer_text indicates that a vote is an answer\n};\n\nexport type PollVotesAPIResponse = {\n  votes: (PollVote | PollAnswer)[];\n  next?: string;\n};\n\nexport type PollAnswersAPIResponse = {\n  votes: PollAnswer[]; // todo: should be changes to answers?\n  next?: string;\n};\n\nexport type CastVoteAPIResponse = {\n  vote: PollVote | PollAnswer;\n};\n\nexport type QueryMessageHistoryFilters = QueryFilters<\n  {\n    message_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageHistoryEntry['message_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<MessageHistoryEntry['message_id']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<MessageHistoryEntry['message_updated_by_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_by_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<MessageHistoryEntry['message_updated_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<MessageHistoryEntry['message_updated_at']>;\n  }\n>;\n\nexport type QueryMessageHistorySort =\n  | QueryMessageHistorySortBase\n  | Array<QueryMessageHistorySortBase>;\n\nexport type QueryMessageHistorySortBase = {\n  message_updated_at?: AscDesc;\n  message_updated_by_id?: AscDesc;\n};\n\nexport type QueryMessageHistoryOptions = Pager;\n\nexport type MessageHistoryEntry = {\n  message_id: string;\n  message_updated_at: string;\n  attachments?: Attachment[];\n  message_updated_by_id?: string;\n  text?: string;\n};\n\nexport type QueryMessageHistoryResponse = {\n  message_history: MessageHistoryEntry[];\n  next?: string;\n  prev?: string;\n};\n\n// Moderation v2\nexport type ModerationPayload = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>;\n  images?: string[];\n  texts?: string[];\n  videos?: string[];\n};\n\nexport type ModV2ReviewStatus = 'complete' | 'flagged' | 'partial';\n\nexport type ModerationFlag = {\n  created_at: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom: Record<string, any>;\n  entity_creator_id: string;\n  entity_id: string;\n  entity_type: string;\n  id: string;\n  reason: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  result: Record<string, any>[];\n  review_queue_item_id: string;\n  updated_at: string;\n  user: UserResponse;\n  moderation_payload?: ModerationPayload;\n  moderation_payload_hash?: string;\n};\n\nexport type ReviewQueueItem = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  actions_taken: any[];\n  appealed_by: string;\n  assigned_to: string;\n  completed_at: string;\n  config_key: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  context: any[];\n  created_at: string;\n  created_by: string;\n  entity_id: string;\n  entity_type: string;\n  flags: ModerationFlag[];\n  has_image: boolean;\n  has_text: boolean;\n  has_video: boolean;\n  id: string;\n  moderation_payload: ModerationPayload;\n  moderation_payload_hash: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options: any;\n  recommended_action: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  results: any;\n  reviewed_at: string;\n  status: string;\n  updated_at: string;\n};\n\nexport type CustomCheckFlag = {\n  type: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  custom?: Record<string, any>[];\n  labels?: string[];\n  reason?: string;\n};\n\nexport type DeleteMessagesOptions = 'soft' | 'hard';\n\nexport type SubmitActionOptions = {\n  ban?: {\n    channel_ban_only?: boolean;\n    reason?: string;\n    timeout?: number;\n    delete_messages?: DeleteMessagesOptions;\n  };\n  delete_message?: {\n    hard_delete?: boolean;\n  };\n  delete_user?: {\n    delete_conversation_channels?: boolean;\n    hard_delete?: boolean;\n    mark_messages_deleted?: boolean;\n  };\n  restore?: {};\n  unban?: {\n    channel_cid?: string;\n  };\n  user_id?: string;\n};\n\nexport type GetUserModerationReportResponse = {\n  user: UserResponse;\n  user_blocks?: Array<{\n    blocked_at: string;\n    blocked_by_user_id: string;\n    blocked_user_id: string;\n  }>;\n  user_mutes?: Mute[];\n};\n\nexport type QueryModerationConfigsFilters = QueryFilters<\n  {\n    key?: string;\n  } & {\n    created_at?: PrimitiveFilter<string>;\n  } & {\n    updated_at?: PrimitiveFilter<string>;\n  } & {\n    team?: string;\n  }\n>;\n\nexport type ReviewQueueFilters = QueryFilters<\n  {\n    assigned_to?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['assigned_to']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['assigned_to']>;\n  } & {\n    completed_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ReviewQueueItem['completed_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ReviewQueueItem['completed_at']>;\n  } & {\n    config_key?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['config_key']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['config_key']>;\n  } & {\n    entity_type?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_type']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_type']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ReviewQueueItem['created_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ReviewQueueItem['created_at']>;\n  } & {\n    id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['id']>;\n  } & {\n    entity_id?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['entity_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['entity_id']>;\n  } & {\n    reviewed?: boolean;\n  } & {\n    reviewed_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ReviewQueueItem['reviewed_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ReviewQueueItem['reviewed_at']>;\n  } & {\n    status?:\n      | RequireOnlyOne<Pick<QueryFilter<ReviewQueueItem['status']>, '$eq' | '$in'>>\n      | PrimitiveFilter<ReviewQueueItem['status']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ReviewQueueItem['updated_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ReviewQueueItem['updated_at']>;\n  } & {\n    has_image?: boolean;\n  } & {\n    has_text?: boolean;\n  } & {\n    has_video?: boolean;\n  } & {\n    has_media?: boolean;\n  } & {\n    language?: RequireOnlyOne<{\n      $contains?: string;\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<string>;\n          $in?: PrimitiveFilter<string>;\n        }>\n      | PrimitiveFilter<string>;\n  } & {\n    user_report_reason?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    recommended_action?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    flagged_user_id?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    category?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    label?: RequireOnlyOne<{\n      $eq?: string;\n    }>;\n  } & {\n    reporter_type?: RequireOnlyOne<{\n      $eq?: 'automod' | 'user' | 'moderator' | 'admin' | 'velocity_filter';\n    }>;\n  } & {\n    reporter_id?: RequireOnlyOne<{\n      $eq?: string;\n      $in?: string[];\n    }>;\n  } & {\n    date_range?: RequireOnlyOne<{\n      $eq?: string; // Format: \"date1_date2\"\n    }>;\n  }\n>;\n\nexport type ReviewQueueSort =\n  | Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>\n  | Array<Sort<Pick<ReviewQueueItem, 'id' | 'created_at' | 'updated_at'>>>;\n\nexport type QueryModerationConfigsSort = Array<Sort<'key' | 'created_at' | 'updated_at'>>;\n\nexport type ReviewQueuePaginationOptions = Pager;\n\nexport type ReviewQueueResponse = {\n  items: ReviewQueueItem[];\n  next?: string;\n  prev?: string;\n};\n\nexport type ModerationConfig = {\n  key: string;\n  ai_image_config?: AIImageConfig;\n  ai_text_config?: AITextConfig;\n  ai_video_config?: AIVideoConfig;\n  automod_platform_circumvention_config?: AutomodPlatformCircumventionConfig;\n  automod_semantic_filters_config?: AutomodSemanticFiltersConfig;\n  automod_toxicity_config?: AutomodToxicityConfig;\n  block_list_config?: BlockListConfig;\n  team?: string;\n};\n\nexport type ModerationConfigResponse = ModerationConfig & {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type GetConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type QueryConfigsResponse = {\n  configs: ModerationConfigResponse[];\n  next?: string;\n  prev?: string;\n};\n\nexport type UpsertConfigResponse = {\n  config: ModerationConfigResponse;\n};\n\nexport type ModerationFlagOptions = {\n  custom?: Record<string, unknown>;\n  moderation_payload?: ModerationPayload;\n  user_id?: string;\n};\n\nexport type ModerationMuteOptions = {\n  timeout?: number;\n  user_id?: string;\n};\nexport type GetUserModerationReportOptions = {\n  create_user_if_not_exists?: boolean;\n  include_user_blocks?: boolean;\n  include_user_mutes?: boolean;\n};\n\nexport type AIState =\n  | 'AI_STATE_ERROR'\n  | 'AI_STATE_CHECKING_SOURCES'\n  | 'AI_STATE_THINKING'\n  | 'AI_STATE_GENERATING'\n  | (string & {});\n\nexport type ModerationActionType =\n  | 'flag'\n  | 'shadow'\n  | 'remove'\n  | 'bounce'\n  | 'bounce_flag'\n  | 'bounce_remove';\n\nexport type AutomodRule = {\n  action: ModerationActionType;\n  label: string;\n  threshold: number;\n};\n\nexport type BlockListRule = {\n  action: ModerationActionType;\n  name?: string;\n};\n\nexport type BlockListConfig = {\n  enabled: boolean;\n  rules: BlockListRule[];\n  async?: boolean;\n};\n\nexport type AutomodToxicityConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodPlatformCircumventionConfig = {\n  enabled: boolean;\n  rules: AutomodRule[];\n  async?: boolean;\n};\n\nexport type AutomodSemanticFiltersRule = {\n  action: ModerationActionType;\n  name: string;\n  threshold: number;\n};\n\nexport type AutomodSemanticFiltersConfig = {\n  enabled: boolean;\n  rules: AutomodSemanticFiltersRule[];\n  async?: boolean;\n};\n\nexport type AITextSeverityRule = {\n  action: ModerationActionType;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n};\n\nexport type AITextRule = {\n  label: string;\n  action?: ModerationActionType;\n  severity_rules?: AITextSeverityRule[];\n};\n\nexport type AITextConfig = {\n  enabled: boolean;\n  rules: AITextRule[];\n  async?: boolean;\n  profile?: string;\n  severity_rules?: AITextSeverityRule[]; // Deprecated: use rules instead\n};\n\nexport type AIImageRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIImageConfig = {\n  enabled: boolean;\n  rules: AIImageRule[];\n  async?: boolean;\n};\n\nexport type AIVideoRule = {\n  action: ModerationActionType;\n  label: string;\n  min_confidence?: number;\n};\n\nexport type AIVideoConfig = {\n  enabled: boolean;\n  rules: AIVideoRule[];\n  async?: boolean;\n};\n\nexport type VelocityFilterConfigRule = {\n  action: 'flag' | 'shadow' | 'remove' | 'ban';\n  ban_duration?: number;\n  cascading_action?: 'flag' | 'shadow' | 'remove' | 'ban';\n  cascading_threshold?: number;\n  check_message_context?: boolean;\n  fast_spam_threshold?: number;\n  fast_spam_ttl?: number;\n  ip_ban?: boolean;\n  shadow_ban?: boolean;\n  slow_spam_ban_duration?: number;\n  slow_spam_threshold?: number;\n  slow_spam_ttl?: number;\n};\n\nexport type VelocityFilterConfig = {\n  cascading_actions: boolean;\n  enabled: boolean;\n  first_message_only: boolean;\n  rules: VelocityFilterConfigRule[];\n  async?: boolean;\n};\n\nexport type PromoteChannelParams = {\n  channels: Array<Channel>;\n  channelToMove: Channel;\n  sort: ChannelSort;\n  /**\n   * If the index of the channel within `channels` list which is being moved upwards\n   * (`channelToMove`) is known, you can supply it to skip extra calculation.\n   */\n  channelToMoveIndexWithinChannels?: number;\n};\n\n/**\n * An identifier containing information about the downstream SDK using stream-chat. It\n * is used to resolve the user agent.\n */\nexport type SdkIdentifier = {\n  name: 'react' | 'react-native' | 'expo' | 'angular';\n  version: string;\n};\n\n/**\n * An identifier containing information about the downstream device using stream-chat, if\n * available. Is used by the react-native SDKs to enrich the user agent further.\n */\nexport type DeviceIdentifier = { os: string; model?: string };\n\nexport type DraftResponse = {\n  channel_cid: string;\n  created_at: string;\n  message: DraftMessage;\n  channel?: ChannelResponse;\n  parent_id?: string;\n  parent_message?: MessageResponseBase;\n  quoted_message?: MessageResponseBase;\n};\n\nexport type CreateDraftResponse = APIResponse & {\n  draft: DraftResponse;\n};\n\nexport type GetDraftResponse = APIResponse & {\n  draft: DraftResponse;\n};\n\nexport type QueryDraftsResponse = APIResponse & {\n  drafts: DraftResponse[];\n} & Omit<Pager, 'limit'>;\n\nexport type DraftMessagePayload = PartializeKeys<DraftMessage, 'id'> & {\n  user_id?: string;\n};\n\nexport type DraftMessage = {\n  id: string;\n  text: string;\n  attachments?: Attachment[];\n  custom?: {};\n  html?: string;\n  mentioned_users?: string[];\n  mml?: string;\n  parent_id?: string;\n  poll_id?: string;\n  quoted_message_id?: string;\n  show_in_channel?: boolean;\n  silent?: boolean;\n  type?: MessageLabel;\n};\n\nexport type ThreadSort = ThreadSortBase | Array<ThreadSortBase>;\n\nexport type ThreadSortBase = {\n  active_participant_count?: AscDesc;\n  created_at?: AscDesc;\n  last_message_at?: AscDesc;\n  parent_message_id?: AscDesc;\n  participant_count?: AscDesc;\n  reply_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type ThreadFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<string>, '$eq' | '$in'>>\n      | PrimitiveFilter<string>;\n  } & {\n    parent_message_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<ThreadResponse['parent_message_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<ThreadResponse['parent_message_id']>;\n  } & {\n    created_by_user_id?:\n      | RequireOnlyOne<\n          Pick<QueryFilter<ThreadResponse['created_by_user_id']>, '$eq' | '$in'>\n        >\n      | PrimitiveFilter<ThreadResponse['created_by_user_id']>;\n  } & {\n    created_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ThreadResponse['created_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ThreadResponse['created_at']>;\n  } & {\n    updated_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ThreadResponse['updated_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ThreadResponse['updated_at']>;\n  } & {\n    last_message_at?:\n      | RequireOnlyOne<\n          Pick<\n            QueryFilter<ThreadResponse['last_message_at']>,\n            '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n          >\n        >\n      | PrimitiveFilter<ThreadResponse['last_message_at']>;\n  }\n>;\n\nexport type ReminderResponseBase = {\n  channel_cid: string;\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n  user_id: string;\n  remind_at?: string;\n};\n\nexport type ReminderResponse = ReminderResponseBase & {\n  user: UserResponse;\n  message: MessageResponse;\n};\n\nexport type ReminderAPIResponse = APIResponse & {\n  reminder: ReminderResponse;\n};\n\nexport type CreateReminderOptions = {\n  messageId: string;\n  remind_at?: string | null;\n  user_id?: string;\n};\n\nexport type UpdateReminderOptions = CreateReminderOptions;\n\nexport type ReminderFilters = QueryFilters<{\n  channel_cid?:\n    | RequireOnlyOne<\n        Pick<QueryFilter<ReminderResponseBase['channel_cid']>, '$eq' | '$in'>\n      >\n    | PrimitiveFilter<ReminderResponseBase['channel_cid']>;\n  created_at?:\n    | RequireOnlyOne<\n        Pick<\n          QueryFilter<ReminderResponseBase['created_at']>,\n          '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n        >\n      >\n    | PrimitiveFilter<ReminderResponseBase['created_at']>;\n  message_id?:\n    | RequireOnlyOne<Pick<QueryFilter<ReminderResponseBase['message_id']>, '$eq' | '$in'>>\n    | PrimitiveFilter<ReminderResponseBase['message_id']>;\n  remind_at?:\n    | RequireOnlyOne<\n        Pick<\n          QueryFilter<ReminderResponseBase['remind_at']>,\n          '$eq' | '$gt' | '$lt' | '$gte' | '$lte'\n        >\n      >\n    | PrimitiveFilter<ReminderResponseBase['remind_at']>;\n  user_id?:\n    | RequireOnlyOne<Pick<QueryFilter<ReminderResponseBase['user_id']>, '$eq' | '$in'>>\n    | PrimitiveFilter<ReminderResponseBase['user_id']>;\n}>;\n\nexport type ReminderSort =\n  | Sort<\n      Pick<\n        ReminderResponseBase,\n        'channel_cid' | 'created_at' | 'remind_at' | 'updated_at'\n      >\n    >\n  | Array<\n      Sort<\n        Pick<\n          ReminderResponseBase,\n          'channel_cid' | 'created_at' | 'remind_at' | 'updated_at'\n        >\n      >\n    >;\n\nexport type QueryRemindersOptions = Pager & {\n  filter?: ReminderFilters;\n  sort?: ReminderSort;\n};\n\nexport type QueryRemindersResponse = {\n  reminders: ReminderResponse[];\n  prev?: string;\n  next?: string;\n};\n\nexport type HookType = 'webhook' | 'sqs' | 'sns' | 'pending_message';\n\nexport type EventHook = {\n  id?: string;\n  hook_type?: HookType;\n  enabled?: boolean;\n  event_types?: Array<string>;\n  webhook_url?: string;\n  sqs_queue_url?: string;\n  sqs_region?: string;\n  sqs_auth_type?: string;\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_role_arn?: string;\n  sns_topic_arn?: string;\n  sns_region?: string;\n  sns_auth_type?: string;\n  sns_key?: string;\n  sns_secret?: string;\n  sns_role_arn?: string;\n\n  // pending message config\n  timeout_ms?: number;\n  callback?: {\n    mode: 'CALLBACK_MODE_NONE' | 'CALLBACK_MODE_REST' | 'CALLBACK_MODE_TWIRP';\n  };\n\n  created_at?: string;\n  updated_at?: string;\n};\n","import {\n  PollComposerCompositionMiddlewareExecutor,\n  PollComposerStateMiddlewareExecutor,\n  VALID_MAX_VOTES_VALUE_REGEX,\n} from './middleware/pollComposer';\nimport { StateStore } from '../store';\nimport { VotingVisibility } from '../types';\nimport { generateUUIDv4 } from '../utils';\nimport type { MessageComposer } from './messageComposer';\nimport type {\n  PollComposerFieldErrors,\n  PollComposerState,\n  UpdateFieldsData,\n} from './middleware/pollComposer';\n\nexport type PollComposerOptions = {\n  composer: MessageComposer;\n};\n\nexport class PollComposer {\n  readonly state: StateStore<PollComposerState>;\n  readonly composer: MessageComposer;\n  readonly compositionMiddlewareExecutor: PollComposerCompositionMiddlewareExecutor;\n  readonly stateMiddlewareExecutor: PollComposerStateMiddlewareExecutor;\n\n  constructor({ composer }: PollComposerOptions) {\n    this.composer = composer;\n    this.state = new StateStore<PollComposerState>(this.initialState);\n    this.compositionMiddlewareExecutor = new PollComposerCompositionMiddlewareExecutor({\n      composer,\n    });\n    this.stateMiddlewareExecutor = new PollComposerStateMiddlewareExecutor();\n  }\n\n  get initialState(): PollComposerState {\n    return {\n      data: {\n        allow_answers: false,\n        allow_user_suggested_options: false,\n        description: '',\n        enforce_unique_vote: true,\n        id: generateUUIDv4(),\n        max_votes_allowed: '',\n        name: '',\n        options: [{ id: generateUUIDv4(), text: '' }],\n        user_id: this.composer.client.user?.id,\n        voting_visibility: VotingVisibility.public,\n      },\n      errors: {},\n    };\n  }\n\n  get allow_answers() {\n    return this.state.getLatestValue().data.allow_answers;\n  }\n  get allow_user_suggested_options() {\n    return this.state.getLatestValue().data.allow_user_suggested_options;\n  }\n  get description() {\n    return this.state.getLatestValue().data.description;\n  }\n  get enforce_unique_vote() {\n    return this.state.getLatestValue().data.enforce_unique_vote;\n  }\n  get id() {\n    return this.state.getLatestValue().data.id;\n  }\n  get max_votes_allowed() {\n    return this.state.getLatestValue().data.max_votes_allowed;\n  }\n  get name() {\n    return this.state.getLatestValue().data.name;\n  }\n  get options() {\n    return this.state.getLatestValue().data.options;\n  }\n  get user_id() {\n    return this.state.getLatestValue().data.user_id;\n  }\n  get voting_visibility() {\n    return this.state.getLatestValue().data.voting_visibility;\n  }\n\n  get canCreatePoll() {\n    const { data, errors } = this.state.getLatestValue();\n    const hasAtLeastOneNonEmptyOption =\n      data.options.filter((o) => !!o.text.trim()).length > 0;\n    const hasName = !!data.name;\n    const maxVotesAllowedNumber = parseInt(\n      data.max_votes_allowed?.match(VALID_MAX_VOTES_VALUE_REGEX)?.[0] || '',\n    );\n\n    const validMaxVotesAllowed =\n      data.max_votes_allowed === '' ||\n      (!!maxVotesAllowedNumber &&\n        (2 <= maxVotesAllowedNumber || maxVotesAllowedNumber <= 10));\n\n    return (\n      hasAtLeastOneNonEmptyOption &&\n      hasName &&\n      validMaxVotesAllowed &&\n      Object.values(errors).filter((errorText) => !!errorText).length === 0\n    );\n  }\n\n  initState = () => {\n    this.state.next(this.initialState);\n  };\n\n  /**\n   * Updates specified fields and generates relevant errors\n   * @param data\n   * @param injectedFieldErrors - errors produced externally that will take precedence over the errors generated in the middleware chaing\n   */\n  // FIXME: change method params to a single object with the next major release\n  updateFields = async (\n    data: UpdateFieldsData,\n    injectedFieldErrors?: PollComposerFieldErrors,\n  ) => {\n    const { state, status } = await this.stateMiddlewareExecutor.execute({\n      eventName: 'handleFieldChange',\n      initialValue: {\n        nextState: { ...this.state.getLatestValue() },\n        previousState: { ...this.state.getLatestValue() },\n        targetFields: data,\n        injectedFieldErrors,\n      },\n    });\n\n    if (status === 'discard') return;\n    this.state.next(state.nextState);\n  };\n\n  handleFieldBlur = async (field: keyof PollComposerState['data']) => {\n    const result = await this.stateMiddlewareExecutor.execute({\n      eventName: 'handleFieldBlur',\n      initialValue: {\n        nextState: { ...this.state.getLatestValue() },\n        previousState: { ...this.state.getLatestValue() },\n        targetFields: { [field]: this.state.getLatestValue().data[field] },\n      },\n    });\n\n    if (result.status === 'discard') return;\n    this.state.next(result.state.nextState);\n  };\n\n  compose = async () => {\n    const { data, errors } = this.state.getLatestValue();\n    const result = await this.compositionMiddlewareExecutor.execute({\n      eventName: 'compose',\n      initialValue: {\n        data: {\n          ...data,\n          max_votes_allowed: data.max_votes_allowed\n            ? parseInt(data.max_votes_allowed)\n            : undefined,\n          options: data.options\n            ?.filter((o) => o.text.trim())\n            .map((o) => ({ text: o.text })),\n        },\n        errors,\n      },\n    });\n    if (result.status === 'discard') return;\n\n    return result.state;\n  };\n}\n","import type { MiddlewareHandlerParams } from '../../../middleware';\nimport type { Attachment } from '../../../types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { LocalAttachment } from '../../types';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\n\nconst localAttachmentToAttachment = (localAttachment: LocalAttachment) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { localMetadata, ...attachment } = localAttachment;\n  return attachment as Attachment;\n};\n\nexport const createAttachmentsCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/attachments',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      discard,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const { attachmentManager } = composer;\n      if (!attachmentManager) return forward();\n\n      if (attachmentManager.uploadsInProgressCount > 0) {\n        composer.client.notifications.addWarning({\n          message: 'Wait until all attachments have uploaded',\n          origin: {\n            emitter: 'MessageComposer',\n            context: { composer },\n          },\n        });\n        return discard();\n      }\n\n      const attachments = (state.message.attachments ?? []).concat(\n        attachmentManager.successfulUploads.map(localAttachmentToAttachment),\n      );\n\n      // prevent introducing attachments array into the payload sent to the server\n      if (!attachments.length) return forward();\n\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          attachments,\n        },\n        message: {\n          ...state.message,\n          attachments,\n        },\n      });\n    },\n  },\n});\n\nexport const createDraftAttachmentsCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-attachments',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const { attachmentManager } = composer;\n      if (!attachmentManager) return forward();\n\n      const successfulUploads = attachmentManager.successfulUploads;\n      const attachments = successfulUploads.length\n        ? (state.draft.attachments ?? []).concat(\n            successfulUploads.map(localAttachmentToAttachment),\n          )\n        : undefined;\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          attachments,\n        },\n      });\n    },\n  },\n});\n","import type { MiddlewareHandlerParams } from '../../../middleware';\nimport { formatMessage, toUpdatedMessagePayload } from '../../../utils';\nimport type { MessageComposer } from '../../messageComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n} from './types';\n\nexport const createCompositionDataCleanupMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/data-cleanup',\n  handlers: {\n    compose: ({\n      state,\n      next,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const common = {\n        type: composer.editedMessage?.type ?? 'regular',\n      };\n\n      const editedMessagePayloadToBeSent = composer.editedMessage\n        ? toUpdatedMessagePayload(composer.editedMessage)\n        : undefined;\n\n      return next({\n        ...state,\n        localMessage: formatMessage({\n          ...composer.editedMessage,\n          ...state.localMessage,\n          ...common,\n        }),\n        message: {\n          ...editedMessagePayloadToBeSent,\n          ...state.message,\n          ...common,\n        },\n        sendOptions:\n          composer.editedMessage && state.sendOptions?.skip_enrich_url\n            ? { skip_enrich_url: state.sendOptions?.skip_enrich_url }\n            : state.sendOptions,\n      });\n    },\n  },\n});\n","import type { MiddlewareHandlerParams } from '../../../middleware';\nimport type { MessageComposer } from '../../messageComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\n\nexport const createCustomDataCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/custom-data',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const data = composer.customDataManager.customMessageData;\n      if (!data) return forward();\n\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...data,\n        },\n        message: {\n          ...state.message,\n          ...data,\n        },\n      });\n    },\n  },\n});\n\nexport const createDraftCustomDataCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-custom-data',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const data = composer.customDataManager.customMessageData;\n      if (!data) return forward();\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          ...data,\n        },\n      });\n    },\n  },\n});\n","import { textIsEmpty } from '../../textComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\n\nexport const createCompositionValidationMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/data-validation',\n  handlers: {\n    compose: async ({\n      state,\n      discard,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const { maxLengthOnSend } = composer.config.text ?? {};\n      const inputText = state.message.text ?? '';\n      const isEmptyMessage =\n        textIsEmpty(inputText) &&\n        !state.message.attachments?.length &&\n        !state.message.poll_id;\n\n      const hasExceededMaxLength =\n        typeof maxLengthOnSend === 'number' && inputText.length > maxLengthOnSend;\n\n      const editedMessageIsUnchanged =\n        composer.editedMessage && !composer.lastChangeOriginIsLocal;\n\n      if (isEmptyMessage || editedMessageIsUnchanged || hasExceededMaxLength) {\n        return await discard();\n      }\n\n      return await forward();\n    },\n  },\n});\n\nexport const createDraftCompositionValidationMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-data-validation',\n  handlers: {\n    compose: async ({\n      state,\n      discard,\n      forward,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const hasData =\n        !textIsEmpty(state.draft.text ?? '') ||\n        state.draft.attachments?.length ||\n        state.draft.poll_id ||\n        state.draft.quoted_message_id;\n\n      const shouldCreateDraft = composer.lastChangeOriginIsLocal && hasData;\n\n      if (!shouldCreateDraft) {\n        return await discard();\n      }\n\n      return await forward();\n    },\n  },\n});\n","import { LinkPreviewsManager } from '../..';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\nimport type { Attachment } from '../../../types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\n\nexport const createLinkPreviewsCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/link-previews',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const { linkPreviewsManager } = composer;\n      if (!linkPreviewsManager) return forward();\n\n      linkPreviewsManager.cancelURLEnrichment();\n      const someLinkPreviewsLoading = linkPreviewsManager.loadingPreviews.length > 0;\n      const someLinkPreviewsDismissed = linkPreviewsManager.dismissedPreviews.length > 0;\n      const linkPreviews =\n        linkPreviewsManager.loadingPreviews.length > 0\n          ? []\n          : linkPreviewsManager.loadedPreviews.map((preview) =>\n              LinkPreviewsManager.getPreviewData(preview),\n            );\n\n      const attachments: Attachment[] = (state.message.attachments ?? []).concat(\n        linkPreviews,\n      );\n\n      // prevent introducing attachments array into the payload sent to the server\n      if (!attachments.length) return forward();\n\n      const sendOptions = { ...state.sendOptions };\n      const skip_enrich_url =\n        (!someLinkPreviewsLoading && linkPreviews.length > 0) ||\n        someLinkPreviewsDismissed;\n      if (skip_enrich_url) {\n        sendOptions.skip_enrich_url = true;\n      }\n\n      return next({\n        ...state,\n        message: {\n          ...state.message,\n          attachments,\n        },\n        localMessage: {\n          ...state.localMessage,\n          attachments,\n        },\n        sendOptions,\n      });\n    },\n  },\n});\n\nexport const createDraftLinkPreviewsCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-link-previews',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const { linkPreviewsManager } = composer;\n      if (!linkPreviewsManager) return forward();\n\n      linkPreviewsManager.cancelURLEnrichment();\n      const linkPreviews = linkPreviewsManager.loadedPreviews.map((preview) =>\n        LinkPreviewsManager.getPreviewData(preview),\n      );\n\n      if (!linkPreviews.length) return forward();\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          attachments: (state.draft.attachments ?? []).concat(linkPreviews),\n        },\n      });\n    },\n  },\n});\n","import type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\n\nexport const createTextComposerCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/text-composition',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      if (!composer.textComposer) return forward();\n      const { mentionedUsers, text } = composer.textComposer;\n      // Instead of checking if a user is still mentioned every time the text changes,\n      // just filter out non-mentioned users before submit, which is cheaper\n      // and allows users to easily undo any accidental deletion\n      const mentioned_users = Array.from(\n        new Set(\n          mentionedUsers.filter(\n            ({ id, name }) => text.includes(`@${id}`) || text.includes(`@${name}`),\n          ),\n        ),\n      );\n\n      // prevent introducing text and mentioned_users array into the payload sent to the server\n      if (!text && mentioned_users.length === 0) return forward();\n\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          mentioned_users,\n          text,\n        },\n        message: {\n          ...state.message,\n          mentioned_users: mentioned_users.map((u) => u.id),\n          text,\n        },\n      });\n    },\n  },\n});\n\nexport const createDraftTextComposerCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-text-composition',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      if (!composer.textComposer) return forward();\n      const { maxLengthOnSend } = composer.config.text ?? {};\n      const { mentionedUsers, text: inputText } = composer.textComposer;\n      // Instead of checking if a user is still mentioned every time the text changes,\n      // just filter out non-mentioned users before submit, which is cheaper\n      // and allows users to easily undo any accidental deletion\n      const mentioned_users = mentionedUsers.length\n        ? Array.from(\n            new Set(\n              mentionedUsers.filter(\n                ({ id, name }) =>\n                  inputText.includes(`@${id}`) || inputText.includes(`@${name}`),\n              ),\n            ),\n          )\n        : undefined;\n\n      const text =\n        typeof maxLengthOnSend === 'number' && inputText.length > maxLengthOnSend\n          ? inputText.slice(0, maxLengthOnSend)\n          : inputText;\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          mentioned_users: mentioned_users?.map((u) => u.id),\n          text,\n        },\n      });\n    },\n  },\n});\n","import type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from './types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { LocalMessage, LocalMessageBase } from '../../../types';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\n\nexport const createMessageComposerStateCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/own-state',\n  handlers: {\n    compose: ({\n      state,\n      next,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const payload: Pick<\n        LocalMessage,\n        'poll_id' | 'quoted_message_id' | 'show_in_channel'\n      > = {};\n      if (composer.quotedMessage) {\n        payload.quoted_message_id = composer.quotedMessage.id;\n      }\n      if (composer.pollId) {\n        payload.poll_id = composer.pollId;\n      }\n\n      if (composer.showReplyInChannel) {\n        payload.show_in_channel = true;\n      }\n\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...payload,\n          quoted_message: (composer.quotedMessage as LocalMessageBase) ?? undefined,\n        },\n        message: {\n          ...state.message,\n          ...payload,\n        },\n      });\n    },\n  },\n});\n\nexport const createDraftMessageComposerStateCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/draft-own-state',\n  handlers: {\n    compose: ({\n      state,\n      next,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const payload: Pick<\n        LocalMessage,\n        'poll_id' | 'quoted_message_id' | 'show_in_channel'\n      > = {};\n      if (composer.quotedMessage) {\n        payload.quoted_message_id = composer.quotedMessage.id;\n      }\n      if (composer.pollId) {\n        payload.poll_id = composer.pollId;\n      }\n\n      if (composer.showReplyInChannel) {\n        payload.show_in_channel = true;\n      }\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          ...payload,\n        },\n      });\n    },\n  },\n});\n","import type { MessageComposer } from '../../messageComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n} from './types';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\nimport type { OwnUserResponse } from '../../../types';\n\nexport const createUserDataInjectionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/user-data-injection',\n  handlers: {\n    compose: ({\n      state,\n      next,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      if (!composer.client.user) {\n        return forward();\n      }\n      // Exclude the following properties from client.user as they can be large objects\n      // that provide no value for localMessage (and will never exist within message.user).\n      // This way we make sure that our localMessage is enriched with data as close as\n      // possible to the actual user.\n      // The reason why we need to explicitly cast is because OwnUserResponse only takes\n      // precedence after we connectUser the first time and we get the connection health\n      // check event. Due to how liberal the type of client.user is, we have to do it this\n      // way to maintain type safety.\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { channel_mutes, devices, mutes, ...messageUser } = composer.client\n        .user as OwnUserResponse;\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          user: messageUser,\n          user_id: messageUser.id,\n        },\n      });\n    },\n  },\n});\n","import type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n} from './types';\nimport type { MessageComposer } from '../../messageComposer';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\nimport type { LocalMessage } from '../../../types';\n\nconst pollLocalMessageNullifiedFields: Pick<\n  LocalMessage,\n  'attachments' | 'mentioned_users' | 'parent_id' | 'quoted_message' | 'text'\n> = {\n  attachments: [],\n  mentioned_users: [],\n  parent_id: undefined,\n  quoted_message: undefined,\n  text: '',\n};\n\nexport const createPollOnlyCompositionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  id: 'stream-io/message-composer-middleware/poll-only',\n  handlers: {\n    compose: ({\n      state,\n      complete,\n      forward,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const pollId = composer.pollId;\n      const isEditingMessage = !!composer.editedMessage;\n      const isComposingThreadReply = !!composer.threadId;\n      if (!pollId || isComposingThreadReply || isEditingMessage) return forward();\n\n      return complete({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          ...pollLocalMessageNullifiedFields,\n          poll_id: pollId,\n        },\n        message: {\n          id: state.localMessage.id,\n          poll_id: pollId,\n        },\n      });\n    },\n  },\n});\n","import { MiddlewareExecutor } from '../../../middleware';\nimport {\n  createDraftTextComposerCompositionMiddleware,\n  createTextComposerCompositionMiddleware,\n} from './textComposer';\nimport {\n  createAttachmentsCompositionMiddleware,\n  createDraftAttachmentsCompositionMiddleware,\n} from './attachments';\nimport {\n  createDraftLinkPreviewsCompositionMiddleware,\n  createLinkPreviewsCompositionMiddleware,\n} from './linkPreviews';\nimport {\n  createDraftMessageComposerStateCompositionMiddleware,\n  createMessageComposerStateCompositionMiddleware,\n} from './messageComposerState';\nimport {\n  createCompositionValidationMiddleware,\n  createDraftCompositionValidationMiddleware,\n} from './compositionValidation';\nimport { createCompositionDataCleanupMiddleware } from './cleanData';\nimport type {\n  MessageComposerMiddlewareExecutorOptions,\n  MessageComposerMiddlewareState,\n  MessageDraftComposerMiddlewareExecutorOptions,\n  MessageDraftComposerMiddlewareValueState,\n} from './types';\nimport {\n  createCustomDataCompositionMiddleware,\n  createDraftCustomDataCompositionMiddleware,\n} from './customData';\nimport { createUserDataInjectionMiddleware } from './userDataInjection';\nimport { createPollOnlyCompositionMiddleware } from './pollOnly';\n\nexport class MessageComposerMiddlewareExecutor extends MiddlewareExecutor<\n  MessageComposerMiddlewareState,\n  'compose'\n> {\n  constructor({ composer }: MessageComposerMiddlewareExecutorOptions) {\n    super();\n    // todo: document how to add custom data to a composed message using middleware\n    //  or adding custom composer components (apart from AttachmentsManager, TextComposer etc.)\n    this.use([\n      createUserDataInjectionMiddleware(composer),\n      createPollOnlyCompositionMiddleware(composer),\n      createTextComposerCompositionMiddleware(composer),\n      createAttachmentsCompositionMiddleware(composer),\n      createLinkPreviewsCompositionMiddleware(composer),\n      createMessageComposerStateCompositionMiddleware(composer),\n      createCustomDataCompositionMiddleware(composer),\n      createCompositionValidationMiddleware(composer),\n      createCompositionDataCleanupMiddleware(composer),\n    ]);\n  }\n}\n\nexport class MessageDraftComposerMiddlewareExecutor extends MiddlewareExecutor<\n  MessageDraftComposerMiddlewareValueState,\n  'compose'\n> {\n  constructor({ composer }: MessageDraftComposerMiddlewareExecutorOptions) {\n    super();\n    // todo: document how to add custom data to a composed message using middleware\n    //  or adding custom composer components (apart from AttachmentsManager, TextComposer etc.)\n    this.use([\n      createDraftTextComposerCompositionMiddleware(composer),\n      createDraftAttachmentsCompositionMiddleware(composer),\n      createDraftLinkPreviewsCompositionMiddleware(composer),\n      createDraftMessageComposerStateCompositionMiddleware(composer),\n      createDraftCustomDataCompositionMiddleware(composer),\n      createDraftCompositionValidationMiddleware(composer),\n    ]);\n  }\n}\n","import type { MessageComposer } from '../../messageComposer';\nimport type {\n  MessageComposerMiddlewareState,\n  MessageCompositionMiddleware,\n  MessageDraftComposerMiddlewareValueState,\n  MessageDraftCompositionMiddleware,\n} from '../messageComposer/types';\nimport type { MiddlewareHandlerParams } from '../../../middleware';\n\nexport const createCommandInjectionMiddleware = (\n  composer: MessageComposer,\n): MessageCompositionMiddleware => ({\n  handlers: {\n    compose: ({\n      forward,\n      next,\n      state,\n    }: MiddlewareHandlerParams<MessageComposerMiddlewareState>) => {\n      const command = composer.textComposer.command;\n      if (!command) {\n        return forward();\n      }\n      const { text } = state.localMessage;\n\n      const injection = `/${command?.name}`;\n      const enrichedText = `${injection} ${text}`;\n\n      return next({\n        ...state,\n        localMessage: {\n          ...state.localMessage,\n          text: enrichedText,\n        },\n        message: {\n          ...state.message,\n          text: enrichedText,\n        },\n      });\n    },\n  },\n  id: 'stream-io/message-composer-middleware/command-string-injection',\n});\n\nexport const createDraftCommandInjectionMiddleware = (\n  composer: MessageComposer,\n): MessageDraftCompositionMiddleware => ({\n  handlers: {\n    compose: ({\n      forward,\n      next,\n      state,\n    }: MiddlewareHandlerParams<MessageDraftComposerMiddlewareValueState>) => {\n      const command = composer.textComposer.command;\n      if (!command) {\n        return forward();\n      }\n      const { text } = state.draft;\n\n      const injection = `/${command?.name}`;\n      const enrichedText = `${injection} ${text}`;\n\n      return next({\n        ...state,\n        draft: {\n          ...state.draft,\n          text: enrichedText,\n        },\n      });\n    },\n  },\n  id: 'stream-io/message-composer-middleware/draft-command-string-injection',\n});\n","import type { Middleware } from '../../../middleware';\nimport type { TextComposerMiddlewareExecutorState } from './TextComposerMiddlewareExecutor';\n\nexport type PreCommandMiddleware = Middleware<\n  TextComposerMiddlewareExecutorState,\n  'onChange' | 'onSuggestionItemSelect'\n>;\n\nexport const createActiveCommandGuardMiddleware = (): PreCommandMiddleware => ({\n  handlers: {\n    onChange: ({ complete, forward, state }) => {\n      if (state.command) {\n        return complete(state);\n      }\n      return forward();\n    },\n    onSuggestionItemSelect: ({ forward }) => forward(),\n  },\n  id: 'stream-io/text-composer/active-command-guard',\n});\n","import { StateStore } from '../store';\nimport { debounce, type DebouncedFunc } from '../utils';\nimport type {\n  QueryReturnValue,\n  SearchSourceOptions,\n  SearchSourceState,\n  SearchSourceType,\n} from './types';\n\nexport type DebounceOptions = {\n  debounceMs: number;\n};\ntype DebouncedExecQueryFunction = DebouncedFunc<(searchString?: string) => Promise<void>>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface ISearchSource<T = any> {\n  activate(): void;\n\n  canExecuteQuery(newSearchString?: string): boolean;\n\n  deactivate(): void;\n\n  readonly hasNext: boolean;\n  readonly hasResults: boolean;\n  readonly initialState: SearchSourceState<T>;\n  readonly isActive: boolean;\n  readonly isLoading: boolean;\n  readonly items: T[] | undefined;\n  readonly lastQueryError: Error | undefined;\n  readonly next: string | undefined | null;\n  readonly offset: number | undefined;\n\n  resetState(): void;\n\n  readonly searchQuery: string;\n\n  readonly state: StateStore<SearchSourceState<T>>;\n  readonly type: SearchSourceType;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface SearchSource<T = any> extends ISearchSource<T> {\n  cancelScheduledQuery(): void;\n  setDebounceOptions(options: DebounceOptions): void;\n  search(text?: string): Promise<void> | undefined;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface SearchSourceSync<T = any> extends ISearchSource<T> {\n  cancelScheduledQuery(): void;\n  setDebounceOptions(options: DebounceOptions): void;\n  search(text?: string): void;\n}\n\nconst DEFAULT_SEARCH_SOURCE_OPTIONS: Required<SearchSourceOptions> = {\n  debounceMs: 300,\n  pageSize: 10,\n} as const;\n\nabstract class BaseSearchSourceBase<T> implements ISearchSource<T> {\n  state: StateStore<SearchSourceState<T>>;\n  protected pageSize: number;\n  abstract readonly type: SearchSourceType;\n\n  protected constructor(options?: SearchSourceOptions) {\n    const { pageSize } = { ...DEFAULT_SEARCH_SOURCE_OPTIONS, ...options };\n    this.pageSize = pageSize;\n    this.state = new StateStore<SearchSourceState<T>>(this.initialState);\n  }\n\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n\n  get initialState() {\n    return {\n      hasNext: true,\n      isActive: false,\n      isLoading: false,\n      items: undefined,\n      lastQueryError: undefined,\n      next: undefined,\n      offset: 0,\n      searchQuery: '',\n    };\n  }\n\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n\n  get next() {\n    return this.state.getLatestValue().next;\n  }\n\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  activate = () => {\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  deactivate = () => {\n    if (!this.isActive) return;\n    this.state.partialNext({ isActive: false });\n  };\n\n  canExecuteQuery = (newSearchString?: string) => {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    const searchString = newSearchString ?? this.searchQuery;\n    return !!(\n      this.isActive &&\n      !this.isLoading &&\n      (this.hasNext || hasNewSearchQuery) &&\n      searchString\n    );\n  };\n\n  protected getStateBeforeFirstQuery(newSearchString: string): SearchSourceState<T> {\n    return {\n      ...this.initialState,\n      isActive: this.isActive,\n      isLoading: true,\n      searchQuery: newSearchString,\n    };\n  }\n\n  protected getStateAfterQuery(\n    stateUpdate: Partial<SearchSourceState<T>>,\n    isFirstPage: boolean,\n  ): SearchSourceState<T> {\n    const current = this.state.getLatestValue();\n    return {\n      ...current,\n      lastQueryError: undefined, // reset lastQueryError that can be overridden by the stateUpdate\n      ...stateUpdate,\n      isLoading: false,\n      items: isFirstPage\n        ? stateUpdate.items\n        : [...(this.items ?? []), ...(stateUpdate.items || [])],\n    };\n  }\n\n  protected prepareStateForQuery(newSearchString?: string) {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    const searchString = newSearchString ?? this.searchQuery;\n\n    if (hasNewSearchQuery) {\n      this.state.next(this.getStateBeforeFirstQuery(newSearchString ?? ''));\n    } else {\n      this.state.partialNext({ isLoading: true });\n    }\n\n    return { searchString, hasNewSearchQuery };\n  }\n\n  protected updatePaginationStateFromQuery(result: QueryReturnValue<T>) {\n    const { items, next } = result;\n\n    const stateUpdate: Partial<SearchSourceState<T>> = {};\n    if (next || next === null) {\n      stateUpdate.next = next;\n      stateUpdate.hasNext = !!next;\n    } else {\n      stateUpdate.offset = (this.offset ?? 0) + items.length;\n      stateUpdate.hasNext = items.length === this.pageSize;\n    }\n\n    return stateUpdate;\n  }\n\n  resetState() {\n    this.state.next(this.initialState);\n  }\n\n  resetStateAndActivate() {\n    this.resetState();\n    this.activate();\n  }\n}\n\nexport abstract class BaseSearchSource<T>\n  extends BaseSearchSourceBase<T>\n  implements SearchSource<T>\n{\n  protected searchDebounced!: DebouncedExecQueryFunction;\n\n  constructor(options?: SearchSourceOptions) {\n    const { debounceMs } = { ...DEFAULT_SEARCH_SOURCE_OPTIONS, ...options };\n    super(options);\n    this.setDebounceOptions({ debounceMs });\n  }\n\n  protected abstract query(searchQuery: string): Promise<QueryReturnValue<T>>;\n\n  protected abstract filterQueryResults(items: T[]): T[] | Promise<T[]>;\n\n  setDebounceOptions = ({ debounceMs }: DebounceOptions) => {\n    this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n  };\n\n  async executeQuery(newSearchString?: string) {\n    if (!this.canExecuteQuery(newSearchString)) return;\n\n    const { hasNewSearchQuery, searchString } =\n      this.prepareStateForQuery(newSearchString);\n\n    let stateUpdate: Partial<SearchSourceState<T>> = {};\n    try {\n      const results = await this.query(searchString);\n      if (!results) return;\n\n      const { items } = results;\n      stateUpdate = this.updatePaginationStateFromQuery(results);\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e as Error;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, hasNewSearchQuery));\n    }\n  }\n\n  search = (searchQuery?: string) => this.searchDebounced(searchQuery);\n\n  cancelScheduledQuery() {\n    this.searchDebounced.cancel();\n  }\n}\n\nexport abstract class BaseSearchSourceSync<T>\n  extends BaseSearchSourceBase<T>\n  implements SearchSourceSync<T>\n{\n  protected searchDebounced!: DebouncedExecQueryFunction;\n\n  constructor(options?: SearchSourceOptions) {\n    const { debounceMs } = { ...DEFAULT_SEARCH_SOURCE_OPTIONS, ...options };\n    super(options);\n    this.setDebounceOptions({ debounceMs });\n  }\n\n  protected abstract query(searchQuery: string): QueryReturnValue<T>;\n\n  protected abstract filterQueryResults(items: T[]): T[];\n\n  setDebounceOptions = ({ debounceMs }: DebounceOptions) => {\n    this.searchDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n  };\n\n  executeQuery(newSearchString?: string) {\n    if (!this.canExecuteQuery(newSearchString)) return;\n\n    const { hasNewSearchQuery, searchString } =\n      this.prepareStateForQuery(newSearchString);\n\n    let stateUpdate: Partial<SearchSourceState<T>> = {};\n    try {\n      const results = this.query(searchString);\n      if (!results) return;\n\n      const { items } = results;\n      stateUpdate = this.updatePaginationStateFromQuery(results);\n      stateUpdate.items = this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e as Error;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, hasNewSearchQuery));\n    }\n  }\n\n  search = (searchQuery?: string) => this.searchDebounced(searchQuery);\n\n  cancelScheduledQuery() {\n    this.searchDebounced.cancel();\n  }\n}\n","import { StateStore } from '../store';\nimport type { MessageResponse } from '../types';\nimport type { SearchSource } from './BaseSearchSource';\n\nexport type SearchControllerState = {\n  isActive: boolean;\n  searchQuery: string;\n  sources: SearchSource[];\n};\n\nexport type InternalSearchControllerState = {\n  // FIXME: focusedMessage should live in a MessageListController class that does not exist yet.\n  //  This state prop should be then removed\n  focusedMessage?: MessageResponse;\n};\n\nexport type SearchControllerConfig = {\n  // The controller will make sure there is always exactly one active source. Enabled by default.\n  keepSingleActiveSource: boolean;\n};\n\nexport type SearchControllerOptions = {\n  config?: Partial<SearchControllerConfig>;\n  sources?: SearchSource[];\n};\n\nexport class SearchController {\n  /**\n   * Not intended for direct use by integrators, might be removed without notice resulting in\n   * broken integrations.\n   */\n  _internalState: StateStore<InternalSearchControllerState>;\n  state: StateStore<SearchControllerState>;\n  config: SearchControllerConfig;\n\n  constructor({ config, sources }: SearchControllerOptions = {}) {\n    this.state = new StateStore<SearchControllerState>({\n      isActive: false,\n      searchQuery: '',\n      sources: sources ?? [],\n    });\n    this._internalState = new StateStore<InternalSearchControllerState>({});\n    this.config = { keepSingleActiveSource: true, ...config };\n  }\n  get hasNext() {\n    return this.sources.some((source) => source.hasNext);\n  }\n\n  get sources() {\n    return this.state.getLatestValue().sources;\n  }\n\n  get activeSources() {\n    return this.state.getLatestValue().sources.filter((s) => s.isActive);\n  }\n\n  get isActive() {\n    return this.state.getLatestValue().isActive;\n  }\n\n  get searchQuery() {\n    return this.state.getLatestValue().searchQuery;\n  }\n\n  get searchSourceTypes(): Array<SearchSource['type']> {\n    return this.sources.map((s) => s.type);\n  }\n\n  addSource = (source: SearchSource) => {\n    this.state.partialNext({\n      sources: [...this.sources, source],\n    });\n  };\n\n  getSource = (sourceType: SearchSource['type']) =>\n    this.sources.find((s) => s.type === sourceType);\n\n  removeSource = (sourceType: SearchSource['type']) => {\n    const newSources = this.sources.filter((s) => s.type !== sourceType);\n    if (newSources.length === this.sources.length) return;\n    this.state.partialNext({ sources: newSources });\n  };\n\n  activateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source || source.isActive) return;\n    if (this.config.keepSingleActiveSource) {\n      this.sources.forEach((s) => {\n        if (s.type !== sourceType) {\n          s.deactivate();\n        }\n      });\n    }\n    source.activate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  deactivateSource = (sourceType: SearchSource['type']) => {\n    const source = this.getSource(sourceType);\n    if (!source?.isActive) return;\n    if (this.activeSources.length === 1) return;\n    source.deactivate();\n    this.state.partialNext({ sources: [...this.sources] });\n  };\n\n  activate = () => {\n    if (!this.activeSources.length) {\n      const sourcesToActivate = this.config.keepSingleActiveSource\n        ? this.sources.slice(0, 1)\n        : this.sources;\n      sourcesToActivate.forEach((s) => s.activate());\n    }\n    if (this.isActive) return;\n    this.state.partialNext({ isActive: true });\n  };\n\n  search = async (searchQuery?: string) => {\n    const searchedSources = this.activeSources;\n    this.state.partialNext({\n      searchQuery,\n    });\n    await Promise.all(searchedSources.map((source) => source.search(searchQuery)));\n  };\n\n  cancelSearchQueries = () => {\n    this.activeSources.forEach((s) => s.cancelScheduledQuery());\n  };\n\n  clear = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) =>\n      source.state.next({ ...source.initialState, isActive: source.isActive }),\n    );\n    this.state.next((current) => ({\n      ...current,\n      isActive: true,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n\n  exit = () => {\n    this.cancelSearchQueries();\n    this.sources.forEach((source) =>\n      source.state.next({ ...source.initialState, isActive: source.isActive }),\n    );\n    this.state.next((current) => ({\n      ...current,\n      isActive: false,\n      queriesInProgress: [],\n      searchQuery: '',\n    }));\n  };\n}\n","import { BaseSearchSource } from './BaseSearchSource';\nimport type { StreamChat } from '../client';\nimport type { UserFilters, UserOptions, UserResponse, UserSort } from '../types';\nimport type { SearchSourceOptions } from './types';\n\nexport class UserSearchSource extends BaseSearchSource<UserResponse> {\n  readonly type = 'users';\n  private client: StreamChat;\n  filters: UserFilters | undefined;\n  sort: UserSort | undefined;\n  searchOptions: Omit<UserOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      $or: [\n        { id: { $autocomplete: searchQuery } },\n        { name: { $autocomplete: searchQuery } },\n      ],\n      ...this.filters,\n    } as UserFilters;\n    const sort = { id: 1, ...this.sort } as UserSort;\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const { users } = await this.client.queryUsers(filters, sort, options);\n    return { items: users };\n  }\n\n  protected filterQueryResults(items: UserResponse[]) {\n    return items.filter((u) => u.id !== this.client.user?.id);\n  }\n}\n","import { BaseSearchSource } from './BaseSearchSource';\nimport type { Channel } from '../channel';\nimport type { StreamChat } from '../client';\nimport type { ChannelFilters, ChannelOptions, ChannelSort } from '../types';\nimport type { SearchSourceOptions } from './types';\n\nexport class ChannelSearchSource extends BaseSearchSource<Channel> {\n  readonly type = 'channels';\n  private client: StreamChat;\n  filters: ChannelFilters | undefined;\n  sort: ChannelSort | undefined;\n  searchOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    const filters = {\n      members: { $in: [this.client.userID] },\n      name: { $autocomplete: searchQuery },\n      ...this.filters,\n    } as ChannelFilters;\n    const sort = this.sort ?? {};\n    const options = { ...this.searchOptions, limit: this.pageSize, offset: this.offset };\n    const items = await this.client.queryChannels(filters, sort, options);\n    return { items };\n  }\n\n  protected filterQueryResults(items: Channel[]) {\n    return items;\n  }\n}\n","import { BaseSearchSource } from './BaseSearchSource';\nimport type {\n  ChannelFilters,\n  ChannelOptions,\n  ChannelSort,\n  MessageFilters,\n  MessageResponse,\n  SearchMessageSort,\n  SearchOptions,\n} from '../types';\nimport type { StreamChat } from '../client';\nimport type { SearchSourceOptions } from './types';\n\nexport class MessageSearchSource extends BaseSearchSource<MessageResponse> {\n  readonly type = 'messages';\n  private client: StreamChat;\n  messageSearchChannelFilters: ChannelFilters | undefined;\n  messageSearchFilters: MessageFilters | undefined;\n  messageSearchSort: SearchMessageSort | undefined;\n  channelQueryFilters: ChannelFilters | undefined;\n  channelQuerySort: ChannelSort | undefined;\n  channelQueryOptions: Omit<ChannelOptions, 'limit' | 'offset'> | undefined;\n\n  constructor(client: StreamChat, options?: SearchSourceOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  protected async query(searchQuery: string) {\n    if (!this.client.userID) return { items: [] };\n\n    const channelFilters: ChannelFilters = {\n      members: { $in: [this.client.userID] },\n      ...this.messageSearchChannelFilters,\n    } as ChannelFilters;\n\n    const messageFilters: MessageFilters = {\n      text: searchQuery,\n      type: 'regular', // FIXME: type: 'reply' resp. do not filter by type and allow to jump to a message in a thread - missing support\n      ...this.messageSearchFilters,\n    } as MessageFilters;\n\n    const sort: SearchMessageSort = {\n      created_at: -1,\n      ...this.messageSearchSort,\n    };\n\n    const options = {\n      limit: this.pageSize,\n      next: this.next,\n      sort,\n    } as SearchOptions;\n\n    const { next, results } = await this.client.search(\n      channelFilters,\n      messageFilters,\n      options,\n    );\n    const items = results.map(({ message }) => message);\n\n    const cids = Array.from(\n      items.reduce((acc, message) => {\n        if (message.cid && !this.client.activeChannels[message.cid]) acc.add(message.cid);\n        return acc;\n      }, new Set<string>()), // keep the cids unique\n    );\n    const allChannelsLoadedLocally = cids.length === 0;\n    if (!allChannelsLoadedLocally) {\n      await this.client.queryChannels(\n        {\n          cid: { $in: cids },\n          ...this.channelQueryFilters,\n        } as ChannelFilters,\n        {\n          last_message_at: -1,\n          ...this.channelQuerySort,\n        },\n        this.channelQueryOptions,\n      );\n    }\n\n    return { items, next };\n  }\n\n  protected filterQueryResults(items: MessageResponse[]) {\n    return items;\n  }\n}\n","import type { TextSelection } from './types';\n\n/**\n * For commands, we want to match all patterns except:\n * 1. Text not starting with trigger\n * 2. Trigger in middle of text\n */\nexport const getTriggerCharWithToken = ({\n  trigger,\n  text,\n  isCommand = false,\n  acceptTrailingSpaces = true,\n}: {\n  trigger: string;\n  text: string;\n  isCommand?: boolean;\n  acceptTrailingSpaces?: boolean;\n}) => {\n  const triggerNorWhitespace = `[^\\\\s${trigger}]*`;\n\n  const match = text.match(\n    new RegExp(\n      isCommand\n        ? `^[${trigger}]${triggerNorWhitespace}$`\n        : acceptTrailingSpaces\n          ? `(?!^|\\\\W)?[${trigger}]${triggerNorWhitespace}\\\\s?${triggerNorWhitespace}$`\n          : `(?!^|\\\\W)?[${trigger}]${triggerNorWhitespace}$`,\n      'g',\n    ),\n  );\n\n  return match && match[match.length - 1].trim();\n};\n\nexport const getCompleteCommandInString = (text: string) => {\n  // starts with \"/\" followed by 1+ non-whitespace chars followed by 1+ white-space chars\n  // the comand name is extracted into a separate group\n  const match = text.match(/^\\/(\\S+)\\s+.*/);\n  const commandName = match && match[1];\n  return commandName;\n};\n\nexport const insertItemWithTrigger = ({\n  insertText,\n  selection,\n  text,\n  trigger,\n}: {\n  insertText: string;\n  selection: TextSelection;\n  text: string;\n  trigger: string;\n}) => {\n  const beforeCursor = text.slice(0, selection.end);\n  const afterCursor = text.slice(selection.end);\n\n  // Replace the trigger and query with the user mention\n  const lastIndex = beforeCursor.lastIndexOf(trigger);\n  const newText = beforeCursor.slice(0, lastIndex) + insertText + afterCursor;\n  return {\n    text: newText,\n    selection: {\n      start: lastIndex + insertText.length,\n      end: lastIndex + insertText.length,\n    },\n  };\n};\n\nexport const replaceWordWithEntity = async ({\n  caretPosition,\n  getEntityString,\n  text,\n}: {\n  caretPosition: number;\n  getEntityString: (word: string) => Promise<string | null> | string | null;\n  text: string;\n}): Promise<string> => {\n  const lastWordRegex = /([^\\s]+)(\\s*)$/;\n  const match = lastWordRegex.exec(text.slice(0, caretPosition));\n  if (!match) return text;\n\n  const lastWord = match[1];\n  if (!lastWord) return text;\n\n  const spaces = match[2];\n\n  const newWord = await getEntityString(lastWord);\n  if (newWord == null) return text;\n\n  const textBeforeWord = text.slice(0, caretPosition - match[0].length);\n  const textAfterCaret = text.slice(caretPosition, -1);\n  return textBeforeWord + newWord + spaces + textAfterCaret;\n};\n\n/**\n * Escapes a string for use in a regular expression\n * @param text - The string to escape\n * @returns The escaped string\n * What does this regex do?\n\n The regex escapes special regex characters by adding a backslash before them. Here's what it matches:\n - dash\n [ ] square brackets\n { } curly braces\n ( ) parentheses\n * asterisk\n + plus\n ? question mark\n . period\n , comma\n / forward slash\n \\ backslash\n ^ caret\n $ dollar sign\n | pipe\n # hash\n\n The \\\\$& replacement adds a backslash before any matched character.\n This is needed when you want to use these characters literally\n in a regex pattern instead of their special regex meanings.\n For example:\n escapeRegExp(\"hello.world\")  // Returns: \"hello\\.world\"\n escapeRegExp(\"[test]\")       // Returns: \"\\[test\\]\"\n\n This is commonly used when building dynamic regex patterns from user input to prevent special characters from being interpreted as regex syntax.\n */\nexport function escapeRegExp(text: string) {\n  return text.replace(/[-[\\]{}()*+?.,/\\\\^$|#]/g, '\\\\$&');\n}\n\nexport type TokenizationPayload = {\n  tokenizedDisplayName: { token: string; parts: string[] };\n};\n\nexport const getTokenizedSuggestionDisplayName = ({\n  displayName,\n  searchToken,\n}: {\n  displayName: string;\n  searchToken: string;\n}): TokenizationPayload => ({\n  tokenizedDisplayName: {\n    token: searchToken,\n    parts: searchToken\n      ? displayName\n          .split(new RegExp(`(${escapeRegExp(searchToken)})`, 'gi'))\n          .filter(Boolean)\n      : [displayName],\n  },\n});\n","import type { Channel } from '../../../channel';\nimport type { Middleware } from '../../../middleware';\nimport type { SearchSourceOptions } from '../../../search';\nimport { BaseSearchSourceSync } from '../../../search';\nimport type { CommandResponse } from '../../../types';\nimport { mergeWith } from '../../../utils/mergeWith';\nimport type { CommandSuggestion, TextComposerMiddlewareOptions } from './types';\nimport {\n  getCompleteCommandInString,\n  getTriggerCharWithToken,\n  insertItemWithTrigger,\n} from './textMiddlewareUtils';\nimport type { TextComposerMiddlewareExecutorState } from './TextComposerMiddlewareExecutor';\n\nexport class CommandSearchSource extends BaseSearchSourceSync<CommandSuggestion> {\n  readonly type = 'commands';\n  private channel: Channel;\n\n  constructor(channel: Channel, options?: SearchSourceOptions) {\n    super(options);\n    this.channel = channel;\n  }\n\n  canExecuteQuery = (newSearchString?: string) => {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    return this.isActive && !this.isLoading && (this.hasNext || hasNewSearchQuery);\n  };\n\n  getStateBeforeFirstQuery(newSearchString: string) {\n    const newState = super.getStateBeforeFirstQuery(newSearchString);\n    const { items } = this.state.getLatestValue();\n    return {\n      ...newState,\n      items, // preserve items to avoid flickering\n    };\n  }\n\n  query(searchQuery: string) {\n    const channelConfig = this.channel.getConfig();\n    const commands = channelConfig?.commands || [];\n    const selectedCommands: (CommandResponse & { name: string })[] = commands.filter(\n      (command): command is CommandResponse & { name: string } =>\n        !!(\n          command.name &&\n          command.name.toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1\n        ),\n    );\n\n    // sort alphabetically unless you're matching the first char\n    selectedCommands.sort((a, b) => {\n      let nameA = a.name?.toLowerCase();\n      let nameB = b.name?.toLowerCase();\n      if (nameA?.indexOf(searchQuery) === 0) {\n        nameA = `0${nameA}`;\n      }\n      if (nameB?.indexOf(searchQuery) === 0) {\n        nameB = `0${nameB}`;\n      }\n      // Should confirm possible null / undefined when TS is fully implemented\n      if (nameA != null && nameB != null) {\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n      }\n\n      return 0;\n    });\n\n    return {\n      items: selectedCommands.map((c) => ({ ...c, id: c.name })),\n      next: null,\n    };\n  }\n\n  protected filterQueryResults(items: CommandSuggestion[]) {\n    return items;\n  }\n}\n\n/**\n * TextComposer middleware for mentions\n * Usage:\n *\n *  const textComposer = new TextComposer(options);\n *\n *  textComposer.use(createCommandsMiddleware(channel, { trigger: '//', minChars: 2 } ));\n *\n * @param channel\n * @param {{ minChars: number; trigger: string }} options\n * @returns\n */\n\nconst DEFAULT_OPTIONS: TextComposerMiddlewareOptions = { minChars: 1, trigger: '/' };\n\nexport type CommandsMiddleware = Middleware<\n  TextComposerMiddlewareExecutorState<CommandSuggestion>,\n  'onChange' | 'onSuggestionItemSelect'\n>;\n\nexport const createCommandsMiddleware = (\n  channel: Channel,\n  options?: Partial<TextComposerMiddlewareOptions> & {\n    searchSource?: CommandSearchSource;\n  },\n): CommandsMiddleware => {\n  const finalOptions = mergeWith(DEFAULT_OPTIONS, options ?? {});\n  let searchSource = new CommandSearchSource(channel);\n  if (options?.searchSource) {\n    searchSource = options.searchSource;\n    searchSource.resetState();\n  }\n  searchSource.activate();\n\n  return {\n    id: 'stream-io/text-composer/commands-middleware',\n    handlers: {\n      onChange: ({ state, next, complete, forward }) => {\n        if (!state.selection) return forward();\n        const finalText = state.text.slice(0, state.selection.end);\n        const commandName = getCompleteCommandInString(finalText);\n        if (commandName) {\n          const command = searchSource?.query(commandName).items[0];\n          if (command) {\n            return next({\n              ...state,\n              command,\n              suggestions: undefined,\n            });\n          }\n        }\n\n        const triggerWithToken = getTriggerCharWithToken({\n          trigger: finalOptions.trigger,\n          text: finalText,\n          acceptTrailingSpaces: false,\n          isCommand: true,\n        });\n\n        const newSearchTriggerred =\n          triggerWithToken && triggerWithToken.length === finalOptions.minChars;\n\n        if (newSearchTriggerred) {\n          searchSource.resetStateAndActivate();\n        }\n\n        const triggerWasRemoved =\n          !triggerWithToken || triggerWithToken.length < finalOptions.minChars;\n\n        if (triggerWasRemoved) {\n          const hasStaleSuggestions = state.suggestions?.trigger === finalOptions.trigger;\n          const newState = { ...state };\n          if (hasStaleSuggestions) {\n            delete newState.suggestions;\n          }\n          return next(newState);\n        }\n\n        return complete({\n          ...state,\n          command: null,\n          suggestions: {\n            query: triggerWithToken.slice(1),\n            searchSource,\n            trigger: finalOptions.trigger,\n          },\n        });\n      },\n      onSuggestionItemSelect: ({ state, next, forward }) => {\n        const { selectedSuggestion } = state.change ?? {};\n        if (!selectedSuggestion || state.suggestions?.trigger !== finalOptions.trigger)\n          return forward();\n\n        searchSource.resetStateAndActivate();\n        return next({\n          ...state,\n          ...insertItemWithTrigger({\n            insertText: `/${selectedSuggestion.name} `,\n            selection: state.selection,\n            text: state.text,\n            trigger: finalOptions.trigger,\n          }),\n          command: selectedSuggestion,\n          suggestions: undefined,\n        });\n      },\n    },\n  };\n};\n","import type { TextComposerMiddlewareExecutorState } from './TextComposerMiddlewareExecutor';\nimport type { CommandSuggestion } from './types';\nimport type { Middleware } from '../../../middleware';\nimport { escapeRegExp } from './textMiddlewareUtils';\n\nexport type CommandStringExtractionMiddleware = Middleware<\n  TextComposerMiddlewareExecutorState<CommandSuggestion>,\n  'onChange' | 'onSuggestionItemSelect'\n>;\n\nconst stripCommandFromText = (text: string, commandName: string) =>\n  text.replace(new RegExp(`^${escapeRegExp(`/${commandName}`)}\\\\s*`), '');\n\nexport const createCommandStringExtractionMiddleware =\n  (): CommandStringExtractionMiddleware => ({\n    handlers: {\n      onChange: ({ complete, forward, state }) => {\n        const { command } = state;\n\n        if (!command?.name) {\n          return forward();\n        }\n\n        const newText = stripCommandFromText(state.text, command.name);\n\n        return complete({\n          ...state,\n          selection: {\n            end: newText.length,\n            start: newText.length,\n          },\n          text: newText,\n        });\n      },\n      onSuggestionItemSelect: ({ next, forward, state }) => {\n        const { command } = state;\n\n        if (!command) {\n          return forward();\n        }\n\n        const triggerWithCommand = `/${command?.name} `;\n\n        const newText = state.text.slice(triggerWithCommand.length);\n        return next({\n          ...state,\n          selection: {\n            end: newText.length,\n            start: newText.length,\n          },\n          text: newText,\n        });\n      },\n    },\n    id: 'stream-io/text-composer/command-string-extraction',\n  });\n","import {\n  getTokenizedSuggestionDisplayName,\n  getTriggerCharWithToken,\n  insertItemWithTrigger,\n} from './textMiddlewareUtils';\nimport { BaseSearchSource, type SearchSourceOptions } from '../../../search';\nimport { mergeWith } from '../../../utils/mergeWith';\nimport type { TextComposerMiddlewareOptions, UserSuggestion } from './types';\nimport type { StreamChat } from '../../../client';\nimport type {\n  MemberFilters,\n  MemberSort,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from '../../../types';\nimport type { Channel } from '../../../channel';\nimport { MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY } from '../../../constants';\nimport type { Middleware } from '../../../middleware';\nimport type { TextComposerMiddlewareExecutorState } from './TextComposerMiddlewareExecutor';\n\n// todo: the map is too small - Slavic letters with diacritics are missing for example\nexport const accentsMap: { [key: string]: string } = {\n  a: 'á|à|ã|â|À|Á|Ã|Â',\n  c: 'ç|Ç',\n  e: 'é|è|ê|É|È|Ê',\n  i: 'í|ì|î|Í|Ì|Î',\n  n: 'ñ|Ñ',\n  o: 'ó|ò|ô|ő|õ|Ó|Ò|Ô|Õ',\n  u: 'ú|ù|û|ü|Ú|Ù|Û|Ü',\n};\n\nexport const removeDiacritics = (text?: string) => {\n  if (!text) return '';\n  return Object.keys(accentsMap).reduce(\n    (acc, current) => acc.replace(new RegExp(accentsMap[current], 'g'), current),\n    text,\n  );\n};\n\nexport const calculateLevenshtein = (query: string, name: string) => {\n  if (query.length === 0) return name.length;\n  if (name.length === 0) return query.length;\n\n  const matrix = [];\n\n  let i;\n  for (i = 0; i <= name.length; i++) {\n    matrix[i] = [i];\n  }\n\n  let j;\n  for (j = 0; j <= query.length; j++) {\n    matrix[0][j] = j;\n  }\n\n  for (i = 1; i <= name.length; i++) {\n    for (j = 1; j <= query.length; j++) {\n      if (name.charAt(i - 1) === query.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1, // substitution\n          Math.min(\n            matrix[i][j - 1] + 1, // insertion\n            matrix[i - 1][j] + 1,\n          ),\n        ); // deletion\n      }\n    }\n  }\n\n  return matrix[name.length][query.length];\n};\n\nexport type MentionsSearchSourceOptions = SearchSourceOptions & {\n  mentionAllAppUsers?: boolean;\n  textComposerText?: string;\n  // todo: document that if you want transliteration, you need to provide the function, e.g. import {default: transliterate}  from '@sindresorhus/transliterate';\n  // this is now replacing a parameter useMentionsTransliteration\n  transliterate?: (text: string) => string;\n};\n\nexport class MentionsSearchSource extends BaseSearchSource<UserSuggestion> {\n  readonly type = 'mentions';\n  private client: StreamChat;\n  private channel: Channel;\n  userFilters: UserFilters | undefined;\n  memberFilters: MemberFilters | undefined;\n  userSort: UserSort | undefined;\n  memberSort: MemberSort | undefined; // todo: document there are filters and sort options for users and members\n  searchOptions: Omit<UserOptions, 'limit' | 'offset'> | undefined;\n  config: MentionsSearchSourceOptions;\n\n  constructor(channel: Channel, options?: MentionsSearchSourceOptions) {\n    const { mentionAllAppUsers, textComposerText, transliterate, ...restOptions } =\n      options || {};\n    super(restOptions);\n    this.client = channel.getClient();\n    this.channel = channel;\n    this.config = { mentionAllAppUsers, textComposerText };\n\n    if (transliterate) {\n      this.transliterate = transliterate;\n    }\n  }\n\n  get allMembersLoadedWithInitialChannelQuery() {\n    const countLoadedMembers = Object.keys(this.channel.state.members || {}).length;\n    return countLoadedMembers < MAX_CHANNEL_MEMBER_COUNT_IN_CHANNEL_QUERY;\n  }\n\n  getStateBeforeFirstQuery(newSearchString: string) {\n    const newState = super.getStateBeforeFirstQuery(newSearchString);\n    const { items } = this.state.getLatestValue();\n    return {\n      ...newState,\n      items, // preserve items to avoid flickering\n    };\n  }\n\n  canExecuteQuery = (newSearchString?: string) => {\n    const hasNewSearchQuery = typeof newSearchString !== 'undefined';\n    return this.isActive && !this.isLoading && (hasNewSearchQuery || this.hasNext);\n  };\n\n  transliterate = (text: string) => text;\n\n  getMembersAndWatchers = () => {\n    const memberUsers = Object.values(this.channel.state.members ?? {}).map(\n      ({ user }) => user,\n    );\n    const watcherUsers = Object.values(this.channel.state.watchers ?? {});\n    const users = [...memberUsers, ...watcherUsers];\n\n    const uniqueUsers = {} as Record<string, UserResponse>;\n\n    users.forEach((user) => {\n      if (user && !uniqueUsers[user.id]) {\n        uniqueUsers[user.id] = user;\n      }\n    });\n\n    return Object.values(uniqueUsers);\n  };\n\n  searchMembersLocally = (searchQuery: string) => {\n    const { textComposerText } = this.config;\n    if (!textComposerText) return [];\n\n    return this.getMembersAndWatchers()\n      .filter((user) => {\n        if (user.id === this.client.userID) return false;\n        if (!searchQuery) return true;\n\n        const updatedId = this.transliterate(removeDiacritics(user.id)).toLowerCase();\n        const updatedName = this.transliterate(removeDiacritics(user.name)).toLowerCase();\n        const updatedQuery = this.transliterate(\n          removeDiacritics(searchQuery),\n        ).toLowerCase();\n\n        const maxDistance = 3;\n        const lastDigits = textComposerText.slice(-(maxDistance + 1)).includes('@');\n\n        if (updatedName) {\n          const levenshtein = calculateLevenshtein(updatedQuery, updatedName);\n          if (\n            updatedName.includes(updatedQuery) ||\n            (levenshtein <= maxDistance && lastDigits)\n          ) {\n            return true;\n          }\n        }\n\n        const levenshtein = calculateLevenshtein(updatedQuery, updatedId);\n\n        return (\n          updatedId.includes(updatedQuery) || (levenshtein <= maxDistance && lastDigits)\n        );\n      })\n      .sort((a, b) => {\n        if (!this.memberSort) return (a.name || '').localeCompare(b.name || '');\n\n        // Apply each sort criteria in order\n        for (const [field, direction] of Object.entries(this.memberSort)) {\n          const aValue = a[field as keyof UserResponse];\n          const bValue = b[field as keyof UserResponse];\n\n          if (aValue === bValue) continue;\n          return direction === 1\n            ? String(aValue || '').localeCompare(String(bValue || ''))\n            : String(bValue || '').localeCompare(String(aValue || ''));\n        }\n        return 0;\n      });\n  };\n\n  prepareQueryUsersParams = (searchQuery: string) => ({\n    filters: {\n      $or: [\n        { id: { $autocomplete: searchQuery } },\n        { name: { $autocomplete: searchQuery } },\n      ],\n      ...this.userFilters,\n    } as UserFilters,\n    sort: this.userSort ?? ([{ name: 1 }, { id: 1 }] as UserSort), // todo: document the change - the sort is overridden, not merged\n    options: { ...this.searchOptions, limit: this.pageSize, offset: this.offset },\n  });\n\n  prepareQueryMembersParams = (searchQuery: string) => {\n    // QueryMembers failed with error: \\\"sort must contain at maximum 1 item\\\"\n    const maxSortParamsCount = 1;\n    let sort: MemberSort = [{ user_id: 1 }];\n    if (!this.memberSort) {\n      sort = [{ user_id: 1 }];\n    } else if (Array.isArray(this.memberSort)) {\n      sort = this.memberSort[0];\n    } else if (Object.keys(this.memberSort).length === maxSortParamsCount) {\n      sort = this.memberSort;\n    } // todo: document the change - the sort is overridden, not merged\n    return {\n      // todo: document the change - the filter is overridden, not merged\n      filters:\n        this.memberFilters ?? ({ name: { $autocomplete: searchQuery } } as MemberFilters), // autocomplete possible only for name\n      sort,\n      options: { ...this.searchOptions, limit: this.pageSize, offset: this.offset },\n    };\n  };\n\n  queryUsers = async (searchQuery: string) => {\n    const { filters, sort, options } = this.prepareQueryUsersParams(searchQuery);\n    const { users } = await this.client.queryUsers(filters, sort, options);\n    return users;\n  };\n\n  queryMembers = async (searchQuery: string) => {\n    const { filters, sort, options } = this.prepareQueryMembersParams(searchQuery);\n    const response = await this.channel.queryMembers(filters, sort, options);\n\n    return response.members.map((member) => member.user) as UserResponse[];\n  };\n\n  async query(searchQuery: string) {\n    let users: UserResponse[];\n    const shouldSearchLocally =\n      this.allMembersLoadedWithInitialChannelQuery || !searchQuery;\n\n    if (this.config.mentionAllAppUsers) {\n      users = await this.queryUsers(searchQuery);\n    } else if (shouldSearchLocally) {\n      users = this.searchMembersLocally(searchQuery);\n    } else {\n      users = await this.queryMembers(searchQuery);\n    }\n\n    return {\n      items: users.map(\n        (user) =>\n          ({\n            ...user,\n            ...getTokenizedSuggestionDisplayName({\n              displayName: user.name || user.id,\n              searchToken: this.searchQuery,\n            }),\n          }) as UserSuggestion,\n      ),\n    };\n  }\n\n  filterMutes = (data: UserSuggestion[]) => {\n    const { textComposerText } = this.config;\n    if (!textComposerText) return [];\n\n    const { mutedUsers } = this.client;\n    if (textComposerText.includes('/unmute') && !mutedUsers.length) {\n      return [];\n    }\n    if (!mutedUsers.length) return data;\n\n    if (textComposerText.includes('/unmute')) {\n      return data.filter((suggestion) =>\n        mutedUsers.some((mute) => mute.target.id === suggestion.id),\n      );\n    }\n    return data.filter((suggestion) =>\n      mutedUsers.every((mute) => mute.target.id !== suggestion.id),\n    );\n  };\n\n  filterQueryResults(items: UserSuggestion[]) {\n    return this.filterMutes(items);\n  }\n}\n\nconst DEFAULT_OPTIONS: TextComposerMiddlewareOptions = { minChars: 1, trigger: '@' };\n\nconst userSuggestionToUserResponse = (suggestion: UserSuggestion): UserResponse => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { tokenizedDisplayName, ...userResponse } = suggestion;\n  return userResponse;\n};\n\n/**\n * TextComposer middleware for mentions\n * Usage:\n *\n *  const textComposer = new TextComposer(options);\n *\n *  textComposer.use(createMentionsMiddleware(channel, {\n *   trigger: '$',\n *   minChars: 2\n *  }));\n *\n * @param channel\n * @param {{\n *     minChars: number;\n *     trigger: string;\n *   }} options\n * @returns\n */\n\nexport type MentionsMiddleware = Middleware<\n  TextComposerMiddlewareExecutorState<UserSuggestion>,\n  'onChange' | 'onSuggestionItemSelect'\n>;\n\nexport const createMentionsMiddleware = (\n  channel: Channel,\n  options?: Partial<TextComposerMiddlewareOptions> & {\n    searchSource?: MentionsSearchSource;\n  },\n): MentionsMiddleware => {\n  const finalOptions = mergeWith(DEFAULT_OPTIONS, options ?? {});\n  let searchSource: MentionsSearchSource;\n  if (options?.searchSource) {\n    searchSource = options.searchSource;\n    searchSource.resetState();\n  } else {\n    searchSource = new MentionsSearchSource(channel);\n  }\n  searchSource.activate();\n  return {\n    id: 'stream-io/text-composer/mentions-middleware',\n    handlers: {\n      onChange: ({ state, next, complete, forward }) => {\n        if (!state.selection) return forward();\n\n        const triggerWithToken = getTriggerCharWithToken({\n          trigger: finalOptions.trigger,\n          text: state.text.slice(0, state.selection.end),\n        });\n\n        const newSearchTriggered =\n          triggerWithToken && triggerWithToken.length === finalOptions.minChars;\n\n        if (newSearchTriggered) {\n          searchSource.resetStateAndActivate();\n        }\n\n        const triggerWasRemoved =\n          !triggerWithToken || triggerWithToken.length < finalOptions.minChars;\n\n        if (triggerWasRemoved) {\n          const hasStaleSuggestions = state.suggestions?.trigger === finalOptions.trigger;\n          const newState = { ...state };\n          if (hasStaleSuggestions) {\n            delete newState.suggestions;\n          }\n          return next(newState);\n        }\n\n        searchSource.config.textComposerText = state.text;\n\n        return complete({\n          ...state,\n          suggestions: {\n            query: triggerWithToken.slice(1),\n            searchSource,\n            trigger: finalOptions.trigger,\n          },\n        });\n      },\n      onSuggestionItemSelect: ({ state, complete, forward }) => {\n        const { selectedSuggestion } = state.change ?? {};\n        if (!selectedSuggestion || state.suggestions?.trigger !== finalOptions.trigger)\n          return forward();\n\n        searchSource.resetStateAndActivate();\n        return complete({\n          ...state,\n          ...insertItemWithTrigger({\n            insertText: `@${selectedSuggestion.name || selectedSuggestion.id} `,\n            selection: state.selection,\n            text: state.text,\n            trigger: finalOptions.trigger,\n          }),\n          mentionedUsers: state.mentionedUsers.concat(\n            userSuggestionToUserResponse(selectedSuggestion),\n          ),\n          suggestions: undefined,\n        });\n      },\n    },\n  };\n};\n","import type { MessageComposer } from '../../messageComposer';\nimport type { TextComposerMiddlewareExecutorState } from './TextComposerMiddlewareExecutor';\nimport type { Suggestion } from './types';\nimport type { Middleware } from '../../../middleware';\n\nexport type TextComposerPreValidationMiddleware = Middleware<\n  TextComposerMiddlewareExecutorState<Suggestion>,\n  'onChange' | 'onSuggestionItemSelect'\n>;\n\nexport const createTextComposerPreValidationMiddleware = (\n  composer: MessageComposer,\n): TextComposerPreValidationMiddleware => ({\n  id: 'stream-io/text-composer/pre-validation-middleware',\n  handlers: {\n    onChange: ({ state, next, forward }) => {\n      const { maxLengthOnEdit } = composer.config.text ?? {};\n      if (typeof maxLengthOnEdit === 'number' && state.text.length > maxLengthOnEdit) {\n        state.text = state.text.slice(0, maxLengthOnEdit);\n        return next({\n          ...state,\n          text: state.text,\n        });\n      }\n      return forward();\n    },\n    onSuggestionItemSelect: ({ forward }) => forward(),\n  },\n});\n","import { createCommandsMiddleware } from './commands';\nimport { createMentionsMiddleware } from './mentions';\nimport { createTextComposerPreValidationMiddleware } from './validation';\nimport { MiddlewareExecutor } from '../../../middleware';\nimport type {\n  ExecuteParams,\n  MiddlewareExecutionResult,\n  MiddlewareHandler,\n} from '../../../middleware';\nimport type {\n  Suggestion,\n  Suggestions,\n  TextComposerMiddlewareExecutorOptions,\n  TextComposerState,\n} from './types';\n\nexport type TextComposerMiddlewareExecutorState<T extends Suggestion = Suggestion> =\n  TextComposerState<T> & {\n    change?: {\n      selectedSuggestion?: T;\n    };\n  };\n\nexport type TextComposerHandlerNames = 'onChange' | 'onSuggestionItemSelect';\n\nexport type TextComposerMiddleware<T extends Suggestion = Suggestion> = {\n  id: string;\n  handlers: {\n    [K in TextComposerHandlerNames]: MiddlewareHandler<\n      TextComposerMiddlewareExecutorState<T>\n    >;\n  };\n};\n\nexport class TextComposerMiddlewareExecutor<\n  T extends Suggestion = Suggestion,\n> extends MiddlewareExecutor<\n  TextComposerMiddlewareExecutorState<T>,\n  TextComposerHandlerNames\n> {\n  constructor({ composer }: TextComposerMiddlewareExecutorOptions) {\n    super();\n    this.use([\n      createTextComposerPreValidationMiddleware(composer) as TextComposerMiddleware<T>,\n      createMentionsMiddleware(composer.channel) as TextComposerMiddleware<T>,\n      createCommandsMiddleware(composer.channel) as TextComposerMiddleware<T>,\n    ]);\n  }\n\n  async execute({\n    eventName,\n    initialValue: initialState,\n  }: ExecuteParams<TextComposerMiddlewareExecutorState<T>>): Promise<\n    MiddlewareExecutionResult<TextComposerMiddlewareExecutorState<T>>\n  > {\n    const result = await this.executeMiddlewareChain({\n      eventName,\n      initialValue: initialState,\n    });\n\n    const { query, searchSource } = result.state.suggestions ?? ({} as Suggestions);\n    /**\n     * Catching error just for sanity purposes.\n     * The BaseSearchSource.search() method returns debounced result.\n     * That means the result of the previous search call as the debounced call result is unknown at the moment.\n     * Custom search source implementation should handle errors meaningfully internally.\n     */\n    searchSource?.search(query)?.catch(console.error);\n\n    return result;\n  }\n}\n","import { TextComposerMiddlewareExecutor } from './middleware';\nimport { StateStore } from '../store';\nimport { logChatPromiseExecution } from '../utils';\nimport type { TextComposerSuggestion } from './middleware/textComposer/types';\nimport type { TextSelection } from './middleware/textComposer/types';\nimport type { TextComposerState } from './middleware/textComposer/types';\nimport type { Suggestions } from './middleware/textComposer/types';\nimport type { MessageComposer } from './messageComposer';\nimport type { CommandResponse, DraftMessage, LocalMessage, UserResponse } from '../types';\n\nexport type TextComposerOptions = {\n  composer: MessageComposer;\n  message?: DraftMessage | LocalMessage;\n};\n\nexport const textIsEmpty = (text: string) => {\n  const trimmedText = text.trim();\n  return (\n    trimmedText === '' ||\n    trimmedText === '>' ||\n    trimmedText === '``````' ||\n    trimmedText === '``' ||\n    trimmedText === '**' ||\n    trimmedText === '____' ||\n    trimmedText === '__' ||\n    trimmedText === '****'\n  );\n};\n\nconst initState = ({\n  composer,\n  message,\n}: {\n  composer: MessageComposer;\n  message?: DraftMessage | LocalMessage;\n}): TextComposerState => {\n  if (!message) {\n    const text = composer.config.text.defaultValue ?? '';\n    return {\n      command: null,\n      mentionedUsers: [],\n      text,\n      selection: { start: text.length, end: text.length },\n    };\n  }\n  const text = message.text ?? '';\n  return {\n    mentionedUsers: (message.mentioned_users ?? []).map((item: string | UserResponse) =>\n      typeof item === 'string' ? ({ id: item } as UserResponse) : item,\n    ),\n    text,\n    selection: { start: text.length, end: text.length },\n  };\n};\n\nexport class TextComposer {\n  readonly composer: MessageComposer;\n  readonly state: StateStore<TextComposerState>;\n  middlewareExecutor: TextComposerMiddlewareExecutor;\n\n  constructor({ composer, message }: TextComposerOptions) {\n    this.composer = composer;\n    this.state = new StateStore<TextComposerState>(initState({ composer, message }));\n    this.middlewareExecutor = new TextComposerMiddlewareExecutor({ composer });\n  }\n\n  get channel() {\n    return this.composer.channel;\n  }\n\n  get config() {\n    return this.composer.config.text;\n  }\n\n  get enabled() {\n    return this.composer.config.text.enabled;\n  }\n\n  set enabled(enabled: boolean) {\n    if (enabled === this.enabled) return;\n    this.composer.updateConfig({ text: { enabled } });\n  }\n\n  get defaultValue() {\n    return this.composer.config.text.defaultValue;\n  }\n\n  set defaultValue(defaultValue: string | undefined) {\n    if (defaultValue === this.defaultValue) return;\n    this.composer.updateConfig({ text: { defaultValue } });\n  }\n\n  get maxLengthOnEdit() {\n    return this.composer.config.text.maxLengthOnEdit;\n  }\n\n  set maxLengthOnEdit(maxLengthOnEdit: number | undefined) {\n    if (maxLengthOnEdit === this.maxLengthOnEdit) return;\n    this.composer.updateConfig({ text: { maxLengthOnEdit } });\n  }\n\n  get maxLengthOnSend() {\n    return this.composer.config.text.maxLengthOnSend;\n  }\n\n  set maxLengthOnSend(maxLengthOnSend: number | undefined) {\n    if (maxLengthOnSend === this.maxLengthOnSend) return;\n    this.composer.updateConfig({ text: { maxLengthOnSend } });\n  }\n\n  get publishTypingEvents() {\n    return this.composer.config.text.publishTypingEvents;\n  }\n\n  set publishTypingEvents(publishTypingEvents: boolean) {\n    if (publishTypingEvents === this.publishTypingEvents) return;\n    this.composer.updateConfig({ text: { publishTypingEvents } });\n  }\n\n  // --- START STATE API ---\n\n  get command() {\n    return this.state.getLatestValue().command;\n  }\n\n  get mentionedUsers() {\n    return this.state.getLatestValue().mentionedUsers;\n  }\n\n  get selection() {\n    return this.state.getLatestValue().selection;\n  }\n\n  get suggestions() {\n    return this.state.getLatestValue().suggestions;\n  }\n\n  get text() {\n    return this.state.getLatestValue().text;\n  }\n\n  get textIsEmpty() {\n    return textIsEmpty(this.text);\n  }\n\n  initState = ({ message }: { message?: DraftMessage | LocalMessage } = {}) => {\n    this.state.next(initState({ composer: this.composer, message }));\n  };\n\n  setMentionedUsers(users: UserResponse[]) {\n    this.state.partialNext({ mentionedUsers: users });\n  }\n\n  clearCommand() {\n    this.state.partialNext({ command: null });\n  }\n\n  upsertMentionedUser = (user: UserResponse) => {\n    const mentionedUsers = [...this.mentionedUsers];\n    const existingUserIndex = mentionedUsers.findIndex((u) => u.id === user.id);\n    if (existingUserIndex >= 0) {\n      mentionedUsers.splice(existingUserIndex, 1, user);\n      this.state.partialNext({ mentionedUsers });\n    } else {\n      mentionedUsers.push(user);\n      this.state.partialNext({ mentionedUsers });\n    }\n  };\n\n  getMentionedUser = (userId: string) =>\n    this.state.getLatestValue().mentionedUsers.find((u: UserResponse) => u.id === userId);\n\n  removeMentionedUser = (userId: string) => {\n    const existingUserIndex = this.mentionedUsers.findIndex((u) => u.id === userId);\n    if (existingUserIndex === -1) return;\n    const mentionedUsers = [...this.mentionedUsers];\n    mentionedUsers.splice(existingUserIndex, 1);\n    this.state.partialNext({ mentionedUsers });\n  };\n\n  setCommand = (command: CommandResponse | null) => {\n    if (command?.name === this.command?.name) return;\n    this.state.partialNext({ command });\n  };\n\n  setText = (text: string) => {\n    if (!this.enabled || text === this.text) return;\n    this.state.partialNext({ text });\n  };\n\n  setSelection = (selection: TextSelection) => {\n    const selectionChanged =\n      selection.start !== this.selection.start || selection.end !== this.selection.end;\n    if (!this.enabled || !selectionChanged) return;\n    this.state.partialNext({ selection });\n  };\n\n  insertText = async ({\n    text,\n    selection,\n  }: {\n    text: string;\n    selection?: TextSelection;\n  }) => {\n    if (!this.enabled) return;\n\n    const finalSelection: TextSelection = selection ?? this.selection;\n    const { maxLengthOnEdit } = this.composer.config.text ?? {};\n    const currentText = this.text;\n    const textBeforeTrim = [\n      currentText.slice(0, finalSelection.start),\n      text,\n      currentText.slice(finalSelection.end),\n    ].join('');\n    const finalText = textBeforeTrim.slice(\n      0,\n      typeof maxLengthOnEdit === 'number' ? maxLengthOnEdit : textBeforeTrim.length,\n    );\n    const expectedCursorPosition =\n      currentText.slice(0, finalSelection.start).length + text.length;\n    const cursorPosition =\n      expectedCursorPosition >= finalText.length\n        ? finalText.length\n        : currentText.slice(0, expectedCursorPosition).length;\n\n    await this.handleChange({\n      text: finalText,\n      selection: {\n        start: cursorPosition,\n        end: cursorPosition,\n      },\n    });\n  };\n\n  wrapSelection = ({\n    head = '',\n    selection,\n    tail = '',\n  }: {\n    head?: string;\n    selection?: TextSelection;\n    tail?: string;\n  }) => {\n    if (!this.enabled) return;\n    const currentSelection: TextSelection = selection ?? this.selection;\n    const prependedText = this.text.slice(0, currentSelection.start);\n    const selectedText = this.text.slice(currentSelection.start, currentSelection.end);\n    const appendedText = this.text.slice(currentSelection.end);\n    const finalSelection = {\n      start: prependedText.length + head.length,\n      end: prependedText.length + head.length + selectedText.length,\n    };\n    this.state.partialNext({\n      text: [prependedText, head, selectedText, tail, appendedText].join(''),\n      selection: finalSelection,\n    });\n  };\n\n  setSuggestions = (suggestions: Suggestions) => {\n    this.state.partialNext({ suggestions });\n  };\n\n  closeSuggestions = () => {\n    const { suggestions } = this.state.getLatestValue();\n    if (!suggestions) return;\n    this.state.partialNext({ suggestions: undefined });\n  };\n  // --- END STATE API ---\n\n  // --- START TEXT PROCESSING ----\n\n  handleChange = async ({\n    text,\n    selection,\n  }: {\n    selection: TextSelection;\n    text: string;\n  }) => {\n    if (!this.enabled) return;\n    const output = await this.middlewareExecutor.execute({\n      eventName: 'onChange',\n      initialValue: {\n        ...this.state.getLatestValue(),\n        text,\n        selection,\n      },\n    });\n    if (output.status === 'discard') return;\n    this.state.next(output.state);\n\n    if (this.config.publishTypingEvents && text) {\n      logChatPromiseExecution(\n        this.channel.keystroke(this.composer.threadId ?? undefined),\n        'start typing event',\n      );\n    }\n  };\n\n  // todo: document how to register own middleware handler to simulate onSelectUser prop\n  handleSelect = async (target: TextComposerSuggestion<unknown>) => {\n    if (!this.enabled) return;\n    const output = await this.middlewareExecutor.execute({\n      eventName: 'onSuggestionItemSelect',\n      initialValue: {\n        ...this.state.getLatestValue(),\n        change: {\n          selectedSuggestion: target,\n        },\n      },\n    });\n    if (output?.status === 'discard') return;\n    this.state.next(output.state);\n  };\n  // --- END TEXT PROCESSING ----\n}\n","import type { Unsubscribe } from '../store';\n\n/**\n * @private\n * Class to use as a template for subscribable entities.\n */\nexport abstract class WithSubscriptions {\n  private unsubscribeFunctions: Set<Unsubscribe> = new Set();\n  /**\n   * Workaround for the missing TS keyword - ensures that inheritants\n   * overriding `unregisterSubscriptions` call the base method and return\n   * its unique symbol value.\n   */\n  protected static symbol = Symbol(WithSubscriptions.name);\n  private refCount = 0;\n\n  public abstract registerSubscriptions(): void;\n\n  /**\n   * Returns a boolean, provides information of whether `registerSubscriptions`\n   * method has already been called for this instance.\n   */\n  public get hasSubscriptions() {\n    return this.unsubscribeFunctions.size > 0;\n  }\n\n  protected addUnsubscribeFunction(unsubscribeFunction: Unsubscribe) {\n    this.unsubscribeFunctions.add(unsubscribeFunction);\n  }\n\n  /**\n   * Increments `refCount` by one and returns new value.\n   */\n  protected incrementRefCount() {\n    return ++this.refCount;\n  }\n\n  /**\n   * If you re-declare `unregisterSubscriptions` method within your class\n   * make sure to run the original too.\n   *\n   * @example\n   * ```ts\n   * class T extends WithSubscriptions {\n   *  ...\n   *  public unregisterSubscriptions = () => {\n   *    this.customThing();\n   *    return super.unregisterSubscriptions();\n   *  }\n   * }\n   * ```\n   */\n  public unregisterSubscriptions(): typeof WithSubscriptions.symbol {\n    if (this.refCount > 1) {\n      this.refCount--;\n      return WithSubscriptions.symbol;\n    }\n\n    this.unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n    this.unsubscribeFunctions.clear();\n    this.refCount = 0;\n\n    return WithSubscriptions.symbol;\n  }\n}\n","import { StateStore } from './store';\nimport {\n  addToMessageList,\n  findIndexInSortedArray,\n  formatMessage,\n  throttle,\n} from './utils';\nimport type {\n  AscDesc,\n  EventTypes,\n  LocalMessage,\n  MessagePaginationOptions,\n  MessageResponse,\n  ReadResponse,\n  ThreadResponse,\n  UserResponse,\n} from './types';\nimport type { Channel } from './channel';\nimport type { StreamChat } from './client';\nimport type { CustomThreadData } from './custom_types';\nimport { MessageComposer } from './messageComposer';\nimport { WithSubscriptions } from './utils/WithSubscriptions';\n\ntype QueryRepliesOptions = {\n  sort?: { created_at: AscDesc }[];\n} & MessagePaginationOptions & { user?: UserResponse; user_id?: string };\n\nexport type ThreadState = {\n  /**\n   * Determines if the thread is currently opened and on-screen. When the thread is active,\n   * all new messages are immediately marked as read.\n   */\n  active: boolean;\n  channel: Channel;\n  createdAt: Date;\n  custom: CustomThreadData;\n  deletedAt: Date | null;\n  isLoading: boolean;\n  isStateStale: boolean;\n  pagination: ThreadRepliesPagination;\n  /**\n   * Thread is identified by and has a one-to-one relation with its parent message.\n   * We use parent message id as a thread id.\n   */\n  parentMessage: LocalMessage;\n  participants: ThreadResponse['thread_participants'];\n  read: ThreadReadState;\n  replies: Array<LocalMessage>;\n  replyCount: number;\n  title: string;\n  updatedAt: Date | null;\n};\n\nexport type ThreadRepliesPagination = {\n  isLoadingNext: boolean;\n  isLoadingPrev: boolean;\n  nextCursor: string | null;\n  prevCursor: string | null;\n};\n\nexport type ThreadUserReadState = {\n  lastReadAt: Date;\n  unreadMessageCount: number;\n  user: UserResponse;\n  lastReadMessageId?: string;\n};\n\nexport type ThreadReadState = Record<string, ThreadUserReadState | undefined>;\n\nconst DEFAULT_PAGE_LIMIT = 50;\nconst DEFAULT_SORT: { created_at: AscDesc }[] = [{ created_at: -1 }];\nconst MARK_AS_READ_THROTTLE_TIMEOUT = 1000;\n// TODO: remove this once we move to API v2\nexport const THREAD_RESPONSE_RESERVED_KEYS: Record<keyof ThreadResponse, true> = {\n  active_participant_count: true,\n  channel: true,\n  channel_cid: true,\n  created_at: true,\n  created_by: true,\n  created_by_user_id: true,\n  deleted_at: true,\n  draft: true,\n  last_message_at: true,\n  latest_replies: true,\n  parent_message: true,\n  parent_message_id: true,\n  participant_count: true,\n  read: true,\n  reply_count: true,\n  thread_participants: true,\n  title: true,\n  updated_at: true,\n};\n\n// TODO: remove this once we move to API v2\nconst constructCustomDataObject = <T extends ThreadResponse>(threadData: T) => {\n  const custom: CustomThreadData = {};\n\n  for (const key in threadData) {\n    if (THREAD_RESPONSE_RESERVED_KEYS[key as keyof ThreadResponse]) {\n      continue;\n    }\n\n    const customKey = key as keyof CustomThreadData;\n\n    custom[customKey] = threadData[customKey];\n  }\n\n  return custom;\n};\n\nexport class Thread extends WithSubscriptions {\n  public readonly state: StateStore<ThreadState>;\n  public readonly id: string;\n  public readonly messageComposer: MessageComposer;\n\n  private client: StreamChat;\n  private failedRepliesMap: Map<string, LocalMessage> = new Map();\n\n  constructor({\n    client,\n    threadData,\n  }: {\n    client: StreamChat;\n    threadData: ThreadResponse;\n  }) {\n    super();\n\n    const channel = client.channel(threadData.channel.type, threadData.channel.id, {\n      // @ts-expect-error name is a \"custom\" property\n      name: threadData.channel.name,\n    });\n    channel._hydrateMembers({\n      members: threadData.channel.members ?? [],\n      overrideCurrentState: false,\n    });\n\n    // For when read object is undefined and due to that unreadMessageCount for\n    // the current user isn't being incremented on message.new\n    const placeholderReadResponse: ReadResponse[] = client.userID\n      ? [\n          {\n            user: { id: client.userID },\n            unread_messages: 0,\n            last_read: new Date().toISOString(),\n          },\n        ]\n      : [];\n\n    this.state = new StateStore<ThreadState>({\n      // local only\n      active: false,\n      isLoading: false,\n      isStateStale: false,\n      // 99.9% should never change\n      channel,\n      createdAt: new Date(threadData.created_at),\n      // rest\n      deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n      pagination: repliesPaginationFromInitialThread(threadData),\n      parentMessage: formatMessage(threadData.parent_message),\n      participants: threadData.thread_participants,\n      read: formatReadState(\n        !threadData.read || threadData.read.length === 0\n          ? placeholderReadResponse\n          : threadData.read,\n      ),\n      replies: threadData.latest_replies.map(formatMessage),\n      replyCount: threadData.reply_count ?? 0,\n      updatedAt: threadData.updated_at ? new Date(threadData.updated_at) : null,\n      title: threadData.title,\n      custom: constructCustomDataObject(threadData),\n    });\n\n    this.id = threadData.parent_message_id;\n    this.client = client;\n\n    this.messageComposer = new MessageComposer({\n      client,\n      composition: threadData.draft,\n      compositionContext: this,\n    });\n  }\n\n  get channel() {\n    return this.state.getLatestValue().channel;\n  }\n\n  get hasStaleState() {\n    return this.state.getLatestValue().isStateStale;\n  }\n\n  get ownUnreadCount() {\n    return ownUnreadCountSelector(this.client.userID)(this.state.getLatestValue());\n  }\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public reload = async () => {\n    if (this.state.getLatestValue().isLoading) {\n      return;\n    }\n\n    this.state.partialNext({ isLoading: true });\n\n    try {\n      const thread = await this.client.getThread(this.id, { watch: true });\n      this.hydrateState(thread);\n    } finally {\n      this.state.partialNext({ isLoading: false });\n    }\n  };\n\n  public hydrateState = (thread: Thread) => {\n    if (thread === this) {\n      // skip if the instances are the same\n      return;\n    }\n\n    if (thread.id !== this.id) {\n      throw new Error(\n        \"Cannot hydrate thread's state using thread with different threadId\",\n      );\n    }\n\n    const {\n      createdAt,\n      custom,\n      title,\n      deletedAt,\n      parentMessage,\n      participants,\n      read,\n      replyCount,\n      replies,\n      updatedAt,\n    } = thread.state.getLatestValue();\n\n    // Preserve pending replies and append them to the updated list of replies\n    const pendingReplies = Array.from(this.failedRepliesMap.values());\n\n    this.state.partialNext({\n      title,\n      createdAt,\n      custom,\n      deletedAt,\n      parentMessage,\n      participants,\n      read,\n      replyCount,\n      replies: pendingReplies.length ? replies.concat(pendingReplies) : replies,\n      updatedAt,\n      isStateStale: false,\n    });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.hasSubscriptions) {\n      // Thread is already listening for events and changes\n      return;\n    }\n\n    this.addUnsubscribeFunction(this.subscribeThreadUpdated());\n    this.addUnsubscribeFunction(this.subscribeMarkActiveThreadRead());\n    this.addUnsubscribeFunction(this.subscribeReloadActiveStaleThread());\n    this.addUnsubscribeFunction(this.subscribeMarkThreadStale());\n    this.addUnsubscribeFunction(this.subscribeNewReplies());\n    this.addUnsubscribeFunction(this.subscribeRepliesRead());\n    this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n    this.addUnsubscribeFunction(this.subscribeMessageUpdated());\n  };\n\n  private subscribeThreadUpdated = () =>\n    this.client.on('thread.updated', (event) => {\n      if (!event.thread || event.thread.parent_message_id !== this.id) {\n        return;\n      }\n\n      const threadData = event.thread;\n\n      this.state.partialNext({\n        title: threadData.title,\n        updatedAt: new Date(threadData.updated_at),\n        deletedAt: threadData.deleted_at ? new Date(threadData.deleted_at) : null,\n        // TODO: use threadData.custom once we move to API v2\n        custom: constructCustomDataObject(threadData),\n      });\n    }).unsubscribe;\n\n  private subscribeMarkActiveThreadRead = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({\n        active: nextValue.active,\n        unreadMessageCount: ownUnreadCountSelector(this.client.userID)(nextValue),\n      }),\n      ({ active, unreadMessageCount }) => {\n        if (!active || !unreadMessageCount) return;\n        this.throttledMarkAsRead();\n      },\n    );\n\n  private subscribeReloadActiveStaleThread = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active, isStateStale: nextValue.isStateStale }),\n      ({ active, isStateStale }) => {\n        if (active && isStateStale) {\n          this.reload();\n        }\n      },\n    );\n\n  private subscribeMarkThreadStale = () =>\n    this.client.on('user.watching.stop', (event) => {\n      const { channel } = this.state.getLatestValue();\n\n      if (\n        !this.client.userID ||\n        this.client.userID !== event.user?.id ||\n        event.channel?.cid !== channel.cid\n      ) {\n        return;\n      }\n\n      this.state.partialNext({ isStateStale: true });\n    }).unsubscribe;\n\n  private subscribeNewReplies = () =>\n    this.client.on('message.new', (event) => {\n      if (!this.client.userID || event.message?.parent_id !== this.id) {\n        return;\n      }\n\n      const isOwnMessage = event.message.user?.id === this.client.userID;\n      const { active, read } = this.state.getLatestValue();\n\n      this.upsertReplyLocally({\n        message: event.message,\n        // Message from current user could have been added optimistically,\n        // so the actual timestamp might differ in the event\n        timestampChanged: isOwnMessage,\n      });\n\n      if (active) {\n        this.throttledMarkAsRead();\n      }\n\n      const nextRead: ThreadReadState = {};\n\n      for (const userId of Object.keys(read)) {\n        const userRead = read[userId];\n\n        if (userRead) {\n          let nextUserRead: ThreadUserReadState = userRead;\n\n          if (userId === event.user?.id) {\n            // The user who just sent a message to the thread has no unread messages\n            // in that thread\n            nextUserRead = {\n              ...nextUserRead,\n              lastReadAt: event.created_at ? new Date(event.created_at) : new Date(),\n              user: event.user,\n              unreadMessageCount: 0,\n            };\n          } else if (active && userId === this.client.userID) {\n            // Do not increment unread count for the current user in an active thread\n          } else {\n            // Increment unread count for all users except the author of the new message\n            nextUserRead = {\n              ...nextUserRead,\n              unreadMessageCount: userRead.unreadMessageCount + 1,\n            };\n          }\n\n          nextRead[userId] = nextUserRead;\n        }\n      }\n\n      this.state.partialNext({ read: nextRead });\n    }).unsubscribe;\n\n  private subscribeRepliesRead = () =>\n    this.client.on('message.read', (event) => {\n      if (!event.user || !event.created_at || !event.thread) return;\n      if (event.thread.parent_message_id !== this.id) return;\n\n      const userId = event.user.id;\n      const createdAt = event.created_at;\n      const user = event.user;\n\n      this.state.next((current) => ({\n        ...current,\n        read: {\n          ...current.read,\n          [userId]: {\n            lastReadAt: new Date(createdAt),\n            user,\n            lastReadMessageId: event.last_read_message_id,\n            unreadMessageCount: 0,\n          },\n        },\n      }));\n    }).unsubscribe;\n\n  private subscribeMessageDeleted = () =>\n    this.client.on('message.deleted', (event) => {\n      if (!event.message) return;\n\n      // Deleted message is a reply of this thread\n      if (event.message.parent_id === this.id) {\n        if (event.hard_delete) {\n          this.deleteReplyLocally({ message: event.message });\n        } else {\n          // Handle soft delete (updates deleted_at timestamp)\n          this.upsertReplyLocally({ message: event.message });\n        }\n      }\n\n      // Deleted message is parent message of this thread\n      if (event.message.id === this.id) {\n        this.updateParentMessageLocally({ message: event.message });\n      }\n    }).unsubscribe;\n\n  private subscribeMessageUpdated = () => {\n    const eventTypes: EventTypes[] = [\n      'message.updated',\n      'reaction.new',\n      'reaction.deleted',\n      'reaction.updated',\n    ];\n\n    const unsubscribeFunctions = eventTypes.map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          if (event.message) {\n            this.updateParentMessageOrReplyLocally(event.message);\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  public unregisterSubscriptions = () => {\n    const symbol = super.unregisterSubscriptions();\n    this.state.partialNext({ isStateStale: true });\n    return symbol;\n  };\n\n  public deleteReplyLocally = ({ message }: { message: MessageResponse }) => {\n    const { replies } = this.state.getLatestValue();\n\n    const index = findIndexInSortedArray({\n      needle: formatMessage(message),\n      sortedArray: replies,\n      sortDirection: 'ascending',\n      selectValueToCompare: (reply) => reply.created_at.getTime(),\n      selectKey: (reply) => reply.id,\n    });\n\n    if (replies[index]?.id !== message.id) {\n      return;\n    }\n\n    const updatedReplies = [...replies];\n    updatedReplies.splice(index, 1);\n\n    this.state.partialNext({\n      replies: updatedReplies,\n    });\n  };\n\n  public upsertReplyLocally = ({\n    message,\n    timestampChanged = false,\n  }: {\n    message: MessageResponse | LocalMessage;\n    timestampChanged?: boolean;\n  }) => {\n    if (message.parent_id !== this.id) {\n      throw new Error('Reply does not belong to this thread');\n    }\n\n    const formattedMessage = formatMessage(message);\n\n    if (message.status === 'failed') {\n      // store failed reply so that it's not lost when reloading or hydrating\n      this.failedRepliesMap.set(formattedMessage.id, formattedMessage);\n    } else if (this.failedRepliesMap.has(message.id)) {\n      this.failedRepliesMap.delete(message.id);\n    }\n\n    this.state.next((current) => ({\n      ...current,\n      replies: addToMessageList(current.replies, formattedMessage, timestampChanged),\n    }));\n  };\n\n  public updateParentMessageLocally = ({ message }: { message: MessageResponse }) => {\n    if (message.id !== this.id) {\n      throw new Error('Message does not belong to this thread');\n    }\n\n    this.state.next((current) => {\n      const formattedMessage = formatMessage(message);\n\n      return {\n        ...current,\n        deletedAt: formattedMessage.deleted_at,\n        parentMessage: formattedMessage,\n        replyCount: message.reply_count ?? current.replyCount,\n      };\n    });\n  };\n\n  public updateParentMessageOrReplyLocally = (message: MessageResponse) => {\n    if (message.parent_id === this.id) {\n      this.upsertReplyLocally({ message });\n    }\n\n    if (!message.parent_id && message.id === this.id) {\n      this.updateParentMessageLocally({ message });\n    }\n  };\n\n  public markAsRead = async ({ force = false }: { force?: boolean } = {}) => {\n    if (this.ownUnreadCount === 0 && !force) {\n      return null;\n    }\n\n    return await this.channel.markRead({ thread_id: this.id });\n  };\n\n  private throttledMarkAsRead = throttle(\n    () => this.markAsRead(),\n    MARK_AS_READ_THROTTLE_TIMEOUT,\n    { trailing: true },\n  );\n\n  public queryReplies = ({\n    limit = DEFAULT_PAGE_LIMIT,\n    sort = DEFAULT_SORT,\n    ...otherOptions\n  }: QueryRepliesOptions = {}) =>\n    this.channel.getReplies(this.id, { limit, ...otherOptions }, sort);\n\n  public loadNextPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) =>\n    this.loadPage(limit);\n\n  public loadPrevPage = ({ limit = DEFAULT_PAGE_LIMIT }: { limit?: number } = {}) =>\n    this.loadPage(-limit);\n\n  private loadPage = async (count: number) => {\n    const { pagination } = this.state.getLatestValue();\n    const [loadingKey, cursorKey, insertionMethodKey] =\n      count > 0\n        ? (['isLoadingNext', 'nextCursor', 'push'] as const)\n        : (['isLoadingPrev', 'prevCursor', 'unshift'] as const);\n\n    if (pagination[loadingKey] || pagination[cursorKey] === null) return;\n\n    const queryOptions = { [count > 0 ? 'id_gt' : 'id_lt']: pagination[cursorKey] };\n    const limit = Math.abs(count);\n\n    this.state.partialNext({ pagination: { ...pagination, [loadingKey]: true } });\n\n    try {\n      const data = await this.queryReplies({ ...queryOptions, limit });\n      const replies = data.messages.map(formatMessage);\n      const maybeNextCursor = replies.at(count > 0 ? -1 : 0)?.id ?? null;\n\n      this.state.next((current) => {\n        let nextReplies = current.replies;\n\n        // prevent re-creating array if there's nothing to add to the current one\n        if (replies.length > 0) {\n          nextReplies = [...current.replies];\n          nextReplies[insertionMethodKey](...replies);\n        }\n\n        return {\n          ...current,\n          replies: nextReplies,\n          pagination: {\n            ...current.pagination,\n            [cursorKey]: data.messages.length < limit ? null : maybeNextCursor,\n            [loadingKey]: false,\n          },\n        };\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          [loadingKey]: false,\n        },\n      }));\n    }\n  };\n}\n\nconst formatReadState = (read: ReadResponse[]): ThreadReadState =>\n  read.reduce<ThreadReadState>((state, userRead) => {\n    state[userRead.user.id] = {\n      user: userRead.user,\n      lastReadMessageId: userRead.last_read_message_id,\n      unreadMessageCount: userRead.unread_messages ?? 0,\n      lastReadAt: new Date(userRead.last_read),\n    };\n    return state;\n  }, {});\n\nconst repliesPaginationFromInitialThread = (\n  thread: ThreadResponse,\n): ThreadRepliesPagination => {\n  const latestRepliesContainsAllReplies =\n    thread.latest_replies.length === thread.reply_count;\n\n  return {\n    nextCursor: null,\n    prevCursor: latestRepliesContainsAllReplies\n      ? null\n      : (thread.latest_replies.at(0)?.id ?? null),\n    isLoadingNext: false,\n    isLoadingPrev: false,\n  };\n};\n\nconst ownUnreadCountSelector =\n  (currentUserId: string | undefined) => (state: ThreadState) =>\n    (currentUserId && state.read[currentUserId]?.unreadMessageCount) || 0;\n","import { AttachmentManager } from './attachmentManager';\nimport { CustomDataManager } from './CustomDataManager';\nimport { LinkPreviewsManager } from './linkPreviewsManager';\nimport { PollComposer } from './pollComposer';\nimport { TextComposer } from './textComposer';\nimport { DEFAULT_COMPOSER_CONFIG } from './configuration/configuration';\nimport type { MessageComposerMiddlewareValue } from './middleware';\nimport {\n  MessageComposerMiddlewareExecutor,\n  MessageDraftComposerMiddlewareExecutor,\n} from './middleware';\nimport { StateStore } from '../store';\nimport { formatMessage, generateUUIDv4, isLocalMessage, unformatMessage } from '../utils';\nimport { mergeWith } from '../utils/mergeWith';\nimport { Channel } from '../channel';\nimport { Thread } from '../thread';\nimport type {\n  ChannelAPIResponse,\n  DraftMessage,\n  DraftResponse,\n  EventTypes,\n  LocalMessage,\n  LocalMessageBase,\n  MessageResponse,\n  MessageResponseBase,\n} from '../types';\nimport type { StreamChat } from '../client';\nimport type { MessageComposerConfig } from './configuration/types';\nimport type { DeepPartial } from '../types.utility';\nimport type { Unsubscribe } from '../store';\nimport { WithSubscriptions } from '../utils/WithSubscriptions';\n\ntype UnregisterSubscriptions = Unsubscribe;\n\nexport type LastComposerChange = { draftUpdate: number | null; stateUpdate: number };\n\nexport type EditingAuditState = {\n  lastChange: LastComposerChange;\n};\n\nexport type LocalMessageWithLegacyThreadId = LocalMessage & { legacyThreadId?: string };\nexport type CompositionContext = Channel | Thread | LocalMessageWithLegacyThreadId;\n\nexport type MessageComposerState = {\n  id: string;\n  draftId: string | null;\n  pollId: string | null;\n  quotedMessage: LocalMessageBase | null;\n  showReplyInChannel: boolean;\n};\n\nexport type MessageComposerOptions = {\n  client: StreamChat;\n  // composer can belong to a channel, thread, legacy thread or a local message (edited message)\n  compositionContext: CompositionContext;\n  // initial state like draft message or edited message\n  composition?: DraftResponse | MessageResponse | LocalMessage;\n  config?: DeepPartial<MessageComposerConfig>;\n};\n\nconst compositionIsDraftResponse = (composition: unknown): composition is DraftResponse =>\n  !!(composition as { message?: DraftMessage })?.message;\n\nconst initEditingAuditState = (\n  composition?: DraftResponse | MessageResponse | LocalMessage,\n): EditingAuditState => {\n  let draftUpdate = null;\n  let stateUpdate = new Date().getTime();\n  if (compositionIsDraftResponse(composition)) {\n    stateUpdate = draftUpdate = new Date(composition.created_at).getTime();\n  } else if (composition && isLocalMessage(composition)) {\n    stateUpdate = new Date(composition.updated_at).getTime();\n  }\n  return {\n    lastChange: {\n      draftUpdate,\n      stateUpdate,\n    },\n  };\n};\n\nconst initState = (\n  composition?: DraftResponse | MessageResponse | LocalMessage,\n): MessageComposerState => {\n  if (!composition) {\n    return {\n      draftId: null,\n      id: MessageComposer.generateId(),\n      pollId: null,\n      quotedMessage: null,\n      showReplyInChannel: false,\n    };\n  }\n\n  const quotedMessage = composition.quoted_message;\n  let message;\n  let draftId = null;\n  let id = MessageComposer.generateId(); // do not use draft id for messsage id\n  if (compositionIsDraftResponse(composition)) {\n    message = composition.message;\n    draftId = composition.message.id;\n  } else {\n    message = composition;\n    id = composition.id;\n  }\n\n  return {\n    draftId,\n    id,\n    pollId: message.poll_id ?? null,\n    quotedMessage: quotedMessage\n      ? formatMessage(quotedMessage as MessageResponseBase)\n      : null,\n    showReplyInChannel: false,\n  };\n};\n\nexport class MessageComposer extends WithSubscriptions {\n  readonly channel: Channel;\n  readonly state: StateStore<MessageComposerState>;\n  readonly editingAuditState: StateStore<EditingAuditState>;\n  readonly configState: StateStore<MessageComposerConfig>;\n  readonly compositionContext: CompositionContext;\n  readonly compositionMiddlewareExecutor: MessageComposerMiddlewareExecutor;\n  readonly draftCompositionMiddlewareExecutor: MessageDraftComposerMiddlewareExecutor;\n\n  editedMessage?: LocalMessage;\n  attachmentManager: AttachmentManager;\n  linkPreviewsManager: LinkPreviewsManager;\n  textComposer: TextComposer;\n  pollComposer: PollComposer;\n  customDataManager: CustomDataManager;\n  // todo: mediaRecorder: MediaRecorderController;\n\n  constructor({\n    composition,\n    config,\n    compositionContext,\n    client,\n  }: MessageComposerOptions) {\n    super();\n\n    this.compositionContext = compositionContext;\n\n    this.configState = new StateStore<MessageComposerConfig>(\n      mergeWith(DEFAULT_COMPOSER_CONFIG, config ?? {}),\n    );\n\n    // channel is easily inferable from the context\n    if (compositionContext instanceof Channel) {\n      this.channel = compositionContext;\n    } else if (compositionContext instanceof Thread) {\n      this.channel = compositionContext.channel;\n    } else if (compositionContext.cid) {\n      const [type, id] = compositionContext.cid.split(':');\n      this.channel = client.channel(type, id);\n    } else {\n      throw new Error(\n        'MessageComposer requires composition context pointing to channel (channel or context.cid)',\n      );\n    }\n\n    let message: LocalMessage | DraftMessage | undefined = undefined;\n    if (compositionIsDraftResponse(composition)) {\n      message = composition.message;\n    } else if (composition) {\n      message = formatMessage(composition);\n      this.editedMessage = message;\n    }\n\n    this.attachmentManager = new AttachmentManager({ composer: this, message });\n    this.linkPreviewsManager = new LinkPreviewsManager({ composer: this, message });\n    this.textComposer = new TextComposer({ composer: this, message });\n    this.pollComposer = new PollComposer({ composer: this });\n    this.customDataManager = new CustomDataManager({ composer: this, message });\n\n    this.editingAuditState = new StateStore<EditingAuditState>(\n      this.initEditingAuditState(composition),\n    );\n    this.state = new StateStore<MessageComposerState>(initState(composition));\n\n    this.compositionMiddlewareExecutor = new MessageComposerMiddlewareExecutor({\n      composer: this,\n    });\n    this.draftCompositionMiddlewareExecutor = new MessageDraftComposerMiddlewareExecutor({\n      composer: this,\n    });\n  }\n\n  static evaluateContextType(compositionContext: CompositionContext) {\n    if (compositionContext instanceof Channel) {\n      return 'channel';\n    }\n\n    if (compositionContext instanceof Thread) {\n      return 'thread';\n    }\n\n    if (typeof compositionContext.legacyThreadId === 'string') {\n      return 'legacy_thread';\n    }\n\n    return 'message';\n  }\n\n  static constructTag(\n    compositionContext: CompositionContext,\n  ): `${ReturnType<typeof MessageComposer.evaluateContextType>}_${string}` {\n    return `${this.evaluateContextType(compositionContext)}_${compositionContext.id}`;\n  }\n\n  get config(): MessageComposerConfig {\n    return this.configState.getLatestValue();\n  }\n\n  updateConfig(config: DeepPartial<MessageComposerConfig>) {\n    this.configState.partialNext(mergeWith(this.config, config));\n  }\n\n  get contextType() {\n    return MessageComposer.evaluateContextType(this.compositionContext);\n  }\n\n  get tag() {\n    return MessageComposer.constructTag(this.compositionContext);\n  }\n\n  get threadId() {\n    // TODO: ideally we'd use this.contextType but type narrowing does not work for this.compositionContext\n    // if (this.contextType === 'channel') {\n    //   const context = this.compositionContext; // context is a Channel\n    //   return null\n    // }\n\n    if (this.compositionContext instanceof Channel) {\n      return null;\n    }\n\n    if (this.compositionContext instanceof Thread) {\n      return this.compositionContext.id;\n    }\n\n    if (typeof this.compositionContext.legacyThreadId === 'string') {\n      return this.compositionContext.legacyThreadId;\n    }\n\n    // check if the message is a reply, get parentMessageId\n    if (typeof this.compositionContext.parent_id === 'string') {\n      return this.compositionContext.parent_id;\n    }\n\n    return null;\n  }\n\n  get client() {\n    return this.channel.getClient();\n  }\n\n  get id() {\n    return this.state.getLatestValue().id;\n  }\n\n  get draftId() {\n    return this.state.getLatestValue().draftId;\n  }\n\n  get lastChange() {\n    return this.editingAuditState.getLatestValue().lastChange;\n  }\n\n  get quotedMessage() {\n    return this.state.getLatestValue().quotedMessage;\n  }\n\n  get pollId() {\n    return this.state.getLatestValue().pollId;\n  }\n\n  get showReplyInChannel() {\n    return this.state.getLatestValue().showReplyInChannel;\n  }\n\n  get hasSendableData() {\n    // If the offline mode is enabled, we allow sending a message if the composition is not empty.\n    if (this.client.offlineDb) {\n      return !this.compositionIsEmpty;\n    }\n    return !!(\n      (!this.attachmentManager.uploadsInProgressCount &&\n        (!this.textComposer.textIsEmpty ||\n          this.attachmentManager.successfulUploadsCount > 0)) ||\n      this.pollId\n    );\n  }\n\n  get compositionIsEmpty() {\n    return (\n      !this.quotedMessage &&\n      this.textComposer.textIsEmpty &&\n      !this.attachmentManager.attachments.length &&\n      !this.pollId\n    );\n  }\n\n  get lastChangeOriginIsLocal() {\n    const initiatedWithoutDraft = this.lastChange.draftUpdate === null;\n    const composingMessageFromScratch = initiatedWithoutDraft && !this.editedMessage;\n\n    // does not mean that the original editted message is different from the current state\n    const editedMessageWasUpdated =\n      !!this.editedMessage?.updated_at &&\n      new Date(this.editedMessage.updated_at).getTime() < this.lastChange.stateUpdate;\n\n    const draftWasChanged =\n      !!this.lastChange.draftUpdate &&\n      this.lastChange.draftUpdate < this.lastChange.stateUpdate;\n\n    return editedMessageWasUpdated || draftWasChanged || composingMessageFromScratch;\n  }\n\n  static generateId = generateUUIDv4;\n\n  initState = ({\n    composition,\n  }: { composition?: DraftResponse | MessageResponse | LocalMessage } = {}) => {\n    this.editingAuditState.partialNext(this.initEditingAuditState(composition));\n\n    const message: LocalMessage | DraftMessage | undefined =\n      typeof composition === 'undefined'\n        ? composition\n        : compositionIsDraftResponse(composition)\n          ? composition.message\n          : formatMessage(composition);\n    this.attachmentManager.initState({ message });\n    this.linkPreviewsManager.initState({ message });\n    this.textComposer.initState({ message });\n    this.pollComposer.initState();\n    this.customDataManager.initState({ message });\n    this.state.next(initState(composition));\n    if (\n      composition &&\n      !compositionIsDraftResponse(composition) &&\n      message &&\n      isLocalMessage(message)\n    ) {\n      this.editedMessage = message;\n    }\n  };\n\n  initStateFromChannelResponse = (channelApiResponse: ChannelAPIResponse) => {\n    if (this.channel.cid !== channelApiResponse.channel.cid) {\n      return;\n    }\n    if (channelApiResponse.draft) {\n      this.initState({ composition: channelApiResponse.draft });\n    } else if (this.state.getLatestValue().draftId) {\n      this.clear();\n      this.client.offlineDb?.executeQuerySafely(\n        (db) =>\n          db.deleteDraft({\n            cid: this.channel.cid,\n            parent_id: undefined, // makes sure that we don't delete thread drafts while upserting channels\n          }),\n        { method: 'deleteDraft' },\n      );\n    }\n  };\n\n  initEditingAuditState = (\n    composition?: DraftResponse | MessageResponse | LocalMessage,\n  ) => initEditingAuditState(composition);\n\n  private logStateUpdateTimestamp() {\n    this.editingAuditState.partialNext({\n      lastChange: { ...this.lastChange, stateUpdate: new Date().getTime() },\n    });\n  }\n\n  private logDraftUpdateTimestamp() {\n    if (!this.config.drafts.enabled) return;\n    const timestamp = new Date().getTime();\n    this.editingAuditState.partialNext({\n      lastChange: { draftUpdate: timestamp, stateUpdate: timestamp },\n    });\n  }\n\n  public registerDraftEventSubscriptions = () => {\n    const unsubscribeDraftUpdated = this.subscribeDraftUpdated();\n    const unsubscribeDraftDeleted = this.subscribeDraftDeleted();\n\n    return () => {\n      unsubscribeDraftUpdated();\n      unsubscribeDraftDeleted();\n    };\n  };\n\n  public registerSubscriptions = (): UnregisterSubscriptions => {\n    if (!this.hasSubscriptions) {\n      this.addUnsubscribeFunction(this.subscribeMessageComposerSetupStateChange());\n      this.addUnsubscribeFunction(this.subscribeMessageUpdated());\n      this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n\n      this.addUnsubscribeFunction(this.subscribeTextComposerStateChanged());\n      this.addUnsubscribeFunction(this.subscribeAttachmentManagerStateChanged());\n      this.addUnsubscribeFunction(this.subscribeLinkPreviewsManagerStateChanged());\n      this.addUnsubscribeFunction(this.subscribePollComposerStateChanged());\n      this.addUnsubscribeFunction(this.subscribeCustomDataManagerStateChanged());\n      this.addUnsubscribeFunction(this.subscribeMessageComposerStateChanged());\n      this.addUnsubscribeFunction(this.subscribeMessageComposerConfigStateChanged());\n    }\n\n    this.incrementRefCount();\n\n    return () => this.unregisterSubscriptions();\n  };\n\n  private subscribeMessageUpdated = () => {\n    // todo: test the impact of 'reaction.new', 'reaction.deleted', 'reaction.updated'\n    const eventTypes: EventTypes[] = [\n      'message.updated',\n      'reaction.new',\n      'reaction.deleted', // todo: do we need to subscribe to this especially when the whole state is overriden?\n      'reaction.updated', // todo: do we need to subscribe to this especially when the whole state is overriden?\n    ];\n\n    const unsubscribeFunctions = eventTypes.map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          if (!event.message) return;\n          if (event.message.id === this.id) {\n            this.initState({ composition: event.message });\n          }\n          if (this.quotedMessage?.id && event.message.id === this.quotedMessage.id) {\n            this.setQuotedMessage(formatMessage(event.message));\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  private subscribeMessageComposerSetupStateChange = () => {\n    let tearDown: (() => void) | null = null;\n    const unsubscribe = this.client._messageComposerSetupState.subscribeWithSelector(\n      ({ setupFunction: setup }) => ({\n        setup,\n      }),\n      ({ setup }) => {\n        tearDown?.();\n        tearDown = setup?.({ composer: this }) ?? null;\n      },\n    );\n\n    return () => {\n      tearDown?.();\n      unsubscribe();\n    };\n  };\n\n  private subscribeMessageDeleted = () =>\n    this.client.on('message.deleted', (event) => {\n      if (!event.message) return;\n      if (event.message.id === this.id) {\n        this.clear();\n      } else if (this.quotedMessage && event.message.id === this.quotedMessage.id) {\n        this.setQuotedMessage(null);\n      }\n    }).unsubscribe;\n\n  private subscribeDraftUpdated = () =>\n    this.client.on('draft.updated', (event) => {\n      const draft = event.draft as DraftResponse;\n      if (\n        !draft ||\n        (draft.parent_id ?? null) !== (this.threadId ?? null) ||\n        draft.channel_cid !== this.channel.cid\n      )\n        return;\n      this.initState({ composition: draft });\n    }).unsubscribe;\n\n  private subscribeDraftDeleted = () =>\n    this.client.on('draft.deleted', (event) => {\n      const draft = event.draft as DraftResponse;\n      if (\n        !draft ||\n        (draft.parent_id ?? null) !== (this.threadId ?? null) ||\n        draft.channel_cid !== this.channel.cid\n      ) {\n        return;\n      }\n\n      this.logDraftUpdateTimestamp();\n\n      if (this.compositionIsEmpty) {\n        return;\n      }\n\n      this.clear();\n    }).unsubscribe;\n\n  private subscribeTextComposerStateChanged = () =>\n    this.textComposer.state.subscribeWithSelector(\n      ({ text }) => [text] as const,\n      ([currentText], previousSelection) => {\n        // do not handle on initial subscription\n        if (typeof previousSelection === 'undefined') return;\n\n        this.logStateUpdateTimestamp();\n\n        if (this.compositionIsEmpty) {\n          this.deleteDraft();\n          return;\n        }\n\n        if (!this.linkPreviewsManager.enabled) return;\n\n        if (!currentText) {\n          this.linkPreviewsManager.clearPreviews();\n        } else {\n          this.linkPreviewsManager.findAndEnrichUrls(currentText);\n        }\n      },\n    );\n\n  private subscribeAttachmentManagerStateChanged = () =>\n    this.attachmentManager.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === 'undefined') return;\n\n      this.logStateUpdateTimestamp();\n\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n\n  private subscribeLinkPreviewsManagerStateChanged = () =>\n    this.linkPreviewsManager.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === 'undefined') return;\n\n      this.logStateUpdateTimestamp();\n\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n\n  private subscribePollComposerStateChanged = () =>\n    this.pollComposer.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === 'undefined') return;\n\n      this.logStateUpdateTimestamp();\n\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n        return;\n      }\n    });\n\n  private subscribeCustomDataManagerStateChanged = () =>\n    this.customDataManager.state.subscribe((nextValue, previousValue) => {\n      if (\n        typeof previousValue !== 'undefined' &&\n        // FIXME: is this check really necessary?\n        !this.customDataManager.isMessageDataEqual(nextValue, previousValue)\n      ) {\n        this.logStateUpdateTimestamp();\n      }\n    });\n\n  private subscribeMessageComposerStateChanged = () =>\n    this.state.subscribe((_, previousValue) => {\n      if (typeof previousValue === 'undefined') return;\n\n      this.logStateUpdateTimestamp();\n\n      if (this.compositionIsEmpty) {\n        this.deleteDraft();\n      }\n    });\n\n  private subscribeMessageComposerConfigStateChanged = () => {\n    let draftUnsubscribeFunction: Unsubscribe | null;\n\n    const unsubscribe = this.configState.subscribeWithSelector(\n      (currentValue) => ({\n        textDefaultValue: currentValue.text.defaultValue,\n        draftsEnabled: currentValue.drafts.enabled,\n      }),\n      ({ textDefaultValue, draftsEnabled }) => {\n        if (this.textComposer.text === '' && textDefaultValue) {\n          this.textComposer.insertText({\n            text: textDefaultValue,\n            selection: { start: 0, end: 0 },\n          });\n        }\n\n        if (draftsEnabled && !draftUnsubscribeFunction) {\n          draftUnsubscribeFunction = this.registerDraftEventSubscriptions();\n        } else if (!draftsEnabled && draftUnsubscribeFunction) {\n          draftUnsubscribeFunction();\n          draftUnsubscribeFunction = null;\n        }\n      },\n    );\n\n    return () => {\n      draftUnsubscribeFunction?.();\n      unsubscribe();\n    };\n  };\n\n  setQuotedMessage = (quotedMessage: LocalMessage | null) => {\n    this.state.partialNext({ quotedMessage });\n  };\n\n  toggleShowReplyInChannel = () => {\n    this.state.partialNext({ showReplyInChannel: !this.showReplyInChannel });\n  };\n\n  clear = () => {\n    this.initState();\n  };\n\n  restore = () => {\n    const { editedMessage } = this;\n    if (editedMessage) {\n      this.initState({ composition: editedMessage });\n      return;\n    }\n    this.clear();\n  };\n\n  compose = async (): Promise<MessageComposerMiddlewareValue['state'] | undefined> => {\n    const created_at = this.editedMessage?.created_at ?? new Date();\n\n    const text = '';\n    const result = await this.compositionMiddlewareExecutor.execute({\n      eventName: 'compose',\n      initialValue: {\n        message: {\n          id: this.id,\n          parent_id: this.threadId ?? undefined,\n          type: 'regular',\n        },\n        localMessage: {\n          attachments: [],\n          created_at, // only assigned to localMessage as this is used for optimistic update\n          deleted_at: null,\n          error: undefined,\n          id: this.id,\n          mentioned_users: [],\n          parent_id: this.threadId ?? undefined,\n          pinned_at: null,\n          reaction_groups: null,\n          status: this.editedMessage ? this.editedMessage.status : 'sending',\n          text,\n          type: 'regular',\n          updated_at: created_at,\n        },\n        sendOptions: {},\n      },\n    });\n\n    if (result.status === 'discard') return;\n\n    return result.state;\n  };\n\n  composeDraft = async () => {\n    const { state, status } = await this.draftCompositionMiddlewareExecutor.execute({\n      eventName: 'compose',\n      initialValue: {\n        draft: { id: this.id, parent_id: this.threadId ?? undefined, text: '' },\n      },\n    });\n    if (status === 'discard') return;\n\n    return state;\n  };\n\n  createDraft = async () => {\n    // server-side drafts are not stored on message level but on thread and channel level\n    // therefore we don't need to create a draft if the message is edited\n    if (this.editedMessage || !this.config.drafts.enabled) return;\n    const composition = await this.composeDraft();\n    if (!composition) return;\n    const { draft } = composition;\n    this.state.partialNext({ draftId: draft.id });\n    if (this.client.offlineDb) {\n      try {\n        const optimisticDraftResponse = {\n          channel_cid: this.channel.cid,\n          created_at: new Date().toISOString(),\n          message: draft as DraftMessage,\n          parent_id: draft.parent_id,\n          quoted_message: this.quotedMessage\n            ? unformatMessage(this.quotedMessage)\n            : undefined,\n        };\n        await this.client.offlineDb.upsertDraft({ draft: optimisticDraftResponse });\n      } catch (error) {\n        this.client.logger('error', `offlineDb:upsertDraft`, {\n          tags: ['channel', 'offlineDb'],\n          error,\n        });\n      }\n    }\n    this.logDraftUpdateTimestamp();\n    await this.channel.createDraft(draft);\n  };\n\n  deleteDraft = async () => {\n    if (this.editedMessage || !this.config.drafts.enabled || !this.draftId) return;\n    this.state.partialNext({ draftId: null }); // todo: should we clear the whole state?\n    const parentId = this.threadId ?? undefined;\n    if (this.client.offlineDb) {\n      try {\n        await this.client.offlineDb.deleteDraft({\n          cid: this.channel.cid,\n          parent_id: parentId,\n        });\n      } catch (error) {\n        this.client.logger('error', `offlineDb:deleteDraft`, {\n          tags: ['channel', 'offlineDb'],\n          error,\n        });\n      }\n    }\n    this.logDraftUpdateTimestamp();\n    await this.channel.deleteDraft({ parent_id: parentId });\n  };\n\n  getDraft = async () => {\n    if (this.editedMessage || !this.config.drafts.enabled || !this.client.userID) return;\n\n    const draftFromOfflineDB = await this.client.offlineDb?.getDraft({\n      cid: this.channel.cid,\n      userId: this.client.userID,\n      parent_id: this.threadId ?? undefined,\n    });\n\n    if (draftFromOfflineDB) {\n      this.initState({ composition: draftFromOfflineDB });\n    }\n\n    try {\n      const response = await this.channel.getDraft({\n        parent_id: this.threadId ?? undefined,\n      });\n\n      const { draft } = response;\n\n      if (!draft) return;\n\n      this.client.offlineDb?.executeQuerySafely(\n        (db) =>\n          db.upsertDraft({\n            draft,\n          }),\n        { method: 'upsertDraft' },\n      );\n\n      this.initState({ composition: draft });\n    } catch (error) {\n      this.client.notifications.add({\n        message: 'Failed to get the draft',\n        origin: {\n          emitter: 'MessageComposer',\n          context: { composer: this },\n        },\n      });\n    }\n  };\n\n  createPoll = async () => {\n    const composition = await this.pollComposer.compose();\n    if (!composition || !composition.data.id) return;\n    try {\n      const poll = await this.client.polls.createPoll(composition.data);\n      this.state.partialNext({ pollId: poll?.id });\n    } catch (error) {\n      this.client.notifications.addError({\n        message: 'Failed to create the poll',\n        origin: {\n          emitter: 'MessageComposer',\n          context: { composer: this },\n        },\n        options: {\n          type: 'api:poll:create:failed',\n          metadata: {\n            reason: (error as Error).message,\n          },\n          originalError: error instanceof Error ? error : undefined,\n        },\n      });\n      throw error;\n    }\n  };\n}\n","import { ChannelState } from './channel_state';\nimport {\n  generateChannelTempCid,\n  logChatPromiseExecution,\n  messageSetPagination,\n  normalizeQuerySort,\n} from './utils';\nimport type { StreamChat } from './client';\nimport { DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE } from './constants';\nimport type {\n  AIState,\n  APIResponse,\n  AscDesc,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  ChannelUpdateOptions,\n  CreateDraftResponse,\n  DeleteChannelAPIResponse,\n  DraftMessagePayload,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  GetDraftResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  LocalMessage,\n  MarkReadOptions,\n  MarkUnreadOptions,\n  MemberFilters,\n  MemberSort,\n  Message,\n  MessageFilters,\n  MessageOptions,\n  MessagePaginationOptions,\n  MessageResponse,\n  MessageSetType,\n  MuteChannelAPIResponse,\n  NewMemberPayload,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  PartialUpdateMember,\n  PartialUpdateMemberAPIResponse,\n  PinnedMessagePaginationOptions,\n  PinnedMessagesSort,\n  PollVoteData,\n  PushPreference,\n  QueryChannelAPIResponse,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SendMessageAPIResponse,\n  SendMessageOptions,\n  TruncateChannelAPIResponse,\n  TruncateOptions,\n  UpdateChannelAPIResponse,\n  UpdateChannelOptions,\n  UserResponse,\n} from './types';\nimport type { Role } from './permissions';\nimport type { CustomChannelData } from './custom_types';\nimport { MessageComposer } from './messageComposer';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n  _client: StreamChat;\n  type: string;\n  id: string | undefined;\n  data: Partial<ChannelData & ChannelResponse> | undefined;\n  _data: Partial<ChannelData & ChannelResponse>;\n  cid: string;\n  /**  */\n  listeners: { [key: string]: (string | EventHandler)[] };\n  state: ChannelState;\n  /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */\n  initialized: boolean;\n  /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */\n  offlineMode: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n  push_preferences?: PushPreference;\n  public readonly messageComposer: MessageComposer;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData} data any additional custom params\n   *\n   * @return {Channel} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat,\n    type: string,\n    id: string | undefined,\n    data: ChannelData,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n\n    this.messageComposer = new MessageComposer({\n      client: this._client,\n      compositionContext: this,\n    });\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat}\n   */\n  getClient(): StreamChat {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the config for this channel id (cid)\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.cid];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message} message The Message object\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   * @param {boolean} [options.skip_push] Skip sending push notifications\n   * @param {boolean} [options.is_pending_message] DEPRECATED, please use `pending` instead.\n   * @param {boolean} [options.pending] Make this message pending\n   * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n   * @param {boolean} [options.force_moderation] Apply force moderation for server-side requests\n   *\n   * @return {Promise<SendMessageAPIResponse>} The Server Response\n   */\n  async _sendMessage(message: Message, options?: SendMessageOptions) {\n    return await this.getClient().post<SendMessageAPIResponse>(\n      this._channelURL() + '/message',\n      {\n        message,\n        ...options,\n      },\n    );\n  }\n\n  async sendMessage(message: Message, options?: SendMessageOptions) {\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        const messageId = message.id;\n        if (messageId) {\n          return await offlineDb.queueTask<SendMessageAPIResponse>({\n            task: {\n              channelId: this.id as string,\n              channelType: this.type,\n              messageId,\n              payload: [message, options],\n              type: 'send-message',\n            },\n          });\n        }\n      }\n    } catch (error) {\n      this._client.logger('error', `offlineDb:send-message`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n    return await this._sendMessage(message, options);\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/file`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse,\n  ) {\n    return this.getClient().sendFile(\n      `${this._channelURL()}/image`,\n      uri,\n      name,\n      contentType,\n      user,\n    );\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse>} The Server Response\n   */\n  async sendEvent(event: Event) {\n    this._checkInitialized();\n    return await this.getClient().post<EventAPIResponse>(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse>} search messages response\n   */\n  async search(\n    query: MessageFilters | string,\n    options: SearchOptions & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters;\n      message_options?: MessageOptions;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && options.next) {\n      throw Error(`Cannot specify offset with next`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload = {\n      filter_conditions: { cid: this.cid } as ChannelFilters,\n      ...options,\n      sort: options.sort\n        ? normalizeQuerySort<SearchMessageSortBase>(options.sort)\n        : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<SearchAPIResponse>(\n      this.getClient().baseURL + '/search',\n      {\n        payload,\n      },\n    );\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {MemberFilters}  filterConditions object MongoDB style filters\n   * @param {MemberSort} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: MemberFilters,\n    sort: MemberSort = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * updateMemberPartial - Partial update a member\n   *\n   * @param {PartialUpdateMember}  updates\n   * @param {{ user_id?: string }} [options] Option object, {user_id: 'jane'} to optionally specify the user id\n\n   * @return {Promise<ChannelMemberResponse>} Updated member\n   */\n  async updateMemberPartial(updates: PartialUpdateMember, options?: { userId?: string }) {\n    const url = new URL(`${this._channelURL()}/member`);\n\n    if (options?.userId) {\n      url.searchParams.append('user_id', options.userId);\n    }\n\n    return await this.getClient().patch<PartialUpdateMemberAPIResponse>(\n      url.toString(),\n      updates,\n    );\n  }\n\n  /**\n   * @deprecated Use `updateMemberPartial` instead\n   * partialUpdateMember - Partial update a member\n   *\n   * @param {string} user_id member user id\n   * @param {PartialUpdateMember}  updates\n   *\n   * @return {Promise<ChannelMemberResponse>} Updated member\n   */\n  async partialUpdateMember(user_id: string, updates: PartialUpdateMember) {\n    if (!user_id) {\n      throw Error('Please specify the user id');\n    }\n\n    return await this.getClient().patch<PartialUpdateMemberAPIResponse>(\n      this._channelURL() + `/member/${encodeURIComponent(user_id)}`,\n      updates,\n    );\n  }\n\n  /**\n   * sendReaction - Sends a reaction to a message. If offline support is enabled, it will make sure\n   * that sending the reaction is queued up if it fails due to bad internet conditions and executed\n   * later.\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask<ReactionAPIResponse>({\n          task: {\n            channelId: this.id as string,\n            channelType: this.type,\n            messageId: messageID,\n            payload: [messageID, reaction, options],\n            type: 'send-reaction',\n          },\n        });\n      }\n    } catch (error) {\n      this._client.logger('error', `offlineDb:send-reaction`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n\n    return this._sendReaction(messageID, reaction, options);\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async _sendReaction(\n    messageID: string,\n    reaction: Reaction,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n\n    return await this.getClient().post<ReactionAPIResponse>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/reaction`,\n      {\n        reaction,\n        ...options,\n      },\n    );\n  }\n\n  async deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\n        'Deleting a reaction requires specifying both the message and reaction type',\n      );\n    }\n\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        const message = this.state.messages.find(({ id }) => id === messageID);\n        const reaction = {\n          created_at: '',\n          updated_at: '',\n          message_id: messageID,\n          type: reactionType,\n          user_id: (this.getClient().userID as string) ?? user_id,\n        };\n\n        if (message) {\n          await offlineDb.deleteReaction({\n            message,\n            reaction,\n          });\n        }\n\n        return await offlineDb.queueTask<ReactionAPIResponse>({\n          task: {\n            channelId: this.id as string,\n            channelType: this.type,\n            messageId: messageID,\n            payload: [messageID, reactionType],\n            type: 'delete-reaction',\n          },\n        });\n      }\n    } catch (error) {\n      this._client.logger('error', `offlineDb:delete-reaction`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n\n    return await this._deleteReaction(messageID, reactionType, user_id);\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse>} The Server Response\n   */\n  async _deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error(\n        'Deleting a reaction requires specifying both the message and reaction type',\n      );\n    }\n\n    const url =\n      this.getClient().baseURL +\n      `/messages/${encodeURIComponent(messageID)}/reaction/${encodeURIComponent(\n        reactionType,\n      )}`;\n    //provided when server side request\n    if (user_id) {\n      return await this.getClient().delete<ReactionAPIResponse>(url, { user_id });\n    }\n\n    return await this.getClient().delete<ReactionAPIResponse>(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData} channelData The object to update the custom properties of this channel with\n   * @param {Message} [updateMessage] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async update(\n    channelData: Partial<ChannelData & ChannelResponse> = {},\n    updateMessage?: Message,\n    options?: ChannelUpdateOptions,\n  ) {\n    // Strip out reserved names that will result in API errors.\n    // TODO: this needs to be typed better\n    const reserved: Exclude<\n      keyof (ChannelResponse & ChannelData),\n      keyof CustomChannelData\n    >[] = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n      'own_capabilities',\n    ];\n\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse>}\n   */\n  async updatePartial(update: PartialUpdateChannel) {\n    const data = await this.getClient().patch<PartialUpdateChannelAPIResponse>(\n      this._channelURL(),\n      update,\n    );\n\n    const areCapabilitiesChanged =\n      [...(data.channel.own_capabilities || [])].sort().join() !==\n      [\n        ...(Array.isArray(this.data?.own_capabilities)\n          ? (this.data?.own_capabilities as string[])\n          : []),\n      ]\n        .sort()\n        .join();\n    this.data = data.channel;\n    // If the capabiltities are changed, we trigger the `capabilities.changed` event.\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: data.channel.own_capabilities,\n      });\n    }\n    return data;\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse>(\n      this._channelURL(),\n      {\n        cooldown: coolDownInterval,\n      },\n    );\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<UpdateChannelAPIResponse>(\n      this._channelURL(),\n      {\n        cooldown: 0,\n      },\n    );\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {Promise<DeleteChannelAPIResponse>} The server response\n   */\n  async delete(options: { hard_delete?: boolean } = {}) {\n    return await this.getClient().delete<DeleteChannelAPIResponse>(this._channelURL(), {\n      ...options,\n    });\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   * @param {TruncateOptions} [options] Defines truncation options\n   * @return {Promise<TruncateChannelAPIResponse>} The server response\n   */\n  async truncate(options: TruncateOptions = {}) {\n    return await this.getClient().post<TruncateChannelAPIResponse>(\n      this._channelURL() + '/truncate',\n      options,\n    );\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {UpdateChannelOptions} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async acceptInvite(options: UpdateChannelOptions = {}) {\n    return await this._update({ accept_invite: true, ...options });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {UpdateChannelOptions} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async rejectInvite(options: UpdateChannelOptions = {}) {\n    return await this._update({ reject_invite: true, ...options });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload>} members An array of members to add to the channel\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async addMembers(\n    members: string[] | Array<NewMemberPayload>,\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ add_members: members, message, ...options });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async addModerators(\n    members: string[],\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ add_moderators: members, message, ...options });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ assign_roles: roles, message, ...options });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {string[] | Array<NewMemberPayload>} members An array of members to invite to the channel\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async inviteMembers(\n    members: string[] | Required<Omit<NewMemberPayload, 'channel_role'>>[],\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ invites: members, message, ...options });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async removeMembers(\n    members: string[],\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ remove_members: members, message, ...options });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   */\n  async demoteModerators(\n    members: string[],\n    message?: Message,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ demote_moderators: members, message, ...options });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: object) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse>(\n      this._channelURL(),\n      payload,\n    );\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<MuteChannelAPIResponse>(\n      this.getClient().baseURL + '/moderation/mute/channel',\n      {\n        channel_cid: this.cid,\n        ...opts,\n      },\n    );\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(\n      this.getClient().baseURL + '/moderation/unmute/channel',\n      {\n        channel_cid: this.cid,\n        ...opts,\n      },\n    );\n  }\n\n  /**\n   * archive - archives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.archives();\n   *\n   * example server side:\n   * await channel.archive({user_id: userId});\n   *\n   */\n  async archive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for archiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unarchive - unarchives the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.unarchive();\n   *\n   * example server side:\n   * await channel.unarchive({user_id: userId});\n   *\n   */\n  async unarchive(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw Error('A user_id is required for unarchiving a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { archived: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * pin - pins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.pin();\n   *\n   * example server side:\n   * await channel.pin({user_id: userId});\n   *\n   */\n  async pin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for pinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: true } });\n    return resp.channel_member;\n  }\n\n  /**\n   * unpin - unpins the current channel\n   * @param {{ user_id?: string }} opts user_id if called server side\n   * @return {Promise<ChannelMemberResponse>} The server response\n   *\n   * example:\n   * await channel.unpin();\n   *\n   * example server side:\n   * await channel.unpin({user_id: userId});\n   *\n   */\n  async unpin(opts: { user_id?: string } = {}) {\n    const cli = this.getClient();\n    const uid = opts.user_id || cli.userID;\n    if (!uid) {\n      throw new Error('A user_id is required for unpinning a channel');\n    }\n    const resp = await this.partialUpdateMember(uid, { set: { pinned: false } });\n    return resp.channel_member;\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<SendMessageAPIResponse>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(messageID)}/action`,\n      {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type,\n      },\n    );\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n        ...(options || {}),\n      } as Event);\n    }\n  }\n\n  /**\n   * Sends an event to update the AI state for a specific message.\n   * Typically used by the server connected to the AI service to notify clients of state changes.\n   *\n   * @param messageId - The ID of the message associated with the AI state.\n   * @param state - The new state of the AI process (e.g., thinking, generating).\n   * @param options - Optional parameters, such as `ai_message`, to include additional details in the event.\n   */\n  async updateAIState(\n    messageId: string,\n    state: AIState,\n    options: { ai_message?: string } = {},\n  ) {\n    await this.sendEvent({\n      ...options,\n      type: 'ai_indicator.update',\n      message_id: messageId,\n      ai_state: state,\n    } as Event);\n  }\n\n  /**\n   * Sends an event to notify watchers to clear the typing/thinking UI when the AI response starts streaming.\n   * Typically used by the server connected to the AI service to inform clients that the AI response has started.\n   */\n  async clearAIIndicator() {\n    await this.sendEvent({\n      type: 'ai_indicator.clear',\n    } as Event);\n  }\n\n  /**\n   * Sends an event to stop AI response generation, leaving the message in its current state.\n   * Triggered by the user to halt the AI response process.\n   */\n  async stopAIResponse() {\n    await this.sendEvent({\n      type: 'ai_indicator.stop',\n    } as Event);\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string, options?: { user_id: string }) {\n    if (!this._isTypingIndicatorsEnabled()) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n      ...(options || {}),\n    } as Event);\n  }\n\n  _isTypingIndicatorsEnabled(): boolean {\n    if (!this.getConfig()?.typing_events || !this.getClient().wsConnection?.isHealthy) {\n      return false;\n    }\n    return this.getClient().user?.privacy_settings?.typing_indicators?.enabled ?? true;\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState['formatMessage']> | undefined} Description\n   */\n  lastMessage(): LocalMessage | undefined {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.latestMessages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.latestMessages.length + 1;\n    const messageSlice = this.state.latestMessages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions} data\n   * @return {Promise<EventAPIResponse | null>} Description\n   */\n  async markRead(data: MarkReadOptions = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<EventAPIResponse>(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * markUnread - Mark the channel as unread from messageID, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkUnreadOptions} data\n   * @return {APIResponse} An API response\n   */\n  async markUnread(data: MarkUnreadOptions) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events && !this.getClient()._isUsingServerAuth()) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<APIResponse>(this._channelURL() + '/unread', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions} options additional options for the query endpoint\n   *\n   * @return {Promise<QueryChannelAPIResponse>} The server response\n   */\n  async watch(options?: ChannelQueryOptions) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined, 'latest');\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger(\n      'info',\n      `channel:watch() - started watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(\n      this._channelURL() + '/stop-watching',\n      {},\n    );\n\n    this._client.logger(\n      'info',\n      `channel:watch() - stopped watching channel ${this.cid}`,\n      {\n        tags: ['channel'],\n        channel: this,\n      },\n    );\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message.\n   *\n   * The recommended way of working with threads is to use the Thread class.\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {MessagePaginationOptions & { user?: UserResponse; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: MessagePaginationOptions & { user?: UserResponse; user_id?: string },\n    sort?: { created_at: AscDesc }[],\n  ) {\n    const normalizedSort = sort ? normalizeQuerySort(sort) : undefined;\n    const data = await this.getClient().get<GetRepliesAPIResponse>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(parent_id)}/replies`,\n      {\n        sort: normalizedSort,\n        ...options,\n      },\n    );\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getPinnedMessages - List list pinned messages of the channel\n   *\n   * @param {PinnedMessagePaginationOptions & { user?: UserResponse; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n   *\n   * @return {Promise<GetRepliesAPIResponse>} A response with a list of messages\n   */\n  async getPinnedMessages(\n    options: PinnedMessagePaginationOptions & { user?: UserResponse; user_id?: string },\n    sort: PinnedMessagesSort = [],\n  ) {\n    return await this.getClient().get<GetRepliesAPIResponse>(\n      this._channelURL() + '/pinned_messages',\n      {\n        payload: {\n          ...options,\n          sort: normalizeQuerySort(sort),\n        },\n      },\n    );\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse>(\n      this.getClient().baseURL + `/messages/${encodeURIComponent(message_id)}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<GetMultipleMessagesAPIResponse>(\n      this._channelURL() + '/messages',\n      {\n        ids: messageIds.join(','),\n      },\n    );\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(message: LocalMessage | MessageResponse) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.parent_id && !message.show_in_channel) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id))\n      return false;\n\n    // Return false if channel doesn't allow read events.\n    if (\n      Array.isArray(this.data?.own_capabilities) &&\n      !this.data?.own_capabilities.includes('read-events')\n    ) {\n      return false;\n    }\n\n    // FIXME: see #1265, adjust and count new messages even when the channel is muted\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n    // todo: prevent finding the latest message set on each iteration\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnreadMentions - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<QueryChannelAPIResponse>} The Server Response\n   *\n   */\n  create = async (options?: ChannelQueryOptions) => {\n    const defaultOptions = {\n      ...options,\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(defaultOptions, 'latest');\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions} options The query options\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n   *\n   * @return {Promise<QueryChannelAPIResponse>} Returns a query response\n   */\n  async query(\n    options: ChannelQueryOptions = {},\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    const createdById =\n      options.created_by?.id ??\n      options.created_by_id ??\n      this._data?.created_by?.id ??\n      this._data?.created_by_id;\n\n    if (this.getClient()._isUsingServerAuth() && typeof createdById !== 'string') {\n      this.getClient().logger(\n        'warn',\n        'Either `created_by` (with `id` property) or `created_by_id` are missing from both `Channel._data` and `options` parameter',\n      );\n    }\n\n    let queryURL = `${this.getClient().baseURL}/channels/${encodeURIComponent(\n      this.type,\n    )}`;\n    if (this.id) {\n      queryURL += `/${encodeURIComponent(this.id)}`;\n    }\n\n    const state = await this.getClient().post<QueryChannelAPIResponse>(\n      queryURL + '/query',\n      {\n        data: this._data,\n        state: true,\n        ...options,\n      },\n    );\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const tempChannelCid = generateChannelTempCid(\n        this.type,\n        state.members.map((member) => member.user_id || member.user?.id || ''),\n      );\n\n      if (tempChannelCid && tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (\n        !(this.cid in this.getClient().activeChannels) &&\n        this.getClient()._cacheEnabled()\n      ) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state.channel);\n\n    // add any messages to our channel state\n    const { messageSet } = this._initializeState(state, messageSetToAddToIfDoesNotExist);\n    messageSet.pagination = {\n      ...messageSet.pagination,\n      ...messageSetPagination({\n        parentSet: messageSet,\n        messagePaginationOptions: options?.messages,\n        requestedPageSize:\n          options?.messages?.limit ?? DEFAULT_QUERY_CHANNEL_MESSAGE_LIST_PAGE_SIZE,\n        returnedPage: state.messages,\n        logger: this.getClient().logger,\n      }),\n    };\n\n    this.getClient().polls.hydratePollCache(state.messages, true);\n    this.getClient().reminders.hydrateState(state.messages);\n\n    this.messageComposer.initStateFromChannelResponse(state);\n\n    const areCapabilitiesChanged =\n      [...(state.channel.own_capabilities || [])].sort().join() !==\n      [\n        ...(this.data && Array.isArray(this.data?.own_capabilities)\n          ? this.data.own_capabilities\n          : []),\n      ]\n        .sort()\n        .join();\n    this.data = state.channel;\n    this.offlineMode = false;\n\n    if (areCapabilitiesChanged) {\n      this.getClient().dispatchEvent({\n        type: 'capabilities.changed',\n        cid: this.cid,\n        own_capabilities: state.channel.own_capabilities,\n      });\n    }\n\n    this.getClient().dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: [state],\n        isLatestMessageSet: messageSet.isLatest,\n      },\n    });\n    this.getClient().offlineDb?.executeQuerySafely(\n      (db) =>\n        db.upsertChannels?.({\n          channels: [state],\n          isLatestMessagesSet: messageSet.isLatest,\n        }),\n      { method: 'upsertChannels' },\n    );\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * Cast or cancel one or more votes on a poll\n   * @param pollId string The poll id\n   * @param votes PollVoteData[] The votes that will be casted (or canceled in case of an empty array)\n   * @returns {APIResponse & PollVoteResponse} The poll votes\n   */\n  async vote(messageId: string, pollId: string, vote: PollVoteData) {\n    return await this.getClient().castPollVote(messageId, pollId, vote);\n  }\n\n  async removeVote(messageId: string, pollId: string, voteId: string) {\n    return await this.getClient().removePollVote(messageId, pollId, voteId);\n  }\n\n  /**\n   * createDraft - Creates or updates a draft message in a channel\n   *\n   * @param {DraftMessagePayload} message The draft message to create or update\n   *\n   * @return {Promise<CreateDraftResponse>} Response containing the created draft\n   */\n  async _createDraft(message: DraftMessagePayload) {\n    return await this.getClient().post<CreateDraftResponse>(\n      this._channelURL() + '/draft',\n      {\n        message,\n      },\n    );\n  }\n\n  /**\n   * createDraft - Creates or updates a draft message in a channel. If offline support is\n   * enabled, it will make sure that creating the draft is queued up if it fails due to\n   * bad internet conditions and executed later.\n   *\n   * @param {DraftMessagePayload} message The draft message to create or update\n   *\n   * @return {Promise<CreateDraftResponse>} Response containing the created draft\n   */\n  async createDraft(message: DraftMessagePayload) {\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask<CreateDraftResponse>({\n          task: {\n            channelId: this.id as string,\n            channelType: this.type,\n            threadId: message.parent_id,\n            payload: [message],\n            type: 'create-draft',\n          },\n        });\n      }\n    } catch (error) {\n      this._client.logger('error', `offlineDb:create-draft`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n\n    return this._createDraft(message);\n  }\n\n  /**\n   * deleteDraft - Deletes a draft message from a channel or a thread.\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<APIResponse>} API response\n   */\n  async _deleteDraft({ parent_id }: { parent_id?: string } = {}) {\n    return await this.getClient().delete<APIResponse>(this._channelURL() + '/draft', {\n      parent_id,\n    });\n  }\n\n  /**\n   * deleteDraft - Deletes a draft message from a channel or a thread. If offline support is\n   * enabled, it will make sure that deleting the draft is queued up if it fails due to\n   * bad internet conditions and executed later.\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<APIResponse>} API response\n   */\n  async deleteDraft(options: { parent_id?: string } = {}) {\n    const { parent_id } = options;\n    try {\n      const offlineDb = this.getClient().offlineDb;\n      if (offlineDb) {\n        return await offlineDb.queueTask<APIResponse>({\n          task: {\n            channelId: this.id as string,\n            channelType: this.type,\n            threadId: parent_id,\n            payload: [options],\n            type: 'delete-draft',\n          },\n        });\n      }\n    } catch (error) {\n      this._client.logger('error', `offlineDb:delete-draft`, {\n        tags: ['channel', 'offlineDb'],\n        error,\n      });\n    }\n\n    return this._deleteDraft(options);\n  }\n\n  /**\n   * getDraft - Retrieves a draft message from a channel\n   *\n   * @param {Object} options\n   * @param {string} options.parent_id Optional parent message ID for drafts in threads\n   *\n   * @return {Promise<GetDraftResponse>} Response containing the draft\n   */\n  async getDraft({ parent_id }: { parent_id?: string } = {}) {\n    return await this.getClient().get<GetDraftResponse>(this._channelURL() + '/draft', {\n      parent_id,\n    });\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler} [callbackOrNothing] The callback to call\n   */\n  on(eventType: EventTypes, callback: EventHandler): { unsubscribe: () => void };\n  on(callback: EventHandler): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler | EventTypes,\n    callbackOrNothing?: EventHandler,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger(\n      'info',\n      `Attaching listener for ${key} event on channel ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger(\n          'info',\n          `Removing listener for ${key} event from channel ${this.cid}`,\n          {\n            tags: ['event', 'channel'],\n            channel: this,\n          },\n        );\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(eventType: EventTypes, callback: EventHandler): void;\n  off(callback: EventHandler): void;\n  off(\n    callbackOrString: EventHandler | EventTypes,\n    callbackOrNothing?: EventHandler,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger(\n      'info',\n      `Removing listener for ${key} event from channel ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _handleChannelEvent(event: Event) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id && event.created_at) {\n          channelState.read[event.user.id] = {\n            last_read: new Date(event.created_at),\n            last_read_message_id: event.last_read_message_id,\n            user: event.user,\n            unread_messages: 0,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage =\n            event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          // do not increase the unread count - the back-end does not increase the count neither in the following cases:\n          // 1. the message is mine\n          // 2. the message is a thread reply from any user\n          const preventUnreadCountUpdate = ownMessage || isThreadMessage;\n          if (preventUnreadCountUpdate) break;\n\n          if (event.user?.id) {\n            for (const userId in channelState.read) {\n              if (userId === event.user.id) {\n                channelState.read[event.user.id] = {\n                  last_read: new Date(event.created_at as string),\n                  user: event.user,\n                  unread_messages: 0,\n                };\n              } else {\n                channelState.read[userId].unread_messages += 1;\n              }\n            }\n          }\n\n          if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n      case 'message.undeleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          channelState.addMessageSorted(event.message, false, false);\n          channelState._updateQuotedMessageReferences({ message: event.message });\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        if (event.channel?.truncated_at) {\n          const truncatedAt = +new Date(event.channel.truncated_at);\n\n          channelState.messageSets.forEach((messageSet, messageSetIndex) => {\n            messageSet.messages.forEach(({ created_at: createdAt, id }) => {\n              if (truncatedAt > +createdAt)\n                channelState.removeMessage({ id, messageSetIndex });\n            });\n          });\n\n          channelState.pinnedMessages.forEach(({ id, created_at: createdAt }) => {\n            if (truncatedAt > +createdAt)\n              channelState.removePinnedMessage({ id } as MessageResponse);\n          });\n          channelState.unreadCount = this.countUnread(\n            new Date(event.channel.truncated_at),\n          );\n        } else {\n          channelState.clearMessages();\n          channelState.unreadCount = 0;\n        }\n\n        // system messages don't increment unread counts\n        if (event.message) {\n          channelState.addMessageSorted(event.message);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n        }\n\n        break;\n      case 'member.added':\n      case 'member.updated': {\n        const memberCopy: ChannelMemberResponse = {\n          ...event.member,\n        };\n\n        if (memberCopy.pinned_at === null) {\n          delete memberCopy.pinned_at;\n        }\n\n        if (memberCopy.archived_at === null) {\n          delete memberCopy.archived_at;\n        }\n\n        if (memberCopy?.user) {\n          channelState.members = {\n            ...channelState.members,\n            [memberCopy.user.id]: memberCopy,\n          };\n          if (channel.data?.member_count && event.type === 'member.added') {\n            channel.data.member_count += 1;\n          }\n        }\n\n        const currentUserId = this.getClient().userID;\n        if (\n          typeof currentUserId === 'string' &&\n          typeof memberCopy?.user?.id === 'string' &&\n          memberCopy.user.id === currentUserId\n        ) {\n          channelState.membership = memberCopy;\n        }\n        break;\n      }\n      case 'member.removed':\n        if (event.user?.id) {\n          const newMembers = {\n            ...channelState.members,\n          };\n\n          delete newMembers[event.user.id];\n\n          channelState.members = newMembers;\n\n          if (channel.data?.member_count) {\n            channel.data.member_count = Math.max(channel.data.member_count - 1, 0);\n          }\n\n          // TODO?: unset membership\n        }\n        break;\n      case 'notification.mark_unread': {\n        const ownMessage = event.user?.id === this.getClient().user?.id;\n        if (!(ownMessage && event.user)) break;\n\n        const unreadCount = event.unread_messages ?? 0;\n\n        channelState.read[event.user.id] = {\n          first_unread_message_id: event.first_unread_message_id,\n          last_read: new Date(event.last_read_at as string),\n          last_read_message_id: event.last_read_message_id,\n          user: event.user,\n          unread_messages: unreadCount,\n        };\n\n        channelState.unreadCount = unreadCount;\n        break;\n      }\n      case 'channel.updated':\n        if (event.channel) {\n          const isFrozenChanged =\n            event.channel?.frozen !== undefined &&\n            event.channel.frozen !== channel.data?.frozen;\n          if (isFrozenChanged) {\n            this.query({ state: false, messages: { limit: 0 }, watchers: { limit: 0 } });\n          }\n          const newChannelData = {\n            ...event.channel,\n            hidden: event.channel?.hidden ?? channel.data?.hidden,\n            own_capabilities:\n              event.channel?.own_capabilities ?? channel.data?.own_capabilities,\n          };\n          channel.data = newChannelData;\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          const { message, reaction } = event;\n          event.message = channelState.addReaction(reaction, message) as MessageResponse;\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.message && event.reaction) {\n          const { message, reaction } = event;\n          event.message = channelState.removeReaction(reaction, message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.message && event.reaction) {\n          const { message, reaction } = event;\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(\n            reaction,\n            message,\n            true,\n          ) as MessageResponse;\n        }\n        break;\n      case 'channel.hidden':\n        channel.data = { ...channel.data, hidden: true };\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      case 'channel.visible':\n        channel.data = { ...channel.data, hidden: false };\n        this.getClient().offlineDb?.handleChannelVisibilityEvent({ event });\n        break;\n      case 'user.banned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: !!event.shadow,\n          banned: !event.shadow,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      case 'user.unbanned':\n        if (!event.user?.id) break;\n        channelState.members[event.user.id] = {\n          ...(channelState.members[event.user.id] || {}),\n          shadow_banned: false,\n          banned: false,\n          user: { ...(channelState.members[event.user.id]?.user || {}), ...event.user },\n        };\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (event: Event) => {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${encodeURIComponent(\n      this.type,\n    )}/${encodeURIComponent(this.id)}`;\n  };\n\n  _checkInitialized() {\n    if (\n      !this.initialized &&\n      !this.offlineMode &&\n      !this.getClient()._isUsingServerAuth()\n    ) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  _initializeState(\n    state: ChannelAPIResponse,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the members and users\n    if (state.members) {\n      this._hydrateMembers({ members: state.members });\n\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.initMessages();\n    }\n    const { messageSet } = this.state.addMessagesSorted(\n      messages,\n      false,\n      true,\n      true,\n      messageSetToAddToIfDoesNotExist,\n    );\n\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    if (state.pending_messages) {\n      this.state.pending_messages = state.pending_messages;\n    }\n    if (state.watcher_count !== undefined) {\n      this.state.watcher_count = state.watcher_count;\n    }\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n          unread_messages: 0,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        this.state.read[read.user.id] = {\n          last_read: new Date(read.last_read),\n          last_read_message_id: read.last_read_message_id,\n          unread_messages: read.unread_messages ?? 0,\n          user: read.user,\n        };\n\n        if (read.user.id === user?.id) {\n          this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n        }\n      }\n    }\n\n    return {\n      messageSet,\n    };\n  }\n\n  _extendEventWithOwnReactions(event: Event) {\n    if (!event.message) {\n      return;\n    }\n    const message = this.state.findMessage(event.message.id, event.message.parent_id);\n    if (message) {\n      event.message.own_reactions = message.own_reactions;\n    }\n  }\n\n  _hydrateMembers({\n    members,\n    overrideCurrentState = true,\n  }: {\n    members: ChannelMemberResponse[];\n    /**\n     * If set to `true` then `ChannelState.members` will be overriden with the newly\n     * provided `members`, setting this property to `false` will merge current `ChannelState.members`\n     * object with the newly provided `members`\n     * (new members with the same `userId` will replace the old ones).\n     */\n    overrideCurrentState?: boolean;\n  }) {\n    const newMembersById = members.reduce<ChannelState['members']>(\n      (membersById, member) => {\n        if (member.user) {\n          membersById[member.user.id] = member;\n        }\n        return membersById;\n      },\n      {},\n    );\n\n    if (overrideCurrentState) {\n      this.state.members = newMembersById;\n    } else if (!overrideCurrentState && members.length) {\n      this.state.members = {\n        ...this.state.members,\n        ...newMembersById,\n      };\n    }\n  }\n\n  _disconnect() {\n    this._client.logger(\n      'info',\n      `channel:disconnect() - Disconnecting the channel ${this.cid}`,\n      {\n        tags: ['connection', 'channel'],\n        channel: this,\n      },\n    );\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n","import type { UserResponse } from './types';\nimport type { StreamChat } from './client';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n  private client: StreamChat;\n  users: {\n    [key: string]: UserResponse;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor({ client }: { client: StreamChat }) {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.client = client;\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse) {\n    if (user != null && this.client._cacheEnabled()) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse, channelID: string) {\n    if (user == null || !this.client._cacheEnabled()) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nexport default ws\n","import axios from 'axios';\nimport type { StableWSConnection } from './connection';\nimport { randomId, sleep } from './utils';\n\nexport type InsightTypes = 'ws_fatal' | 'ws_success_after_failure' | 'http_hi_failed';\nexport class InsightMetrics {\n  connectionStartTimestamp: number | null;\n  wsConsecutiveFailures: number;\n  wsTotalFailures: number;\n  instanceClientId: string;\n\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n}\n\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\nexport const postInsights = async (\n  insightType: InsightTypes,\n  insights: Record<string, unknown>,\n) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios.post(\n        `https://chat-insights.getstream.io/insights/${insightType}`,\n        insights,\n      );\n    } catch (e) {\n      await sleep((i + 1) * 3000);\n      continue;\n    }\n    break;\n  }\n};\n\nexport function buildWsFatalInsight(\n  connection: StableWSConnection,\n  event: Record<string, unknown>,\n) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection),\n  };\n}\n\nfunction buildWsBaseInsight(connection: StableWSConnection) {\n  const { client } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? navigator?.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId,\n  };\n}\n\nexport function buildWsSuccessAfterFailureInsight(connection: StableWSConnection) {\n  return buildWsBaseInsight(connection);\n}\n","import WebSocket from 'isomorphic-ws';\nimport {\n  addConnectionEventListeners,\n  chatCodes,\n  convertErrorToJson,\n  randomId,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport {\n  buildWsFatalInsight,\n  buildWsSuccessAfterFailureInsight,\n  postInsights,\n} from './insights';\nimport type { ConnectAPIResponse, ConnectionOpen, LogLevel, UR } from './types';\nimport type { StreamChat } from './client';\nimport type { APIError } from './errors';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.CloseEvent => (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.ErrorEvent => (res as WebSocket.ErrorEvent).error !== undefined;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n  // global from constructor\n  client: StreamChat;\n\n  // local vars\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  requestID: string | undefined;\n  resolvePromise?: (value: ConnectionOpen) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({ client }: { client: StreamChat }) {\n    /** StreamChat client */\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'connection:' + msg, { tags: ['connection'], ...extra });\n  }\n\n  setClient(client: StreamChat) {\n    this.client = client;\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      const e = error as APIError;\n\n      if (e.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log(\n          'connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n        this._reconnect({ refreshToken: true });\n      } else if (!e.isWSFailure) {\n        // API rejected the connection and we should not retry\n        throw new Error(\n          JSON.stringify({\n            code: e.code,\n            StatusCode: e.StatusCode,\n            message: e.message,\n            isWSFailure: e.isWSFailure,\n          }),\n        );\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          } catch (error: any) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const qs = this.client._buildWSPayload(this.requestID);\n    const token = this.client.tokenManager.getToken();\n    const wsUrlParams = this.client.options.wsUrlParams;\n\n    const params = new URLSearchParams(wsUrlParams);\n    params.set('json', qs);\n    params.set('api_key', this.client.key);\n    // it is expected that the autorization parameter exists even if\n    // the token is undefined, so we interpolate it to be safe\n    params.set('authorization', `${token}`);\n    params.set('stream-auth-type', this.client.getAuthType());\n    params.set('X-Stream-Client', this.client.getUserAgent());\n\n    return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this._log(\n            `disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`,\n            { event },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(\n        `disconnect() - Manually closed connection by calling client.disconnect()`,\n      );\n\n      ws.close(\n        chatCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (\n      this.isConnecting ||\n      (this.isDisconnected && this.client.options.enableWSFallback)\n    )\n      return; // simply ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, {\n        wsURL,\n        requestID: this.requestID,\n      });\n      this.ws = new WebSocket(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        if (\n          this.client.insightMetrics.wsConsecutiveFailures > 0 &&\n          this.client.options.enableInsights\n        ) {\n          postInsights(\n            'ws_success_after_failure',\n            buildWsSuccessAfterFailureInsight(this as unknown as StableWSConnection),\n          );\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.isConnecting = false;\n      this._log(`_connect() - Error - `, error);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n\n        const insights = buildWsFatalInsight(\n          this as unknown as StableWSConnection,\n          convertErrorToJson(error as Error),\n        );\n        postInsights?.('ws_fatal', insights);\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (\n        error.code === chatCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        this._log(\n          '_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(\n        `onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      this.isResolved = true;\n      if (data.error) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n\n      this.resolvePromise?.(data);\n      this._setHealth(true);\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.client.handleEvent(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      ) as Error & WebSocket.CloseEvent;\n\n      error.reason = event.reason;\n      error.code = event.code;\n      error.wasClean = event.wasClean;\n      error.target = event.target;\n\n      this.rejectPromise?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, { event });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, { event });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (\n    event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this._log(`_errorFromWSEvent() - WS failed with code ${code}`, { event }, 'warn');\n\n    const error = new Error(\n      `WS failed with code ${code} and reason - ${message}`,\n    ) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<ConnectionOpen>((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (\n        this.lastEvent &&\n        now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout\n      ) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { decodeBase64, encodeBase64 } from './base64';\nimport type { UR } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(\n  apiSecret: jwt.Secret,\n  userId: string,\n  extraData: UR = {},\n  jwtOptions: jwt.SignOptions = {},\n) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UR = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: jwt.SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: jwt.Secret, jwtOptions: jwt.SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: jwt.SignOptions = Object.assign(\n    { algorithm: 'HS256', noTimestamp: true },\n    jwtOptions,\n  );\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string | Buffer} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string | Buffer, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'utf8');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n\n  try {\n    return crypto.timingSafeEqual(Buffer.from(hash), Buffer.from(signature));\n  } catch {\n    return false;\n  }\n}\n","import type jwt from 'jsonwebtoken';\n\nimport { JWTServerToken, JWTUserToken, UserFromToken } from './signing';\nimport { isFunction } from './utils';\nimport type { TokenOrProvider, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: jwt.Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: jwt.Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse} user\n   */\n  setTokenOrProvider = async (tokenOrProvider: TokenOrProvider, user: UserResponse) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.tokenProvider = undefined;\n    this.type = 'static';\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (\n      tokenOrProvider &&\n      typeof tokenOrProvider !== 'string' &&\n      !isFunction(tokenOrProvider)\n    ) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          this.token = await this.tokenProvider();\n        } catch (e) {\n          return reject(\n            new Error(`Call to tokenProvider failed with message: ${e}`, { cause: e }),\n          );\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","import type { AxiosResponse } from 'axios';\nimport type { APIErrorResponse } from './types';\n\nexport const APIErrorCodes: Record<string, { name: string; retryable: boolean }> = {\n  '-1': { name: 'InternalSystemError', retryable: true },\n  '2': { name: 'AccessKeyError', retryable: false },\n  '3': { name: 'AuthenticationFailedError', retryable: true },\n  '4': { name: 'InputError', retryable: false },\n  '6': { name: 'DuplicateUsernameError', retryable: false },\n  '9': { name: 'RateLimitError', retryable: true },\n  '16': { name: 'DoesNotExistError', retryable: false },\n  '17': { name: 'NotAllowedError', retryable: false },\n  '18': { name: 'EventNotSupportedError', retryable: false },\n  '19': { name: 'ChannelFeatureNotSupportedError', retryable: false },\n  '20': { name: 'MessageTooLongError', retryable: false },\n  '21': { name: 'MultipleNestingLevelError', retryable: false },\n  '22': { name: 'PayloadTooBigError', retryable: false },\n  '23': { name: 'RequestTimeoutError', retryable: true },\n  '24': { name: 'MaxHeaderSizeExceededError', retryable: false },\n  '40': { name: 'AuthErrorTokenExpired', retryable: false },\n  '41': { name: 'AuthErrorTokenNotValidYet', retryable: false },\n  '42': { name: 'AuthErrorTokenUsedBeforeIssuedAt', retryable: false },\n  '43': { name: 'AuthErrorTokenSignatureInvalid', retryable: false },\n  '44': { name: 'CustomCommandEndpointMissingError', retryable: false },\n  '45': { name: 'CustomCommandEndpointCallError', retryable: true },\n  '46': { name: 'ConnectionIDNotFoundError', retryable: false },\n  '60': { name: 'CoolDownError', retryable: true },\n  '69': { name: 'ErrWrongRegion', retryable: false },\n  '70': { name: 'ErrQueryChannelPermissions', retryable: false },\n  '71': { name: 'ErrTooManyConnections', retryable: true },\n  '99': { name: 'AppSuspendedError', retryable: false },\n};\n\nexport type APIError = Error & {\n  code: number;\n  isWSFailure?: boolean;\n  StatusCode?: number;\n};\n\nexport function isAPIError(error: Error): error is APIError {\n  return (error as APIError).code !== undefined;\n}\n\nexport function isErrorRetryable(error: APIError) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\n\nexport function isConnectionIDError(error: APIError) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\n\nexport function isWSFailure(err: APIError): boolean {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function isErrorResponse(\n  res: AxiosResponse<unknown>,\n): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n","import type { AxiosRequestConfig, CancelTokenSource } from 'axios';\nimport axios from 'axios';\nimport type { StreamChat } from './client';\nimport {\n  addConnectionEventListeners,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport { isAPIError, isConnectionIDError, isErrorRetryable } from './errors';\nimport type { ConnectionOpen, Event, LogLevel, UR } from './types';\n\nexport enum ConnectionState {\n  Closed = 'CLOSED',\n  Connected = 'CONNECTED',\n  Connecting = 'CONNECTING',\n  Disconnected = 'DISCONNECTED',\n  Init = 'INIT',\n}\n\nexport class WSConnectionFallback {\n  client: StreamChat;\n  state: ConnectionState;\n  consecutiveFailures: number;\n  connectionID?: string;\n  cancelToken?: CancelTokenSource;\n\n  constructor({ client }: { client: StreamChat }) {\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'WSConnectionFallback:' + msg, {\n      tags: ['connection_fallback', 'connection'],\n      ...extra,\n    });\n  }\n\n  _setState(state: ConnectionState) {\n    this._log(`_setState() - ${state}`);\n\n    // transition from connecting => connected\n    if (\n      this.state === ConnectionState.Connecting &&\n      state === ConnectionState.Connected\n    ) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: true });\n    }\n\n    if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: false });\n    }\n\n    this.state = state;\n  }\n\n  /** @private */\n  _onlineStatusChanged = (event: { type: string }) => {\n    this._log(`_onlineStatusChanged() - ${event.type}`);\n\n    if (event.type === 'offline') {\n      this._setState(ConnectionState.Closed);\n      this.cancelToken?.cancel('disconnect() is called');\n      this.cancelToken = undefined;\n      return;\n    }\n\n    if (event.type === 'online' && this.state === ConnectionState.Closed) {\n      this.connect(true);\n    }\n  };\n\n  /** @private */\n  _req = async <T = UR>(\n    params: UR,\n    config: AxiosRequestConfig,\n    retry: boolean,\n  ): Promise<T> => {\n    if (!this.cancelToken && !params.close) {\n      this.cancelToken = axios.CancelToken.source();\n    }\n\n    try {\n      const res = await this.client.doAxiosRequest<T>(\n        'get',\n        (this.client.baseURL as string).replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API\n        undefined,\n        {\n          config: { ...config, cancelToken: this.cancelToken?.token },\n          params,\n        },\n      );\n\n      this.consecutiveFailures = 0; // always reset in case of no error\n      return res;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (error: any) {\n      this.consecutiveFailures += 1;\n\n      if (retry && isErrorRetryable(error)) {\n        this._log(`_req() - Retryable error, retrying request`);\n        await sleep(retryInterval(this.consecutiveFailures));\n        return this._req<T>(params, config, retry);\n      }\n\n      throw error;\n    }\n  };\n\n  /** @private */\n  _poll = async () => {\n    while (this.state === ConnectionState.Connected) {\n      try {\n        const data = await this._req<{\n          events: Event[];\n        }>({}, { timeout: 30000 }, true); // 30s => API responds in 20s if there is no event\n\n        if (data.events?.length) {\n          for (let i = 0; i < data.events.length; i++) {\n            this.client.dispatchEvent(data.events[i]);\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } catch (error: any) {\n        if (axios.isCancel(error)) {\n          this._log(`_poll() - axios canceled request`);\n          return;\n        }\n\n        /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */\n\n        if (isConnectionIDError(error)) {\n          this._log(`_poll() - ConnectionID error, connecting without ID...`);\n          this._setState(ConnectionState.Disconnected);\n          this.connect(true);\n          return;\n        }\n\n        if (isAPIError(error) && !isErrorRetryable(error)) {\n          this._setState(ConnectionState.Closed);\n          return;\n        }\n\n        await sleep(retryInterval(this.consecutiveFailures));\n      }\n    }\n  };\n\n  /**\n   * connect try to open a longpoll request\n   * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n   */\n  connect = async (reconnect = false) => {\n    if (this.state === ConnectionState.Connecting) {\n      this._log('connect() - connecting already in progress', { reconnect }, 'warn');\n      return;\n    }\n    if (this.state === ConnectionState.Connected) {\n      this._log('connect() - already connected and polling', { reconnect }, 'warn');\n      return;\n    }\n\n    this._setState(ConnectionState.Connecting);\n    this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n    try {\n      const { event } = await this._req<{ event: ConnectionOpen }>(\n        { json: this.client._buildWSPayload() },\n        { timeout: 8000 }, // 8s\n        reconnect,\n      );\n\n      this._setState(ConnectionState.Connected);\n      this.connectionID = event.connection_id;\n      // @ts-expect-error type mismatch\n      this.client.dispatchEvent(event);\n      this._poll();\n      if (reconnect) {\n        this.client.recoverState();\n      }\n      return event;\n    } catch (err) {\n      this._setState(ConnectionState.Closed);\n      throw err;\n    }\n  };\n\n  /**\n   * isHealthy checks if there is a connectionID and connection is in Connected state\n   */\n  isHealthy = () => !!this.connectionID && this.state === ConnectionState.Connected;\n\n  disconnect = async (timeout = 2000) => {\n    removeConnectionEventListeners(this._onlineStatusChanged);\n\n    this._setState(ConnectionState.Disconnected);\n    this.cancelToken?.cancel('disconnect() is called');\n    this.cancelToken = undefined;\n\n    const connection_id = this.connectionID;\n    this.connectionID = undefined;\n\n    try {\n      await this._req({ close: true, connection_id }, { timeout }, false);\n      this._log(`disconnect() - Closed connectionID`);\n    } catch (err) {\n      this._log(`disconnect() - Failed`, { err }, 'error');\n    }\n  };\n}\n","import type { StreamChat } from './client';\nimport type {\n  QuerySegmentTargetsFilter,\n  SegmentData,\n  SegmentResponse,\n  SortParam,\n} from './types';\n\ntype SegmentType = 'user' | 'channel';\n\ntype SegmentUpdatableFields = {\n  description?: string;\n  filter?: {};\n  name?: string;\n};\n\nexport class Segment {\n  type: SegmentType;\n  id: string | null;\n  client: StreamChat;\n  data?: SegmentData | SegmentResponse;\n\n  constructor(\n    client: StreamChat,\n    type: SegmentType,\n    id: string | null,\n    data?: SegmentData,\n  ) {\n    this.client = client;\n    this.type = type;\n    this.id = id;\n    this.data = data;\n  }\n\n  create() {\n    const body = {\n      name: this.data?.name,\n      filter: this.data?.filter,\n      description: this.data?.description,\n      all_sender_channels: this.data?.all_sender_channels,\n      all_users: this.data?.all_users,\n    };\n\n    return this.client.createSegment(this.type, this.id, body);\n  }\n\n  verifySegmentId() {\n    if (!this.id) {\n      throw new Error(\n        'Segment id is missing. Either create the segment using segment.create() or set the id during instantiation - const segment = client.segment(id)',\n      );\n    }\n  }\n\n  get() {\n    this.verifySegmentId();\n    return this.client.getSegment(this.id as string);\n  }\n\n  update(data: Partial<SegmentUpdatableFields>) {\n    this.verifySegmentId();\n\n    return this.client.updateSegment(this.id as string, data);\n  }\n\n  addTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.addSegmentTargets(this.id as string, targets);\n  }\n\n  removeTargets(targets: string[]) {\n    this.verifySegmentId();\n    return this.client.removeSegmentTargets(this.id as string, targets);\n  }\n\n  delete() {\n    this.verifySegmentId();\n    return this.client.deleteSegment(this.id as string);\n  }\n\n  targetExists(targetId: string) {\n    this.verifySegmentId();\n    return this.client.segmentTargetExists(this.id as string, targetId);\n  }\n\n  queryTargets(\n    filter: QuerySegmentTargetsFilter | null = {},\n    sort: SortParam[] | null | [] = [],\n    options = {},\n  ) {\n    this.verifySegmentId();\n\n    return this.client.querySegmentTargets(this.id as string, filter, sort, options);\n  }\n}\n","import type {\n  APIResponse,\n  CustomCheckFlag,\n  GetConfigResponse,\n  GetUserModerationReportOptions,\n  GetUserModerationReportResponse,\n  ModerationConfig,\n  ModerationFlagOptions,\n  ModerationMuteOptions,\n  MuteUserResponse,\n  Pager,\n  QueryConfigsResponse,\n  QueryModerationConfigsFilters,\n  QueryModerationConfigsSort,\n  RequireAtLeastOne,\n  ReviewQueueFilters,\n  ReviewQueueItem,\n  ReviewQueuePaginationOptions,\n  ReviewQueueResponse,\n  ReviewQueueSort,\n  SubmitActionOptions,\n  UpsertConfigResponse,\n} from './types';\nimport type { StreamChat } from './client';\nimport { normalizeQuerySort } from './utils';\n\nexport const MODERATION_ENTITY_TYPES = {\n  user: 'stream:user',\n  message: 'stream:chat:v1:message',\n  userprofile: 'stream:v1:user_profile',\n};\n\n// Moderation class provides all the endpoints related to moderation v2.\nexport class Moderation {\n  client: StreamChat;\n\n  constructor(client: StreamChat) {\n    this.client = client;\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} flaggedUserID User ID to be flagged\n   * @param {string} reason Reason for flagging the user\n   * @param {Object} options Additional options for flagging the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target user\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  flagUser(flaggedUserID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.user, flaggedUserID, '', reason, options);\n  }\n\n  /**\n   * Flag a message\n   *\n   * @param {string} messageID Message ID to be flagged\n   * @param {string} reason Reason for flagging the message\n   * @param {Object} options Additional options for flagging the message\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target message\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  flagMessage(messageID: string, reason: string, options: ModerationFlagOptions = {}) {\n    return this.flag(MODERATION_ENTITY_TYPES.message, messageID, '', reason, options);\n  }\n\n  /**\n   * Flag a user\n   *\n   * @param {string} entityType Entity type to be flagged\n   * @param {string} entityId Entity ID to be flagged\n   * @param {string} entityCreatorID User ID of the entity creator\n   * @param {string} reason Reason for flagging the entity\n   * @param {Object} options Additional options for flagging the entity\n   * @param {string} options.user_id (For server side usage) User ID of the user who is flagging the target entity\n   * @param {Object} options.moderation_payload Content to be flagged e.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Object} options.custom Additional data to be stored with the flag\n   * @returns\n   */\n  async flag(\n    entityType: string,\n    entityId: string,\n    entityCreatorID: string,\n    reason: string,\n    options: ModerationFlagOptions = {},\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/flag',\n      {\n        entity_type: entityType,\n        entity_id: entityId,\n        entity_creator_id: entityCreatorID,\n        reason,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Mute a user\n   * @param {string} targetID  User ID to be muted\n   * @param {Object} options Additional options for muting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is muting the target user\n   * @param {number} options.timeout Timeout for the mute in minutes\n   * @returns\n   */\n  async muteUser(targetID: string, options: ModerationMuteOptions = {}) {\n    return await this.client.post<MuteUserResponse & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/mute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Unmute a user\n   * @param {string} targetID  User ID to be unmuted\n   * @param {Object} options Additional options for unmuting the user\n   * @param {string} options.user_id (For server side usage) User ID of the user who is unmuting the target user\n   * @returns\n   */\n  async unmuteUser(\n    targetID: string,\n    options: {\n      user_id?: string;\n    },\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/unmute',\n      {\n        target_ids: [targetID],\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Get moderation report for a user\n   * @param {string} userID User ID for which moderation report is to be fetched\n   * @param {Object} options Additional options for fetching the moderation report\n   * @param {boolean} options.create_user_if_not_exists Create user if not exists\n   * @param {boolean} options.include_user_blocks Include user blocks\n   * @param {boolean} options.include_user_mutes Include user mutes\n   */\n  async getUserModerationReport(\n    userID: string,\n    options: GetUserModerationReportOptions = {},\n  ) {\n    return await this.client.get<GetUserModerationReportResponse>(\n      this.client.baseURL + `/api/v2/moderation/user_report`,\n      {\n        user_id: userID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Query review queue\n   * @param {Object} filterConditions Filter conditions for querying review queue\n   * @param {Object} sort Sort conditions for querying review queue\n   * @param {Object} options Pagination options for querying review queue\n   */\n  async queryReviewQueue(\n    filterConditions: ReviewQueueFilters = {},\n    sort: ReviewQueueSort = [],\n    options: ReviewQueuePaginationOptions = {},\n  ) {\n    return await this.client.post<ReviewQueueResponse>(\n      this.client.baseURL + '/api/v2/moderation/review_queue',\n      {\n        filter: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * Upsert moderation config\n   * @param {Object} config Moderation config to be upserted\n   */\n  async upsertConfig(config: ModerationConfig) {\n    return await this.client.post<UpsertConfigResponse>(\n      this.client.baseURL + '/api/v2/moderation/config',\n      config,\n    );\n  }\n\n  /**\n   * Get moderation config\n   * @param {string} key Key for which moderation config is to be fetched\n   */\n  async getConfig(key: string, data?: { team?: string }) {\n    return await this.client.get<GetConfigResponse>(\n      this.client.baseURL + '/api/v2/moderation/config/' + key,\n      data,\n    );\n  }\n\n  async deleteConfig(key: string, data?: { team?: string }) {\n    return await this.client.delete(\n      this.client.baseURL + '/api/v2/moderation/config/' + key,\n      data,\n    );\n  }\n\n  /**\n   * Query moderation configs\n   * @param {Object} filterConditions Filter conditions for querying moderation configs\n   * @param {Object} sort Sort conditions for querying moderation configs\n   * @param {Object} options Additional options for querying moderation configs\n   */\n  async queryConfigs(\n    filterConditions: QueryModerationConfigsFilters,\n    sort: QueryModerationConfigsSort,\n    options: Pager = {},\n  ) {\n    return await this.client.post<QueryConfigsResponse>(\n      this.client.baseURL + '/api/v2/moderation/configs',\n      {\n        filter: filterConditions,\n        sort,\n        ...options,\n      },\n    );\n  }\n\n  async submitAction(\n    actionType: string,\n    itemID: string,\n    options: SubmitActionOptions = {},\n  ) {\n    return await this.client.post<{ item_id: string } & APIResponse>(\n      this.client.baseURL + '/api/v2/moderation/submit_action',\n      {\n        action_type: actionType,\n        item_id: itemID,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param configKey\n   * @param options\n   * @returns\n   */\n  async check(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      custom?: Record<string, any>;\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    configKey: string,\n    options?: {\n      force_sync?: boolean;\n      test_mode?: boolean;\n    },\n  ) {\n    return await this.client.post(this.client.baseURL + `/api/v2/moderation/check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      config_key: configKey,\n      options,\n    });\n  }\n\n  /**\n   * Experimental: Check user profile\n   *\n   * Warning: This is an experimental feature and the API is subject to change.\n   *\n   * This function is used to check a user profile for moderation.\n   * This will not create any review queue items for the user profile.\n   * You can just use this to check whether to allow a certain user profile to be created or not.\n   *\n   * Example:\n   *\n   * ```ts\n   * const res = await client.moderation.checkUserProfile(userId, { username: \"fuck_boy_001\", image: \"https://example.com/profile.jpg\" });\n   * if (res.recommended_action === \"remove\") {\n   *   // Block the user profile from being created\n   * } else {\n   *   // Allow the user profile to be created\n   * }\n   * ```\n   *\n   * @param userId\n   * @param profile.username\n   * @param profile.image\n   * @returns\n   */\n  async checkUserProfile(\n    userId: string,\n    profile: RequireAtLeastOne<{ image?: string; username?: string }>,\n  ) {\n    if (!profile.username && !profile.image) {\n      throw new Error('Either username or image must be provided');\n    }\n\n    const moderationPayload: { images?: string[]; texts?: string[] } = {};\n    if (profile.username) {\n      moderationPayload.texts = [profile.username];\n    }\n    if (profile.image) {\n      moderationPayload.images = [profile.image];\n    }\n\n    return await this.check(\n      MODERATION_ENTITY_TYPES.userprofile,\n      userId,\n      userId,\n      moderationPayload,\n      'user_profile:default',\n      {\n        force_sync: true,\n        test_mode: true,\n      },\n    );\n  }\n\n  /**\n   *\n   * @param {string} entityType string Type of entity to be checked E.g., stream:user, stream:chat:v1:message, or any custom string\n   * @param {string} entityID string ID of the entity to be checked. This is mainly for tracking purposes\n   * @param {string} entityCreatorID string ID of the entity creator\n   * @param {object} moderationPayload object Content to be checked for moderation. E.g., { texts: ['text1', 'text2'], images: ['image1', 'image2']}\n   * @param {Array} moderationPayload.texts array Array of texts to be checked for moderation\n   * @param {Array} moderationPayload.images array Array of images to be checked for moderation\n   * @param {Array} moderationPayload.videos array Array of videos to be checked for moderation\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the entity\n   * @returns\n   */\n  async addCustomFlags(\n    entityType: string,\n    entityID: string,\n    entityCreatorID: string,\n    moderationPayload: {\n      images?: string[];\n      texts?: string[];\n      videos?: string[];\n    },\n    flags: CustomCheckFlag[],\n  ) {\n    return await this.client.post<\n      { id: string; item: ReviewQueueItem; status: string } & APIResponse\n    >(this.client.baseURL + `/api/v2/moderation/custom_check`, {\n      entity_type: entityType,\n      entity_id: entityID,\n      entity_creator_id: entityCreatorID,\n      moderation_payload: moderationPayload,\n      flags,\n    });\n  }\n\n  /**\n   * Add custom flags to a message\n   * @param {string} messageID Message ID to be flagged\n   * @param {Array<CustomCheckFlag>} flags Array of CustomCheckFlag to be passed to flag the message\n   * @returns\n   */\n  async addCustomMessageFlags(messageID: string, flags: CustomCheckFlag[]) {\n    return await this.addCustomFlags(\n      MODERATION_ENTITY_TYPES.message,\n      messageID,\n      '',\n      {},\n      flags,\n    );\n  }\n}\n","import { StateStore } from './store';\nimport { throttle } from './utils';\n\nimport type { StreamChat } from './client';\nimport type { Thread } from './thread';\nimport type { Event, OwnUserResponse, QueryThreadsOptions } from './types';\nimport { WithSubscriptions } from './utils/WithSubscriptions';\n\nconst DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION = 1000;\nconst MAX_QUERY_THREADS_LIMIT = 25;\nexport const THREAD_MANAGER_INITIAL_STATE = {\n  active: false,\n  isThreadOrderStale: false,\n  threads: [],\n  unreadThreadCount: 0,\n  unseenThreadIds: [],\n  lastConnectionDropAt: null,\n  pagination: {\n    isLoading: false,\n    isLoadingNext: false,\n    nextCursor: null,\n  },\n  ready: false,\n};\n\nexport type ThreadManagerState = {\n  active: boolean;\n  isThreadOrderStale: boolean;\n  lastConnectionDropAt: Date | null;\n  pagination: ThreadManagerPagination;\n  ready: boolean;\n  threads: Thread[];\n  unreadThreadCount: number;\n  /**\n   * List of threads that haven't been loaded in the list, but have received new messages\n   * since the latest reload. Useful to display a banner prompting to reload the thread list.\n   */\n  unseenThreadIds: string[];\n};\n\nexport type ThreadManagerPagination = {\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  nextCursor: string | null;\n};\n\nexport class ThreadManager extends WithSubscriptions {\n  public readonly state: StateStore<ThreadManagerState>;\n  private client: StreamChat;\n  private threadsByIdGetterCache: {\n    threads: ThreadManagerState['threads'];\n    threadsById: Record<string, Thread | undefined>;\n  };\n  // cache used in combination with threadsById\n  // used for threads which are not stored in the list\n  // private threadCache: Record<string, Thread | undefined> = {};\n\n  constructor({ client }: { client: StreamChat }) {\n    super();\n\n    this.client = client;\n    this.state = new StateStore<ThreadManagerState>(THREAD_MANAGER_INITIAL_STATE);\n\n    this.threadsByIdGetterCache = { threads: [], threadsById: {} };\n  }\n\n  public get threadsById() {\n    const { threads } = this.state.getLatestValue();\n\n    if (threads === this.threadsByIdGetterCache.threads) {\n      return this.threadsByIdGetterCache.threadsById;\n    }\n\n    const threadsById = threads.reduce<Record<string, Thread>>(\n      (newThreadsById, thread) => {\n        newThreadsById[thread.id] = thread;\n        return newThreadsById;\n      },\n      {},\n    );\n\n    this.threadsByIdGetterCache.threads = threads;\n    this.threadsByIdGetterCache.threadsById = threadsById;\n\n    return threadsById;\n  }\n\n  public resetState = () => {\n    this.state.next(THREAD_MANAGER_INITIAL_STATE);\n  };\n\n  public activate = () => {\n    this.state.partialNext({ active: true });\n  };\n\n  public deactivate = () => {\n    this.state.partialNext({ active: false });\n  };\n\n  public registerSubscriptions = () => {\n    if (this.hasSubscriptions) return;\n\n    this.addUnsubscribeFunction(this.subscribeUnreadThreadsCountChange());\n    this.addUnsubscribeFunction(this.subscribeManageThreadSubscriptions());\n    this.addUnsubscribeFunction(this.subscribeReloadOnActivation());\n    this.addUnsubscribeFunction(this.subscribeNewReplies());\n    this.addUnsubscribeFunction(this.subscribeRecoverAfterConnectionDrop());\n    this.addUnsubscribeFunction(this.subscribeChannelDeleted());\n  };\n\n  private subscribeUnreadThreadsCountChange = () => {\n    // initiate\n    const { unread_threads: unreadThreadCount = 0 } =\n      (this.client.user as OwnUserResponse) ?? {};\n    this.state.partialNext({ unreadThreadCount });\n\n    const unsubscribeFunctions = [\n      'health.check',\n      'notification.mark_read',\n      'notification.thread_message_new',\n      'notification.channel_deleted',\n    ].map(\n      (eventType) =>\n        this.client.on(eventType, (event) => {\n          const { unread_threads: unreadThreadCount } = event.me ?? event;\n          if (typeof unreadThreadCount === 'number') {\n            this.state.partialNext({ unreadThreadCount });\n          }\n        }).unsubscribe,\n    );\n\n    return () => unsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n  };\n\n  private subscribeChannelDeleted = () =>\n    this.client.on('notification.channel_deleted', (event) => {\n      const { cid } = event;\n      const { threads } = this.state.getLatestValue();\n\n      const newThreads = threads.filter((thread) => thread.channel.cid !== cid);\n      this.state.partialNext({ threads: newThreads });\n    }).unsubscribe;\n\n  private subscribeManageThreadSubscriptions = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ threads: nextValue.threads }),\n      ({ threads: nextThreads }, prev) => {\n        const { threads: prevThreads = [] } = prev ?? {};\n        // Thread instance was removed if there's no thread with the given id at all,\n        // or it was replaced with a new instance\n        const removedThreads = prevThreads.filter(\n          (thread) => thread !== this.threadsById[thread.id],\n        );\n\n        nextThreads.forEach((thread) => thread.registerSubscriptions());\n        removedThreads.forEach((thread) => thread.unregisterSubscriptions());\n      },\n    );\n\n  private subscribeReloadOnActivation = () =>\n    this.state.subscribeWithSelector(\n      (nextValue) => ({ active: nextValue.active }),\n      ({ active }) => {\n        if (active) this.reload();\n      },\n    );\n\n  private subscribeNewReplies = () =>\n    this.client.on('notification.thread_message_new', (event: Event) => {\n      const parentId = event.message?.parent_id;\n      if (!parentId) return;\n\n      const { unseenThreadIds, ready } = this.state.getLatestValue();\n      if (!ready) return;\n\n      if (this.threadsById[parentId]) {\n        this.state.partialNext({ isThreadOrderStale: true });\n      } else if (!unseenThreadIds.includes(parentId)) {\n        this.state.partialNext({ unseenThreadIds: unseenThreadIds.concat(parentId) });\n      }\n    }).unsubscribe;\n\n  private subscribeRecoverAfterConnectionDrop = () => {\n    const unsubscribeConnectionDropped = this.client.on('connection.changed', (event) => {\n      if (event.online === false) {\n        this.state.next((current) =>\n          current.lastConnectionDropAt\n            ? current\n            : {\n                ...current,\n                lastConnectionDropAt: new Date(),\n              },\n        );\n      }\n    }).unsubscribe;\n\n    const throttledHandleConnectionRecovered = throttle(\n      () => {\n        const { lastConnectionDropAt } = this.state.getLatestValue();\n        if (!lastConnectionDropAt) return;\n        this.reload({ force: true });\n      },\n      DEFAULT_CONNECTION_RECOVERY_THROTTLE_DURATION,\n      { trailing: true },\n    );\n\n    const unsubscribeConnectionRecovered = this.client.on(\n      'connection.recovered',\n      throttledHandleConnectionRecovered,\n    ).unsubscribe;\n\n    return () => {\n      unsubscribeConnectionDropped();\n      unsubscribeConnectionRecovered();\n    };\n  };\n\n  public unregisterSubscriptions = () => {\n    this.state\n      .getLatestValue()\n      .threads.forEach((thread) => thread.unregisterSubscriptions());\n    return super.unregisterSubscriptions();\n  };\n\n  public reload = async ({ force = false } = {}) => {\n    const { threads, unseenThreadIds, isThreadOrderStale, pagination, ready } =\n      this.state.getLatestValue();\n    if (pagination.isLoading) return;\n    if (!force && ready && !unseenThreadIds.length && !isThreadOrderStale) return;\n    const limit = threads.length + unseenThreadIds.length;\n\n    try {\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: true,\n        },\n      }));\n\n      const response = await this.queryThreads({\n        limit: Math.min(limit, MAX_QUERY_THREADS_LIMIT) || MAX_QUERY_THREADS_LIMIT,\n      });\n\n      const nextThreads: Thread[] = [];\n\n      for (const incomingThread of response.threads) {\n        const existingThread = this.threadsById[incomingThread.id];\n\n        if (existingThread) {\n          // Reuse thread instances if possible\n          nextThreads.push(existingThread);\n          if (existingThread.hasStaleState) {\n            existingThread.hydrateState(incomingThread);\n          }\n        } else {\n          nextThreads.push(incomingThread);\n        }\n      }\n\n      this.state.next((current) => ({\n        ...current,\n        threads: nextThreads,\n        unseenThreadIds: [],\n        isThreadOrderStale: false,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n          nextCursor: response.next ?? null,\n        },\n        ready: true,\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoading: false,\n        },\n      }));\n    }\n  };\n\n  public queryThreads = (options: QueryThreadsOptions = {}) =>\n    this.client.queryThreads({\n      limit: 25,\n      participant_limit: 10,\n      reply_limit: 10,\n      watch: true,\n      ...options,\n    });\n\n  public loadNextPage = async (options: Omit<QueryThreadsOptions, 'next'> = {}) => {\n    const { pagination } = this.state.getLatestValue();\n\n    if (pagination.isLoadingNext || !pagination.nextCursor) return;\n\n    try {\n      this.state.partialNext({ pagination: { ...pagination, isLoadingNext: true } });\n\n      const response = await this.queryThreads({\n        ...options,\n        next: pagination.nextCursor,\n      });\n\n      this.state.next((current) => ({\n        ...current,\n        threads: response.threads.length\n          ? current.threads.concat(response.threads)\n          : current.threads,\n        pagination: {\n          ...current.pagination,\n          nextCursor: response.next ?? null,\n          isLoadingNext: false,\n        },\n      }));\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((current) => ({\n        ...current,\n        pagination: {\n          ...current.pagination,\n          isLoadingNext: false,\n        },\n      }));\n    }\n  };\n}\n","import { StateStore } from './store';\nimport type { StreamChat } from './client';\nimport type {\n  Event,\n  PartialPollUpdate,\n  PollAnswer,\n  PollData,\n  PollEnrichData,\n  PollOptionData,\n  PollResponse,\n  PollVote,\n  QueryVotesFilters,\n  QueryVotesOptions,\n  VoteSort,\n} from './types';\n\ntype PollEvent = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse;\n};\n\ntype PollUpdatedEvent = PollEvent & {\n  type: 'poll.updated';\n};\n\ntype PollClosedEvent = PollEvent & {\n  type: 'poll.closed';\n};\n\ntype PollVoteEvent = {\n  cid: string;\n  created_at: string;\n  poll: PollResponse;\n  poll_vote: PollVote | PollAnswer;\n};\n\ntype PollVoteCastedEvent = PollVoteEvent & {\n  type: 'poll.vote_casted';\n};\n\ntype PollVoteCastedChanged = PollVoteEvent & {\n  type: 'poll.vote_removed';\n};\n\ntype PollVoteCastedRemoved = PollVoteEvent & {\n  type: 'poll.vote_removed';\n};\n\nconst isPollUpdatedEvent = (e: Event): e is PollUpdatedEvent => e.type === 'poll.updated';\nconst isPollClosedEventEvent = (e: Event): e is PollClosedEvent =>\n  e.type === 'poll.closed';\nconst isPollVoteCastedEvent = (e: Event): e is PollVoteCastedEvent =>\n  e.type === 'poll.vote_casted';\nconst isPollVoteChangedEvent = (e: Event): e is PollVoteCastedChanged =>\n  e.type === 'poll.vote_changed';\nconst isPollVoteRemovedEvent = (e: Event): e is PollVoteCastedRemoved =>\n  e.type === 'poll.vote_removed';\n\nexport const isVoteAnswer = (vote: PollVote | PollAnswer): vote is PollAnswer =>\n  !!(vote as PollAnswer)?.answer_text;\n\nexport type PollAnswersQueryParams = {\n  filter?: QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\nexport type PollOptionVotesQueryParams = {\n  filter: { option_id: string } & QueryVotesFilters;\n  options?: QueryVotesOptions;\n  sort?: VoteSort;\n};\n\ntype OptionId = string;\n\nexport type PollState = Omit<PollResponse, 'own_votes' | 'id'> & {\n  lastActivityAt: Date; // todo: would be ideal to get this from the BE\n  maxVotedOptionIds: OptionId[];\n  ownVotesByOptionId: Record<OptionId, PollVote>;\n  ownAnswer?: PollAnswer; // each user can have only one answer\n};\n\ntype PollInitOptions = {\n  client: StreamChat;\n  poll: PollResponse;\n};\n\nexport class Poll {\n  public readonly state: StateStore<PollState>;\n  public id: string;\n  private client: StreamChat;\n\n  constructor({ client, poll }: PollInitOptions) {\n    this.client = client;\n    this.id = poll.id;\n\n    this.state = new StateStore<PollState>(this.getInitialStateFromPollResponse(poll));\n  }\n\n  private getInitialStateFromPollResponse = (poll: PollInitOptions['poll']) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { own_votes, id, ...pollResponseForState } = poll;\n    const { ownAnswer, ownVotes } = own_votes?.reduce<{\n      ownVotes: PollVote[];\n      ownAnswer?: PollAnswer;\n    }>(\n      (acc, voteOrAnswer) => {\n        if (isVoteAnswer(voteOrAnswer)) {\n          acc.ownAnswer = voteOrAnswer;\n        } else {\n          acc.ownVotes.push(voteOrAnswer);\n        }\n        return acc;\n      },\n      { ownVotes: [] },\n    ) ?? { ownVotes: [] };\n\n    return {\n      ...pollResponseForState,\n      lastActivityAt: new Date(),\n      maxVotedOptionIds: getMaxVotedOptionIds(\n        pollResponseForState.vote_counts_by_option as PollResponse['vote_counts_by_option'],\n      ),\n      ownAnswer,\n      ownVotesByOptionId: getOwnVotesByOptionId(ownVotes),\n    };\n  };\n\n  private upsertOfflineDb = () => {\n    this.client.offlineDb?.executeQuerySafely(\n      (db) => db.upsertPoll({ poll: mapPollStateToResponse(this) }),\n      { method: 'upsertPoll' },\n    );\n  };\n\n  public reinitializeState = (poll: PollInitOptions['poll']) => {\n    this.state.partialNext(this.getInitialStateFromPollResponse(poll));\n  };\n\n  get data(): PollState {\n    return this.state.getLatestValue();\n  }\n\n  public handlePollUpdated = (event: Event) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollUpdatedEvent(event)) return;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { id, ...pollData } = extractPollData(event.poll);\n    // @ts-expect-error type mismatch\n    this.state.partialNext({ ...pollData, lastActivityAt: new Date(event.created_at) });\n    this.upsertOfflineDb();\n  };\n\n  public handlePollClosed = (event: Event) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollClosedEventEvent(event)) return;\n    this.state.partialNext({\n      is_closed: true,\n      lastActivityAt: new Date(event.created_at),\n    });\n    this.upsertOfflineDb();\n  };\n\n  public handleVoteCasted = (event: Event) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteCastedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n      }\n    }\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n    this.upsertOfflineDb();\n  };\n\n  public handleVoteChanged = (event: Event) => {\n    // this event is triggered only when event.poll.enforce_unique_vote === true\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteChangedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    let ownVotesByOptionId = currentState.ownVotesByOptionId;\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isOwnVote) {\n      if (isVoteAnswer(event.poll_vote)) {\n        latestAnswers = [\n          event.poll_vote,\n          ...latestAnswers.filter((answer) => answer.id !== event.poll_vote.id),\n        ];\n        ownAnswer = event.poll_vote;\n      } else if (event.poll_vote.option_id) {\n        if (event.poll.enforce_unique_vote) {\n          ownVotesByOptionId = { [event.poll_vote.option_id]: event.poll_vote };\n        } else {\n          ownVotesByOptionId = Object.entries(ownVotesByOptionId).reduce<\n            Record<OptionId, PollVote>\n          >((acc, [optionId, vote]) => {\n            if (\n              optionId !== event.poll_vote.option_id &&\n              vote.id === event.poll_vote.id\n            ) {\n              return acc;\n            }\n            acc[optionId] = vote;\n            return acc;\n          }, {});\n          ownVotesByOptionId[event.poll_vote.option_id] = event.poll_vote;\n        }\n\n        if (ownAnswer?.id === event.poll_vote.id) {\n          ownAnswer = undefined;\n        }\n        maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      }\n    } else if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = [event.poll_vote, ...latestAnswers];\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n    this.upsertOfflineDb();\n  };\n\n  public handleVoteRemoved = (event: Event) => {\n    if (event.poll?.id && event.poll.id !== this.id) return;\n    if (!isPollVoteRemovedEvent(event)) return;\n    const currentState = this.data;\n    const isOwnVote = event.poll_vote.user_id === this.client.userID;\n    let latestAnswers = [...(currentState.latest_answers as PollAnswer[])];\n    let ownAnswer = currentState.ownAnswer;\n    const ownVotesByOptionId = { ...currentState.ownVotesByOptionId };\n    let maxVotedOptionIds = currentState.maxVotedOptionIds;\n\n    if (isVoteAnswer(event.poll_vote)) {\n      latestAnswers = latestAnswers.filter((answer) => answer.id !== event.poll_vote.id);\n      if (isOwnVote) {\n        ownAnswer = undefined;\n      }\n    } else {\n      maxVotedOptionIds = getMaxVotedOptionIds(event.poll.vote_counts_by_option);\n      if (isOwnVote && event.poll_vote.option_id) {\n        delete ownVotesByOptionId[event.poll_vote.option_id];\n      }\n    }\n\n    const pollEnrichData = extractPollEnrichedData(event.poll);\n    this.state.partialNext({\n      ...pollEnrichData,\n      latest_answers: latestAnswers,\n      lastActivityAt: new Date(event.created_at),\n      ownAnswer,\n      ownVotesByOptionId,\n      maxVotedOptionIds,\n    });\n    this.upsertOfflineDb();\n  };\n\n  query = async (id: string) => {\n    const { poll } = await this.client.getPoll(id);\n    this.state.partialNext({ ...poll, lastActivityAt: new Date() });\n    return poll;\n  };\n\n  update = async (data: Exclude<PollData, 'id'>) =>\n    await this.client.updatePoll({ ...data, id: this.id });\n\n  partialUpdate = async (partialPollObject: PartialPollUpdate) =>\n    await this.client.partialUpdatePoll(this.id as string, partialPollObject);\n\n  close = async () => await this.client.closePoll(this.id as string);\n\n  delete = async () => await this.client.deletePoll(this.id as string);\n\n  createOption = async (option: PollOptionData) =>\n    await this.client.createPollOption(this.id as string, option);\n\n  updateOption = async (option: PollOptionData) =>\n    await this.client.updatePollOption(this.id as string, option);\n\n  deleteOption = async (optionId: string) =>\n    await this.client.deletePollOption(this.id as string, optionId);\n\n  castVote = async (optionId: string, messageId: string) => {\n    const { max_votes_allowed, ownVotesByOptionId } = this.data;\n\n    const reachedVoteLimit =\n      max_votes_allowed && max_votes_allowed === Object.keys(ownVotesByOptionId).length;\n\n    if (reachedVoteLimit) {\n      let oldestVote = Object.values(ownVotesByOptionId)[0];\n      Object.values(ownVotesByOptionId)\n        .slice(1)\n        .forEach((vote) => {\n          if (\n            !oldestVote?.created_at ||\n            new Date(vote.created_at) < new Date(oldestVote.created_at)\n          ) {\n            oldestVote = vote;\n          }\n        });\n      if (oldestVote?.id) {\n        await this.removeVote(oldestVote.id, messageId);\n      }\n    }\n    return await this.client.castPollVote(messageId, this.id as string, {\n      option_id: optionId,\n    });\n  };\n\n  removeVote = async (voteId: string, messageId: string) =>\n    await this.client.removePollVote(messageId, this.id as string, voteId);\n\n  addAnswer = async (answerText: string, messageId: string) =>\n    await this.client.addPollAnswer(messageId, this.id as string, answerText);\n\n  removeAnswer = async (answerId: string, messageId: string) =>\n    await this.client.removePollVote(messageId, this.id as string, answerId);\n\n  queryAnswers = async (params: PollAnswersQueryParams) =>\n    await this.client.queryPollAnswers(\n      this.id as string,\n      params.filter,\n      params.sort,\n      params.options,\n    );\n\n  queryOptionVotes = async (params: PollOptionVotesQueryParams) =>\n    await this.client.queryPollVotes(\n      this.id as string,\n      params.filter,\n      params.sort,\n      params.options,\n    );\n}\n\nfunction getMaxVotedOptionIds(voteCountsByOption: PollResponse['vote_counts_by_option']) {\n  let maxVotes = 0;\n  let winningOptions: string[] = [];\n  for (const [id, count] of Object.entries(voteCountsByOption ?? {})) {\n    if (count > maxVotes) {\n      winningOptions = [id];\n      maxVotes = count;\n    } else if (count === maxVotes) {\n      winningOptions.push(id);\n    }\n  }\n  return winningOptions;\n}\n\nfunction getOwnVotesByOptionId(ownVotes: PollVote[]) {\n  return !ownVotes\n    ? ({} as Record<OptionId, PollVote>)\n    : ownVotes.reduce<Record<OptionId, PollVote>>((acc, vote) => {\n        if (isVoteAnswer(vote) || !vote.option_id) return acc;\n        acc[vote.option_id] = vote;\n        return acc;\n      }, {});\n}\n\nexport function extractPollData(pollResponse: PollResponse): PollData {\n  return {\n    allow_answers: pollResponse.allow_answers,\n    allow_user_suggested_options: pollResponse.allow_user_suggested_options,\n    description: pollResponse.description,\n    enforce_unique_vote: pollResponse.enforce_unique_vote,\n    id: pollResponse.id,\n    is_closed: pollResponse.is_closed,\n    max_votes_allowed: pollResponse.max_votes_allowed,\n    name: pollResponse.name,\n    options: pollResponse.options,\n    voting_visibility: pollResponse.voting_visibility,\n  };\n}\n\nexport function mapPollStateToResponse(poll: Poll): PollResponse {\n  const {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    lastActivityAt,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    maxVotedOptionIds,\n    ownVotesByOptionId,\n    ownAnswer,\n    ...restState\n  } = poll.data;\n  const ownVotes = [\n    ...Object.values(ownVotesByOptionId),\n    ...(ownAnswer ? [ownAnswer] : []),\n  ].sort((a, b) => Date.parse(a.created_at) - Date.parse(b.created_at));\n\n  return {\n    ...restState,\n    own_votes: ownVotes,\n    id: poll.id,\n  };\n}\n\nexport function extractPollEnrichedData(\n  pollResponse: PollResponse,\n): Omit<PollEnrichData, 'own_votes' | 'latest_answers'> {\n  return {\n    answers_count: pollResponse.answers_count,\n    latest_votes_by_option: pollResponse.latest_votes_by_option,\n    vote_count: pollResponse.vote_count,\n    vote_counts_by_option: pollResponse.vote_counts_by_option,\n  };\n}\n","import type { StreamChat } from './client';\nimport type {\n  CreatePollData,\n  LocalMessage,\n  MessageResponse,\n  PollResponse,\n  PollSort,\n  QueryPollsFilters,\n  QueryPollsOptions,\n} from './types';\nimport { Poll } from './poll';\nimport { formatMessage } from './utils';\nimport { WithSubscriptions } from './utils/WithSubscriptions';\n\nexport class PollManager extends WithSubscriptions {\n  private client: StreamChat;\n  // The pollCache contains only polls that have been created and sent as messages\n  // (i.e only polls that are coupled with a message, can be voted on and require a\n  // reactive state). It shall work as a basic look-up table for our SDK to be able\n  // to quickly consume poll state that will be reactive even without the polls being\n  // rendered within the UI.\n  private pollCache = new Map<string, Poll>();\n\n  constructor({ client }: { client: StreamChat }) {\n    super();\n    this.client = client;\n  }\n\n  get data(): Map<string, Poll> {\n    return this.pollCache;\n  }\n\n  public fromState = (id: string) => this.pollCache.get(id);\n\n  public registerSubscriptions = () => {\n    if (this.hasSubscriptions) {\n      // Already listening for events and changes\n      return;\n    }\n\n    this.addUnsubscribeFunction(this.subscribeMessageNew());\n    this.addUnsubscribeFunction(this.subscribePollUpdated());\n    this.addUnsubscribeFunction(this.subscribePollClosed());\n    this.addUnsubscribeFunction(this.subscribeVoteCasted());\n    this.addUnsubscribeFunction(this.subscribeVoteChanged());\n    this.addUnsubscribeFunction(this.subscribeVoteRemoved());\n  };\n\n  public createPoll = async (poll: CreatePollData) => {\n    const { poll: createdPoll } = await this.client.createPoll(poll);\n\n    if (!createdPoll.vote_counts_by_option) {\n      createdPoll.vote_counts_by_option = {};\n    }\n\n    this.setOrOverwriteInCache(createdPoll);\n\n    return this.fromState(createdPoll.id);\n  };\n\n  public getPoll = async (id: string) => {\n    const cachedPoll = this.fromState(id);\n\n    // optimistically return the cached poll if it exists and update in the background\n    if (cachedPoll) {\n      this.client.getPoll(id).then(({ poll }) => this.setOrOverwriteInCache(poll, true));\n      return cachedPoll;\n    }\n    // fetch it, write to the cache and return otherwise\n    const { poll } = await this.client.getPoll(id);\n\n    this.setOrOverwriteInCache(poll);\n\n    return this.fromState(id);\n  };\n\n  public queryPolls = async (\n    filter: QueryPollsFilters,\n    sort: PollSort = [],\n    options: QueryPollsOptions = {},\n  ) => {\n    const { polls, next } = await this.client.queryPolls(filter, sort, options);\n\n    const pollInstances = polls.map((poll) => {\n      this.setOrOverwriteInCache(poll, true);\n\n      return this.fromState(poll.id);\n    });\n\n    return {\n      polls: pollInstances,\n      next,\n    };\n  };\n\n  public hydratePollCache = (\n    messages: LocalMessage[] | MessageResponse[],\n    overwriteState?: boolean,\n  ) => {\n    for (const message of messages) {\n      if (!message.poll) {\n        continue;\n      }\n      const pollResponse = message.poll as PollResponse;\n      this.setOrOverwriteInCache(pollResponse, overwriteState);\n    }\n  };\n\n  private setOrOverwriteInCache = (\n    pollResponse: PollResponse,\n    overwriteState?: boolean,\n  ) => {\n    if (!this.client._cacheEnabled()) {\n      return;\n    }\n    const pollFromCache = this.fromState(pollResponse.id);\n    if (!pollFromCache) {\n      const poll = new Poll({ client: this.client, poll: pollResponse });\n      this.pollCache.set(poll.id, poll);\n    } else if (overwriteState) {\n      pollFromCache.reinitializeState(pollResponse);\n    }\n  };\n\n  private subscribePollUpdated = () =>\n    this.client.on('poll.updated', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollUpdated(event);\n      }\n    }).unsubscribe;\n\n  private subscribePollClosed = () =>\n    this.client.on('poll.closed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handlePollClosed(event);\n      }\n    }).unsubscribe;\n\n  private subscribeVoteCasted = () =>\n    this.client.on('poll.vote_casted', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteCasted(event);\n      }\n    }).unsubscribe;\n\n  private subscribeVoteChanged = () =>\n    this.client.on('poll.vote_changed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteChanged(event);\n      }\n    }).unsubscribe;\n\n  private subscribeVoteRemoved = () =>\n    this.client.on('poll.vote_removed', (event) => {\n      if (event.poll?.id) {\n        this.fromState(event.poll.id)?.handleVoteRemoved(event);\n      }\n    }).unsubscribe;\n\n  private subscribeMessageNew = () =>\n    this.client.on('message.new', (event) => {\n      const { message } = event;\n      if (message) {\n        const formattedMessage = formatMessage(message);\n        this.hydratePollCache([formattedMessage]);\n      }\n    }).unsubscribe;\n}\n","import type { StreamChat } from './client';\nimport type {\n  ChannelFilters,\n  ChannelOptions,\n  ChannelSort,\n  ChannelStateOptions,\n  Event,\n} from './types';\nimport type { ValueOrPatch } from './store';\nimport { isPatch, StateStore } from './store';\nimport type { Channel } from './channel';\nimport {\n  extractSortValue,\n  findLastPinnedChannelIndex,\n  getAndWatchChannel,\n  isChannelArchived,\n  isChannelPinned,\n  promoteChannel,\n  shouldConsiderArchivedChannels,\n  shouldConsiderPinnedChannels,\n  sleep,\n  uniqBy,\n} from './utils';\nimport { generateUUIDv4 } from './utils';\nimport {\n  DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES,\n  DEFAULT_QUERY_CHANNELS_RETRY_COUNT,\n} from './constants';\nimport { WithSubscriptions } from './utils/WithSubscriptions';\n\nexport type ChannelManagerPagination = {\n  filters: ChannelFilters;\n  hasNext: boolean;\n  isLoading: boolean;\n  isLoadingNext: boolean;\n  options: ChannelOptions;\n  sort: ChannelSort;\n};\n\nexport type ChannelManagerState = {\n  channels: Channel[];\n  /**\n   * This value will become true the first time queryChannels is successfully executed and\n   * will remain false otherwise. It's used as a control property regarding whether the list\n   * has been initialized yet (i.e a query has already been done at least once) or not. We do\n   * this to prevent state.channels from being forced to be nullable.\n   */\n  initialized: boolean;\n  pagination: ChannelManagerPagination;\n  error: Error | undefined;\n};\n\nexport type ChannelSetterParameterType = ValueOrPatch<ChannelManagerState['channels']>;\nexport type ChannelSetterType = (arg: ChannelSetterParameterType) => void;\n\nexport type GenericEventHandlerType<T extends unknown[]> = (\n  ...args: T\n) => void | (() => void) | ((...args: T) => Promise<void>) | Promise<void>;\nexport type EventHandlerType = GenericEventHandlerType<[Event]>;\nexport type EventHandlerOverrideType = GenericEventHandlerType<\n  [ChannelSetterType, Event]\n>;\n\nexport type ChannelManagerEventTypes =\n  | 'notification.added_to_channel'\n  | 'notification.message_new'\n  | 'notification.removed_from_channel'\n  | 'message.new'\n  | 'member.updated'\n  | 'channel.deleted'\n  | 'channel.hidden'\n  | 'channel.truncated'\n  | 'channel.visible'\n  | 'channel.updated';\n\nexport type ChannelManagerEventHandlerNames =\n  | 'channelDeletedHandler'\n  | 'channelHiddenHandler'\n  | 'channelTruncatedHandler'\n  | 'channelUpdatedHandler'\n  | 'channelVisibleHandler'\n  | 'newMessageHandler'\n  | 'memberUpdatedHandler'\n  | 'notificationAddedToChannelHandler'\n  | 'notificationNewMessageHandler'\n  | 'notificationRemovedFromChannelHandler';\n\nexport type ChannelManagerEventHandlerOverrides = Partial<\n  Record<ChannelManagerEventHandlerNames, EventHandlerOverrideType>\n>;\n\nexport type ExecuteChannelsQueryPayload = Pick<\n  ChannelManagerPagination,\n  'filters' | 'sort' | 'options'\n> & { stateOptions: ChannelStateOptions };\n\nexport const channelManagerEventToHandlerMapping: {\n  [key in ChannelManagerEventTypes]: ChannelManagerEventHandlerNames;\n} = {\n  'channel.deleted': 'channelDeletedHandler',\n  'channel.hidden': 'channelHiddenHandler',\n  'channel.truncated': 'channelTruncatedHandler',\n  'channel.updated': 'channelUpdatedHandler',\n  'channel.visible': 'channelVisibleHandler',\n  'message.new': 'newMessageHandler',\n  'member.updated': 'memberUpdatedHandler',\n  'notification.added_to_channel': 'notificationAddedToChannelHandler',\n  'notification.message_new': 'notificationNewMessageHandler',\n  'notification.removed_from_channel': 'notificationRemovedFromChannelHandler',\n};\n\nexport type ChannelManagerOptions = {\n  /**\n   * Aborts a channels query that is already in progress and runs the new one.\n   */\n  abortInFlightQuery?: boolean;\n  /**\n   * Allows channel promotion to be applied where applicable for channels that are\n   * currently not part of the channel list within the state. A good example of\n   * this would be a channel that is being watched and it receives a new message,\n   * but is not part of the list initially.\n   */\n  allowNotLoadedChannelPromotionForEvent?: {\n    'channel.visible': boolean;\n    'message.new': boolean;\n    'notification.added_to_channel': boolean;\n    'notification.message_new': boolean;\n  };\n  /**\n   * Allows us to lock the order of channels within the list. Any event that would\n   * change the order of channels within the list will do nothing.\n   */\n  lockChannelOrder?: boolean;\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_OPTIONS = {\n  abortInFlightQuery: false,\n  allowNotLoadedChannelPromotionForEvent: {\n    'channel.visible': true,\n    'message.new': true,\n    'notification.added_to_channel': true,\n    'notification.message_new': true,\n  },\n  lockChannelOrder: false,\n};\n\nexport const DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS = {\n  limit: 10,\n  offset: 0,\n};\n\n/**\n * A class that manages a list of channels and changes it based on configuration and WS events. The\n * list of channels is reactive as well as the pagination and it can be subscribed to for state updates.\n *\n * @internal\n */\nexport class ChannelManager extends WithSubscriptions {\n  public readonly state: StateStore<ChannelManagerState>;\n  private client: StreamChat;\n  private eventHandlers: Map<string, EventHandlerType> = new Map();\n  private eventHandlerOverrides: Map<string, EventHandlerOverrideType> = new Map();\n  private options: ChannelManagerOptions = {};\n  private stateOptions: ChannelStateOptions = {};\n  private id: string;\n\n  constructor({\n    client,\n    eventHandlerOverrides = {},\n    options = {},\n  }: {\n    client: StreamChat;\n    eventHandlerOverrides?: ChannelManagerEventHandlerOverrides;\n    options?: ChannelManagerOptions;\n  }) {\n    super();\n\n    this.id = `channel-manager-${generateUUIDv4()}`;\n    this.client = client;\n    this.state = new StateStore<ChannelManagerState>({\n      channels: [],\n      pagination: {\n        isLoading: false,\n        isLoadingNext: false,\n        hasNext: false,\n        filters: {},\n        sort: {},\n        options: DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n      },\n      initialized: false,\n      error: undefined,\n    });\n    this.setEventHandlerOverrides(eventHandlerOverrides);\n    this.setOptions(options);\n    this.eventHandlers = new Map(\n      Object.entries<EventHandlerType>({\n        channelDeletedHandler: this.channelDeletedHandler,\n        channelHiddenHandler: this.channelHiddenHandler,\n        channelVisibleHandler: this.channelVisibleHandler,\n        memberUpdatedHandler: this.memberUpdatedHandler,\n        newMessageHandler: this.newMessageHandler,\n        notificationAddedToChannelHandler: this.notificationAddedToChannelHandler,\n        notificationNewMessageHandler: this.notificationNewMessageHandler,\n        notificationRemovedFromChannelHandler: this.notificationRemovedFromChannelHandler,\n      }),\n    );\n  }\n\n  public setChannels = (valueOrFactory: ChannelSetterParameterType) => {\n    this.state.next((current) => {\n      const { channels: currentChannels } = current;\n      const newChannels = isPatch(valueOrFactory)\n        ? valueOrFactory(currentChannels)\n        : valueOrFactory;\n\n      // If the references between the two values are the same, just return the\n      // current state; otherwise trigger a state change.\n      if (currentChannels === newChannels) {\n        return current;\n      }\n\n      return { ...current, channels: newChannels };\n    });\n    const {\n      channels,\n      pagination: { filters, sort },\n    } = this.state.getLatestValue();\n    this.client.offlineDb?.executeQuerySafely(\n      (db) =>\n        db.upsertCidsForQuery({\n          cids: channels.map((channel) => channel.cid),\n          filters,\n          sort,\n        }),\n      { method: 'upsertCidsForQuery' },\n    );\n  };\n\n  public setEventHandlerOverrides = (\n    eventHandlerOverrides: ChannelManagerEventHandlerOverrides = {},\n  ) => {\n    const truthyEventHandlerOverrides = Object.entries(eventHandlerOverrides).reduce<\n      Partial<ChannelManagerEventHandlerOverrides>\n    >((acc, [key, value]) => {\n      if (value) {\n        acc[key as keyof ChannelManagerEventHandlerOverrides] = value;\n      }\n      return acc;\n    }, {});\n    this.eventHandlerOverrides = new Map(\n      Object.entries<EventHandlerOverrideType>(truthyEventHandlerOverrides),\n    );\n  };\n\n  public setOptions = (options: ChannelManagerOptions = {}) => {\n    this.options = { ...DEFAULT_CHANNEL_MANAGER_OPTIONS, ...options };\n  };\n\n  private executeChannelsQuery = async (\n    payload: ExecuteChannelsQueryPayload,\n    retryCount = 0,\n  ): Promise<void> => {\n    const { filters, sort, options, stateOptions } = payload;\n    const { offset, limit } = {\n      ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n      ...options,\n    };\n    try {\n      const channels = await this.client.queryChannels(\n        filters,\n        sort,\n        options,\n        stateOptions,\n      );\n      const newOffset = offset + (channels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n      const { pagination } = this.state.getLatestValue();\n\n      this.state.partialNext({\n        channels,\n        pagination: {\n          ...pagination,\n          hasNext: (channels?.length ?? 0) >= limit,\n          isLoading: false,\n          options: newOptions,\n        },\n        initialized: true,\n        error: undefined,\n      });\n      this.client.offlineDb?.executeQuerySafely(\n        (db) =>\n          db.upsertCidsForQuery({\n            cids: channels.map((channel) => channel.cid),\n            filters: pagination.filters,\n            sort: pagination.sort,\n          }),\n        { method: 'upsertCidsForQuery' },\n      );\n    } catch (err) {\n      if (retryCount >= DEFAULT_QUERY_CHANNELS_RETRY_COUNT) {\n        console.warn(err);\n\n        const wrappedError = new Error(\n          `Maximum number of retries reached in queryChannels. Last error message is: ${err}`,\n        );\n\n        this.state.partialNext({ error: wrappedError });\n        return;\n      }\n\n      await sleep(DEFAULT_QUERY_CHANNELS_MS_BETWEEN_RETRIES);\n\n      return this.executeChannelsQuery(payload, retryCount + 1);\n    }\n  };\n\n  public queryChannels = async (\n    filters: ChannelFilters,\n    sort: ChannelSort = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) => {\n    const {\n      pagination: { isLoading, filters: filtersFromState },\n      initialized,\n    } = this.state.getLatestValue();\n\n    if (\n      isLoading &&\n      !this.options.abortInFlightQuery &&\n      // TODO: Figure a proper way to either deeply compare these or\n      //       create hashes from each.\n      JSON.stringify(filtersFromState) === JSON.stringify(filters)\n    ) {\n      return;\n    }\n\n    const executeChannelsQueryPayload = { filters, sort, options, stateOptions };\n\n    try {\n      this.stateOptions = stateOptions;\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: {\n          ...currentState.pagination,\n          isLoading: true,\n          isLoadingNext: false,\n          filters,\n          sort,\n          options,\n        },\n        error: undefined,\n      }));\n\n      if (this.client.offlineDb?.getChannelsForQuery && this.client.user?.id) {\n        if (!initialized) {\n          const channelsFromDB = await this.client.offlineDb.getChannelsForQuery({\n            userId: this.client.user.id,\n            filters,\n            sort,\n          });\n\n          if (channelsFromDB) {\n            const offlineChannels = this.client.hydrateActiveChannels(channelsFromDB, {\n              offlineMode: true,\n              skipInitialization: [], // passing empty array will clear out the existing messages from channel state, this removes the possibility of duplicate messages\n            });\n\n            this.state.partialNext({ channels: offlineChannels });\n          }\n        }\n\n        if (!this.client.offlineDb.syncManager.syncStatus) {\n          this.client.offlineDb.syncManager.scheduleSyncStatusChangeCallback(\n            this.id,\n            async () => {\n              await this.executeChannelsQuery(executeChannelsQueryPayload);\n            },\n          );\n          return;\n        }\n      }\n      await this.executeChannelsQuery(executeChannelsQueryPayload);\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoading: false },\n      }));\n      throw error;\n    }\n  };\n\n  public loadNext = async () => {\n    const { pagination, initialized } = this.state.getLatestValue();\n    const { filters, sort, options, isLoadingNext, hasNext } = pagination;\n\n    if (!initialized || isLoadingNext || !hasNext) {\n      return;\n    }\n\n    try {\n      const { offset, limit } = {\n        ...DEFAULT_CHANNEL_MANAGER_PAGINATION_OPTIONS,\n        ...options,\n      };\n      this.state.partialNext({\n        pagination: { ...pagination, isLoading: false, isLoadingNext: true },\n      });\n      const nextChannels = await this.client.queryChannels(\n        filters,\n        sort,\n        options,\n        this.stateOptions,\n      );\n      const { channels } = this.state.getLatestValue();\n      const newOffset = offset + (nextChannels?.length ?? 0);\n      const newOptions = { ...options, offset: newOffset };\n\n      this.state.partialNext({\n        channels: uniqBy<Channel>([...(channels || []), ...nextChannels], 'cid'),\n        pagination: {\n          ...pagination,\n          hasNext: (nextChannels?.length ?? 0) >= limit,\n          isLoading: false,\n          isLoadingNext: false,\n          options: newOptions,\n        },\n      });\n    } catch (error) {\n      this.client.logger('error', (error as Error).message);\n      this.state.next((currentState) => ({\n        ...currentState,\n        pagination: { ...currentState.pagination, isLoadingNext: false },\n      }));\n      throw error;\n    }\n  };\n\n  private notificationAddedToChannelHandler = async (event: Event) => {\n    const { id, type, members } = event?.channel ?? {};\n\n    if (\n      !type ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.[\n        'notification.added_to_channel'\n      ]\n    ) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      members: members?.reduce<string[]>((acc, { user, user_id }) => {\n        const userId = user_id || user?.id;\n        if (userId) {\n          acc.push(userId);\n        }\n        return acc;\n      }, []),\n      type,\n    });\n\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const { sort } = pagination ?? {};\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelDeletedHandler = (event: Event) => {\n    const { channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n\n    const newChannels = [...channels];\n    const channelIndex = newChannels.findIndex(\n      (channel) => channel.cid === (event.cid || event.channel?.cid),\n    );\n\n    if (channelIndex < 0) {\n      return;\n    }\n\n    newChannels.splice(channelIndex, 1);\n    this.setChannels(newChannels);\n  };\n\n  private channelHiddenHandler = this.channelDeletedHandler;\n\n  private newMessageHandler = (event: Event) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    if (!channels) {\n      return;\n    }\n    const { filters, sort } = pagination ?? {};\n\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n\n    if (\n      // filter is defined, target channel is archived and filter option is set to false\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      // filter is defined, target channel isn't archived and filter option is set to true\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      // sort option is defined, target channel is pinned\n      (considerPinnedChannels && isTargetChannelPinned) ||\n      // list order is locked\n      this.options.lockChannelOrder ||\n      // target channel is not within the loaded list and loading from cache is disallowed\n      (!targetChannelExistsWithinList &&\n        !this.options.allowNotLoadedChannelPromotionForEvent?.['message.new'])\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: targetChannel,\n        channelToMoveIndexWithinChannels: targetChannelIndex,\n        sort,\n      }),\n    );\n  };\n\n  private notificationNewMessageHandler = async (event: Event) => {\n    const { id, type } = event?.channel ?? {};\n\n    if (!id || !type) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id,\n      type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { filters, sort } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['notification.message_new']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private channelVisibleHandler = async (event: Event) => {\n    const { channel_type: channelType, channel_id: channelId } = event;\n\n    if (!channelType || !channelId) {\n      return;\n    }\n\n    const channel = await getAndWatchChannel({\n      client: this.client,\n      id: event.channel_id,\n      type: event.channel_type,\n    });\n\n    const { channels, pagination } = this.state.getLatestValue();\n    const { sort, filters } = pagination ?? {};\n\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const isTargetChannelArchived = isChannelArchived(channel);\n\n    if (\n      !channels ||\n      (considerArchivedChannels && isTargetChannelArchived && !filters.archived) ||\n      (considerArchivedChannels && !isTargetChannelArchived && filters.archived) ||\n      !this.options.allowNotLoadedChannelPromotionForEvent?.['channel.visible']\n    ) {\n      return;\n    }\n\n    this.setChannels(\n      promoteChannel({\n        channels,\n        channelToMove: channel,\n        sort,\n      }),\n    );\n  };\n\n  private notificationRemovedFromChannelHandler = this.channelDeletedHandler;\n\n  private memberUpdatedHandler = (event: Event) => {\n    const { pagination, channels } = this.state.getLatestValue();\n    const { filters, sort } = pagination;\n    if (\n      !event.member?.user ||\n      event.member.user.id !== this.client.userID ||\n      !event.channel_type ||\n      !event.channel_id\n    ) {\n      return;\n    }\n    const channelType = event.channel_type;\n    const channelId = event.channel_id;\n\n    const considerPinnedChannels = shouldConsiderPinnedChannels(sort);\n    const considerArchivedChannels = shouldConsiderArchivedChannels(filters);\n    const pinnedAtSort = extractSortValue({ atIndex: 0, sort, targetKey: 'pinned_at' });\n\n    if (\n      !channels ||\n      (!considerPinnedChannels && !considerArchivedChannels) ||\n      this.options.lockChannelOrder\n    ) {\n      return;\n    }\n\n    const targetChannel = this.client.channel(channelType, channelId);\n    // assumes that channel instances are not changing\n    const targetChannelIndex = channels.indexOf(targetChannel);\n    const targetChannelExistsWithinList = targetChannelIndex >= 0;\n\n    const isTargetChannelPinned = isChannelPinned(targetChannel);\n    const isTargetChannelArchived = isChannelArchived(targetChannel);\n\n    const newChannels = [...channels];\n\n    if (targetChannelExistsWithinList) {\n      newChannels.splice(targetChannelIndex, 1);\n    }\n\n    // handle archiving (remove channel)\n    if (\n      // When archived filter true, and channel is unarchived\n      (considerArchivedChannels && !isTargetChannelArchived && filters?.archived) ||\n      // When archived filter false, and channel is archived\n      (considerArchivedChannels && isTargetChannelArchived && !filters?.archived)\n    ) {\n      this.setChannels(newChannels);\n      return;\n    }\n\n    // handle pinning\n    let lastPinnedChannelIndex: number | null = null;\n\n    if (pinnedAtSort === 1 || (pinnedAtSort === -1 && !isTargetChannelPinned)) {\n      lastPinnedChannelIndex = findLastPinnedChannelIndex({ channels: newChannels });\n    }\n    const newTargetChannelIndex =\n      typeof lastPinnedChannelIndex === 'number' ? lastPinnedChannelIndex + 1 : 0;\n\n    // skip state update if the position of the channel does not change\n    if (channels[newTargetChannelIndex] === targetChannel) {\n      return;\n    }\n\n    newChannels.splice(newTargetChannelIndex, 0, targetChannel);\n    this.setChannels(newChannels);\n  };\n\n  private subscriptionOrOverride = (event: Event) => {\n    const handlerName =\n      channelManagerEventToHandlerMapping[event.type as ChannelManagerEventTypes];\n    const defaultEventHandler = this.eventHandlers.get(handlerName);\n    const eventHandlerOverride = this.eventHandlerOverrides.get(handlerName);\n    if (eventHandlerOverride && typeof eventHandlerOverride === 'function') {\n      eventHandlerOverride(this.setChannels, event);\n      return;\n    }\n\n    if (defaultEventHandler && typeof defaultEventHandler === 'function') {\n      defaultEventHandler(event);\n    }\n  };\n\n  public registerSubscriptions = () => {\n    if (this.hasSubscriptions) {\n      // Already listening for events and changes\n      return;\n    }\n\n    for (const eventType of Object.keys(channelManagerEventToHandlerMapping)) {\n      this.addUnsubscribeFunction(\n        this.client.on(eventType, this.subscriptionOrOverride).unsubscribe,\n      );\n    }\n  };\n}\n","import type { NotificationManagerConfig } from './types';\n\nconst DURATION_MS = 3000 as const;\n\nexport const DEFAULT_NOTIFICATION_MANAGER_CONFIG: NotificationManagerConfig = {\n  durations: {\n    error: DURATION_MS,\n    info: DURATION_MS,\n    success: DURATION_MS,\n    warning: DURATION_MS,\n  },\n};\n","import { StateStore } from '../store';\nimport { generateUUIDv4 } from '../utils';\nimport type {\n  AddNotificationPayload,\n  Notification,\n  NotificationManagerConfig,\n  NotificationState,\n} from './types';\nimport { mergeWith } from '../utils/mergeWith';\nimport { DEFAULT_NOTIFICATION_MANAGER_CONFIG } from './configuration';\n\nexport class NotificationManager {\n  store: StateStore<NotificationState>;\n  private timeouts: Map<string, NodeJS.Timeout> = new Map();\n  config: NotificationManagerConfig;\n\n  constructor(config: Partial<NotificationManagerConfig> = {}) {\n    this.store = new StateStore<NotificationState>({ notifications: [] });\n    this.config = mergeWith(DEFAULT_NOTIFICATION_MANAGER_CONFIG, config);\n  }\n\n  get notifications() {\n    return this.store.getLatestValue().notifications;\n  }\n\n  get warning() {\n    return this.notifications.filter((n) => n.severity === 'warning');\n  }\n\n  get error() {\n    return this.notifications.filter((n) => n.severity === 'error');\n  }\n\n  get info() {\n    return this.notifications.filter((n) => n.severity === 'info');\n  }\n\n  get success() {\n    return this.notifications.filter((n) => n.severity === 'success');\n  }\n\n  add({ message, origin, options = {} }: AddNotificationPayload): string {\n    const id = generateUUIDv4();\n    const now = Date.now();\n    const severity = options.severity || 'info';\n    const duration = options.duration ?? this.config.durations[severity];\n\n    const notification: Notification = {\n      id,\n      message,\n      origin,\n      type: options?.type,\n      severity,\n      createdAt: now,\n      expiresAt: now + duration,\n      actions: options.actions,\n      metadata: options.metadata,\n      originalError: options.originalError,\n    };\n\n    this.store.partialNext({\n      notifications: [...this.store.getLatestValue().notifications, notification],\n    });\n\n    if (notification.expiresAt) {\n      const timeout = setTimeout(() => {\n        this.remove(id);\n      }, options.duration || this.config.durations[notification.severity]);\n\n      this.timeouts.set(id, timeout);\n    }\n\n    return id;\n  }\n\n  addError({ message, origin, options }: AddNotificationPayload) {\n    return this.add({ message, origin, options: { ...options, severity: 'error' } });\n  }\n\n  addWarning({ message, origin, options }: AddNotificationPayload) {\n    return this.add({ message, origin, options: { ...options, severity: 'warning' } });\n  }\n\n  addInfo({ message, origin, options }: AddNotificationPayload) {\n    return this.add({ message, origin, options: { ...options, severity: 'info' } });\n  }\n\n  addSuccess({ message, origin, options }: AddNotificationPayload) {\n    return this.add({ message, origin, options: { ...options, severity: 'success' } });\n  }\n\n  remove(id: string): void {\n    const timeout = this.timeouts.get(id);\n    if (timeout) {\n      clearTimeout(timeout);\n      this.timeouts.delete(id);\n    }\n\n    this.store.partialNext({\n      notifications: this.store.getLatestValue().notifications.filter((n) => n.id !== id),\n    });\n  }\n\n  clear(): void {\n    this.timeouts.forEach((timeout) => clearTimeout(timeout));\n    this.timeouts.clear();\n\n    this.store.partialNext({ notifications: [] });\n  }\n}\n","import { timeLeftMs } from './Reminder';\nimport type { Reminder } from './Reminder';\n\nconst oneMinute = 60 * 1000;\nconst oneHour = 60 * oneMinute;\nconst oneDay = 24 * oneHour;\nconst oneWeek = 7 * oneDay;\n\nconst GROUP_BOUNDS = {\n  minute: { lower: oneMinute, upper: oneHour },\n  hour: { lower: oneHour, upper: oneDay },\n  day: { lower: oneDay, upper: oneWeek },\n} as const;\n\nexport const DEFAULT_STOP_REFRESH_BOUNDARY_MS = 2 * oneWeek;\n\nexport type ReminderTimerConfig = {\n  stopRefreshBoundaryMs?: number;\n};\n\nexport class ReminderTimer {\n  reminder: Reminder;\n  timeout: ReturnType<typeof setTimeout> | null = null;\n  stopRefreshBoundaryMs: number = DEFAULT_STOP_REFRESH_BOUNDARY_MS;\n\n  constructor({\n    reminder,\n    config,\n  }: {\n    reminder: Reminder;\n    config?: ReminderTimerConfig;\n  }) {\n    this.reminder = reminder;\n\n    if (typeof config?.stopRefreshBoundaryMs === 'number') {\n      this.stopRefreshBoundaryMs = config.stopRefreshBoundaryMs;\n    }\n  }\n\n  getRefreshIntervalLength = () => {\n    if (!this.reminder.remindAt) return null;\n    const distanceFromDeadlineMs = Math.abs(timeLeftMs(this.reminder.remindAt.getTime()));\n    let refreshInterval: number | null;\n    if (distanceFromDeadlineMs === 0) {\n      refreshInterval = oneMinute;\n    } else if (distanceFromDeadlineMs < GROUP_BOUNDS.minute.lower) {\n      refreshInterval = distanceFromDeadlineMs;\n    } else if (distanceFromDeadlineMs <= GROUP_BOUNDS.minute.upper) {\n      refreshInterval = oneMinute;\n    } else if (distanceFromDeadlineMs <= GROUP_BOUNDS.hour.upper) {\n      refreshInterval = oneHour;\n    } else {\n      refreshInterval = oneDay;\n    }\n    return refreshInterval;\n  };\n\n  init = () => {\n    if (!this.reminder.remindAt) return null;\n    const timeoutLength = this.getRefreshIntervalLength();\n    if (timeoutLength === null) return null;\n\n    const boundaryTimestamp =\n      this.reminder.remindAt?.getTime() + this.stopRefreshBoundaryMs;\n    const timeLeftToBoundary = boundaryTimestamp - Date.now();\n\n    if (timeLeftToBoundary <= 0) {\n      this.timeout = null;\n      return;\n    }\n\n    if (this.timeout) clearTimeout(this.timeout);\n\n    this.timeout = setTimeout(() => {\n      this.reminder.refreshTimeLeft();\n      this.init();\n    }, timeoutLength);\n  };\n\n  clear = () => {\n    if (this.timeout) {\n      clearInterval(this.timeout);\n      this.timeout = null;\n    }\n  };\n}\n","import { ReminderTimer } from './ReminderTimer';\nimport { StateStore } from '../store';\nimport type { ReminderTimerConfig } from './ReminderTimer';\nimport type { MessageResponse, ReminderResponseBase, UserResponse } from '../types';\n\nexport const timeLeftMs = (remindAt: number) => remindAt - new Date().getTime();\n\nexport type ReminderResponseBaseOrResponse = ReminderResponseBase & {\n  user?: UserResponse;\n  message?: MessageResponse;\n};\n\nexport type ReminderState = {\n  channel_cid: string;\n  created_at: Date;\n  message: MessageResponse | null;\n  message_id: string;\n  remind_at: Date | null;\n  timeLeftMs: number | null;\n  updated_at: Date;\n  user: UserResponse | null;\n  user_id: string;\n};\n\nexport type ReminderOptions = {\n  data: ReminderResponseBaseOrResponse;\n  config?: ReminderTimerConfig;\n};\n\nexport class Reminder {\n  state: StateStore<ReminderState>;\n  timer: ReminderTimer;\n  constructor({ data, config }: ReminderOptions) {\n    this.state = new StateStore(Reminder.toStateValue(data));\n    this.timer = new ReminderTimer({ reminder: this, config });\n    this.initTimer();\n  }\n\n  static toStateValue = (data: ReminderResponseBaseOrResponse): ReminderState => ({\n    ...data,\n    created_at: new Date(data.created_at),\n    message: data.message || null,\n    remind_at: data.remind_at ? new Date(data.remind_at) : null,\n    timeLeftMs: data.remind_at ? timeLeftMs(new Date(data.remind_at).getTime()) : null,\n    updated_at: new Date(data.updated_at),\n    user: data.user || null,\n  });\n\n  get id() {\n    return this.state.getLatestValue().message_id;\n  }\n\n  get remindAt() {\n    return this.state.getLatestValue().remind_at;\n  }\n\n  get timeLeftMs() {\n    return this.state.getLatestValue().timeLeftMs;\n  }\n\n  setState = (data: ReminderResponseBaseOrResponse) => {\n    this.state.next((current) => {\n      const newState = { ...current, ...Reminder.toStateValue(data) };\n      if (newState.remind_at) {\n        newState.timeLeftMs = timeLeftMs(newState.remind_at.getTime());\n      }\n      return newState;\n    });\n\n    if (data.remind_at) {\n      this.initTimer();\n    } else if (!data.remind_at) {\n      this.clearTimer();\n    }\n  };\n\n  refreshTimeLeft = () => {\n    if (!this.remindAt) return;\n    this.state.partialNext({ timeLeftMs: timeLeftMs(this.remindAt.getTime()) });\n  };\n\n  initTimer = () => {\n    this.timer.init();\n  };\n\n  clearTimer = () => {\n    this.timer.clear();\n  };\n}\n","import { StateStore } from '../store';\nimport { debounce, type DebouncedFunc } from '../utils';\n\ntype PaginationDirection = 'next' | 'prev';\ntype Cursor = { next: string | null; prev: string | null };\nexport type PaginationQueryParams = { direction: PaginationDirection };\nexport type PaginationQueryReturnValue<T> = { items: T[] } & {\n  next?: string;\n  prev?: string;\n};\nexport type PaginatorDebounceOptions = {\n  debounceMs: number;\n};\ntype DebouncedExecQueryFunction = DebouncedFunc<\n  (params: { direction: PaginationDirection }) => Promise<void>\n>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PaginatorState<T = any> = {\n  hasNext: boolean;\n  hasPrev: boolean;\n  isLoading: boolean;\n  items: T[] | undefined;\n  lastQueryError?: Error;\n  cursor?: Cursor;\n  offset?: number;\n};\n\nexport type PaginatorOptions = {\n  /** The number of milliseconds to debounce the search query. The default interval is 300ms. */\n  debounceMs?: number;\n  pageSize?: number;\n};\nexport const DEFAULT_PAGINATION_OPTIONS: Required<PaginatorOptions> = {\n  debounceMs: 300,\n  pageSize: 10,\n} as const;\n\nexport abstract class BasePaginator<T> {\n  state: StateStore<PaginatorState<T>>;\n  pageSize: number;\n  protected _executeQueryDebounced!: DebouncedExecQueryFunction;\n  protected _isCursorPagination = false;\n\n  protected constructor(options?: PaginatorOptions) {\n    const { debounceMs, pageSize } = { ...DEFAULT_PAGINATION_OPTIONS, ...options };\n    this.pageSize = pageSize;\n    this.state = new StateStore<PaginatorState<T>>(this.initialState);\n    this.setDebounceOptions({ debounceMs });\n  }\n\n  get lastQueryError() {\n    return this.state.getLatestValue().lastQueryError;\n  }\n\n  get hasNext() {\n    return this.state.getLatestValue().hasNext;\n  }\n\n  get hasPrev() {\n    return this.state.getLatestValue().hasPrev;\n  }\n\n  get hasResults() {\n    return Array.isArray(this.state.getLatestValue().items);\n  }\n\n  get isLoading() {\n    return this.state.getLatestValue().isLoading;\n  }\n\n  get initialState(): PaginatorState {\n    return {\n      hasNext: true,\n      hasPrev: true, //todo: check if optimistic value does not cause problems in UI\n      isLoading: false,\n      items: undefined,\n      lastQueryError: undefined,\n      cursor: undefined,\n      offset: 0,\n    };\n  }\n\n  get items() {\n    return this.state.getLatestValue().items;\n  }\n\n  get cursor() {\n    return this.state.getLatestValue().cursor;\n  }\n\n  get offset() {\n    return this.state.getLatestValue().offset;\n  }\n\n  abstract query(params: PaginationQueryParams): Promise<PaginationQueryReturnValue<T>>;\n\n  abstract filterQueryResults(items: T[]): T[] | Promise<T[]>;\n\n  setDebounceOptions = ({ debounceMs }: PaginatorDebounceOptions) => {\n    this._executeQueryDebounced = debounce(this.executeQuery.bind(this), debounceMs);\n  };\n\n  canExecuteQuery = (direction: PaginationDirection) =>\n    (!this.isLoading && direction === 'next' && this.hasNext) ||\n    (direction === 'prev' && this.hasPrev);\n\n  protected getStateBeforeFirstQuery(): PaginatorState<T> {\n    return {\n      ...this.initialState,\n      isLoading: true,\n    };\n  }\n\n  protected getStateAfterQuery(\n    stateUpdate: Partial<PaginatorState<T>>,\n    isFirstPage: boolean,\n  ): PaginatorState<T> {\n    const current = this.state.getLatestValue();\n    return {\n      ...current,\n      lastQueryError: undefined, // reset lastQueryError that can be overridden by the stateUpdate\n      ...stateUpdate,\n      isLoading: false,\n      items: isFirstPage\n        ? stateUpdate.items\n        : [...(this.items ?? []), ...(stateUpdate.items || [])],\n    };\n  }\n\n  async executeQuery({ direction }: { direction: PaginationDirection }) {\n    if (!this.canExecuteQuery(direction)) return;\n    const isFirstPage = typeof this.items === 'undefined';\n    if (isFirstPage) {\n      this.state.next(this.getStateBeforeFirstQuery());\n    } else {\n      this.state.partialNext({ isLoading: true });\n    }\n\n    const stateUpdate: Partial<PaginatorState<T>> = {};\n    try {\n      const results = await this.query({ direction });\n      if (!results) return;\n      const { items, next, prev } = results;\n      if (isFirstPage && (next || prev)) {\n        this._isCursorPagination = true;\n      }\n\n      if (this._isCursorPagination) {\n        stateUpdate.cursor = { next: next || null, prev: prev || null };\n        stateUpdate.hasNext = !!next;\n        stateUpdate.hasPrev = !!prev;\n      } else {\n        stateUpdate.offset = (this.offset ?? 0) + items.length;\n        stateUpdate.hasNext = items.length === this.pageSize;\n      }\n\n      stateUpdate.items = await this.filterQueryResults(items);\n    } catch (e) {\n      stateUpdate.lastQueryError = e as Error;\n    } finally {\n      this.state.next(this.getStateAfterQuery(stateUpdate, isFirstPage));\n    }\n  }\n\n  cancelScheduledQuery() {\n    this._executeQueryDebounced.cancel();\n  }\n\n  resetState() {\n    this.state.next(this.initialState);\n  }\n\n  next = () => this.executeQuery({ direction: 'next' });\n\n  prev = () => this.executeQuery({ direction: 'prev' });\n\n  nextDebounced = () => {\n    this._executeQueryDebounced({ direction: 'next' });\n  };\n  prevDebounced = () => {\n    this._executeQueryDebounced({ direction: 'prev' });\n  };\n}\n","import { BasePaginator } from './BasePaginator';\nimport type {\n  PaginationQueryParams,\n  PaginationQueryReturnValue,\n  PaginatorOptions,\n} from './BasePaginator';\nimport type { ReminderFilters, ReminderResponse, ReminderSort } from '../types';\nimport type { StreamChat } from '../client';\n\nexport class ReminderPaginator extends BasePaginator<ReminderResponse> {\n  private client: StreamChat;\n  protected _filters: ReminderFilters | undefined;\n  protected _sort: ReminderSort | undefined;\n\n  get filters(): ReminderFilters | undefined {\n    return this._filters;\n  }\n\n  get sort(): ReminderSort | undefined {\n    return this._sort;\n  }\n\n  set filters(filters: ReminderFilters | undefined) {\n    this._filters = filters;\n    this.resetState();\n  }\n\n  set sort(sort: ReminderSort | undefined) {\n    this._sort = sort;\n    this.resetState();\n  }\n\n  constructor(client: StreamChat, options?: PaginatorOptions) {\n    super(options);\n    this.client = client;\n  }\n\n  query = async ({\n    direction,\n  }: PaginationQueryParams): Promise<PaginationQueryReturnValue<ReminderResponse>> => {\n    const cursor = this.cursor?.[direction];\n    const {\n      reminders: items,\n      next,\n      prev,\n    } = await this.client.queryReminders({\n      filter: this.filters,\n      sort: this.sort,\n      limit: this.pageSize,\n      [direction]: cursor,\n    });\n    return { items, next, prev };\n  };\n\n  filterQueryResults = (items: ReminderResponse[]) => items;\n}\n","import { Reminder } from './Reminder';\nimport { DEFAULT_STOP_REFRESH_BOUNDARY_MS } from './ReminderTimer';\nimport { StateStore } from '../store';\nimport { ReminderPaginator } from '../pagination';\nimport { WithSubscriptions } from '../utils/WithSubscriptions';\nimport type { ReminderResponseBaseOrResponse } from './Reminder';\nimport type { StreamChat } from '../client';\nimport type {\n  CreateReminderOptions,\n  Event,\n  EventTypes,\n  LocalMessage,\n  MessageResponse,\n  ReminderResponse,\n} from '../types';\n\nconst oneMinute = 60 * 1000;\nconst oneHour = 60 * oneMinute;\nconst oneDay = 24 * oneHour;\n\nexport const DEFAULT_REMINDER_MANAGER_CONFIG: ReminderManagerConfig = {\n  scheduledOffsetsMs: [\n    2 * oneMinute,\n    30 * oneMinute,\n    oneHour,\n    2 * oneHour,\n    8 * oneHour,\n    oneDay,\n  ],\n  stopTimerRefreshBoundaryMs: DEFAULT_STOP_REFRESH_BOUNDARY_MS,\n};\n\nconst isReminderExistsError = (error: Error) =>\n  error.message.match('already has reminder created for this message_id');\n\nconst isReminderDoesNotExistError = (error: Error) =>\n  error.message.match('reminder does not exist');\n\ntype MessageId = string;\n\nexport type ReminderEvent = {\n  cid: string;\n  created_at: string;\n  message_id: MessageId;\n  reminder: ReminderResponse;\n  type: EventTypes;\n  user_id: string;\n};\n\nexport type ReminderManagerState = {\n  reminders: Map<MessageId, Reminder>;\n};\n\nexport type ReminderManagerConfig = {\n  scheduledOffsetsMs: number[];\n  stopTimerRefreshBoundaryMs: number;\n};\n\nexport type ReminderManagerOptions = {\n  client: StreamChat;\n  config?: Partial<ReminderManagerConfig>;\n};\n\nexport class ReminderManager extends WithSubscriptions {\n  private client: StreamChat;\n  configState: StateStore<ReminderManagerConfig>;\n  state: StateStore<ReminderManagerState>;\n  paginator: ReminderPaginator;\n\n  constructor({ client, config }: ReminderManagerOptions) {\n    super();\n    this.client = client;\n    this.configState = new StateStore({\n      scheduledOffsetsMs:\n        config?.scheduledOffsetsMs ?? DEFAULT_REMINDER_MANAGER_CONFIG.scheduledOffsetsMs,\n      stopTimerRefreshBoundaryMs:\n        config?.stopTimerRefreshBoundaryMs ??\n        DEFAULT_REMINDER_MANAGER_CONFIG.stopTimerRefreshBoundaryMs,\n    });\n    this.state = new StateStore({ reminders: new Map<MessageId, Reminder>() });\n    this.paginator = new ReminderPaginator(client);\n  }\n\n  // Config API START //\n  updateConfig(config: Partial<ReminderManagerConfig>) {\n    if (\n      typeof config.stopTimerRefreshBoundaryMs === 'number' &&\n      config.stopTimerRefreshBoundaryMs !== this.stopTimerRefreshBoundaryMs\n    ) {\n      this.reminders.forEach((reminder) => {\n        reminder.timer.stopRefreshBoundaryMs =\n          config?.stopTimerRefreshBoundaryMs as number;\n      });\n    }\n    this.configState.partialNext(config);\n  }\n\n  get stopTimerRefreshBoundaryMs() {\n    return this.configState.getLatestValue().stopTimerRefreshBoundaryMs;\n  }\n\n  get scheduledOffsetsMs() {\n    return this.configState.getLatestValue().scheduledOffsetsMs;\n  }\n  // Config API END //\n\n  // State API START //\n  get reminders() {\n    return this.state.getLatestValue().reminders;\n  }\n  getFromState(messageId: MessageId) {\n    return this.reminders.get(messageId);\n  }\n\n  upsertToState = ({\n    data,\n    overwrite = true,\n  }: {\n    data: ReminderResponseBaseOrResponse;\n    overwrite?: boolean;\n  }) => {\n    if (!this.client._cacheEnabled()) {\n      return;\n    }\n    const cachedReminder = this.getFromState(data.message_id);\n    if (!cachedReminder) {\n      const reminder = new Reminder({\n        data,\n        config: { stopRefreshBoundaryMs: this.stopTimerRefreshBoundaryMs },\n      });\n      this.state.partialNext({\n        reminders: new Map(this.reminders.set(data.message_id, reminder)),\n      });\n    } else if (overwrite) {\n      cachedReminder.setState(data);\n    }\n    return cachedReminder;\n  };\n\n  removeFromState = (messageId: string) => {\n    const cachedReminder = this.getFromState(messageId);\n    if (!cachedReminder) return;\n    cachedReminder.clearTimer();\n    const reminders = this.reminders;\n    reminders.delete(messageId);\n    this.state.partialNext({ reminders: new Map(reminders) });\n  };\n\n  hydrateState = (messages: MessageResponse[] | LocalMessage[]) => {\n    messages.forEach(({ reminder }) => {\n      if (reminder) {\n        this.upsertToState({ data: reminder });\n      }\n    });\n  };\n  // State API END //\n\n  // Timers API START //\n  initTimers = () => {\n    this.reminders.forEach((reminder) => reminder.initTimer());\n  };\n\n  clearTimers = () => {\n    this.reminders.forEach((reminder) => reminder.clearTimer());\n  };\n  // Timers API END //\n\n  // WS event handling START //\n  static isReminderWsEventPayload = (event: Event): event is ReminderEvent =>\n    !!event.reminder &&\n    (event.type.startsWith('reminder.') || event.type === 'notification.reminder_due');\n\n  public registerSubscriptions = () => {\n    if (this.hasSubscriptions) return;\n    this.addUnsubscribeFunction(this.subscribeReminderCreated());\n    this.addUnsubscribeFunction(this.subscribeReminderUpdated());\n    this.addUnsubscribeFunction(this.subscribeReminderDeleted());\n    this.addUnsubscribeFunction(this.subscribeNotificationReminderDue());\n    this.addUnsubscribeFunction(this.subscribeMessageDeleted());\n    this.addUnsubscribeFunction(this.subscribeMessageUndeleted());\n    this.addUnsubscribeFunction(this.subscribePaginatorStateUpdated());\n    this.addUnsubscribeFunction(this.subscribeConfigStateUpdated());\n  };\n\n  private subscribeReminderCreated = () =>\n    this.client.on('reminder.created', (event) => {\n      if (!ReminderManager.isReminderWsEventPayload(event)) return;\n      const { reminder } = event;\n      this.upsertToState({ data: reminder });\n    }).unsubscribe;\n\n  private subscribeReminderUpdated = () =>\n    this.client.on('reminder.updated', (event) => {\n      if (!ReminderManager.isReminderWsEventPayload(event)) return;\n      const { reminder } = event;\n      this.upsertToState({ data: reminder });\n    }).unsubscribe;\n\n  private subscribeReminderDeleted = () =>\n    this.client.on('reminder.deleted', (event) => {\n      if (!ReminderManager.isReminderWsEventPayload(event)) return;\n      this.removeFromState(event.message_id);\n    }).unsubscribe;\n\n  private subscribeMessageDeleted = () =>\n    this.client.on('message.deleted', (event) => {\n      if (!event.message?.id) return;\n      this.removeFromState(event.message.id);\n    }).unsubscribe;\n\n  private subscribeMessageUndeleted = () =>\n    this.client.on('message.undeleted', (event) => {\n      if (!event.message?.reminder) return;\n      // todo: not sure whether reminder specific event is emitted too and this can be ignored here\n      this.upsertToState({ data: event.message.reminder });\n    }).unsubscribe;\n\n  private subscribeNotificationReminderDue = () =>\n    this.client.on('notification.reminder_due', () => null).unsubscribe; // todo: what should be performed on this event?\n\n  private subscribePaginatorStateUpdated = () =>\n    this.paginator.state.subscribeWithSelector(\n      ({ items }) => [items],\n      ([items]) => {\n        if (!items) return;\n        for (const reminder of items) {\n          this.upsertToState({ data: reminder });\n        }\n      },\n    );\n\n  private subscribeConfigStateUpdated = () =>\n    this.configState.subscribeWithSelector(\n      ({ stopTimerRefreshBoundaryMs }) => ({ stopTimerRefreshBoundaryMs }),\n      ({ stopTimerRefreshBoundaryMs }, previousValue) => {\n        if (\n          typeof stopTimerRefreshBoundaryMs === 'number' &&\n          stopTimerRefreshBoundaryMs !== previousValue?.stopTimerRefreshBoundaryMs\n        ) {\n          this.reminders.forEach((reminder: Reminder) => {\n            if (reminder.timer) {\n              reminder.timer.stopRefreshBoundaryMs = stopTimerRefreshBoundaryMs;\n            }\n          });\n        }\n      },\n    );\n  // WS event handling END //\n\n  // API calls START //\n  upsertReminder = async (options: CreateReminderOptions) => {\n    const { messageId } = options;\n    if (this.getFromState(messageId)) {\n      try {\n        return await this.updateReminder(options);\n      } catch (error) {\n        if (isReminderDoesNotExistError(error as Error)) {\n          return await this.createReminder(options);\n        }\n        throw error;\n      }\n    } else {\n      try {\n        return await this.createReminder(options);\n      } catch (error) {\n        if (isReminderExistsError(error as Error)) {\n          return await this.updateReminder(options);\n        }\n        throw error;\n      }\n    }\n  };\n\n  createReminder = async (options: CreateReminderOptions) => {\n    const { reminder } = await this.client.createReminder(options);\n    return this.upsertToState({ data: reminder, overwrite: false });\n  };\n\n  updateReminder = async (options: CreateReminderOptions) => {\n    const { reminder } = await this.client.updateReminder(options);\n    return this.upsertToState({ data: reminder });\n  };\n\n  deleteReminder = async (messageId: MessageId) => {\n    await this.client.deleteReminder(messageId);\n    this.removeFromState(messageId);\n  };\n\n  queryNextReminders = async () => {\n    await this.paginator.next();\n  };\n\n  queryPreviousReminders = async () => {\n    await this.paginator.prev();\n  };\n\n  // API calls END //\n}\n","export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.kicked': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'draft.deleted': true,\n  'draft.updated': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'message.undeleted': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.mark_unread': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'notification.thread_message_new': true,\n  'poll.closed': true,\n  'poll.updated': true,\n  'poll.vote_casted': true,\n  'poll.vote_changed': true,\n  'poll.vote_removed': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'thread.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.unread_message_reminder': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n  // AI events\n  'ai_indicator.update': true,\n  'ai_indicator.stop': true,\n  'ai_indicator.clear': true,\n\n  // local events\n  'channels.queried': true,\n  'offline_reactions.queried': true,\n  'connection.changed': true,\n  'connection.recovered': true,\n  'transport.changed': true,\n  'capabilities.changed': true,\n\n  // Reminder events\n  'reminder.created': true,\n  'reminder.updated': true,\n  'reminder.deleted': true,\n  'notification.reminder_due': true,\n};\n","import type { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission(\n  'Allow all',\n  MaxPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Allow,\n);\n\n// deprecated\nexport const DenyAll = new Permission(\n  'Deny all',\n  MinPriority,\n  AnyResource,\n  AnyRole,\n  false,\n  Deny,\n);\n\nexport type Role =\n  | 'admin'\n  | 'user'\n  | 'guest'\n  | 'anonymous'\n  | 'channel_member'\n  | 'channel_moderator'\n  | (string & {});\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n","import type {\n  AppSettingsAPIResponse,\n  ChannelAPIResponse,\n  ChannelFilters,\n  ChannelMemberResponse,\n  ChannelResponse,\n  ChannelSort,\n  DraftResponse,\n  LocalMessage,\n  MessageResponse,\n  PollResponse,\n  ReactionFilters,\n  ReactionResponse,\n  ReactionSort,\n  ReadResponse,\n} from '../types';\nimport type { Channel } from '../channel';\nimport type { StreamChat } from '../client';\n\nexport type PrepareBatchDBQueries =\n  | [string]\n  | [string, Array<unknown> | Array<Array<unknown>>];\n\n/**\n * Options to insert a reaction into a message.\n */\nexport type DBInsertReactionType = {\n  /** Message to which the reaction is applied. */\n  message: MessageResponse | LocalMessage;\n  /** The reaction to insert. */\n  reaction: ReactionResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert channel IDs associated with a query.\n */\nexport type DBUpsertCidsForQueryType = {\n  /** Array of channel IDs. */\n  cids: string[];\n  /** Optional filters for the channels. */\n  filters?: ChannelFilters;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n  /** Optional sorting applied to the channels. */\n  sort?: ChannelSort;\n};\n\n/**\n * Options to upsert multiple channels.\n */\nexport type DBUpsertChannelsType = {\n  /** Array of channel API responses. */\n  channels: ChannelAPIResponse[];\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n  /** If true, marks that the latest messages are already set. */\n  isLatestMessagesSet?: boolean;\n};\n\n/**\n * Options to upsert application settings for a user.\n */\nexport type DBUpsertAppSettingsType = {\n  /** App settings data. */\n  appSettings: AppSettingsAPIResponse;\n  /** ID of the user the settings belong to. */\n  userId: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Sync status information for a user.\n */\nexport type DBUpsertUserSyncStatusType = {\n  /** ID of the user. */\n  userId: string;\n  /** ISO timestamp of the last sync. */\n  lastSyncedAt: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert a poll.\n */\nexport type DBUpsertPollType = {\n  /** Poll data to be stored. */\n  poll: PollResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert individual channel data.\n */\nexport type DBUpsertChannelDataType = {\n  /** Channel data. */\n  channel: ChannelResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert read statuses for a channel.\n */\nexport type DBUpsertReadsType = {\n  /** Channel ID. */\n  cid: string;\n  /** Array of read statuses. */\n  reads: ReadResponse[];\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert multiple messages.\n */\nexport type DBUpsertMessagesType = {\n  /** Array of message responses. */\n  messages: MessageResponse[];\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to upsert members in a channel.\n */\nexport type DBUpsertMembersType = {\n  /** Channel ID. */\n  cid: string;\n  /** Array of channel members. */\n  members: ChannelMemberResponse[];\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to update a reaction.\n */\nexport type DBUpdateReactionType = {\n  /** Message associated with the reaction. */\n  message: MessageResponse | LocalMessage;\n  /** The updated reaction. */\n  reaction: ReactionResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to update a message.\n */\nexport type DBUpdateMessageType = {\n  /** Message to update. */\n  message: MessageResponse | LocalMessage;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to get channels by their IDs.\n */\nexport type DBGetChannelsType = {\n  /** Array of channel IDs. */\n  cids: string[];\n  /** ID of the user. */\n  userId: string;\n};\n\n/**\n * Options to get channels based on filters.\n */\nexport type DBGetChannelsForQueryType = {\n  /** ID of the user. */\n  userId: string;\n  /** Optional filters for channels. */\n  filters?: ChannelFilters;\n  /** Optional sorting for the channels. */\n  sort?: ChannelSort;\n};\n\n/**\n * Get the last sync timestamp for a user.\n */\nexport type DBGetLastSyncedAtType = {\n  /** ID of the user. */\n  userId: string;\n};\n\n/**\n * Options to fetch pending tasks for a specific message.\n */\nexport type DBGetPendingTasksType = {\n  /** Optional message ID to filter tasks. */\n  messageId?: string;\n};\n\n/**\n * Get application settings for a user.\n */\nexport type DBGetAppSettingsType = {\n  /** ID of the user. */\n  userId: string;\n};\n\n/**\n * Options to retrieve reactions for a message.\n */\nexport type DBGetReactionsType = {\n  /** ID of the message. */\n  messageId: string;\n  /** Optional filter to apply to reactions. */\n  filters?: Pick<ReactionFilters, 'type'>;\n  /** Optional sorting for reactions. */\n  sort?: ReactionSort;\n  /** Optional maximum number of reactions to return. */\n  limit?: number;\n};\n\n/**\n * Delete a pending task by ID.\n */\nexport type DBDeletePendingTaskType = {\n  /** ID of the pending task. */\n  id: number;\n};\n\n/**\n * Options to delete a reaction from a message.\n */\nexport type DBDeleteReactionType = {\n  /** The reaction to delete. */\n  reaction: ReactionResponse;\n  /** Optional message associated with the reaction. */\n  message?: MessageResponse | LocalMessage;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to delete a channel member.\n */\nexport type DBDeleteMemberType = {\n  /** Channel ID. */\n  cid: string;\n  /** Member to remove. */\n  member: ChannelMemberResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to drop all pending tasks for a message.\n */\nexport type DBDropPendingTasksType = {\n  /** ID of the message. */\n  messageId: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to delete a message.\n */\nexport type DBDeleteMessageType = {\n  /** ID of the message. */\n  id: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to delete a channel.\n */\nexport type DBDeleteChannelType = {\n  /** Channel ID. */\n  cid: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Options to delete messages in a channel.\n */\nexport type DBDeleteMessagesForChannelType = {\n  /** Channel ID. */\n  cid: string;\n  /** Timestamp before which messages are deleted. */\n  truncated_at?: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Check if a channel exists by ID.\n */\nexport type DBChannelExistsType = {\n  /** Channel ID. */\n  cid: string;\n};\n\nexport type DBUpsertDraftType = {\n  /** Draft message to upsert. */\n  draft: DraftResponse;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\nexport type DBGetDraftType = {\n  /** Channel ID for which to get the draft. */\n  cid: string;\n  /** ID of the user requesting the draft. */\n  userId: string;\n  /** Optional parent ID for the parent message in thread, if applicable. */\n  parent_id?: string;\n};\n\nexport type DBDeleteDraftType = {\n  /** Channel ID for which to delete the draft. */\n  cid: string;\n  /** Optional parent ID for the parent message in thread, if applicable. */\n  parent_id?: string;\n  /** Whether to immediately execute the operation. */\n  execute?: boolean;\n};\n\n/**\n * Represents a list of batch SQL queries to be executed.\n */\nexport type ExecuteBatchDBQueriesType = PrepareBatchDBQueries[];\n\nexport interface OfflineDBApi {\n  insertReaction: (options: DBInsertReactionType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertCidsForQuery: (\n    options: DBUpsertCidsForQueryType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  upsertChannels: (options: DBUpsertChannelsType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertUserSyncStatus: (\n    options: DBUpsertUserSyncStatusType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  upsertAppSettings: (\n    options: DBUpsertAppSettingsType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  upsertDraft: (options: DBUpsertDraftType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertPoll: (options: DBUpsertPollType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertChannelData: (\n    options: DBUpsertChannelDataType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  upsertReads: (options: DBUpsertReadsType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertMessages: (options: DBUpsertMessagesType) => Promise<ExecuteBatchDBQueriesType>;\n  upsertMembers: (options: DBUpsertMembersType) => Promise<ExecuteBatchDBQueriesType>;\n  updateReaction: (options: DBUpdateReactionType) => Promise<ExecuteBatchDBQueriesType>;\n  updateMessage: (options: DBUpdateMessageType) => Promise<ExecuteBatchDBQueriesType>;\n  getDraft: (options: DBGetDraftType) => Promise<DraftResponse | null>;\n  getChannels: (\n    options: DBGetChannelsType,\n  ) => Promise<Omit<ChannelAPIResponse, 'duration'>[] | null>;\n  getChannelsForQuery: (\n    options: DBGetChannelsForQueryType,\n  ) => Promise<Omit<ChannelAPIResponse, 'duration'>[] | null>;\n  getAllChannelCids: () => Promise<string[]>;\n  getLastSyncedAt: (options: DBGetLastSyncedAtType) => Promise<string | undefined>;\n  getAppSettings: (\n    options: DBGetAppSettingsType,\n  ) => Promise<AppSettingsAPIResponse | null>;\n  getReactions: (options: DBGetReactionsType) => Promise<ReactionResponse[] | null>;\n  executeSqlBatch: (queries: ExecuteBatchDBQueriesType) => Promise<unknown>;\n  addPendingTask: (task: PendingTask) => Promise<() => Promise<void>>;\n  getPendingTasks: (conditions?: DBGetPendingTasksType) => Promise<PendingTask[]>;\n  deleteDraft: (options: DBDeleteDraftType) => Promise<ExecuteBatchDBQueriesType>;\n  deletePendingTask: (\n    options: DBDeletePendingTaskType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  deleteReaction: (options: DBDeleteReactionType) => Promise<ExecuteBatchDBQueriesType>;\n  deleteMember: (options: DBDeleteMemberType) => Promise<ExecuteBatchDBQueriesType>;\n  deleteChannel: (options: DBDeleteChannelType) => Promise<ExecuteBatchDBQueriesType>;\n  deleteMessagesForChannel: (\n    options: DBDeleteMessagesForChannelType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  dropPendingTasks: (\n    options: DBDropPendingTasksType,\n  ) => Promise<ExecuteBatchDBQueriesType>;\n  hardDeleteMessage: (options: DBDeleteMessageType) => Promise<ExecuteBatchDBQueriesType>;\n  softDeleteMessage: (options: DBDeleteMessageType) => Promise<ExecuteBatchDBQueriesType>;\n  resetDB: () => Promise<unknown>;\n  channelExists: (options: DBChannelExistsType) => Promise<boolean>;\n  initializeDB: () => Promise<boolean>;\n}\n\nexport type OfflineDBState = {\n  initialized: boolean;\n  userId?: string;\n};\n\nexport type PendingTaskTypes = {\n  deleteMessage: 'delete-message';\n  deleteReaction: 'delete-reaction';\n  sendReaction: 'send-reaction';\n  sendMessage: 'send-message';\n  createDraft: 'create-draft';\n  deleteDraft: 'delete-draft';\n};\n\n// TODO: Please rethink the definition of PendingTasks as it seems awkward\nexport type PendingTask = {\n  channelId?: string;\n  channelType?: string;\n  messageId?: string;\n  id?: number;\n  threadId?: string;\n} & (\n  | {\n      payload: Parameters<Channel['sendReaction']>;\n      type: PendingTaskTypes['sendReaction'];\n    }\n  | {\n      payload: Parameters<StreamChat['deleteMessage']>;\n      type: PendingTaskTypes['deleteMessage'];\n    }\n  | {\n      payload: Parameters<Channel['deleteReaction']>;\n      type: PendingTaskTypes['deleteReaction'];\n    }\n  | {\n      payload: Parameters<Channel['sendMessage']>;\n      type: PendingTaskTypes['sendMessage'];\n    }\n  | {\n      payload: Parameters<Channel['createDraft']>;\n      type: PendingTaskTypes['createDraft'];\n    }\n  | {\n      payload: Parameters<Channel['deleteDraft']>;\n      type: PendingTaskTypes['deleteDraft'];\n    }\n);\n\nexport type OfflineErrorType = 'connection:lost';\n\nexport class OfflineError extends Error {\n  public type: OfflineErrorType;\n  public name = 'OfflineError';\n\n  constructor(\n    message: string,\n    {\n      type,\n    }: {\n      type: OfflineError['type'];\n    },\n  ) {\n    super(message);\n    this.type = type;\n  }\n\n  // Vitest helper (serialized errors are too large to read)\n  // https://github.com/vitest-dev/vitest/blob/v3.1.3/packages/utils/src/error.ts#L60-L62\n  toJSON() {\n    return {\n      message: `${this.type} - ${this.message}`,\n      stack: this.stack,\n      name: this.name,\n    };\n  }\n}\n","import type { ExecuteBatchDBQueriesType } from './types';\nimport type { StreamChat } from '../client';\nimport type { AbstractOfflineDB } from './offline_support_api';\n\n/**\n * Manages synchronization between the local offline database and the Stream backend.\n *\n * Responsible for detecting connection changes, syncing channel data, and executing\n * pending tasks queued during offline periods. This class ensures the database remains\n * consistent with the server once connectivity is restored.\n */\nexport class OfflineDBSyncManager {\n  public syncStatus = false;\n  public connectionChangedListener: { unsubscribe: () => void } | null = null;\n  private syncStatusListeners: Array<(status: boolean) => void> = [];\n  private scheduledSyncStatusCallbacks: Map<string | symbol, () => Promise<void>> =\n    new Map();\n  private client: StreamChat;\n  private offlineDb: AbstractOfflineDB;\n\n  constructor({\n    client,\n    offlineDb,\n  }: {\n    client: StreamChat;\n    offlineDb: AbstractOfflineDB;\n  }) {\n    this.client = client;\n    this.offlineDb = offlineDb;\n  }\n\n  /**\n   * Initializes the sync manager. Should only be called once per session.\n   *\n   * Cleans up old listeners if re-initialized to avoid memory leaks.\n   * Starts syncing immediately if already connected, otherwise waits for reconnection.\n   */\n  public init = async () => {\n    try {\n      // If the websocket connection is already active, then call\n      // the sync api straight away and also execute pending api calls.\n      // Otherwise wait for the `connection.changed` event.\n      if (this.client.user?.id && this.client.wsConnection?.isHealthy) {\n        await this.syncAndExecutePendingTasks();\n        await this.invokeSyncStatusListeners(true);\n      }\n\n      // If a listener has already been registered, unsubscribe from it so\n      // that it can be reinstated. This can happen if we reconnect with a\n      // different user or the component invoking the init() function gets\n      // unmounted and then remounted again. This part of the code makes\n      // sure the stale listener doesn't produce a memory leak.\n      if (this.connectionChangedListener) {\n        this.connectionChangedListener.unsubscribe();\n      }\n\n      this.connectionChangedListener = this.client.on(\n        'connection.changed',\n        async (event) => {\n          if (event.online) {\n            await this.syncAndExecutePendingTasks();\n            await this.invokeSyncStatusListeners(true);\n          } else {\n            await this.invokeSyncStatusListeners(false);\n          }\n        },\n      );\n    } catch (error) {\n      console.log('Error in DBSyncManager.init: ', error);\n    }\n  };\n\n  /**\n   * Registers a listener that is called whenever the sync status changes.\n   *\n   * @param listener - A callback invoked with the new sync status (`true` or `false`).\n   * @returns An object with an `unsubscribe` function to remove the listener.\n   */\n  public onSyncStatusChange = (listener: (status: boolean) => void) => {\n    this.syncStatusListeners.push(listener);\n\n    return {\n      unsubscribe: () => {\n        this.syncStatusListeners = this.syncStatusListeners.filter(\n          (el) => el !== listener,\n        );\n      },\n    };\n  };\n\n  /**\n   * Schedules a one-time callback to be invoked after the next successful sync.\n   *\n   * @param tag - A unique key to identify and manage the callback.\n   * @param callback - An async function to run after sync.\n   */\n  public scheduleSyncStatusChangeCallback = (\n    tag: string | symbol,\n    callback: () => Promise<void>,\n  ) => {\n    this.scheduledSyncStatusCallbacks.set(tag, callback);\n  };\n\n  /**\n   * Invokes all registered sync status listeners and executes any scheduled sync callbacks.\n   *\n   * @param status - The new sync status (`true` or `false`).\n   */\n  private invokeSyncStatusListeners = async (status: boolean) => {\n    this.syncStatus = status;\n    this.syncStatusListeners.forEach((l) => l(status));\n\n    if (status) {\n      const promises = Array.from(this.scheduledSyncStatusCallbacks.values()).map((cb) =>\n        cb(),\n      );\n      await Promise.all(promises);\n\n      this.scheduledSyncStatusCallbacks.clear();\n    }\n  };\n\n  /**\n   * Performs synchronization with the Stream backend.\n   *\n   * This includes downloading events since the last sync, updating the local DB,\n   * and handling sync failures (e.g., if syncing beyond the allowed retention window).\n   */\n  private sync = async () => {\n    if (!this.client?.user) {\n      return;\n    }\n    try {\n      const cids = await this.offlineDb.getAllChannelCids();\n      // If there are no channels, then there is no need to sync.\n      if (cids.length === 0) {\n        return;\n      }\n\n      // TODO: We should not need our own user ID in the API, it can be inferred\n      const lastSyncedAt = await this.offlineDb.getLastSyncedAt({\n        userId: this.client.user.id,\n      });\n\n      if (lastSyncedAt) {\n        const lastSyncedAtDate = new Date(lastSyncedAt);\n        const nowDate = new Date();\n\n        // Calculate the difference in days\n        const diff = Math.floor(\n          (nowDate.getTime() - lastSyncedAtDate.getTime()) / (1000 * 60 * 60 * 24),\n        );\n\n        if (diff > 30) {\n          // stream backend will send an error if we try to sync after 30 days.\n          // In that case reset the entire DB and start fresh.\n          await this.offlineDb.resetDB();\n        } else {\n          const result = await this.client.sync(cids, lastSyncedAtDate.toISOString());\n          const queryPromises = result.events.map((event) =>\n            this.offlineDb.handleEvent({ event, execute: false }),\n          );\n          const queriesArray = await Promise.all(queryPromises);\n          const queries = queriesArray.flat() as ExecuteBatchDBQueriesType;\n\n          if (queries.length) {\n            await this.offlineDb.executeSqlBatch(queries);\n          }\n        }\n      }\n      await this.offlineDb.upsertUserSyncStatus({\n        userId: this.client.user.id,\n        lastSyncedAt: new Date().toString(),\n      });\n    } catch (e) {\n      console.log('An error has occurred while syncing the DB.', e);\n      // Error will be raised by the sync API if there are too many events.\n      // In that case reset the entire DB and start fresh.\n      await this.offlineDb.resetDB();\n    }\n  };\n\n  /**\n   * Executes any tasks that were queued while offline and then performs a sync.\n   */\n  private syncAndExecutePendingTasks = async () => {\n    await this.offlineDb.executePendingTasks();\n    await this.sync();\n  };\n}\n","import type { APIErrorResponse, ChannelResponse, Event } from '../types';\n\nimport type {\n  OfflineDBApi,\n  OfflineDBState,\n  PendingTask,\n  PrepareBatchDBQueries,\n} from './types';\nimport { OfflineError } from './types';\nimport type { StreamChat } from '../client';\nimport type { AxiosError } from 'axios';\nimport { OfflineDBSyncManager } from './offline_sync_manager';\nimport { StateStore } from '../store';\nimport { runDetached } from '../utils';\n\n/**\n * Abstract base class for an offline database implementation used with StreamChat.\n *\n * Manages state and synchronization logic between the client and the offline database,\n * as well as contains the API providing core functionality for tracking and persisting\n * offline data.\n *\n * @abstract\n */\nexport abstract class AbstractOfflineDB implements OfflineDBApi {\n  private client: StreamChat;\n  public syncManager: OfflineDBSyncManager;\n  public state: StateStore<OfflineDBState>;\n\n  constructor({ client }: { client: StreamChat }) {\n    this.client = client;\n    this.syncManager = new OfflineDBSyncManager({ client, offlineDb: this });\n    this.state = new StateStore<OfflineDBState>({\n      initialized: false,\n      userId: this.client.userID,\n    });\n  }\n\n  /**\n   * @abstract\n   * Inserts a reaction into the DB.\n   * Will write to:\n   * - The reactions table with the new reaction\n   * - The message table with the message containing the new reaction\n   * - The users table with any users associated\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBInsertReactionType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract insertReaction: OfflineDBApi['insertReaction'];\n\n  /**\n   * @abstract\n   * Upserts the list of CIDs for a filter + sort query hash.\n   * Will write to only the table containing the cids.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertCidsForQueryType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertCidsForQuery: OfflineDBApi['upsertCidsForQuery'];\n\n  /**\n   * @abstract\n   * Upserts the channels passed as an argument within the DB. Relies on\n   * writing the properties we need from a ChannelResponse into the adequate\n   * tables.\n   * Will write to:\n   * - The channels table with the channel data\n   * - The messages table with each message associated\n   * - The reactions table if the messages contain reactions\n   * - The users table with all users associated\n   * - The members table for membership and members\n   * - The polls table for any messages that are polls\n   * - The reads table for each user\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertChannelsType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertChannels: OfflineDBApi['upsertChannels'];\n\n  /**\n   * @abstract\n   * Upserts the current active user's sync status.\n   * Will only write to the sync status table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertUserSyncStatusType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertUserSyncStatus: OfflineDBApi['upsertUserSyncStatus'];\n\n  /**\n   * @abstract\n   * Upserts the app settings for the current Stream App into the DB. It\n   * is only intended to be run once per lifecycle of the app.\n   * Will only write to the respective app settings table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertAppSettingsType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertAppSettings: OfflineDBApi['upsertAppSettings'];\n\n  /**\n   * @abstract\n   * Upserts a poll fully in the DB.\n   * Will write to the polls table. It should not update the message\n   * associated due to how the poll state works.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertPollType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertPoll: OfflineDBApi['upsertPoll'];\n\n  /**\n   * @abstract\n   * Upserts only the channel.data for the provided channels in the DB.\n   * Will only write to the channels table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertChannelDataType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertChannelData: OfflineDBApi['upsertChannelData'];\n\n  /**\n   * @abstract\n   * Upserts the provided reads in the DB.\n   * Will write to:\n   * - The reads table\n   * - The users table for each user associated with a read\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertReadsType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertReads: OfflineDBApi['upsertReads'];\n\n  /**\n   * @abstract\n   * Upserts the messages in the DB.\n   * Will write to:\n   * - The messages table\n   * - The reads table\n   * - The polls table (if any messages contain polls)\n   * - The reactions table (if any messages contain reactions)\n   * - The users table\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertMessagesType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertMessages: OfflineDBApi['upsertMessages'];\n\n  /**\n   * @abstract\n   * Upserts the members in the DB.\n   * Will write to:\n   * - The users table (for each user associated with a member)\n   * - The members table\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertMembersType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertMembers: OfflineDBApi['upsertMembers'];\n\n  /**\n   * @abstract\n   * Updates a reaction in the DB. Will update the DB the same way\n   * a reaction.updated event would (it assumes enforce_unique is true\n   * and removes all other reactions associated with the user.\n   * Will write to the reactions table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpdateReactionType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract updateReaction: OfflineDBApi['updateReaction'];\n\n  /**\n   * @abstract\n   * Updates a single message in the DB. This is used as a faster\n   * alternative to upsertMessages with more optimized queries.\n   * Will write to the messages table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpdateMessageType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract updateMessage: OfflineDBApi['updateMessage'];\n\n  /**\n   * @abstract\n   * Fetches the provided draft from the DB. Should return as close to\n   * the server side DraftResponse as possible.\n   * @param {DBGetDraftType} options\n   * @returns {Promise<DraftResponse | null>}\n   */\n  abstract getDraft: OfflineDBApi['getDraft'];\n  /**\n   * @abstract\n   * Upserts a draft in the DB.\n   * Will write to the draft table upserting the draft.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBUpsertDraftType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract upsertDraft: OfflineDBApi['upsertDraft'];\n  /**\n   * @abstract\n   * Deletes a draft from the DB.\n   * Will write to the draft table removing the draft.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteDraftType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deleteDraft: OfflineDBApi['deleteDraft'];\n\n  /**\n   * @abstract\n   * Fetches the provided channels from the DB and aggregates all data associated\n   * with them in a single ChannelAPIResponse. The implementation itself is responsible\n   * for aggregating and serialization of all of the data. Should return as close to\n   * the server side ChannelAPIResponse as possible.\n   * @param {DBGetChannelsType} options\n   * @returns {Promise<Omit<ChannelAPIResponse, 'duration'>[] | null>}\n   */\n  abstract getChannels: OfflineDBApi['getChannels'];\n\n  /**\n   * @abstract\n   * Fetches the channels from the DB that were the last known response to a filters & sort\n   * hash as a query and aggregates all data associated with them in a single ChannelAPIResponse.\n   * The implementation itself is responsible for aggregating and serialization of all of the data.\n   * Should return as close to the server side ChannelAPIResponse as possible.\n   * @param {DBGetChannelsForQueryType} options\n   * @returns {Promise<Omit<ChannelAPIResponse, 'duration'>[] | null>}\n   */\n  abstract getChannelsForQuery: OfflineDBApi['getChannelsForQuery'];\n\n  /**\n   * @abstract\n   * Will return a list of all available CIDs in the DB. The same can be achieved\n   * by fetching all channels, however this is meant to be much faster as a query.\n   * @returns {Promise<string[]>}\n   */\n  abstract getAllChannelCids: OfflineDBApi['getAllChannelCids'];\n\n  /**\n   * @abstract\n   * Fetches the timestamp of the last sync of the DB.\n   * @param {DBGetLastSyncedAtType} options\n   * @returns {Promise<string | undefined>}\n   */\n  abstract getLastSyncedAt: OfflineDBApi['getLastSyncedAt'];\n\n  /**\n   * @abstract\n   * Fetches all pending tasks from the DB. It will return them in an\n   * ordered fashion by the time they were created.\n   * @param {DBGetPendingTasksType} [conditions]\n   * @returns {Promise<PendingTask[]>}\n   */\n  abstract getPendingTasks: OfflineDBApi['getPendingTasks'];\n\n  /**\n   * @abstract\n   * Fetches the app settings stored in the DB. Is mainly meant to be used\n   * only while offline and opening the application, as we only update the\n   * app settings whenever they are fetched again so it has the potential to\n   * be stale.\n   * @param {DBGetAppSettingsType} options\n   * @returns {Promise<AppSettingsAPIResponse | null>}\n   */\n  abstract getAppSettings: OfflineDBApi['getAppSettings'];\n\n  /**\n   * @abstract\n   * Fetches reactions from the DB for a given filter & sort hash and\n   * for a given message ID.\n   * @param {DBGetReactionsType} options\n   * @returns {Promise<ReactionResponse[] | null>}\n   */\n  abstract getReactions: OfflineDBApi['getReactions'];\n\n  /**\n   * @abstract\n   * Executes multiple queries in a batched fashion. It will also be done\n   * within a transaction.\n   * @param {ExecuteBatchDBQueriesType} queries\n   * @returns {Promise<unknown>}\n   */\n  abstract executeSqlBatch: OfflineDBApi['executeSqlBatch'];\n\n  /**\n   * @abstract\n   * Adds a pending task to the pending tasks table. Can only be one of the\n   * supported types of pending tasks, otherwise its execution will throw.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {PendingTask} task\n   * @returns {Promise<() => Promise<void>>}\n   */\n  abstract addPendingTask: OfflineDBApi['addPendingTask'];\n\n  /**\n   * @abstract\n   * Deletes a pending task from the DB, given its ID.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeletePendingTaskType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deletePendingTask: OfflineDBApi['deletePendingTask'];\n\n  /**\n   * @abstract\n   * Deletes a reaction from the DB.\n   * Will write to the reactions table removing the reaction.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteReactionType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deleteReaction: OfflineDBApi['deleteReaction'];\n\n  /**\n   * @abstract\n   * Deletes a member from the DB.\n   * Will only write to the members table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteMemberType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deleteMember: OfflineDBApi['deleteMember'];\n\n  /**\n   * @abstract\n   * Deletes a channel from the DB.\n   * It will also delete all other entities associated with the channel in\n   * a cascading fashion (messages, reactions, members etc.).\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteChannelType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deleteChannel: OfflineDBApi['deleteChannel'];\n\n  /**\n   * @abstract\n   * Deletes multiple messages for a given channel. Works as `channel.truncated` would.\n   * Should remove entities primarily from the messages table and then from all associated\n   * tables in a cascading fashion (reactions, polls etc.).\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteMessagesForChannelType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract deleteMessagesForChannel: OfflineDBApi['deleteMessagesForChannel'];\n\n  /**\n   * @abstract\n   * Deletes all pending tasks from the DB.\n   * Will only update the pending tasks table.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDropPendingTasksType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract dropPendingTasks: OfflineDBApi['dropPendingTasks'];\n\n  /**\n   * @abstract\n   * Deletes a message from the DB.\n   * All other entities associated with the message will also be deleted\n   * in a cascading fashion (reactions, polls etc.).\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteMessageType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract hardDeleteMessage: OfflineDBApi['hardDeleteMessage'];\n\n  /**\n   * @abstract\n   * Updates a message with a deleted_at value in the DB.\n   * Will only update the messages table, as the message is simply marked\n   * as deleted and not removed from the DB.\n   * Will return the prepared queries for delayed execution (even if they are\n   * already executed).\n   * @param {DBDeleteMessageType} options\n   * @returns {Promise<ExecuteBatchDBQueriesType>}\n   */\n  abstract softDeleteMessage: OfflineDBApi['softDeleteMessage'];\n\n  /**\n   * @abstract\n   * Drops all tables and reinitializes the connection to the DB.\n   * @returns {Promise<unknown>}\n   */\n  abstract resetDB: OfflineDBApi['resetDB'];\n\n  /**\n   * @abstract\n   * A utility query that checks whether a specific channel exists in the DB.\n   * Technically the same as actually fetching that channel through other queries,\n   * but much faster.\n   * @param {DBChannelExistsType} options\n   * @returns {Promise<boolean>}\n   */\n  abstract channelExists: OfflineDBApi['channelExists'];\n\n  /**\n   * @abstract\n   * Initializes the DB (typically creating a simple file handle as a connection pointer for\n   * SQLite and likely similar for other DBs).\n   * @returns {Promise<boolean>}\n   */\n  abstract initializeDB: OfflineDBApi['initializeDB'];\n\n  /**\n   * Initializes the DB as well as its syncManager for a given userId.\n   * It will update the DBs reactive state with initialization values.\n   * @param userId - the user ID for which we want to initialize\n   */\n  public init = async (userId: string) => {\n    try {\n      if (!this.shouldInitialize(userId)) {\n        // Note: We need this to return as changing the API is a breaking change.\n        // This will change in the next major release.\n        const initialized = await this.initializeDB();\n        if (initialized) {\n          await this.syncManager.init();\n          this.state.partialNext({ initialized: true, userId });\n        } else {\n          this.state.partialNext({ initialized: false });\n        }\n      }\n    } catch (error) {\n      this.state.partialNext({ initialized: false, userId: undefined });\n      console.log('Error Initializing DB:', error);\n    }\n  };\n\n  /**\n   * Checks whether the DB should be initialized or if it has been initialized already.\n   * @param {string} userId - the user ID for which we want to check initialization\n   */\n  public shouldInitialize(userId: string): boolean {\n    const { userId: userIdFromState, initialized } = this.state.getLatestValue();\n    return userId === userIdFromState && initialized;\n  }\n\n  /**\n   * A utility method used to execute a query in a detached manner. The callback\n   * passed uses a reference to the DB itself and will handle errors gracefully\n   * and silently. Only really meant to be used for write queries that need to\n   * be run in synchronous functions.\n   * @param queryCallback - a callback wrapping all query logic that is to be executed\n   * @param method - a utility parameter used for proper logging (will make sure the method\n   * is logged on failure)\n   */\n  public executeQuerySafely = <T>(\n    queryCallback: (db: AbstractOfflineDB) => Promise<T>,\n    { method }: { method: string },\n  ) => {\n    const { initialized } = this.state.getLatestValue();\n    if (!initialized) {\n      return;\n    }\n    runDetached(queryCallback(this), { context: `OfflineDB(${method})` });\n  };\n\n  /**\n   * A utility method used to guard a certain DB query with the possible non-existance\n   * of a channel inside of the DB. If the channel we want to guard against does not exist\n   * in the DB yet, it will try to:\n   *\n   * 1. Use the channel from the WS event\n   * 2. Use the channel from state\n   *\n   * and upsert the channels in the DB.\n   *\n   * If both fail, it will not execute the query as it would result in a foreign key constraint\n   * error.\n   *\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   * @param forceUpdate - whether to upsert the channel data anyway\n   * @param createQueries - a callback function to creation of the queries that we want to execute\n   */\n  public queriesWithChannelGuard = async (\n    {\n      event,\n      execute = true,\n      forceUpdate = false,\n    }: { event: Event; execute?: boolean; forceUpdate?: boolean },\n    createQueries: (executeOverride?: boolean) => Promise<PrepareBatchDBQueries[]>,\n  ) => {\n    const channelFromEvent = event.channel;\n    const cid = event.cid || channelFromEvent?.cid;\n    const type = event.type;\n\n    if (!cid) {\n      return await createQueries(execute);\n    }\n    // We want to upsert the channel data if we either:\n    // - Have forceUpdate set to true\n    // - The channel does not yet exist in the DB\n    // If a channel is not present in the db, we first fetch the channel data from the channel object.\n    // This can happen for example when a message.new event is received for a channel that is not in the db due to a channel being hidden.\n    const shouldUpsertChannelData = forceUpdate || !(await this.channelExists({ cid }));\n    if (shouldUpsertChannelData) {\n      let channelData = channelFromEvent;\n      if (!channelData && event.channel_type && event.channel_id) {\n        const channelFromState = this.client.channel(\n          event.channel_type,\n          event.channel_id,\n        );\n        if (channelFromState.initialized && !channelFromState.disconnected) {\n          channelData = channelFromState.data as unknown as ChannelResponse;\n        }\n      }\n      if (channelData) {\n        const channelQuery = await this.upsertChannelData({\n          channel: channelData,\n          execute: false,\n        });\n        if (channelQuery) {\n          const createdQueries = await createQueries(false);\n          const newQueries = [...channelQuery, ...createdQueries];\n          if (execute) {\n            await this.executeSqlBatch(newQueries);\n          }\n          return newQueries;\n        } else {\n          console.warn(\n            `Couldn't create channel queries on ${type} event for an initialized channel that is not in DB, skipping event`,\n            { event },\n          );\n          return [];\n        }\n      } else {\n        console.warn(\n          `Received ${type} event for a non initialized channel that is not in DB, skipping event`,\n          { event },\n        );\n        return [];\n      }\n    }\n    return await createQueries(execute);\n  };\n\n  /**\n   * Handles a message.new event. Will always use a channel guard for the inner queries\n   * and it is going to make sure that both messages and reads are upserted. It will not\n   * try to fetch the reads from the DB first and it will rely on channel.state to handle\n   * the number of unreads.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleNewMessage = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const client = this.client;\n    const { cid, message, user } = event;\n\n    if (!message || (message.parent_id && !message.show_in_channel)) {\n      return [];\n    }\n\n    const finalQueries = await this.queriesWithChannelGuard(\n      { event, execute },\n      async () => {\n        let queries = await this.upsertMessages({\n          execute: false,\n          messages: [message],\n        });\n        if (cid && client.user && client.user.id !== user?.id) {\n          const userId = client.user.id;\n          const channel = client.activeChannels[cid];\n          if (channel) {\n            const ownReads = channel.state.read[userId];\n            const unreadCount = channel.countUnread();\n            const upsertReadsQueries = await this.upsertReads({\n              cid,\n              execute: false,\n              reads: [\n                {\n                  last_read: ownReads.last_read.toISOString() as string,\n                  last_read_message_id: ownReads.last_read_message_id,\n                  unread_messages: unreadCount,\n                  user: client.user,\n                },\n              ],\n            });\n            queries = [...queries, ...upsertReadsQueries];\n          }\n        }\n        return queries;\n      },\n    );\n\n    if (execute) {\n      await this.executeSqlBatch(finalQueries);\n    }\n\n    return finalQueries;\n  };\n\n  /**\n   * A handler for message deletion. It provides a channel guard and determines whether\n   * it should hard delete or soft delete the message.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleDeleteMessage = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { message, hard_delete = false } = event;\n\n    if (message) {\n      const deleteMethod = hard_delete ? this.hardDeleteMessage : this.softDeleteMessage;\n      return await this.queriesWithChannelGuard(\n        { event, execute },\n        async (executeOverride) =>\n          await deleteMethod({ id: message.id, execute: executeOverride }),\n      );\n    }\n\n    return [];\n  };\n\n  /**\n   * A utility method used for removing a message that has already failed from the\n   * state as well as the DB. We want to drop all pending tasks and finally hard\n   * delete the message from the DB.\n   * @param messageId - the message id of the message we want to remove\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleRemoveMessage = async ({\n    messageId,\n    execute = true,\n  }: {\n    messageId: string;\n    execute?: boolean;\n  }) => {\n    const dropPendingTasksQueries = await this.dropPendingTasks({\n      messageId,\n      execute: false,\n    });\n    const hardDeleteMessageQueries = await this.hardDeleteMessage({\n      id: messageId,\n      execute: false,\n    });\n    const queries = [...dropPendingTasksQueries, ...hardDeleteMessageQueries];\n\n    if (execute) {\n      await this.executeSqlBatch(queries);\n    }\n\n    return queries;\n  };\n\n  /**\n   * A utility method to handle read events. It will calculate the state of the reads if\n   * present in the event, or optionally rely on the hard override in unreadMessages.\n   * The unreadMessages argument is useful for cases where we know the exact number of unreads\n   * (for example reading an entire channel), but `unread_messages` might not necessarily exist\n   * in the event (or it exists with a stale value if we know what we want to ultimately update to).\n   * @param event - the WS event we are trying to process\n   * @param unreadMessages - an override of unread_messages that will be preferred when upserting reads\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleRead = async ({\n    event,\n    unreadMessages,\n    execute = true,\n  }: {\n    event: Event;\n    unreadMessages?: number;\n    execute?: boolean;\n  }) => {\n    const {\n      received_at: last_read,\n      last_read_message_id,\n      unread_messages = 0,\n      user,\n      cid,\n    } = event;\n\n    const overriddenUnreadMessages = unreadMessages ?? unread_messages;\n\n    if (user?.id && cid) {\n      return await this.queriesWithChannelGuard({ event, execute }, (executeOverride) =>\n        this.upsertReads({\n          cid,\n          execute: executeOverride,\n          reads: [\n            {\n              last_read: last_read as string,\n              last_read_message_id,\n              unread_messages: overriddenUnreadMessages,\n              user,\n            },\n          ],\n        }),\n      );\n    }\n\n    return [];\n  };\n\n  /**\n   * A utility method used to handle member events. It guards the processing\n   * of each event with a channel guard and also forces an update of member_count\n   * for the respective channel if applicable.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleMemberEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { member, cid, type } = event;\n\n    if (member && cid) {\n      // we force update here so that member_count gets updated\n      // TODO: Although this is more than fine for now, we should look into\n      //       changing this to be an actual update to the DB instead.\n      return await this.queriesWithChannelGuard(\n        { event, execute, forceUpdate: true },\n        async (executeOverride) => {\n          if (type === 'member.removed') {\n            return await this.deleteMember({ member, cid, execute: executeOverride });\n          }\n\n          return await this.upsertMembers({\n            cid,\n            members: [member],\n            execute: executeOverride,\n          });\n        },\n      );\n    }\n\n    return [];\n  };\n\n  /**\n   * A utility method used to handle message.updated events. It guards each\n   * event handler within a channel guard.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleMessageUpdatedEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { message } = event;\n\n    if (message && !message.parent_id) {\n      return await this.queriesWithChannelGuard(\n        { event, execute },\n        async (executeOverride) =>\n          await this.updateMessage({ message, execute: executeOverride }),\n      );\n    }\n\n    return [];\n  };\n\n  /**\n   * An event handler for channel.visible and channel.hidden events. We need a separate\n   * handler because event.channel.hidden does not arrive with the baseline event, so a\n   * simple upsertion is not enough.\n   * It will update the hidden property of a channel to true if handling the `channel.hidden`\n   * event and to false if handling `channel.visible`.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleChannelVisibilityEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { type, channel } = event;\n\n    if (channel && type) {\n      const hidden = type === 'channel.hidden';\n      return await this.upsertChannelData({\n        channel: { ...channel, hidden },\n        execute,\n      });\n    }\n\n    return [];\n  };\n\n  /**\n   * A utility handler used to handle channel.truncated events. It handles both\n   * removing all messages and relying on truncated_at as well. It will also upsert\n   * reads adequately (and calculate the correct unread messages when truncating).\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleChannelTruncatedEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { channel } = event;\n    const ownUser = this.client.user;\n    if (channel && ownUser) {\n      const { cid, truncated_at } = channel;\n      const truncateQueries = await this.deleteMessagesForChannel({\n        cid,\n        truncated_at,\n        execute: false,\n      });\n\n      const userId = ownUser.id;\n      const activeChannel = this.client.activeChannels[cid];\n      const ownReads = activeChannel.state.read[userId];\n\n      let unreadCount = 0;\n\n      if (truncated_at) {\n        const truncatedAt = new Date(truncated_at);\n        unreadCount = activeChannel.countUnread(truncatedAt);\n      }\n\n      const upsertReadQueries = await this.upsertReads({\n        cid,\n        execute: false,\n        reads: [\n          {\n            last_read: ownReads.last_read.toString() as string,\n            last_read_message_id: ownReads.last_read_message_id,\n            unread_messages: unreadCount,\n            user: ownUser,\n          },\n        ],\n      });\n\n      const finalQueries = [...truncateQueries, ...upsertReadQueries];\n\n      if (execute) {\n        await this.executeSqlBatch(finalQueries);\n      }\n\n      return finalQueries;\n    }\n\n    return [];\n  };\n\n  /**\n   * A utility handler for all reaction events. It wraps the inner queries\n   * within a channel guard and maps them like so:\n   * - reaction.new -> insertReaction\n   * - reaction.updated -> updateReaction\n   * - reaction.deleted -> deleteReaction\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleReactionEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { type, message, reaction } = event;\n\n    if (!(message && reaction)) {\n      return [];\n    }\n\n    const getReactionMethod = (type: Event['type']) => {\n      switch (type) {\n        case 'reaction.new':\n          return this.insertReaction;\n        case 'reaction.deleted':\n          return this.deleteReaction;\n        case 'reaction.updated':\n          return this.updateReaction;\n        default:\n          throw new Error(\n            `You are trying to handle a non-reaction event (${type}) through the reaction DB api.`,\n          );\n      }\n    };\n\n    const reactionMethod = getReactionMethod(type);\n\n    return await this.queriesWithChannelGuard({ event, execute }, (executeOverride) =>\n      reactionMethod({ message, reaction, execute: executeOverride }),\n    );\n  };\n\n  /**\n   * A utility handler for all draft events:\n   * - draft.updated -> updateDraft\n   * - draft.deleted -> deleteDraft\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  handleDraftEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { cid, draft, type } = event;\n\n    if (!draft) return [];\n\n    if (type === 'draft.updated') {\n      return await this.upsertDraft({\n        draft,\n        execute,\n      });\n    }\n\n    if (type === 'draft.deleted') {\n      if (!cid) return [];\n\n      return await this.deleteDraft({\n        cid,\n        parent_id: draft.parent_id,\n        execute,\n      });\n    }\n\n    return [];\n  };\n\n  /**\n   * A generic event handler that decides which DB API to invoke based on\n   * event.type for all events we are currently handling. It is used to both\n   * react on WS events as well as process the sync API events.\n   * @param event - the WS event we are trying to process\n   * @param execute - whether to immediately execute the operation.\n   */\n  public handleEvent = async ({\n    event,\n    execute = true,\n  }: {\n    event: Event;\n    execute?: boolean;\n  }) => {\n    const { type, channel } = event;\n\n    if (type.startsWith('reaction')) {\n      return await this.handleReactionEvent({ event, execute });\n    }\n\n    if (type === 'message.new') {\n      return await this.handleNewMessage({ event, execute });\n    }\n\n    if (type === 'message.deleted') {\n      return await this.handleDeleteMessage({ event, execute });\n    }\n\n    if (type === 'message.updated' || type === 'message.undeleted') {\n      return this.handleMessageUpdatedEvent({ event, execute });\n    }\n\n    if (type === 'message.read' || type === 'notification.mark_read') {\n      return this.handleRead({ event, unreadMessages: 0, execute });\n    }\n\n    if (type === 'notification.mark_unread') {\n      return this.handleRead({ event, execute });\n    }\n\n    if (type.startsWith('member.')) {\n      return await this.handleMemberEvent({ event, execute });\n    }\n\n    if (type === 'channel.hidden' || type === 'channel.visible') {\n      return await this.handleChannelVisibilityEvent({ event, execute });\n    }\n\n    if (type === 'draft.updated' || type === 'draft.deleted') {\n      return await this.handleDraftEvent({ event, execute });\n    }\n\n    // Note: It is a bit counter-intuitive that we do not touch the messages in the\n    //       offline DB when receiving notification.message_new, however we do this\n    //       because we anyway cannot get the messages for a channel until we run\n    //       either channel.watch() or channel.query(...) to get them. So, when\n    //       receiving the event we only upsert the channel data and we leave the\n    //       rest of the entities to be updated whenever we actually start watching\n    //       or we at least query.\n    if (\n      (type === 'channel.updated' ||\n        type === 'notification.message_new' ||\n        type === 'notification.added_to_channel') &&\n      channel\n    ) {\n      return await this.upsertChannelData({ channel, execute });\n    }\n\n    if (\n      (type === 'channel.deleted' ||\n        type === 'notification.channel_deleted' ||\n        type === 'notification.removed_from_channel') &&\n      channel\n    ) {\n      return await this.deleteChannel({ cid: channel.cid, execute });\n    }\n\n    if (type === 'channel.truncated') {\n      return await this.handleChannelTruncatedEvent({ event, execute });\n    }\n\n    return [];\n  };\n\n  /**\n   * A method used to enqueue a pending task if the execution of it fails.\n   * It will try to do the following:\n   *\n   * 1. Execute the task immediately\n   * 2. If this fails, checks if the failure was due to something valid for a pending task\n   * 3. If it is, it will insert the task in the pending tasks table\n   *\n   * It will return the response from the execution if it succeeded.\n   * @param task - the pending task we want to execute\n   */\n  public queueTask = async <T>({ task }: { task: PendingTask }): Promise<T> => {\n    const attemptTaskExecution = async () => {\n      if (!this.client.wsConnection?.isHealthy) {\n        throw new OfflineError(\n          'Cannot execute task because the connection has been lost.',\n          { type: 'connection:lost' },\n        );\n      }\n      return (await this.executeTask({ task })) as T;\n    };\n    try {\n      return await attemptTaskExecution();\n    } catch (e) {\n      if (!this.shouldSkipQueueingTask(e as AxiosError<APIErrorResponse>)) {\n        await this.addPendingTask(task);\n      }\n      throw e;\n    }\n  };\n\n  /**\n   * A utility method that determines if a failed task should be added to the\n   * queue based on its error.\n   * Error code 4 - bad request data\n   * Error code 17 - missing own_capabilities to execute the task\n   * @param error\n   */\n  private shouldSkipQueueingTask = (error: AxiosError<APIErrorResponse>) =>\n    error?.response?.data?.code === 4 || error?.response?.data?.code === 17;\n\n  /**\n   * Executes a task from the list of supported pending tasks. Currently supported pending tasks\n   * are:\n   * - Deleting a message\n   * - Sending a reaction\n   * - Removing a reaction\n   * - Sending a message\n   * It will throw if we try to execute a pending task that is not supported.\n   * @param task - The task we want to execute\n   * @param isPendingTask - a control value telling us if it's an actual pending task being executed\n   * or delayed execution\n   */\n  private executeTask = async (\n    { task }: { task: PendingTask },\n    isPendingTask = false,\n  ) => {\n    if (task.type === 'delete-message') {\n      return await this.client._deleteMessage(...task.payload);\n    }\n\n    const { channelType, channelId } = task;\n\n    if (channelType && channelId) {\n      const channel = this.client.channel(channelType, channelId);\n\n      if (task.type === 'send-reaction') {\n        return await channel._sendReaction(...task.payload);\n      }\n\n      if (task.type === 'delete-reaction') {\n        return await channel._deleteReaction(...task.payload);\n      }\n\n      if (task.type === 'create-draft') {\n        return await channel._createDraft(...task.payload);\n      }\n\n      if (task.type === 'delete-draft') {\n        return await channel._deleteDraft(...task.payload);\n      }\n\n      if (task.type === 'send-message') {\n        const newMessageResponse = await channel._sendMessage(...task.payload);\n        const newMessage = newMessageResponse?.message;\n        if (isPendingTask && newMessage) {\n          if (newMessage?.parent_id) {\n            this.client.threads.threadsById[newMessage.parent_id]?.upsertReplyLocally({\n              message: newMessage,\n              timestampChanged: true,\n            });\n          }\n          channel.state.addMessageSorted(newMessage, true);\n        }\n        return newMessageResponse;\n      }\n    }\n\n    throw new Error(\n      `Tried to execute invalid pending task type (${task.type}) while synchronizing the database.`,\n    );\n  };\n\n  /**\n   * A utility method used to execute all pending tasks. As each task succeeds execution,\n   * it is going to be removed from the DB. If the execution failed due to a valid reason\n   * it is going to remove the pending task from the DB even if execution fails, otherwise\n   * it will keep it for the next time we try to execute all pending taks.\n   */\n  public executePendingTasks = async () => {\n    const queue = await this.getPendingTasks();\n    for (const task of queue) {\n      if (!task.id) {\n        continue;\n      }\n\n      try {\n        await this.executeTask(\n          {\n            task,\n          },\n          true,\n        );\n      } catch (e) {\n        const error = e as AxiosError<APIErrorResponse>;\n        if (!this.shouldSkipQueueingTask(error)) {\n          // executing the pending task has failed, so keep it in the queue\n          continue;\n        }\n      }\n\n      await this.deletePendingTask({\n        id: task.id,\n      });\n    }\n  };\n}\n","type Dispose<K, T> = (key: K, value: T) => void;\n/**\n * A cache that stores a fixed number of values in a queue.\n * The most recently added or retrieved value is kept at the front of the queue.\n * @template K - The type of the keys.\n * @template T - The type of the values.\n */\nexport class FixedSizeQueueCache<K, T> {\n  private keys: Array<K>;\n  private size: number;\n  private map: Map<K, T>;\n  private dispose: Dispose<K, T> | null;\n\n  constructor(size: number, options?: { dispose: (key: K, value: T) => void }) {\n    if (!size) throw new Error('Size must be greater than 0');\n    this.keys = [];\n    this.size = size;\n    this.map = new Map();\n    this.dispose = options?.dispose ?? null;\n  }\n\n  /**\n   * Adds a new or moves the existing reference to the front of the queue\n   * @param key\n   * @param value\n   */\n  add(key: K, value: T) {\n    const index = this.keys.indexOf(key);\n\n    if (index > -1) {\n      this.keys.splice(this.keys.indexOf(key), 1);\n    } else if (this.keys.length >= this.size) {\n      const itemKey = this.keys.shift();\n\n      if (itemKey) {\n        const item = this.peek(itemKey);\n\n        if (item) {\n          this.dispose?.(itemKey, item);\n        }\n\n        this.map.delete(itemKey);\n      }\n    }\n\n    this.keys.push(key);\n    this.map.set(key, value);\n  }\n\n  /**\n   * Retrieves the value by key.\n   * @param key\n   */\n  peek(key: K) {\n    const value = this.map.get(key);\n\n    return value;\n  }\n\n  /**\n   * Retrieves the value and moves it to the front of the queue.\n   * @param key\n   */\n  get(key: K) {\n    const foundItem = this.peek(key);\n\n    if (foundItem && this.keys.indexOf(key) !== this.size - 1) {\n      this.keys.splice(this.keys.indexOf(key), 1);\n      this.keys.push(key);\n    }\n\n    return foundItem;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,iBAAA,GAAAC,UAAA;EAAA,iCAAAC,CAAAC,OAAA;IAAA;;IAEAA,OAAA,CAAQC,UAAA,GAAaA,UAAA;IACrBD,OAAA,CAAQE,WAAA,GAAcA,WAAA;IACtBF,OAAA,CAAQG,aAAA,GAAgBC,cAAA;IAExB,IAAIC,MAAA,GAAS,EAAC;IACd,IAAIC,SAAA,GAAY,EAAC;IACjB,IAAIC,GAAA,GAAM,OAAOC,UAAA,KAAe,cAAcA,UAAA,GAAaC,KAAA;IAE3D,IAAIC,IAAA,GAAO;IACX,KAASC,CAAA,GAAI,GAAGC,GAAA,GAAMF,IAAA,CAAKG,MAAA,EAAQF,CAAA,GAAIC,GAAA,EAAK,EAAED,CAAA,EAAG;MAC/CN,MAAA,CAAOM,CAAC,IAAID,IAAA,CAAKC,CAAC;MAClBL,SAAA,CAAUI,IAAA,CAAKI,UAAA,CAAWH,CAAC,CAAC,IAAIA,CAAA;IAClC;IAHS,IAAAA,CAAA;IAAO,IAAAC,GAAA;IAOhBN,SAAA,CAAU,IAAIQ,UAAA,CAAW,CAAC,CAAC,IAAI;IAC/BR,SAAA,CAAU,IAAIQ,UAAA,CAAW,CAAC,CAAC,IAAI;IAE/B,SAASC,QAASC,GAAA,EAAK;MACrB,IAAIC,IAAA,GAAMD,GAAA,CAAIH,MAAA;MAEd,IAAII,IAAA,GAAM,IAAI,GAAG;QACf,MAAM,IAAIC,KAAA,CAAM,gDAAgD;MAClE;MAIA,IAAIC,QAAA,GAAWH,GAAA,CAAII,OAAA,CAAQ,GAAG;MAC9B,IAAID,QAAA,KAAa,IAAIA,QAAA,GAAWF,IAAA;MAEhC,IAAII,eAAA,GAAkBF,QAAA,KAAaF,IAAA,GAC/B,IACA,IAAKE,QAAA,GAAW;MAEpB,OAAO,CAACA,QAAA,EAAUE,eAAe;IACnC;IAGA,SAASpB,WAAYe,GAAA,EAAK;MACxB,IAAIM,IAAA,GAAOP,OAAA,CAAQC,GAAG;MACtB,IAAIG,QAAA,GAAWG,IAAA,CAAK,CAAC;MACrB,IAAID,eAAA,GAAkBC,IAAA,CAAK,CAAC;MAC5B,QAASH,QAAA,GAAWE,eAAA,IAAmB,IAAI,IAAKA,eAAA;IAClD;IAEA,SAASE,YAAaP,GAAA,EAAKG,QAAA,EAAUE,eAAA,EAAiB;MACpD,QAASF,QAAA,GAAWE,eAAA,IAAmB,IAAI,IAAKA,eAAA;IAClD;IAEA,SAASnB,YAAac,GAAA,EAAK;MACzB,IAAIQ,GAAA;MACJ,IAAIF,IAAA,GAAOP,OAAA,CAAQC,GAAG;MACtB,IAAIG,QAAA,GAAWG,IAAA,CAAK,CAAC;MACrB,IAAID,eAAA,GAAkBC,IAAA,CAAK,CAAC;MAE5B,IAAIG,GAAA,GAAM,IAAIlB,GAAA,CAAIgB,WAAA,CAAYP,GAAA,EAAKG,QAAA,EAAUE,eAAe,CAAC;MAE7D,IAAIK,OAAA,GAAU;MAGd,IAAIT,IAAA,GAAMI,eAAA,GAAkB,IACxBF,QAAA,GAAW,IACXA,QAAA;MAEJ,IAAIQ,EAAA;MACJ,KAAKA,EAAA,GAAI,GAAGA,EAAA,GAAIV,IAAA,EAAKU,EAAA,IAAK,GAAG;QAC3BH,GAAA,GACGlB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAC,CAAC,KAAK,KAChCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC,KAAK,KACpCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC,KAAK,IACrCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC;QACjCF,GAAA,CAAIC,OAAA,EAAS,IAAKF,GAAA,IAAO,KAAM;QAC/BC,GAAA,CAAIC,OAAA,EAAS,IAAKF,GAAA,IAAO,IAAK;QAC9BC,GAAA,CAAIC,OAAA,EAAS,IAAIF,GAAA,GAAM;MACzB;MAEA,IAAIH,eAAA,KAAoB,GAAG;QACzBG,GAAA,GACGlB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAC,CAAC,KAAK,IAChCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC,KAAK;QACvCF,GAAA,CAAIC,OAAA,EAAS,IAAIF,GAAA,GAAM;MACzB;MAEA,IAAIH,eAAA,KAAoB,GAAG;QACzBG,GAAA,GACGlB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAC,CAAC,KAAK,KAChCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC,KAAK,IACpCrB,SAAA,CAAUU,GAAA,CAAIF,UAAA,CAAWa,EAAA,GAAI,CAAC,CAAC,KAAK;QACvCF,GAAA,CAAIC,OAAA,EAAS,IAAKF,GAAA,IAAO,IAAK;QAC9BC,GAAA,CAAIC,OAAA,EAAS,IAAIF,GAAA,GAAM;MACzB;MAEA,OAAOC,GAAA;IACT;IAEA,SAASG,gBAAiBC,GAAA,EAAK;MAC7B,OAAOxB,MAAA,CAAOwB,GAAA,IAAO,KAAK,EAAI,IAC5BxB,MAAA,CAAOwB,GAAA,IAAO,KAAK,EAAI,IACvBxB,MAAA,CAAOwB,GAAA,IAAO,IAAI,EAAI,IACtBxB,MAAA,CAAOwB,GAAA,GAAM,EAAI;IACrB;IAEA,SAASC,YAAaC,KAAA,EAAOC,KAAA,EAAOC,GAAA,EAAK;MACvC,IAAIT,GAAA;MACJ,IAAIU,MAAA,GAAS,EAAC;MACd,SAASP,EAAA,GAAIK,KAAA,EAAOL,EAAA,GAAIM,GAAA,EAAKN,EAAA,IAAK,GAAG;QACnCH,GAAA,IACIO,KAAA,CAAMJ,EAAC,KAAK,KAAM,aAClBI,KAAA,CAAMJ,EAAA,GAAI,CAAC,KAAK,IAAK,UACtBI,KAAA,CAAMJ,EAAA,GAAI,CAAC,IAAI;QAClBO,MAAA,CAAOC,IAAA,CAAKP,eAAA,CAAgBJ,GAAG,CAAC;MAClC;MACA,OAAOU,MAAA,CAAOE,IAAA,CAAK,EAAE;IACvB;IAEA,SAAShC,eAAe2B,KAAA,EAAO;MAC7B,IAAIP,GAAA;MACJ,IAAIP,IAAA,GAAMc,KAAA,CAAMlB,MAAA;MAChB,IAAIwB,UAAA,GAAapB,IAAA,GAAM;MACvB,IAAIqB,KAAA,GAAQ,EAAC;MACb,IAAIC,cAAA,GAAiB;MAGrB,SAASZ,EAAA,GAAI,GAAGa,KAAA,GAAOvB,IAAA,GAAMoB,UAAA,EAAYV,EAAA,GAAIa,KAAA,EAAMb,EAAA,IAAKY,cAAA,EAAgB;QACtED,KAAA,CAAMH,IAAA,CAAKL,WAAA,CAAYC,KAAA,EAAOJ,EAAA,EAAIA,EAAA,GAAIY,cAAA,GAAkBC,KAAA,GAAOA,KAAA,GAAQb,EAAA,GAAIY,cAAe,CAAC;MAC7F;MAGA,IAAIF,UAAA,KAAe,GAAG;QACpBb,GAAA,GAAMO,KAAA,CAAMd,IAAA,GAAM,CAAC;QACnBqB,KAAA,CAAMH,IAAA,CACJ9B,MAAA,CAAOmB,GAAA,IAAO,CAAC,IACfnB,MAAA,CAAQmB,GAAA,IAAO,IAAK,EAAI,IACxB,IACF;MACF,WAAWa,UAAA,KAAe,GAAG;QAC3Bb,GAAA,IAAOO,KAAA,CAAMd,IAAA,GAAM,CAAC,KAAK,KAAKc,KAAA,CAAMd,IAAA,GAAM,CAAC;QAC3CqB,KAAA,CAAMH,IAAA,CACJ9B,MAAA,CAAOmB,GAAA,IAAO,EAAE,IAChBnB,MAAA,CAAQmB,GAAA,IAAO,IAAK,EAAI,IACxBnB,MAAA,CAAQmB,GAAA,IAAO,IAAK,EAAI,IACxB,GACF;MACF;MAEA,OAAOc,KAAA,CAAMF,IAAA,CAAK,EAAE;IACtB;EAAA;AAAA;;;;;;;;ACrJA,IAAAK,eAAA,GAAA3C,UAAA;EAAA,uCAAA4C,CAAA1C,OAAA,EAAA2C,MAAA;IACAA,MAAA,CAAO3C,OAAA,GAAU,OAAO4C,IAAA,IAAQ,WAAWA,IAAA,CAAKC,QAAA,GAAWC,MAAA,CAAOD,QAAA;EAAA;AAAA;;;;;;;;;;;;;ACDlE,IAAAE,gBAAA,GAA8BC,OAAA,CAAAnD,iBAAA;AAE9B,SAASoD,SAAYC,aAAA,EAAsD;EACzE,OAAO,OAAQA,aAAA,KAA6B;AAC9C;AAKA,SAASC,oBACPD,aAAA,EACAE,QAAA,EACkC;EAClC,OAAO,CAAC,CAACA,QAAA,IAAYH,QAAA,CAASC,aAAa;AAC7C;AAKA,SAASG,IACPH,aAAA,EACAE,QAAA,EACK;EACL,MAAME,GAAA,GAAM,EAAC;EAEb,IAAIL,QAAA,CAASC,aAAa,KAAKC,mBAAA,CAAoBD,aAAA,EAAeE,QAAQ,GAAG;IAC3E,SAASG,CAAA,GAAI,GAAG3C,GAAA,GAAMsC,aAAA,CAAcrC,MAAA,EAAQ0C,CAAA,GAAI3C,GAAA,EAAK2C,CAAA,IAAK;MACxD,IAAIL,aAAA,CAAcM,MAAA,CAAOD,CAAC,GAAG;QAC3B,MAAME,MAAA,GAASP,aAAA,CAAcM,MAAA,CAAOD,CAAC;QACrC,MAAMG,WAAA,GAAcN,QAAA,CAASK,MAAA,EAAQF,CAAA,EAAGL,aAAa;QACrDI,GAAA,CAAIC,CAAC,IAAIG,WAAA;MACX;IACF;EACF,WAAW,CAACT,QAAA,CAASC,aAAa,KAAK,CAACC,mBAAA,CAAoBD,aAAA,EAAeE,QAAQ,GAAG;IACpF,SAASG,CAAA,GAAI,GAAG3C,GAAA,GAAMsC,aAAA,CAAcrC,MAAA,EAAQ0C,CAAA,GAAI3C,GAAA,EAAK2C,CAAA,IAAK;MACxD,IAAIA,CAAA,IAAKL,aAAA,EAAe;QACtB,MAAMO,MAAA,GAASP,aAAA,CAAcK,CAAC;QAC9B,MAAMG,WAAA,GAAcN,QAAA,CAASK,MAAA,EAAQF,CAAA,EAAGL,aAAa;QACrDI,GAAA,CAAIC,CAAC,IAAIG,WAAA;MACX;IACF;EACF;EAEA,OAAOJ,GAAA;AACT;AAEO,IAAMK,YAAA,GAAgBC,IAAA,QAC3Bb,gBAAA,CAAA5C,aAAA,EAAc,IAAIK,UAAA,CAAW6C,GAAA,CAAIO,IAAA,EAAOC,IAAA,IAASA,IAAA,CAAK/C,UAAA,CAAW,CAAC,CAAC,CAAC,CAAC;AAKhE,IAAMgD,YAAA,GAAgBC,CAAA,IAAsB;EACjD,MAAMC,CAAA,GAAI,CAAC;IACTC,CAAA,GAAIC,MAAA,CAAOC,YAAA;IACXC,CAAA,GAAIL,CAAA,CAAElD,MAAA;EACR,IAAIF,CAAA;IACF0D,CAAA,GAAI;IACJC,CAAA;IACAC,CAAA;IACAC,CAAA,GAAI;IACJC,CAAA;IACAC,CAAA,GAAI;EACN,MAAMC,CAAA,GAAI;EACV,KAAKhE,CAAA,GAAI,GAAGA,CAAA,GAAI,IAAIA,CAAA,IAAK;IACvBqD,CAAA,CAAEW,CAAA,CAAEnB,MAAA,CAAO7C,CAAC,CAAC,IAAIA,CAAA;EACnB;EACA,KAAK4D,CAAA,GAAI,GAAGA,CAAA,GAAIH,CAAA,EAAGG,CAAA,IAAK;IACtBD,CAAA,GAAIN,CAAA,CAAED,CAAA,CAAEP,MAAA,CAAOe,CAAC,CAAC;IACjBF,CAAA,IAAKA,CAAA,IAAK,KAAKC,CAAA;IACfE,CAAA,IAAK;IACL,OAAOA,CAAA,IAAK,GAAG;MAEb,EAAEC,CAAA,GAAKJ,CAAA,MAAOG,CAAA,IAAK,KAAM,QAASD,CAAA,GAAIH,CAAA,GAAI,OAAOM,CAAA,IAAKT,CAAA,CAAEQ,CAAC;IAC3D;EACF;EACA,OAAOC,CAAA;AACT;;;AC1EO,IAAME,QAAA,GAAN,MAAe;EAKpBC,YAAYC,MAAA,EAAoBC,EAAA,EAAmBnB,IAAA,EAAqB;IACtE,KAAKkB,MAAA,GAASA,MAAA;IACd,KAAKC,EAAA,GAAKA,EAAA;IACV,KAAKnB,IAAA,GAAOA,IAAA;EACd;EAEA,MAAMoB,OAAA,EAAS;IACb,MAAMC,IAAA,GAAO;MACXF,EAAA,EAAI,KAAKA,EAAA;MACTG,gBAAA,EAAkB,KAAKtB,IAAA,EAAMsB,gBAAA;MAC7BC,WAAA,EAAa,KAAKvB,IAAA,EAAMuB,WAAA;MACxBC,SAAA,EAAW,KAAKxB,IAAA,EAAMwB,SAAA;MACtBC,WAAA,EAAa,KAAKzB,IAAA,EAAMyB,WAAA;MACxBC,gBAAA,EAAkB,KAAK1B,IAAA,EAAM0B,gBAAA;MAC7BC,eAAA,EAAiB,KAAK3B,IAAA,EAAM2B,eAAA;MAC5BC,aAAA,EAAe,KAAK5B,IAAA,EAAM4B,aAAA;MAC1BC,WAAA,EAAa,KAAK7B,IAAA,EAAM6B,WAAA;MACxBC,IAAA,EAAM,KAAK9B,IAAA,EAAM8B,IAAA;MACjBC,SAAA,EAAW,KAAK/B,IAAA,EAAM+B,SAAA;MACtBC,YAAA,EAAc,KAAKhC,IAAA,EAAMgC,YAAA;MACzBC,QAAA,EAAU,KAAKjC,IAAA,EAAMiC;IACvB;IAEA,MAAMC,MAAA,GAAS,MAAM,KAAKhB,MAAA,CAAOiB,cAAA,CAAed,IAAI;IAEpD,KAAKF,EAAA,GAAKe,MAAA,CAAOE,QAAA,CAASjB,EAAA;IAC1B,KAAKnB,IAAA,GAAOkC,MAAA,CAAOE,QAAA;IACnB,OAAOF,MAAA;EACT;EAEAG,iBAAA,EAAmB;IACjB,IAAI,CAAC,KAAKlB,EAAA,EAAI;MACZ,MAAM,IAAI7D,KAAA,CACR,sJACF;IACF;EACF;EAEA,MAAMc,MAAMkE,OAAA,EAAsD;IAChE,KAAKD,gBAAA,CAAiB;IAEtB,OAAO,MAAM,KAAKnB,MAAA,CAAOqB,aAAA,CAAc,KAAKpB,EAAA,EAAcmB,OAAO;EACnE;EAEAE,OAAOxC,IAAA,EAA6B;IAClC,KAAKqC,gBAAA,CAAiB;IAEtB,OAAO,KAAKnB,MAAA,CAAOuB,cAAA,CAAe,KAAKtB,EAAA,EAAcnB,IAAI;EAC3D;EAEA,MAAM0C,OAAA,EAAS;IACb,KAAKL,gBAAA,CAAiB;IAEtB,OAAO,MAAM,KAAKnB,MAAA,CAAOyB,cAAA,CAAe,KAAKxB,EAAY;EAC3D;EAEAyB,KAAA,EAAO;IACL,KAAKP,gBAAA,CAAiB;IAEtB,OAAO,KAAKnB,MAAA,CAAO2B,YAAA,CAAa,KAAK1B,EAAY;EACnD;EAEA2B,IAAIR,OAAA,EAA8B;IAChC,KAAKD,gBAAA,CAAiB;IAEtB,OAAO,KAAKnB,MAAA,CAAO6B,WAAA,CAAY,KAAK5B,EAAA,EAAcmB,OAAO;EAC3D;AACF;;;ACzEe,SAARU,KAAsBC,EAAA,EAAIC,OAAA,EAAS;EACxC,OAAO,SAASC,KAAA,EAAO;IACrB,OAAOF,EAAA,CAAGG,KAAA,CAAMF,OAAA,EAASG,SAAS;EACpC;AACF;;;ACAA,IAAM;EAACC;AAAQ,IAAIC,MAAA,CAAOC,SAAA;AAC1B,IAAM;EAACC;AAAc,IAAIF,MAAA;AAEzB,IAAMG,MAAA,GAAU,gBAAAC,KAAA,IAASC,KAAA,IAAS;EAC9B,MAAMC,GAAA,GAAMP,QAAA,CAASQ,IAAA,CAAKF,KAAK;EAC/B,OAAOD,KAAA,CAAME,GAAG,MAAMF,KAAA,CAAME,GAAG,IAAIA,GAAA,CAAIE,KAAA,CAAM,GAAG,EAAE,EAAEC,WAAA,CAAY;AACpE,GAAG,eAAAT,MAAA,CAAOnC,MAAA,CAAO,IAAI,CAAC;AAEtB,IAAM6C,UAAA,GAAcC,IAAA,IAAS;EAC3BA,IAAA,GAAOA,IAAA,CAAKF,WAAA,CAAY;EACxB,OAAQJ,KAAA,IAAUF,MAAA,CAAOE,KAAK,MAAMM,IAAA;AACtC;AAEA,IAAMC,UAAA,GAAaD,IAAA,IAAQN,KAAA,IAAS,OAAOA,KAAA,KAAUM,IAAA;AASrD,IAAM;EAACE;AAAO,IAAIvH,KAAA;AASlB,IAAMwH,WAAA,GAAcF,UAAA,CAAW,WAAW;AAS1C,SAASG,SAASC,GAAA,EAAK;EACrB,OAAOA,GAAA,KAAQ,QAAQ,CAACF,WAAA,CAAYE,GAAG,KAAKA,GAAA,CAAItD,WAAA,KAAgB,QAAQ,CAACoD,WAAA,CAAYE,GAAA,CAAItD,WAAW,KAC/FuD,UAAA,CAAWD,GAAA,CAAItD,WAAA,CAAYqD,QAAQ,KAAKC,GAAA,CAAItD,WAAA,CAAYqD,QAAA,CAASC,GAAG;AAC3E;AASA,IAAME,aAAA,GAAgBR,UAAA,CAAW,aAAa;AAU9C,SAASS,kBAAkBH,GAAA,EAAK;EAC9B,IAAIrC,MAAA;EACJ,IAAK,OAAOyC,WAAA,KAAgB,eAAiBA,WAAA,CAAYC,MAAA,EAAS;IAChE1C,MAAA,GAASyC,WAAA,CAAYC,MAAA,CAAOL,GAAG;EACjC,OAAO;IACLrC,MAAA,GAAUqC,GAAA,IAASA,GAAA,CAAIM,MAAA,IAAYJ,aAAA,CAAcF,GAAA,CAAIM,MAAM;EAC7D;EACA,OAAO3C,MAAA;AACT;AASA,IAAM4C,SAAA,GAAWX,UAAA,CAAW,QAAQ;AAQpC,IAAMK,UAAA,GAAaL,UAAA,CAAW,UAAU;AASxC,IAAMY,QAAA,GAAWZ,UAAA,CAAW,QAAQ;AASpC,IAAMa,QAAA,GAAYpB,KAAA,IAAUA,KAAA,KAAU,QAAQ,OAAOA,KAAA,KAAU;AAQ/D,IAAMqB,SAAA,GAAYrB,KAAA,IAASA,KAAA,KAAU,QAAQA,KAAA,KAAU;AASvD,IAAMsB,aAAA,GAAiBX,GAAA,IAAQ;EAC7B,IAAIb,MAAA,CAAOa,GAAG,MAAM,UAAU;IAC5B,OAAO;EACT;EAEA,MAAMY,UAAA,GAAY1B,cAAA,CAAec,GAAG;EACpC,QAAQY,UAAA,KAAc,QAAQA,UAAA,KAAc5B,MAAA,CAAOC,SAAA,IAAaD,MAAA,CAAOE,cAAA,CAAe0B,UAAS,MAAM,SAAS,EAAEC,MAAA,CAAOC,WAAA,IAAed,GAAA,KAAQ,EAAEa,MAAA,CAAOE,QAAA,IAAYf,GAAA;AACrK;AASA,IAAMgB,MAAA,GAAStB,UAAA,CAAW,MAAM;AAShC,IAAMuB,MAAA,GAASvB,UAAA,CAAW,MAAM;AAShC,IAAMwB,MAAA,GAASxB,UAAA,CAAW,MAAM;AAShC,IAAMyB,UAAA,GAAazB,UAAA,CAAW,UAAU;AASxC,IAAM0B,QAAA,GAAYpB,GAAA,IAAQS,QAAA,CAAST,GAAG,KAAKC,UAAA,CAAWD,GAAA,CAAIqB,IAAI;AAS9D,IAAMC,UAAA,GAAcjC,KAAA,IAAU;EAC5B,IAAIkC,IAAA;EACJ,OAAOlC,KAAA,KACJ,OAAO3E,QAAA,KAAa,cAAc2E,KAAA,YAAiB3E,QAAA,IAClDuF,UAAA,CAAWZ,KAAA,CAAMmC,MAAM,OACpBD,IAAA,GAAOpC,MAAA,CAAOE,KAAK,OAAO;EAAA;EAE1BkC,IAAA,KAAS,YAAYtB,UAAA,CAAWZ,KAAA,CAAMN,QAAQ,KAAKM,KAAA,CAAMN,QAAA,CAAS,MAAM;AAIjF;AASA,IAAM0C,iBAAA,GAAoB/B,UAAA,CAAW,iBAAiB;AAStD,IAAMgC,IAAA,GAAQpC,GAAA,IAAQA,GAAA,CAAIoC,IAAA,GACxBpC,GAAA,CAAIoC,IAAA,CAAK,IAAIpC,GAAA,CAAIqC,OAAA,CAAQ,sCAAsC,EAAE;AAiBnE,SAASC,QAAQC,GAAA,EAAKnD,EAAA,EAAI;EAACoD,UAAA,GAAa;AAAK,IAAI,CAAC,GAAG;EAEnD,IAAID,GAAA,KAAQ,QAAQ,OAAOA,GAAA,KAAQ,aAAa;IAC9C;EACF;EAEA,IAAIrJ,CAAA;EACJ,IAAI6D,CAAA;EAGJ,IAAI,OAAOwF,GAAA,KAAQ,UAAU;IAE3BA,GAAA,GAAM,CAACA,GAAG;EACZ;EAEA,IAAIhC,OAAA,CAAQgC,GAAG,GAAG;IAEhB,KAAKrJ,CAAA,GAAI,GAAG6D,CAAA,GAAIwF,GAAA,CAAInJ,MAAA,EAAQF,CAAA,GAAI6D,CAAA,EAAG7D,CAAA,IAAK;MACtCkG,EAAA,CAAGa,IAAA,CAAK,MAAMsC,GAAA,CAAIrJ,CAAC,GAAGA,CAAA,EAAGqJ,GAAG;IAC9B;EACF,OAAO;IAEL,MAAME,IAAA,GAAOD,UAAA,GAAa9C,MAAA,CAAOgD,mBAAA,CAAoBH,GAAG,IAAI7C,MAAA,CAAO+C,IAAA,CAAKF,GAAG;IAC3E,MAAMpJ,GAAA,GAAMsJ,IAAA,CAAKrJ,MAAA;IACjB,IAAIuJ,GAAA;IAEJ,KAAKzJ,CAAA,GAAI,GAAGA,CAAA,GAAIC,GAAA,EAAKD,CAAA,IAAK;MACxByJ,GAAA,GAAMF,IAAA,CAAKvJ,CAAC;MACZkG,EAAA,CAAGa,IAAA,CAAK,MAAMsC,GAAA,CAAII,GAAG,GAAGA,GAAA,EAAKJ,GAAG;IAClC;EACF;AACF;AAEA,SAASK,QAAQL,GAAA,EAAKI,GAAA,EAAK;EACzBA,GAAA,GAAMA,GAAA,CAAIxC,WAAA,CAAY;EACtB,MAAMsC,IAAA,GAAO/C,MAAA,CAAO+C,IAAA,CAAKF,GAAG;EAC5B,IAAIrJ,CAAA,GAAIuJ,IAAA,CAAKrJ,MAAA;EACb,IAAIyJ,IAAA;EACJ,OAAO3J,CAAA,KAAM,GAAG;IACd2J,IAAA,GAAOJ,IAAA,CAAKvJ,CAAC;IACb,IAAIyJ,GAAA,KAAQE,IAAA,CAAK1C,WAAA,CAAY,GAAG;MAC9B,OAAO0C,IAAA;IACT;EACF;EACA,OAAO;AACT;AAEA,IAAMC,OAAA,IAAW,MAAM;EAErB,IAAI,OAAOC,UAAA,KAAe,aAAa,OAAOA,UAAA;EAC9C,OAAO,OAAO5H,IAAA,KAAS,cAAcA,IAAA,GAAQ,OAAOE,MAAA,KAAW,cAAcA,MAAA,GAAS2H,MAAA;AACxF,GAAG;AAEH,IAAMC,gBAAA,GAAoBC,OAAA,IAAY,CAAC1C,WAAA,CAAY0C,OAAO,KAAKA,OAAA,KAAYJ,OAAA;AAoB3E,SAASK,MAAA,EAAmC;EAC1C,MAAM;IAACC;EAAQ,IAAIH,gBAAA,CAAiB,IAAI,KAAK,QAAQ,CAAC;EACtD,MAAM5E,MAAA,GAAS,CAAC;EAChB,MAAMgF,WAAA,GAAcA,CAAC3C,GAAA,EAAKiC,GAAA,KAAQ;IAChC,MAAMW,SAAA,GAAYF,QAAA,IAAYR,OAAA,CAAQvE,MAAA,EAAQsE,GAAG,KAAKA,GAAA;IACtD,IAAItB,aAAA,CAAchD,MAAA,CAAOiF,SAAS,CAAC,KAAKjC,aAAA,CAAcX,GAAG,GAAG;MAC1DrC,MAAA,CAAOiF,SAAS,IAAIH,KAAA,CAAM9E,MAAA,CAAOiF,SAAS,GAAG5C,GAAG;IAClD,WAAWW,aAAA,CAAcX,GAAG,GAAG;MAC7BrC,MAAA,CAAOiF,SAAS,IAAIH,KAAA,CAAM,CAAC,GAAGzC,GAAG;IACnC,WAAWH,OAAA,CAAQG,GAAG,GAAG;MACvBrC,MAAA,CAAOiF,SAAS,IAAI5C,GAAA,CAAIR,KAAA,CAAM;IAChC,OAAO;MACL7B,MAAA,CAAOiF,SAAS,IAAI5C,GAAA;IACtB;EACF;EAEA,SAASxH,CAAA,GAAI,GAAG6D,CAAA,GAAIyC,SAAA,CAAUpG,MAAA,EAAQF,CAAA,GAAI6D,CAAA,EAAG7D,CAAA,IAAK;IAChDsG,SAAA,CAAUtG,CAAC,KAAKoJ,OAAA,CAAQ9C,SAAA,CAAUtG,CAAC,GAAGmK,WAAW;EACnD;EACA,OAAOhF,MAAA;AACT;AAYA,IAAMkF,MAAA,GAASA,CAACvG,CAAA,EAAGJ,CAAA,EAAGyC,OAAA,EAAS;EAACmD;AAAU,IAAG,CAAC,MAAM;EAClDF,OAAA,CAAQ1F,CAAA,EAAG,CAAC8D,GAAA,EAAKiC,GAAA,KAAQ;IACvB,IAAItD,OAAA,IAAWsB,UAAA,CAAWD,GAAG,GAAG;MAC9B1D,CAAA,CAAE2F,GAAG,IAAIxD,IAAA,CAAKuB,GAAA,EAAKrB,OAAO;IAC5B,OAAO;MACLrC,CAAA,CAAE2F,GAAG,IAAIjC,GAAA;IACX;EACF,GAAG;IAAC8B;EAAU,CAAC;EACf,OAAOxF,CAAA;AACT;AASA,IAAMwG,QAAA,GAAYC,OAAA,IAAY;EAC5B,IAAIA,OAAA,CAAQpK,UAAA,CAAW,CAAC,MAAM,OAAQ;IACpCoK,OAAA,GAAUA,OAAA,CAAQvD,KAAA,CAAM,CAAC;EAC3B;EACA,OAAOuD,OAAA;AACT;AAWA,IAAMC,QAAA,GAAWA,CAACtG,WAAA,EAAauG,gBAAA,EAAkBC,KAAA,EAAOC,YAAA,KAAgB;EACtEzG,WAAA,CAAYuC,SAAA,GAAYD,MAAA,CAAOnC,MAAA,CAAOoG,gBAAA,CAAiBhE,SAAA,EAAWkE,YAAW;EAC7EzG,WAAA,CAAYuC,SAAA,CAAUvC,WAAA,GAAcA,WAAA;EACpCsC,MAAA,CAAOoE,cAAA,CAAe1G,WAAA,EAAa,SAAS;IAC1C2G,KAAA,EAAOJ,gBAAA,CAAiBhE;EAC1B,CAAC;EACDiE,KAAA,IAASlE,MAAA,CAAOsE,MAAA,CAAO5G,WAAA,CAAYuC,SAAA,EAAWiE,KAAK;AACrD;AAWA,IAAMK,YAAA,GAAeA,CAACC,SAAA,EAAWC,OAAA,EAASC,OAAA,EAAQC,UAAA,KAAe;EAC/D,IAAIT,KAAA;EACJ,IAAI1K,CAAA;EACJ,IAAIoL,IAAA;EACJ,MAAMC,MAAA,GAAS,CAAC;EAEhBJ,OAAA,GAAUA,OAAA,IAAW,CAAC;EAEtB,IAAID,SAAA,IAAa,MAAM,OAAOC,OAAA;EAE9B,GAAG;IACDP,KAAA,GAAQlE,MAAA,CAAOgD,mBAAA,CAAoBwB,SAAS;IAC5ChL,CAAA,GAAI0K,KAAA,CAAMxK,MAAA;IACV,OAAOF,CAAA,KAAM,GAAG;MACdoL,IAAA,GAAOV,KAAA,CAAM1K,CAAC;MACd,KAAK,CAACmL,UAAA,IAAcA,UAAA,CAAWC,IAAA,EAAMJ,SAAA,EAAWC,OAAO,MAAM,CAACI,MAAA,CAAOD,IAAI,GAAG;QAC1EH,OAAA,CAAQG,IAAI,IAAIJ,SAAA,CAAUI,IAAI;QAC9BC,MAAA,CAAOD,IAAI,IAAI;MACjB;IACF;IACAJ,SAAA,GAAYE,OAAA,KAAW,SAASxE,cAAA,CAAesE,SAAS;EAC1D,SAASA,SAAA,KAAc,CAACE,OAAA,IAAUA,OAAA,CAAOF,SAAA,EAAWC,OAAO,MAAMD,SAAA,KAAcxE,MAAA,CAAOC,SAAA;EAEtF,OAAOwE,OAAA;AACT;AAWA,IAAMK,QAAA,GAAWA,CAACxE,GAAA,EAAKyE,YAAA,EAAcC,QAAA,KAAa;EAChD1E,GAAA,GAAMvD,MAAA,CAAOuD,GAAG;EAChB,IAAI0E,QAAA,KAAa,UAAaA,QAAA,GAAW1E,GAAA,CAAI5G,MAAA,EAAQ;IACnDsL,QAAA,GAAW1E,GAAA,CAAI5G,MAAA;EACjB;EACAsL,QAAA,IAAYD,YAAA,CAAarL,MAAA;EACzB,MAAMuL,SAAA,GAAY3E,GAAA,CAAIrG,OAAA,CAAQ8K,YAAA,EAAcC,QAAQ;EACpD,OAAOC,SAAA,KAAc,MAAMA,SAAA,KAAcD,QAAA;AAC3C;AAUA,IAAME,OAAA,GAAW7E,KAAA,IAAU;EACzB,IAAI,CAACA,KAAA,EAAO,OAAO;EACnB,IAAIQ,OAAA,CAAQR,KAAK,GAAG,OAAOA,KAAA;EAC3B,IAAI7G,CAAA,GAAI6G,KAAA,CAAM3G,MAAA;EACd,IAAI,CAAC8H,QAAA,CAAShI,CAAC,GAAG,OAAO;EACzB,MAAMc,GAAA,GAAM,IAAIhB,KAAA,CAAME,CAAC;EACvB,OAAOA,CAAA,KAAM,GAAG;IACdc,GAAA,CAAId,CAAC,IAAI6G,KAAA,CAAM7G,CAAC;EAClB;EACA,OAAOc,GAAA;AACT;AAWA,IAAM6K,YAAA,GAAgB,gBAAAC,UAAA,IAAc;EAElC,OAAO/E,KAAA,IAAS;IACd,OAAO+E,UAAA,IAAc/E,KAAA,YAAiB+E,UAAA;EACxC;AACF,GAAG,OAAO/L,UAAA,KAAe,eAAe6G,cAAA,CAAe7G,UAAU,CAAC;AAUlE,IAAMgM,YAAA,GAAeA,CAACxC,GAAA,EAAKnD,EAAA,KAAO;EAChC,MAAM4F,SAAA,GAAYzC,GAAA,IAAOA,GAAA,CAAIhB,MAAA,CAAOE,QAAQ;EAE5C,MAAMA,QAAA,GAAWuD,SAAA,CAAU/E,IAAA,CAAKsC,GAAG;EAEnC,IAAIlE,MAAA;EAEJ,QAAQA,MAAA,GAASoD,QAAA,CAASwD,IAAA,CAAK,MAAM,CAAC5G,MAAA,CAAO6G,IAAA,EAAM;IACjD,MAAMC,IAAA,GAAO9G,MAAA,CAAO0F,KAAA;IACpB3E,EAAA,CAAGa,IAAA,CAAKsC,GAAA,EAAK4C,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,CAAC;EAC/B;AACF;AAUA,IAAMC,QAAA,GAAWA,CAACC,MAAA,EAAQrF,GAAA,KAAQ;EAChC,IAAIsF,OAAA;EACJ,MAAMtL,GAAA,GAAM,EAAC;EAEb,QAAQsL,OAAA,GAAUD,MAAA,CAAOE,IAAA,CAAKvF,GAAG,OAAO,MAAM;IAC5ChG,GAAA,CAAIU,IAAA,CAAK4K,OAAO;EAClB;EAEA,OAAOtL,GAAA;AACT;AAGA,IAAMwL,UAAA,GAAapF,UAAA,CAAW,iBAAiB;AAE/C,IAAMqF,WAAA,GAAczF,GAAA,IAAO;EACzB,OAAOA,GAAA,CAAIG,WAAA,CAAY,EAAEkC,OAAA,CAAQ,yBAC/B,SAASqD,SAASC,CAAA,EAAGC,EAAA,EAAIC,EAAA,EAAI;IAC3B,OAAOD,EAAA,CAAGE,WAAA,CAAY,IAAID,EAAA;EAC5B,CACF;AACF;AAGA,IAAME,cAAA,IAAkB,CAAC;EAACA,cAAA,EAAAC;AAAc,MAAM,CAACzD,GAAA,EAAK+B,IAAA,KAAS0B,eAAA,CAAe/F,IAAA,CAAKsC,GAAA,EAAK+B,IAAI,GAAG5E,MAAA,CAAOC,SAAS;AAS7G,IAAMsG,QAAA,GAAW7F,UAAA,CAAW,QAAQ;AAEpC,IAAM8F,iBAAA,GAAoBA,CAAC3D,GAAA,EAAK4D,OAAA,KAAY;EAC1C,MAAMtC,YAAA,GAAcnE,MAAA,CAAO0G,yBAAA,CAA0B7D,GAAG;EACxD,MAAM8D,kBAAA,GAAqB,CAAC;EAE5B/D,OAAA,CAAQuB,YAAA,EAAa,CAACyC,UAAA,EAAYrI,IAAA,KAAS;IACzC,IAAIsI,GAAA;IACJ,KAAKA,GAAA,GAAMJ,OAAA,CAAQG,UAAA,EAAYrI,IAAA,EAAMsE,GAAG,OAAO,OAAO;MACpD8D,kBAAA,CAAmBpI,IAAI,IAAIsI,GAAA,IAAOD,UAAA;IACpC;EACF,CAAC;EAED5G,MAAA,CAAO8G,gBAAA,CAAiBjE,GAAA,EAAK8D,kBAAkB;AACjD;AAOA,IAAMI,aAAA,GAAiBlE,GAAA,IAAQ;EAC7B2D,iBAAA,CAAkB3D,GAAA,EAAK,CAAC+D,UAAA,EAAYrI,IAAA,KAAS;IAE3C,IAAI0C,UAAA,CAAW4B,GAAG,KAAK,CAAC,aAAa,UAAU,QAAQ,EAAE5I,OAAA,CAAQsE,IAAI,MAAM,IAAI;MAC7E,OAAO;IACT;IAEA,MAAM8F,KAAA,GAAQxB,GAAA,CAAItE,IAAI;IAEtB,IAAI,CAAC0C,UAAA,CAAWoD,KAAK,GAAG;IAExBuC,UAAA,CAAWI,UAAA,GAAa;IAExB,IAAI,cAAcJ,UAAA,EAAY;MAC5BA,UAAA,CAAWK,QAAA,GAAW;MACtB;IACF;IAEA,IAAI,CAACL,UAAA,CAAWM,GAAA,EAAK;MACnBN,UAAA,CAAWM,GAAA,GAAM,MAAM;QACrB,MAAMnN,KAAA,CAAM,uCAAwCwE,IAAA,GAAO,GAAI;MACjE;IACF;EACF,CAAC;AACH;AAEA,IAAM4I,WAAA,GAAcA,CAACpL,aAAA,EAAeqL,SAAA,KAAc;EAChD,MAAMvE,GAAA,GAAM,CAAC;EAEb,MAAMwE,MAAA,GAAU/M,GAAA,IAAQ;IACtBA,GAAA,CAAIsI,OAAA,CAAQyB,KAAA,IAAS;MACnBxB,GAAA,CAAIwB,KAAK,IAAI;IACf,CAAC;EACH;EAEAxD,OAAA,CAAQ9E,aAAa,IAAIsL,MAAA,CAAOtL,aAAa,IAAIsL,MAAA,CAAOtK,MAAA,CAAOhB,aAAa,EAAEuL,KAAA,CAAMF,SAAS,CAAC;EAE9F,OAAOvE,GAAA;AACT;AAEA,IAAM0E,IAAA,GAAOA,CAAA,KAAM,CAAC;AAEpB,IAAMC,cAAA,GAAiBA,CAACnD,KAAA,EAAOoD,YAAA,KAAiB;EAC9CpD,KAAA,GAAQ,CAACA,KAAA;EACT,OAAOqD,MAAA,CAAOC,QAAA,CAAStD,KAAK,IAAIA,KAAA,GAAQoD,YAAA;AAC1C;AAEA,IAAMG,KAAA,GAAQ;AAEd,IAAMC,KAAA,GAAQ;AAEd,IAAMC,QAAA,GAAW;EACfD,KAAA;EACAD,KAAA;EACAG,WAAA,EAAaH,KAAA,GAAQA,KAAA,CAAMxB,WAAA,CAAY,IAAIyB;AAC7C;AAEA,IAAMG,cAAA,GAAiBA,CAACC,IAAA,GAAO,IAAIC,QAAA,GAAWJ,QAAA,CAASC,WAAA,KAAgB;EACrE,IAAIzH,GAAA,GAAM;EACV,MAAM;IAAC5G;EAAM,IAAIwO,QAAA;EACjB,OAAOD,IAAA,IAAQ;IACb3H,GAAA,IAAO4H,QAAA,CAASC,IAAA,CAAKC,MAAA,CAAO,IAAI1O,MAAA,GAAO,CAAC;EAC1C;EAEA,OAAO4G,GAAA;AACT;AASA,SAAS+H,oBAAoBhI,KAAA,EAAO;EAClC,OAAO,CAAC,EAAEA,KAAA,IAASY,UAAA,CAAWZ,KAAA,CAAMmC,MAAM,KAAKnC,KAAA,CAAMwB,MAAA,CAAOC,WAAW,MAAM,cAAczB,KAAA,CAAMwB,MAAA,CAAOE,QAAQ;AAClH;AAEA,IAAMuG,YAAA,GAAgBzF,GAAA,IAAQ;EAC5B,MAAM0F,KAAA,GAAQ,IAAIjP,KAAA,CAAM,EAAE;EAE1B,MAAMkP,KAAA,GAAQA,CAACC,MAAA,EAAQjP,CAAA,KAAM;IAE3B,IAAIiI,QAAA,CAASgH,MAAM,GAAG;MACpB,IAAIF,KAAA,CAAMtO,OAAA,CAAQwO,MAAM,KAAK,GAAG;QAC9B;MACF;MAEA,IAAG,EAAE,YAAYA,MAAA,GAAS;QACxBF,KAAA,CAAM/O,CAAC,IAAIiP,MAAA;QACX,MAAMC,MAAA,GAAS7H,OAAA,CAAQ4H,MAAM,IAAI,EAAC,GAAI,CAAC;QAEvC7F,OAAA,CAAQ6F,MAAA,EAAQ,CAACpE,KAAA,EAAOpB,GAAA,KAAQ;UAC9B,MAAM0F,YAAA,GAAeH,KAAA,CAAMnE,KAAA,EAAO7K,CAAA,GAAI,CAAC;UACvC,CAACsH,WAAA,CAAY6H,YAAY,MAAMD,MAAA,CAAOzF,GAAG,IAAI0F,YAAA;QAC/C,CAAC;QAEDJ,KAAA,CAAM/O,CAAC,IAAI;QAEX,OAAOkP,MAAA;MACT;IACF;IAEA,OAAOD,MAAA;EACT;EAEA,OAAOD,KAAA,CAAM3F,GAAA,EAAK,CAAC;AACrB;AAEA,IAAM+F,SAAA,GAAYlI,UAAA,CAAW,eAAe;AAE5C,IAAMmI,UAAA,GAAcxI,KAAA,IAClBA,KAAA,KAAUoB,QAAA,CAASpB,KAAK,KAAKY,UAAA,CAAWZ,KAAK,MAAMY,UAAA,CAAWZ,KAAA,CAAMyI,IAAI,KAAK7H,UAAA,CAAWZ,KAAA,CAAM0I,KAAK;AAErG,IAAOC,aAAA,GAAQ;EACbnI,OAAA;EACAK,aAAA;EACAH,QAAA;EACAuB,UAAA;EACAnB,iBAAA;EACArF,QAAA,EAAAyF,SAAA;EACAC,QAAA;EACAE,SAAA;EACAD,QAAA;EACAE,aAAA;EACAb,WAAA;EACAkB,MAAA;EACAC,MAAA;EACAC,MAAA;EACAqE,QAAA;EACAtF,UAAA;EACAmB,QAAA;EACAK,iBAAA;EACA0C,YAAA;EACAhD,UAAA;EACAS,OAAA;EACAa,KAAA;EACAI,MAAA;EACAnB,IAAA;EACAoB,QAAA;EACAE,QAAA;EACAO,YAAA;EACApE,MAAA;EACAO,UAAA;EACAoE,QAAA;EACAI,OAAA;EACAG,YAAA;EACAK,QAAA;EACAI,UAAA;EACAO,cAAA;EACA4C,UAAA,EAAY5C,cAAA;EAAA;EACZG,iBAAA;EACAO,aAAA;EACAI,WAAA;EACApB,WAAA;EACAwB,IAAA;EACAC,cAAA;EACAtE,OAAA;EACAI,MAAA,EAAQF,OAAA;EACRG,gBAAA;EACAuE,QAAA;EACAE,cAAA;EACAK,mBAAA;EACAC,YAAA;EACAM,SAAA;EACAC;AACF;;;ACnsBA,SAASK,WAAWC,OAAA,EAAS5P,IAAA,EAAM6P,MAAA,EAAQC,OAAA,EAASC,QAAA,EAAU;EAC5DvP,KAAA,CAAMwG,IAAA,CAAK,IAAI;EAEf,IAAIxG,KAAA,CAAMwP,iBAAA,EAAmB;IAC3BxP,KAAA,CAAMwP,iBAAA,CAAkB,MAAM,KAAK7L,WAAW;EAChD,OAAO;IACL,KAAK6K,KAAA,GAAS,IAAIxO,KAAA,CAAM,EAAGwO,KAAA;EAC7B;EAEA,KAAKY,OAAA,GAAUA,OAAA;EACf,KAAK5K,IAAA,GAAO;EACZhF,IAAA,KAAS,KAAKA,IAAA,GAAOA,IAAA;EACrB6P,MAAA,KAAW,KAAKA,MAAA,GAASA,MAAA;EACzBC,OAAA,KAAY,KAAKA,OAAA,GAAUA,OAAA;EAC3BC,QAAA,KAAa,KAAKA,QAAA,GAAWA,QAAA;AAC/B;AAEAN,aAAA,CAAMhF,QAAA,CAASkF,UAAA,EAAYnP,KAAA,EAAO;EAChCyP,MAAA,EAAQ,SAASA,OAAA,EAAS;IACxB,OAAO;MAAA;MAELL,OAAA,EAAS,KAAKA,OAAA;MACd5K,IAAA,EAAM,KAAKA,IAAA;MAAA;MAEXD,WAAA,EAAa,KAAKA,WAAA;MAClBmL,MAAA,EAAQ,KAAKA,MAAA;MAAA;MAEbC,QAAA,EAAU,KAAKA,QAAA;MACfC,UAAA,EAAY,KAAKA,UAAA;MACjBC,YAAA,EAAc,KAAKA,YAAA;MACnBrB,KAAA,EAAO,KAAKA,KAAA;MAAA;MAEZa,MAAA,EAAQJ,aAAA,CAAMV,YAAA,CAAa,KAAKc,MAAM;MACtC7P,IAAA,EAAM,KAAKA,IAAA;MACXsQ,MAAA,EAAQ,KAAKP,QAAA,IAAY,KAAKA,QAAA,CAASO,MAAA,GAAS,KAAKP,QAAA,CAASO,MAAA,GAAS;IACzE;EACF;AACF,CAAC;AAED,IAAM5J,SAAA,GAAYiJ,UAAA,CAAWjJ,SAAA;AAC7B,IAAM6J,WAAA,GAAc,CAAC;AAErB,CACE,wBACA,kBACA,gBACA,aACA,eACA,6BACA,kBACA,oBACA,mBACA,gBACA,mBACA;AAAA;AAAA,CAEF,CAAElH,OAAA,CAAQrJ,IAAA,IAAQ;EAChBuQ,WAAA,CAAYvQ,IAAI,IAAI;IAAC8K,KAAA,EAAO9K;EAAI;AAClC,CAAC;AAEDyG,MAAA,CAAO8G,gBAAA,CAAiBoC,UAAA,EAAYY,WAAW;AAC/C9J,MAAA,CAAOoE,cAAA,CAAenE,SAAA,EAAW,gBAAgB;EAACoE,KAAA,EAAO;AAAI,CAAC;AAG9D6E,UAAA,CAAWa,IAAA,GAAO,CAACC,KAAA,EAAOzQ,IAAA,EAAM6P,MAAA,EAAQC,OAAA,EAASC,QAAA,EAAUW,WAAA,KAAgB;EACzE,MAAMC,UAAA,GAAalK,MAAA,CAAOnC,MAAA,CAAOoC,SAAS;EAE1C+I,aAAA,CAAMzE,YAAA,CAAayF,KAAA,EAAOE,UAAA,EAAY,SAASxF,QAAO7B,GAAA,EAAK;IACzD,OAAOA,GAAA,KAAQ9I,KAAA,CAAMkG,SAAA;EACvB,GAAG2E,IAAA,IAAQ;IACT,OAAOA,IAAA,KAAS;EAClB,CAAC;EAEDsE,UAAA,CAAW3I,IAAA,CAAK2J,UAAA,EAAYF,KAAA,CAAMb,OAAA,EAAS5P,IAAA,EAAM6P,MAAA,EAAQC,OAAA,EAASC,QAAQ;EAE1EY,UAAA,CAAWC,KAAA,GAAQH,KAAA;EAEnBE,UAAA,CAAW3L,IAAA,GAAOyL,KAAA,CAAMzL,IAAA;EAExB0L,WAAA,IAAejK,MAAA,CAAOsE,MAAA,CAAO4F,UAAA,EAAYD,WAAW;EAEpD,OAAOC,UAAA;AACT;AAEA,IAAOE,kBAAA,GAAQlB,UAAA;;;AClGf,IAAOmB,YAAA,GAAQ;;;ACaf,SAASC,YAAYjK,KAAA,EAAO;EAC1B,OAAO2I,aAAA,CAAMrH,aAAA,CAActB,KAAK,KAAK2I,aAAA,CAAMnI,OAAA,CAAQR,KAAK;AAC1D;AASA,SAASkK,eAAetH,GAAA,EAAK;EAC3B,OAAO+F,aAAA,CAAMlE,QAAA,CAAS7B,GAAA,EAAK,IAAI,IAAIA,GAAA,CAAIzC,KAAA,CAAM,GAAG,EAAE,IAAIyC,GAAA;AACxD;AAWA,SAASuH,UAAUC,IAAA,EAAMxH,GAAA,EAAKyH,IAAA,EAAM;EAClC,IAAI,CAACD,IAAA,EAAM,OAAOxH,GAAA;EAClB,OAAOwH,IAAA,CAAKE,MAAA,CAAO1H,GAAG,EAAE/G,GAAA,CAAI,SAAS0O,KAAKC,KAAA,EAAOrR,CAAA,EAAG;IAElDqR,KAAA,GAAQN,cAAA,CAAeM,KAAK;IAC5B,OAAO,CAACH,IAAA,IAAQlR,CAAA,GAAI,MAAMqR,KAAA,GAAQ,MAAMA,KAAA;EAC1C,CAAC,EAAE5P,IAAA,CAAKyP,IAAA,GAAO,MAAM,EAAE;AACzB;AASA,SAASI,YAAYxQ,GAAA,EAAK;EACxB,OAAO0O,aAAA,CAAMnI,OAAA,CAAQvG,GAAG,KAAK,CAACA,GAAA,CAAIyQ,IAAA,CAAKT,WAAW;AACpD;AAEA,IAAMU,UAAA,GAAahC,aAAA,CAAMzE,YAAA,CAAayE,aAAA,EAAO,CAAC,GAAG,MAAM,SAASiC,OAAOrG,IAAA,EAAM;EAC3E,OAAO,WAAWsG,IAAA,CAAKtG,IAAI;AAC7B,CAAC;AAyBD,SAASuG,WAAWtI,GAAA,EAAKuI,QAAA,EAAUrM,OAAA,EAAS;EAC1C,IAAI,CAACiK,aAAA,CAAMvH,QAAA,CAASoB,GAAG,GAAG;IACxB,MAAM,IAAIwI,SAAA,CAAU,0BAA0B;EAChD;EAGAD,QAAA,GAAWA,QAAA,IAAY,KAAKf,YAAA,IAAoB3O,QAAA,EAAU;EAG1DqD,OAAA,GAAUiK,aAAA,CAAMzE,YAAA,CAAaxF,OAAA,EAAS;IACpCuM,UAAA,EAAY;IACZZ,IAAA,EAAM;IACNa,OAAA,EAAS;EACX,GAAG,OAAO,SAASC,QAAQC,MAAA,EAAQhD,MAAA,EAAQ;IAEzC,OAAO,CAACO,aAAA,CAAMlI,WAAA,CAAY2H,MAAA,CAAOgD,MAAM,CAAC;EAC1C,CAAC;EAED,MAAMH,UAAA,GAAavM,OAAA,CAAQuM,UAAA;EAE3B,MAAMI,OAAA,GAAU3M,OAAA,CAAQ2M,OAAA,IAAWC,cAAA;EACnC,MAAMjB,IAAA,GAAO3L,OAAA,CAAQ2L,IAAA;EACrB,MAAMa,OAAA,GAAUxM,OAAA,CAAQwM,OAAA;EACxB,MAAMK,KAAA,GAAQ7M,OAAA,CAAQ8M,IAAA,IAAQ,OAAOA,IAAA,KAAS,eAAeA,IAAA;EAC7D,MAAMC,OAAA,GAAUF,KAAA,IAAS5C,aAAA,CAAMX,mBAAA,CAAoB+C,QAAQ;EAE3D,IAAI,CAACpC,aAAA,CAAM/H,UAAA,CAAWyK,OAAO,GAAG;IAC9B,MAAM,IAAIL,SAAA,CAAU,4BAA4B;EAClD;EAEA,SAASU,aAAa1H,KAAA,EAAO;IAC3B,IAAIA,KAAA,KAAU,MAAM,OAAO;IAE3B,IAAI2E,aAAA,CAAMhH,MAAA,CAAOqC,KAAK,GAAG;MACvB,OAAOA,KAAA,CAAM2H,WAAA,CAAY;IAC3B;IAEA,IAAI,CAACF,OAAA,IAAW9C,aAAA,CAAM9G,MAAA,CAAOmC,KAAK,GAAG;MACnC,MAAM,IAAI+F,kBAAA,CAAW,8CAA8C;IACrE;IAEA,IAAIpB,aAAA,CAAM9H,aAAA,CAAcmD,KAAK,KAAK2E,aAAA,CAAM7D,YAAA,CAAad,KAAK,GAAG;MAC3D,OAAOyH,OAAA,IAAW,OAAOD,IAAA,KAAS,aAAa,IAAIA,IAAA,CAAK,CAACxH,KAAK,CAAC,IAAI4H,MAAA,CAAOlC,IAAA,CAAK1F,KAAK;IACtF;IAEA,OAAOA,KAAA;EACT;EAYA,SAASsH,eAAetH,KAAA,EAAOpB,GAAA,EAAKwH,IAAA,EAAM;IACxC,IAAInQ,GAAA,GAAM+J,KAAA;IAEV,IAAIA,KAAA,IAAS,CAACoG,IAAA,IAAQ,OAAOpG,KAAA,KAAU,UAAU;MAC/C,IAAI2E,aAAA,CAAMlE,QAAA,CAAS7B,GAAA,EAAK,IAAI,GAAG;QAE7BA,GAAA,GAAMqI,UAAA,GAAarI,GAAA,GAAMA,GAAA,CAAIzC,KAAA,CAAM,GAAG,EAAE;QAExC6D,KAAA,GAAQ6H,IAAA,CAAKC,SAAA,CAAU9H,KAAK;MAC9B,WACG2E,aAAA,CAAMnI,OAAA,CAAQwD,KAAK,KAAKyG,WAAA,CAAYzG,KAAK,MACxC2E,aAAA,CAAM7G,UAAA,CAAWkC,KAAK,KAAK2E,aAAA,CAAMlE,QAAA,CAAS7B,GAAA,EAAK,IAAI,OAAO3I,GAAA,GAAM0O,aAAA,CAAM9D,OAAA,CAAQb,KAAK,IAClF;QAEHpB,GAAA,GAAMsH,cAAA,CAAetH,GAAG;QAExB3I,GAAA,CAAIsI,OAAA,CAAQ,SAASgI,KAAKwB,EAAA,EAAIC,KAAA,EAAO;UACnC,EAAErD,aAAA,CAAMlI,WAAA,CAAYsL,EAAE,KAAKA,EAAA,KAAO,SAAShB,QAAA,CAAS5I,MAAA;UAAA;UAElD+I,OAAA,KAAY,OAAOf,SAAA,CAAU,CAACvH,GAAG,GAAGoJ,KAAA,EAAO3B,IAAI,IAAKa,OAAA,KAAY,OAAOtI,GAAA,GAAMA,GAAA,GAAM,MACnF8I,YAAA,CAAaK,EAAE,CACjB;QACF,CAAC;QACD,OAAO;MACT;IACF;IAEA,IAAI9B,WAAA,CAAYjG,KAAK,GAAG;MACtB,OAAO;IACT;IAEA+G,QAAA,CAAS5I,MAAA,CAAOgI,SAAA,CAAUC,IAAA,EAAMxH,GAAA,EAAKyH,IAAI,GAAGqB,YAAA,CAAa1H,KAAK,CAAC;IAE/D,OAAO;EACT;EAEA,MAAMkE,KAAA,GAAQ,EAAC;EAEf,MAAM+D,cAAA,GAAiBtM,MAAA,CAAOsE,MAAA,CAAO0G,UAAA,EAAY;IAC/CW,cAAA;IACAI,YAAA;IACAzB;EACF,CAAC;EAED,SAASiC,MAAMlI,KAAA,EAAOoG,IAAA,EAAM;IAC1B,IAAIzB,aAAA,CAAMlI,WAAA,CAAYuD,KAAK,GAAG;IAE9B,IAAIkE,KAAA,CAAMtO,OAAA,CAAQoK,KAAK,MAAM,IAAI;MAC/B,MAAMtK,KAAA,CAAM,oCAAoC0Q,IAAA,CAAKxP,IAAA,CAAK,GAAG,CAAC;IAChE;IAEAsN,KAAA,CAAMvN,IAAA,CAAKqJ,KAAK;IAEhB2E,aAAA,CAAMpG,OAAA,CAAQyB,KAAA,EAAO,SAASuG,KAAKwB,EAAA,EAAInJ,GAAA,EAAK;MAC1C,MAAMtE,MAAA,GAAS,EAAEqK,aAAA,CAAMlI,WAAA,CAAYsL,EAAE,KAAKA,EAAA,KAAO,SAASV,OAAA,CAAQnL,IAAA,CAChE6K,QAAA,EAAUgB,EAAA,EAAIpD,aAAA,CAAMlN,QAAA,CAASmH,GAAG,IAAIA,GAAA,CAAIP,IAAA,CAAK,IAAIO,GAAA,EAAKwH,IAAA,EAAM6B,cAC9D;MAEA,IAAI3N,MAAA,KAAW,MAAM;QACnB4N,KAAA,CAAMH,EAAA,EAAI3B,IAAA,GAAOA,IAAA,CAAKE,MAAA,CAAO1H,GAAG,IAAI,CAACA,GAAG,CAAC;MAC3C;IACF,CAAC;IAEDsF,KAAA,CAAMiE,GAAA,CAAI;EACZ;EAEA,IAAI,CAACxD,aAAA,CAAMvH,QAAA,CAASoB,GAAG,GAAG;IACxB,MAAM,IAAIwI,SAAA,CAAU,wBAAwB;EAC9C;EAEAkB,KAAA,CAAM1J,GAAG;EAET,OAAOuI,QAAA;AACT;AAEA,IAAOqB,kBAAA,GAAQtB,UAAA;;;AC9Mf,SAASuB,OAAOpM,GAAA,EAAK;EACnB,MAAMqM,OAAA,GAAU;IACd,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;IACP,OAAO;EACT;EACA,OAAOC,kBAAA,CAAmBtM,GAAG,EAAEqC,OAAA,CAAQ,oBAAoB,SAASqD,SAAS6G,KAAA,EAAO;IAClF,OAAOF,OAAA,CAAQE,KAAK;EACtB,CAAC;AACH;AAUA,SAASC,qBAAqBC,MAAA,EAAQhO,OAAA,EAAS;EAC7C,KAAKiO,MAAA,GAAS,EAAC;EAEfD,MAAA,IAAUN,kBAAA,CAAWM,MAAA,EAAQ,MAAMhO,OAAO;AAC5C;AAEA,IAAMkO,UAAA,GAAYH,oBAAA,CAAqB7M,SAAA;AAEvCgN,UAAA,CAAUzK,MAAA,GAAS,SAASA,OAAOjE,IAAA,EAAM8F,KAAA,EAAO;EAC9C,KAAK2I,MAAA,CAAOhS,IAAA,CAAK,CAACuD,IAAA,EAAM8F,KAAK,CAAC;AAChC;AAEA4I,UAAA,CAAUlN,QAAA,GAAW,SAASmN,UAASC,OAAA,EAAS;EAC9C,MAAMC,OAAA,GAAUD,OAAA,GAAU,UAAS9I,KAAA,EAAO;IACxC,OAAO8I,OAAA,CAAQ5M,IAAA,CAAK,MAAM8D,KAAA,EAAOqI,MAAM;EACzC,IAAIA,MAAA;EAEJ,OAAO,KAAKM,MAAA,CAAO9Q,GAAA,CAAI,SAAS0O,KAAKnF,IAAA,EAAM;IACzC,OAAO2H,OAAA,CAAQ3H,IAAA,CAAK,CAAC,CAAC,IAAI,MAAM2H,OAAA,CAAQ3H,IAAA,CAAK,CAAC,CAAC;EACjD,GAAG,EAAE,EAAExK,IAAA,CAAK,GAAG;AACjB;AAEA,IAAOoS,4BAAA,GAAQP,oBAAA;;;AC5Cf,SAASQ,QAAOtM,GAAA,EAAK;EACnB,OAAO4L,kBAAA,CAAmB5L,GAAG,EAC3B2B,OAAA,CAAQ,SAAS,GAAG,EACpBA,OAAA,CAAQ,QAAQ,GAAG,EACnBA,OAAA,CAAQ,SAAS,GAAG,EACpBA,OAAA,CAAQ,QAAQ,GAAG,EACnBA,OAAA,CAAQ,SAAS,GAAG,EACpBA,OAAA,CAAQ,SAAS,GAAG;AACxB;AAWe,SAAR4K,SAA0BC,GAAA,EAAKT,MAAA,EAAQhO,OAAA,EAAS;EAErD,IAAI,CAACgO,MAAA,EAAQ;IACX,OAAOS,GAAA;EACT;EAEA,MAAMJ,OAAA,GAAUrO,OAAA,IAAWA,OAAA,CAAQ2N,MAAA,IAAUY,OAAA;EAE7C,MAAMG,WAAA,GAAc1O,OAAA,IAAWA,OAAA,CAAQ2O,SAAA;EAEvC,IAAIC,gBAAA;EAEJ,IAAIF,WAAA,EAAa;IACfE,gBAAA,GAAmBF,WAAA,CAAYV,MAAA,EAAQhO,OAAO;EAChD,OAAO;IACL4O,gBAAA,GAAmB3E,aAAA,CAAMvG,iBAAA,CAAkBsK,MAAM,IAC/CA,MAAA,CAAOhN,QAAA,CAAS,IAChB,IAAIsN,4BAAA,CAAqBN,MAAA,EAAQhO,OAAO,EAAEgB,QAAA,CAASqN,OAAO;EAC9D;EAEA,IAAIO,gBAAA,EAAkB;IACpB,MAAMC,aAAA,GAAgBJ,GAAA,CAAIvT,OAAA,CAAQ,GAAG;IAErC,IAAI2T,aAAA,KAAkB,IAAI;MACxBJ,GAAA,GAAMA,GAAA,CAAIhN,KAAA,CAAM,GAAGoN,aAAa;IAClC;IACAJ,GAAA,KAAQA,GAAA,CAAIvT,OAAA,CAAQ,GAAG,MAAM,KAAK,MAAM,OAAO0T,gBAAA;EACjD;EAEA,OAAOH,GAAA;AACT;;;AC1DA,IAAMK,kBAAA,GAAN,MAAyB;EACvBnQ,YAAA,EAAc;IACZ,KAAKoQ,QAAA,GAAW,EAAC;EACnB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAC,IAAIC,SAAA,EAAWC,QAAA,EAAUlP,OAAA,EAAS;IAChC,KAAK+O,QAAA,CAAS9S,IAAA,CAAK;MACjBgT,SAAA;MACAC,QAAA;MACAC,WAAA,EAAanP,OAAA,GAAUA,OAAA,CAAQmP,WAAA,GAAc;MAC7CC,OAAA,EAASpP,OAAA,GAAUA,OAAA,CAAQoP,OAAA,GAAU;IACvC,CAAC;IACD,OAAO,KAAKL,QAAA,CAASpU,MAAA,GAAS;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA0U,MAAMxQ,EAAA,EAAI;IACR,IAAI,KAAKkQ,QAAA,CAASlQ,EAAE,GAAG;MACrB,KAAKkQ,QAAA,CAASlQ,EAAE,IAAI;IACtB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAyQ,MAAA,EAAQ;IACN,IAAI,KAAKP,QAAA,EAAU;MACjB,KAAKA,QAAA,GAAW,EAAC;IACnB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAlL,QAAQlD,EAAA,EAAI;IACVsJ,aAAA,CAAMpG,OAAA,CAAQ,KAAKkL,QAAA,EAAU,SAASQ,eAAeC,CAAA,EAAG;MACtD,IAAIA,CAAA,KAAM,MAAM;QACd7O,EAAA,CAAG6O,CAAC;MACN;IACF,CAAC;EACH;AACF;AAEA,IAAOC,0BAAA,GAAQX,kBAAA;;;ACpEf,IAAOY,oBAAA,GAAQ;EACbC,iBAAA,EAAmB;EACnBC,iBAAA,EAAmB;EACnBC,mBAAA,EAAqB;AACvB;;;ACHA,IAAOC,uBAAA,GAAQ,OAAOC,eAAA,KAAoB,cAAcA,eAAA,GAAkBzB,4BAAA;;;ACD1E,IAAO0B,gBAAA,GAAQ,OAAOrT,QAAA,KAAa,cAAcA,QAAA,GAAW;;;ACA5D,IAAOsT,YAAA,GAAQ,OAAOnD,IAAA,KAAS,cAAcA,IAAA,GAAO;;;ACmBpD,IAAMoD,oBAAA,IAAwB,MAAM;EAClC,IAAIC,OAAA;EACJ,IAAI,OAAOC,SAAA,KAAc,iBACtBD,OAAA,GAAUC,SAAA,CAAUD,OAAA,MAAa,iBAClCA,OAAA,KAAY,kBACZA,OAAA,KAAY,OACZ;IACA,OAAO;EACT;EAEA,OAAO,OAAOvT,MAAA,KAAW,eAAe,OAAOyT,QAAA,KAAa;AAC9D,GAAG;AAWF,IAAMC,6BAAA,IAAiC,MAAM;EAC5C,OACE,OAAOC,iBAAA,KAAsB;EAAA;EAE7B7T,IAAA,YAAgB6T,iBAAA,IAChB,OAAO7T,IAAA,CAAK8T,aAAA,KAAkB;AAElC,GAAG;AAGH,IAAOC,eAAA,GAAQ;EACbC,SAAA,EAAW;EACXC,OAAA,EAAS;IACPZ,eAAA,EAAAD,uBAAA;IACAnT,QAAA,EAAAqT,gBAAA;IACAlD,IAAA,EAAAmD;EACF;EACAC,oBAAA;EACAI,6BAAA;EACAM,SAAA,EAAW,CAAC,QAAQ,SAAS,QAAQ,QAAQ,OAAO,MAAM;AAC5D;;;ACzDe,SAARC,iBAAkCnT,IAAA,EAAMsC,OAAA,EAAS;EACtD,OAAO0N,kBAAA,CAAWhQ,IAAA,EAAM,IAAI+S,eAAA,CAASE,OAAA,CAAQZ,eAAA,CAAgB,GAAG9O,MAAA,CAAOsE,MAAA,CAAO;IAC5EoH,OAAA,EAAS,SAAAA,CAASrH,KAAA,EAAOpB,GAAA,EAAKwH,IAAA,EAAMoF,OAAA,EAAS;MAC3C,IAAIL,eAAA,CAASM,MAAA,IAAU9G,aAAA,CAAMjI,QAAA,CAASsD,KAAK,GAAG;QAC5C,KAAK7B,MAAA,CAAOS,GAAA,EAAKoB,KAAA,CAAMtE,QAAA,CAAS,QAAQ,CAAC;QACzC,OAAO;MACT;MAEA,OAAO8P,OAAA,CAAQlE,cAAA,CAAe9L,KAAA,CAAM,MAAMC,SAAS;IACrD;EACF,GAAGf,OAAO,CAAC;AACb;;;ACNA,SAASgR,cAAcxR,IAAA,EAAM;EAK3B,OAAOyK,aAAA,CAAMtD,QAAA,CAAS,iBAAiBnH,IAAI,EAAErC,GAAA,CAAI2Q,KAAA,IAAS;IACxD,OAAOA,KAAA,CAAM,CAAC,MAAM,OAAO,KAAKA,KAAA,CAAM,CAAC,KAAKA,KAAA,CAAM,CAAC;EACrD,CAAC;AACH;AASA,SAASmD,cAAc1V,GAAA,EAAK;EAC1B,MAAMuI,GAAA,GAAM,CAAC;EACb,MAAME,IAAA,GAAO/C,MAAA,CAAO+C,IAAA,CAAKzI,GAAG;EAC5B,IAAId,CAAA;EACJ,MAAMC,GAAA,GAAMsJ,IAAA,CAAKrJ,MAAA;EACjB,IAAIuJ,GAAA;EACJ,KAAKzJ,CAAA,GAAI,GAAGA,CAAA,GAAIC,GAAA,EAAKD,CAAA,IAAK;IACxByJ,GAAA,GAAMF,IAAA,CAAKvJ,CAAC;IACZqJ,GAAA,CAAII,GAAG,IAAI3I,GAAA,CAAI2I,GAAG;EACpB;EACA,OAAOJ,GAAA;AACT;AASA,SAASoN,eAAe7E,QAAA,EAAU;EAChC,SAAS8E,UAAUzF,IAAA,EAAMpG,KAAA,EAAOqE,MAAA,EAAQ2D,KAAA,EAAO;IAC7C,IAAI9N,IAAA,GAAOkM,IAAA,CAAK4B,KAAA,EAAO;IACvB,MAAM8D,YAAA,GAAezI,MAAA,CAAOC,QAAA,CAAS,CAACpJ,IAAI;IAC1C,MAAM6R,MAAA,GAAS/D,KAAA,IAAS5B,IAAA,CAAK/Q,MAAA;IAC7B6E,IAAA,GAAO,CAACA,IAAA,IAAQyK,aAAA,CAAMnI,OAAA,CAAQ6H,MAAM,IAAIA,MAAA,CAAOhP,MAAA,GAAS6E,IAAA;IAExD,IAAI6R,MAAA,EAAQ;MACV,IAAIpH,aAAA,CAAMC,UAAA,CAAWP,MAAA,EAAQnK,IAAI,GAAG;QAClCmK,MAAA,CAAOnK,IAAI,IAAI,CAACmK,MAAA,CAAOnK,IAAI,GAAG8F,KAAK;MACrC,OAAO;QACLqE,MAAA,CAAOnK,IAAI,IAAI8F,KAAA;MACjB;MAEA,OAAO,CAAC8L,YAAA;IACV;IAEA,IAAI,CAACzH,MAAA,CAAOnK,IAAI,KAAK,CAACyK,aAAA,CAAMvH,QAAA,CAASiH,MAAA,CAAOnK,IAAI,CAAC,GAAG;MAClDmK,MAAA,CAAOnK,IAAI,IAAI,EAAC;IAClB;IAEA,MAAMI,MAAA,GAASuR,SAAA,CAAUzF,IAAA,EAAMpG,KAAA,EAAOqE,MAAA,CAAOnK,IAAI,GAAG8N,KAAK;IAEzD,IAAI1N,MAAA,IAAUqK,aAAA,CAAMnI,OAAA,CAAQ6H,MAAA,CAAOnK,IAAI,CAAC,GAAG;MACzCmK,MAAA,CAAOnK,IAAI,IAAIyR,aAAA,CAActH,MAAA,CAAOnK,IAAI,CAAC;IAC3C;IAEA,OAAO,CAAC4R,YAAA;EACV;EAEA,IAAInH,aAAA,CAAM1G,UAAA,CAAW8I,QAAQ,KAAKpC,aAAA,CAAM/H,UAAA,CAAWmK,QAAA,CAASiF,OAAO,GAAG;IACpE,MAAMxN,GAAA,GAAM,CAAC;IAEbmG,aAAA,CAAM3D,YAAA,CAAa+F,QAAA,EAAU,CAAC7M,IAAA,EAAM8F,KAAA,KAAU;MAC5C6L,SAAA,CAAUH,aAAA,CAAcxR,IAAI,GAAG8F,KAAA,EAAOxB,GAAA,EAAK,CAAC;IAC9C,CAAC;IAED,OAAOA,GAAA;EACT;EAEA,OAAO;AACT;AAEA,IAAOyN,sBAAA,GAAQL,cAAA;;;ACvEf,SAASM,gBAAgBC,QAAA,EAAUC,MAAA,EAAQtD,OAAA,EAAS;EAClD,IAAInE,aAAA,CAAMlN,QAAA,CAAS0U,QAAQ,GAAG;IAC5B,IAAI;MACF,CAACC,MAAA,IAAUvE,IAAA,CAAKwE,KAAA,EAAOF,QAAQ;MAC/B,OAAOxH,aAAA,CAAMtG,IAAA,CAAK8N,QAAQ;IAC5B,SAAS3T,CAAA,EAAG;MACV,IAAIA,CAAA,CAAE0B,IAAA,KAAS,eAAe;QAC5B,MAAM1B,CAAA;MACR;IACF;EACF;EAEA,QAAQsQ,OAAA,IAAWjB,IAAA,CAAKC,SAAA,EAAWqE,QAAQ;AAC7C;AAEA,IAAMG,QAAA,GAAW;EAEfC,YAAA,EAAcnC,oBAAA;EAEdoC,OAAA,EAAS,CAAC,OAAO,MAAM;EAEvBC,gBAAA,EAAkB,CAAC,SAASA,iBAAiBrU,IAAA,EAAMsU,OAAA,EAAS;IAC1D,MAAMC,WAAA,GAAcD,OAAA,CAAQE,cAAA,CAAe,KAAK;IAChD,MAAMC,kBAAA,GAAqBF,WAAA,CAAY/W,OAAA,CAAQ,kBAAkB,IAAI;IACrE,MAAMkX,eAAA,GAAkBnI,aAAA,CAAMvH,QAAA,CAAShF,IAAI;IAE3C,IAAI0U,eAAA,IAAmBnI,aAAA,CAAMlD,UAAA,CAAWrJ,IAAI,GAAG;MAC7CA,IAAA,GAAO,IAAIf,QAAA,CAASe,IAAI;IAC1B;IAEA,MAAM2U,WAAA,GAAapI,aAAA,CAAM1G,UAAA,CAAW7F,IAAI;IAExC,IAAI2U,WAAA,EAAY;MACd,IAAI,CAACF,kBAAA,EAAoB;QACvB,OAAOzU,IAAA;MACT;MACA,OAAOyU,kBAAA,GAAqBhF,IAAA,CAAKC,SAAA,CAAUmE,sBAAA,CAAe7T,IAAI,CAAC,IAAIA,IAAA;IACrE;IAEA,IAAIuM,aAAA,CAAM9H,aAAA,CAAczE,IAAI,KAC1BuM,aAAA,CAAMjI,QAAA,CAAStE,IAAI,KACnBuM,aAAA,CAAM5G,QAAA,CAAS3F,IAAI,KACnBuM,aAAA,CAAM/G,MAAA,CAAOxF,IAAI,KACjBuM,aAAA,CAAM9G,MAAA,CAAOzF,IAAI,GACjB;MACA,OAAOA,IAAA;IACT;IACA,IAAIuM,aAAA,CAAM7H,iBAAA,CAAkB1E,IAAI,GAAG;MACjC,OAAOA,IAAA,CAAK6E,MAAA;IACd;IACA,IAAI0H,aAAA,CAAMvG,iBAAA,CAAkBhG,IAAI,GAAG;MACjCsU,OAAA,CAAQM,cAAA,CAAe,mDAAmD,KAAK;MAC/E,OAAO5U,IAAA,CAAKsD,QAAA,CAAS;IACvB;IAEA,IAAIuR,WAAA;IAEJ,IAAIH,eAAA,EAAiB;MACnB,IAAIH,WAAA,CAAY/W,OAAA,CAAQ,mCAAmC,IAAI,IAAI;QACjE,OAAO2V,gBAAA,CAAiBnT,IAAA,EAAM,KAAK8U,cAAc,EAAExR,QAAA,CAAS;MAC9D;MAEA,KAAKuR,WAAA,GAAatI,aAAA,CAAM7G,UAAA,CAAW1F,IAAI,MAAMuU,WAAA,CAAY/W,OAAA,CAAQ,qBAAqB,IAAI,IAAI;QAC5F,MAAMuX,SAAA,GAAY,KAAKC,GAAA,IAAO,KAAKA,GAAA,CAAI/V,QAAA;QAEvC,OAAO+Q,kBAAA,CACL6E,WAAA,GAAa;UAAC,WAAW7U;QAAI,IAAIA,IAAA,EACjC+U,SAAA,IAAa,IAAIA,SAAA,CAAU,GAC3B,KAAKD,cACP;MACF;IACF;IAEA,IAAIJ,eAAA,IAAmBD,kBAAA,EAAqB;MAC1CH,OAAA,CAAQM,cAAA,CAAe,oBAAoB,KAAK;MAChD,OAAOd,eAAA,CAAgB9T,IAAI;IAC7B;IAEA,OAAOA,IAAA;EACT,CAAC;EAEDiV,iBAAA,EAAmB,CAAC,SAASA,kBAAkBjV,IAAA,EAAM;IACnD,MAAMkV,aAAA,GAAe,KAAKf,YAAA,IAAgBD,QAAA,CAASC,YAAA;IACnD,MAAMjC,iBAAA,GAAoBgD,aAAA,IAAgBA,aAAA,CAAahD,iBAAA;IACvD,MAAMiD,aAAA,GAAgB,KAAKC,YAAA,KAAiB;IAE5C,IAAIpV,IAAA,IAAQuM,aAAA,CAAMlN,QAAA,CAASW,IAAI,MAAOkS,iBAAA,IAAqB,CAAC,KAAKkD,YAAA,IAAiBD,aAAA,GAAgB;MAChG,MAAMlD,iBAAA,GAAoBiD,aAAA,IAAgBA,aAAA,CAAajD,iBAAA;MACvD,MAAMoD,iBAAA,GAAoB,CAACpD,iBAAA,IAAqBkD,aAAA;MAEhD,IAAI;QACF,OAAO1F,IAAA,CAAKwE,KAAA,CAAMjU,IAAI;MACxB,SAASI,CAAA,EAAG;QACV,IAAIiV,iBAAA,EAAmB;UACrB,IAAIjV,CAAA,CAAE0B,IAAA,KAAS,eAAe;YAC5B,MAAM6L,kBAAA,CAAWL,IAAA,CAAKlN,CAAA,EAAGuN,kBAAA,CAAW2H,gBAAA,EAAkB,MAAM,MAAM,KAAKzI,QAAQ;UACjF;UACA,MAAMzM,CAAA;QACR;MACF;IACF;IAEA,OAAOJ,IAAA;EACT,CAAC;EAAA;AAAA;AAAA;AAAA;EAMDuV,OAAA,EAAS;EAETC,cAAA,EAAgB;EAChBC,cAAA,EAAgB;EAEhBC,gBAAA,EAAkB;EAClBC,aAAA,EAAe;EAEfX,GAAA,EAAK;IACH/V,QAAA,EAAU8T,eAAA,CAASE,OAAA,CAAQhU,QAAA;IAC3BmQ,IAAA,EAAM2D,eAAA,CAASE,OAAA,CAAQ7D;EACzB;EAEAwG,cAAA,EAAgB,SAASA,eAAexI,MAAA,EAAQ;IAC9C,OAAOA,MAAA,IAAU,OAAOA,MAAA,GAAS;EACnC;EAEAkH,OAAA,EAAS;IACPuB,MAAA,EAAQ;MACN,UAAU;MACV,gBAAgB;IAClB;EACF;AACF;AAEAtJ,aAAA,CAAMpG,OAAA,CAAQ,CAAC,UAAU,OAAO,QAAQ,QAAQ,OAAO,OAAO,GAAI2P,MAAA,IAAW;EAC3E5B,QAAA,CAASI,OAAA,CAAQwB,MAAM,IAAI,CAAC;AAC9B,CAAC;AAED,IAAOC,gBAAA,GAAQ7B,QAAA;;;ACxJf,IAAM8B,iBAAA,GAAoBzJ,aAAA,CAAM7B,WAAA,CAAY,CAC1C,OAAO,iBAAiB,kBAAkB,gBAAgB,QAC1D,WAAW,QAAQ,QAAQ,qBAAqB,uBAChD,iBAAiB,YAAY,gBAAgB,uBAC7C,WAAW,eAAe,aAC3B;AAgBD,IAAOuL,oBAAA,GAAQC,UAAA,IAAc;EAC3B,MAAMC,MAAA,GAAS,CAAC;EAChB,IAAI3P,GAAA;EACJ,IAAIjC,GAAA;EACJ,IAAIxH,CAAA;EAEJmZ,UAAA,IAAcA,UAAA,CAAWrL,KAAA,CAAM,IAAI,EAAE1E,OAAA,CAAQ,SAAS6N,OAAOoC,IAAA,EAAM;IACjErZ,CAAA,GAAIqZ,IAAA,CAAK5Y,OAAA,CAAQ,GAAG;IACpBgJ,GAAA,GAAM4P,IAAA,CAAKC,SAAA,CAAU,GAAGtZ,CAAC,EAAEkJ,IAAA,CAAK,EAAEjC,WAAA,CAAY;IAC9CO,GAAA,GAAM6R,IAAA,CAAKC,SAAA,CAAUtZ,CAAA,GAAI,CAAC,EAAEkJ,IAAA,CAAK;IAEjC,IAAI,CAACO,GAAA,IAAQ2P,MAAA,CAAO3P,GAAG,KAAKwP,iBAAA,CAAkBxP,GAAG,GAAI;MACnD;IACF;IAEA,IAAIA,GAAA,KAAQ,cAAc;MACxB,IAAI2P,MAAA,CAAO3P,GAAG,GAAG;QACf2P,MAAA,CAAO3P,GAAG,EAAEjI,IAAA,CAAKgG,GAAG;MACtB,OAAO;QACL4R,MAAA,CAAO3P,GAAG,IAAI,CAACjC,GAAG;MACpB;IACF,OAAO;MACL4R,MAAA,CAAO3P,GAAG,IAAI2P,MAAA,CAAO3P,GAAG,IAAI2P,MAAA,CAAO3P,GAAG,IAAI,OAAOjC,GAAA,GAAMA,GAAA;IACzD;EACF,CAAC;EAED,OAAO4R,MAAA;AACT;;;ACjDA,IAAMG,UAAA,GAAalR,MAAA,CAAO,WAAW;AAErC,SAASmR,gBAAgBC,MAAA,EAAQ;EAC/B,OAAOA,MAAA,IAAUlW,MAAA,CAAOkW,MAAM,EAAEvQ,IAAA,CAAK,EAAEjC,WAAA,CAAY;AACrD;AAEA,SAASyS,eAAe7O,KAAA,EAAO;EAC7B,IAAIA,KAAA,KAAU,SAASA,KAAA,IAAS,MAAM;IACpC,OAAOA,KAAA;EACT;EAEA,OAAO2E,aAAA,CAAMnI,OAAA,CAAQwD,KAAK,IAAIA,KAAA,CAAMnI,GAAA,CAAIgX,cAAc,IAAInW,MAAA,CAAOsH,KAAK;AACxE;AAEA,SAAS8O,YAAY7S,GAAA,EAAK;EACxB,MAAM8S,MAAA,GAAS,eAAApT,MAAA,CAAOnC,MAAA,CAAO,IAAI;EACjC,MAAMwV,QAAA,GAAW;EACjB,IAAIxG,KAAA;EAEJ,OAAQA,KAAA,GAAQwG,QAAA,CAASxN,IAAA,CAAKvF,GAAG,GAAI;IACnC8S,MAAA,CAAOvG,KAAA,CAAM,CAAC,CAAC,IAAIA,KAAA,CAAM,CAAC;EAC5B;EAEA,OAAOuG,MAAA;AACT;AAEA,IAAME,iBAAA,GAAqBhT,GAAA,IAAQ,iCAAiC4K,IAAA,CAAK5K,GAAA,CAAIoC,IAAA,CAAK,CAAC;AAEnF,SAAS6Q,iBAAiB/P,OAAA,EAASa,KAAA,EAAO4O,MAAA,EAAQvO,OAAA,EAAQ8O,kBAAA,EAAoB;EAC5E,IAAIxK,aAAA,CAAM/H,UAAA,CAAWyD,OAAM,GAAG;IAC5B,OAAOA,OAAA,CAAOnE,IAAA,CAAK,MAAM8D,KAAA,EAAO4O,MAAM;EACxC;EAEA,IAAIO,kBAAA,EAAoB;IACtBnP,KAAA,GAAQ4O,MAAA;EACV;EAEA,IAAI,CAACjK,aAAA,CAAMlN,QAAA,CAASuI,KAAK,GAAG;EAE5B,IAAI2E,aAAA,CAAMlN,QAAA,CAAS4I,OAAM,GAAG;IAC1B,OAAOL,KAAA,CAAMpK,OAAA,CAAQyK,OAAM,MAAM;EACnC;EAEA,IAAIsE,aAAA,CAAMzC,QAAA,CAAS7B,OAAM,GAAG;IAC1B,OAAOA,OAAA,CAAOwG,IAAA,CAAK7G,KAAK;EAC1B;AACF;AAEA,SAASoP,aAAaR,MAAA,EAAQ;EAC5B,OAAOA,MAAA,CAAOvQ,IAAA,CAAK,EAChBjC,WAAA,CAAY,EAAEkC,OAAA,CAAQ,mBAAmB,CAAC7F,CAAA,EAAGJ,IAAA,EAAM4D,GAAA,KAAQ;IAC1D,OAAO5D,IAAA,CAAK0J,WAAA,CAAY,IAAI9F,GAAA;EAC9B,CAAC;AACL;AAEA,SAASoT,eAAe7Q,GAAA,EAAKoQ,MAAA,EAAQ;EACnC,MAAMU,YAAA,GAAe3K,aAAA,CAAMjD,WAAA,CAAY,MAAMkN,MAAM;EAEnD,CAAC,OAAO,OAAO,KAAK,EAAErQ,OAAA,CAAQgR,UAAA,IAAc;IAC1C5T,MAAA,CAAOoE,cAAA,CAAevB,GAAA,EAAK+Q,UAAA,GAAaD,YAAA,EAAc;MACpDtP,KAAA,EAAO,SAAAA,CAASwP,IAAA,EAAMC,IAAA,EAAMC,IAAA,EAAM;QAChC,OAAO,KAAKH,UAAU,EAAErT,IAAA,CAAK,MAAM0S,MAAA,EAAQY,IAAA,EAAMC,IAAA,EAAMC,IAAI;MAC7D;MACAC,YAAA,EAAc;IAChB,CAAC;EACH,CAAC;AACH;AAEA,IAAMC,YAAA,GAAN,MAAmB;EACjBvW,YAAYqT,OAAA,EAAS;IACnBA,OAAA,IAAW,KAAK7J,GAAA,CAAI6J,OAAO;EAC7B;EAEA7J,IAAI+L,MAAA,EAAQiB,cAAA,EAAgBC,OAAA,EAAS;IACnC,MAAMC,KAAA,GAAO;IAEb,SAASC,UAAUC,MAAA,EAAQC,OAAA,EAASC,QAAA,EAAU;MAC5C,MAAMC,OAAA,GAAUzB,eAAA,CAAgBuB,OAAO;MAEvC,IAAI,CAACE,OAAA,EAAS;QACZ,MAAM,IAAI1a,KAAA,CAAM,wCAAwC;MAC1D;MAEA,MAAMkJ,GAAA,GAAM+F,aAAA,CAAM9F,OAAA,CAAQkR,KAAA,EAAMK,OAAO;MAEvC,IAAG,CAACxR,GAAA,IAAOmR,KAAA,CAAKnR,GAAG,MAAM,UAAauR,QAAA,KAAa,QAASA,QAAA,KAAa,UAAaJ,KAAA,CAAKnR,GAAG,MAAM,OAAQ;QAC1GmR,KAAA,CAAKnR,GAAA,IAAOsR,OAAO,IAAIrB,cAAA,CAAeoB,MAAM;MAC9C;IACF;IAEA,MAAMI,UAAA,GAAaA,CAAC3D,OAAA,EAASyD,QAAA,KAC3BxL,aAAA,CAAMpG,OAAA,CAAQmO,OAAA,EAAS,CAACuD,MAAA,EAAQC,OAAA,KAAYF,SAAA,CAAUC,MAAA,EAAQC,OAAA,EAASC,QAAQ,CAAC;IAElF,IAAIxL,aAAA,CAAMrH,aAAA,CAAcsR,MAAM,KAAKA,MAAA,YAAkB,KAAKvV,WAAA,EAAa;MACrEgX,UAAA,CAAWzB,MAAA,EAAQiB,cAAc;IACnC,WAAUlL,aAAA,CAAMlN,QAAA,CAASmX,MAAM,MAAMA,MAAA,GAASA,MAAA,CAAOvQ,IAAA,CAAK,MAAM,CAAC4Q,iBAAA,CAAkBL,MAAM,GAAG;MAC1FyB,UAAA,CAAWhC,oBAAA,CAAaO,MAAM,GAAGiB,cAAc;IACjD,OAAO;MACLjB,MAAA,IAAU,QAAQoB,SAAA,CAAUH,cAAA,EAAgBjB,MAAA,EAAQkB,OAAO;IAC7D;IAEA,OAAO;EACT;EAEA5U,IAAI0T,MAAA,EAAQxC,MAAA,EAAQ;IAClBwC,MAAA,GAASD,eAAA,CAAgBC,MAAM;IAE/B,IAAIA,MAAA,EAAQ;MACV,MAAMhQ,GAAA,GAAM+F,aAAA,CAAM9F,OAAA,CAAQ,MAAM+P,MAAM;MAEtC,IAAIhQ,GAAA,EAAK;QACP,MAAMoB,KAAA,GAAQ,KAAKpB,GAAG;QAEtB,IAAI,CAACwN,MAAA,EAAQ;UACX,OAAOpM,KAAA;QACT;QAEA,IAAIoM,MAAA,KAAW,MAAM;UACnB,OAAO0C,WAAA,CAAY9O,KAAK;QAC1B;QAEA,IAAI2E,aAAA,CAAM/H,UAAA,CAAWwP,MAAM,GAAG;UAC5B,OAAOA,MAAA,CAAOlQ,IAAA,CAAK,MAAM8D,KAAA,EAAOpB,GAAG;QACrC;QAEA,IAAI+F,aAAA,CAAMzC,QAAA,CAASkK,MAAM,GAAG;UAC1B,OAAOA,MAAA,CAAO5K,IAAA,CAAKxB,KAAK;QAC1B;QAEA,MAAM,IAAIgH,SAAA,CAAU,wCAAwC;MAC9D;IACF;EACF;EAEAsJ,IAAI1B,MAAA,EAAQ2B,OAAA,EAAS;IACnB3B,MAAA,GAASD,eAAA,CAAgBC,MAAM;IAE/B,IAAIA,MAAA,EAAQ;MACV,MAAMhQ,GAAA,GAAM+F,aAAA,CAAM9F,OAAA,CAAQ,MAAM+P,MAAM;MAEtC,OAAO,CAAC,EAAEhQ,GAAA,IAAO,KAAKA,GAAG,MAAM,WAAc,CAAC2R,OAAA,IAAWrB,gBAAA,CAAiB,MAAM,KAAKtQ,GAAG,GAAGA,GAAA,EAAK2R,OAAO;IACzG;IAEA,OAAO;EACT;EAEAzV,OAAO8T,MAAA,EAAQ2B,OAAA,EAAS;IACtB,MAAMR,KAAA,GAAO;IACb,IAAIS,OAAA,GAAU;IAEd,SAASC,aAAaP,OAAA,EAAS;MAC7BA,OAAA,GAAUvB,eAAA,CAAgBuB,OAAO;MAEjC,IAAIA,OAAA,EAAS;QACX,MAAMtR,GAAA,GAAM+F,aAAA,CAAM9F,OAAA,CAAQkR,KAAA,EAAMG,OAAO;QAEvC,IAAItR,GAAA,KAAQ,CAAC2R,OAAA,IAAWrB,gBAAA,CAAiBa,KAAA,EAAMA,KAAA,CAAKnR,GAAG,GAAGA,GAAA,EAAK2R,OAAO,IAAI;UACxE,OAAOR,KAAA,CAAKnR,GAAG;UAEf4R,OAAA,GAAU;QACZ;MACF;IACF;IAEA,IAAI7L,aAAA,CAAMnI,OAAA,CAAQoS,MAAM,GAAG;MACzBA,MAAA,CAAOrQ,OAAA,CAAQkS,YAAY;IAC7B,OAAO;MACLA,YAAA,CAAa7B,MAAM;IACrB;IAEA,OAAO4B,OAAA;EACT;EAEAxG,MAAMuG,OAAA,EAAS;IACb,MAAM7R,IAAA,GAAO/C,MAAA,CAAO+C,IAAA,CAAK,IAAI;IAC7B,IAAIvJ,CAAA,GAAIuJ,IAAA,CAAKrJ,MAAA;IACb,IAAImb,OAAA,GAAU;IAEd,OAAOrb,CAAA,IAAK;MACV,MAAMyJ,GAAA,GAAMF,IAAA,CAAKvJ,CAAC;MAClB,IAAG,CAACob,OAAA,IAAWrB,gBAAA,CAAiB,MAAM,KAAKtQ,GAAG,GAAGA,GAAA,EAAK2R,OAAA,EAAS,IAAI,GAAG;QACpE,OAAO,KAAK3R,GAAG;QACf4R,OAAA,GAAU;MACZ;IACF;IAEA,OAAOA,OAAA;EACT;EAEAE,UAAUC,MAAA,EAAQ;IAChB,MAAMZ,KAAA,GAAO;IACb,MAAMrD,OAAA,GAAU,CAAC;IAEjB/H,aAAA,CAAMpG,OAAA,CAAQ,MAAM,CAACyB,KAAA,EAAO4O,MAAA,KAAW;MACrC,MAAMhQ,GAAA,GAAM+F,aAAA,CAAM9F,OAAA,CAAQ6N,OAAA,EAASkC,MAAM;MAEzC,IAAIhQ,GAAA,EAAK;QACPmR,KAAA,CAAKnR,GAAG,IAAIiQ,cAAA,CAAe7O,KAAK;QAChC,OAAO+P,KAAA,CAAKnB,MAAM;QAClB;MACF;MAEA,MAAMgC,UAAA,GAAaD,MAAA,GAASvB,YAAA,CAAaR,MAAM,IAAIlW,MAAA,CAAOkW,MAAM,EAAEvQ,IAAA,CAAK;MAEvE,IAAIuS,UAAA,KAAehC,MAAA,EAAQ;QACzB,OAAOmB,KAAA,CAAKnB,MAAM;MACpB;MAEAmB,KAAA,CAAKa,UAAU,IAAI/B,cAAA,CAAe7O,KAAK;MAEvC0M,OAAA,CAAQkE,UAAU,IAAI;IACxB,CAAC;IAED,OAAO;EACT;EAEAtK,OAAA,GAAUuK,OAAA,EAAS;IACjB,OAAO,KAAKxX,WAAA,CAAYiN,MAAA,CAAO,MAAM,GAAGuK,OAAO;EACjD;EAEA1L,OAAO2L,SAAA,EAAW;IAChB,MAAMtS,GAAA,GAAM,eAAA7C,MAAA,CAAOnC,MAAA,CAAO,IAAI;IAE9BmL,aAAA,CAAMpG,OAAA,CAAQ,MAAM,CAACyB,KAAA,EAAO4O,MAAA,KAAW;MACrC5O,KAAA,IAAS,QAAQA,KAAA,KAAU,UAAUxB,GAAA,CAAIoQ,MAAM,IAAIkC,SAAA,IAAanM,aAAA,CAAMnI,OAAA,CAAQwD,KAAK,IAAIA,KAAA,CAAMpJ,IAAA,CAAK,IAAI,IAAIoJ,KAAA;IAC5G,CAAC;IAED,OAAOxB,GAAA;EACT;EAEA,CAAChB,MAAA,CAAOE,QAAQ,IAAI;IAClB,OAAO/B,MAAA,CAAOqQ,OAAA,CAAQ,KAAK7G,MAAA,CAAO,CAAC,EAAE3H,MAAA,CAAOE,QAAQ,EAAE;EACxD;EAEAhC,SAAA,EAAW;IACT,OAAOC,MAAA,CAAOqQ,OAAA,CAAQ,KAAK7G,MAAA,CAAO,CAAC,EAAEtN,GAAA,CAAI,CAAC,CAAC+W,MAAA,EAAQ5O,KAAK,MAAM4O,MAAA,GAAS,OAAO5O,KAAK,EAAEpJ,IAAA,CAAK,IAAI;EAChG;EAEA,KAAK4G,MAAA,CAAOC,WAAW,IAAI;IACzB,OAAO;EACT;EAEA,OAAOiI,KAAK1J,KAAA,EAAO;IACjB,OAAOA,KAAA,YAAiB,OAAOA,KAAA,GAAQ,IAAI,KAAKA,KAAK;EACvD;EAEA,OAAOsK,OAAOyK,KAAA,KAAUF,OAAA,EAAS;IAC/B,MAAMG,QAAA,GAAW,IAAI,KAAKD,KAAK;IAE/BF,OAAA,CAAQtS,OAAA,CAAS8F,MAAA,IAAW2M,QAAA,CAASnO,GAAA,CAAIwB,MAAM,CAAC;IAEhD,OAAO2M,QAAA;EACT;EAEA,OAAOC,SAASrC,MAAA,EAAQ;IACtB,MAAMsC,SAAA,GAAY,KAAKxC,UAAU,IAAK,KAAKA,UAAU,IAAI;MACvDyC,SAAA,EAAW,CAAC;IACd;IAEA,MAAMA,SAAA,GAAYD,SAAA,CAAUC,SAAA;IAC5B,MAAM5T,UAAA,GAAY,KAAK3B,SAAA;IAEvB,SAASwV,eAAelB,OAAA,EAAS;MAC/B,MAAME,OAAA,GAAUzB,eAAA,CAAgBuB,OAAO;MAEvC,IAAI,CAACiB,SAAA,CAAUf,OAAO,GAAG;QACvBf,cAAA,CAAe9R,UAAA,EAAW2S,OAAO;QACjCiB,SAAA,CAAUf,OAAO,IAAI;MACvB;IACF;IAEAzL,aAAA,CAAMnI,OAAA,CAAQoS,MAAM,IAAIA,MAAA,CAAOrQ,OAAA,CAAQ6S,cAAc,IAAIA,cAAA,CAAexC,MAAM;IAE9E,OAAO;EACT;AACF;AAEAgB,YAAA,CAAaqB,QAAA,CAAS,CAAC,gBAAgB,kBAAkB,UAAU,mBAAmB,cAAc,eAAe,CAAC;AAGpHtM,aAAA,CAAMxC,iBAAA,CAAkByN,YAAA,CAAahU,SAAA,EAAW,CAAC;EAACoE;AAAK,GAAGpB,GAAA,KAAQ;EAChE,IAAIyS,MAAA,GAASzS,GAAA,CAAI,CAAC,EAAEmD,WAAA,CAAY,IAAInD,GAAA,CAAIzC,KAAA,CAAM,CAAC;EAC/C,OAAO;IACLjB,GAAA,EAAKA,CAAA,KAAM8E,KAAA;IACX6C,IAAIyO,WAAA,EAAa;MACf,KAAKD,MAAM,IAAIC,WAAA;IACjB;EACF;AACF,CAAC;AAED3M,aAAA,CAAMjC,aAAA,CAAckN,YAAY;AAEhC,IAAO2B,oBAAA,GAAQ3B,YAAA;;;AC3RA,SAAR4B,cAA+BC,GAAA,EAAKxM,QAAA,EAAU;EACnD,MAAMF,MAAA,GAAS,QAAQoJ,gBAAA;EACvB,MAAMhP,OAAA,GAAU8F,QAAA,IAAYF,MAAA;EAC5B,MAAM2H,OAAA,GAAU6E,oBAAA,CAAa7L,IAAA,CAAKvG,OAAA,CAAQuN,OAAO;EACjD,IAAItU,IAAA,GAAO+G,OAAA,CAAQ/G,IAAA;EAEnBuM,aAAA,CAAMpG,OAAA,CAAQkT,GAAA,EAAK,SAASC,UAAUrW,EAAA,EAAI;IACxCjD,IAAA,GAAOiD,EAAA,CAAGa,IAAA,CAAK6I,MAAA,EAAQ3M,IAAA,EAAMsU,OAAA,CAAQgE,SAAA,CAAU,GAAGzL,QAAA,GAAWA,QAAA,CAASO,MAAA,GAAS,MAAS;EAC1F,CAAC;EAEDkH,OAAA,CAAQgE,SAAA,CAAU;EAElB,OAAOtY,IAAA;AACT;;;ACzBe,SAARuZ,SAA0B3R,KAAA,EAAO;EACtC,OAAO,CAAC,EAAEA,KAAA,IAASA,KAAA,CAAM4R,UAAA;AAC3B;;;ACUA,SAASC,cAAc/M,OAAA,EAASC,MAAA,EAAQC,OAAA,EAAS;EAE/Ce,kBAAA,CAAW7J,IAAA,CAAK,MAAM4I,OAAA,IAAW,OAAO,aAAaA,OAAA,EAASiB,kBAAA,CAAW+L,YAAA,EAAc/M,MAAA,EAAQC,OAAO;EACtG,KAAK9K,IAAA,GAAO;AACd;AAEAyK,aAAA,CAAMhF,QAAA,CAASkS,aAAA,EAAe9L,kBAAA,EAAY;EACxC6L,UAAA,EAAY;AACd,CAAC;AAED,IAAOG,qBAAA,GAAQF,aAAA;;;ACXA,SAARG,OAAwBC,OAAA,EAASC,MAAA,EAAQjN,QAAA,EAAU;EACxD,MAAMkN,eAAA,GAAiBlN,QAAA,CAASF,MAAA,CAAOiJ,cAAA;EACvC,IAAI,CAAC/I,QAAA,CAASO,MAAA,IAAU,CAAC2M,eAAA,IAAkBA,eAAA,CAAelN,QAAA,CAASO,MAAM,GAAG;IAC1EyM,OAAA,CAAQhN,QAAQ;EAClB,OAAO;IACLiN,MAAA,CAAO,IAAInM,kBAAA,CACT,qCAAqCd,QAAA,CAASO,MAAA,EAC9C,CAACO,kBAAA,CAAWqM,eAAA,EAAiBrM,kBAAA,CAAW2H,gBAAgB,EAAE5J,IAAA,CAAKuO,KAAA,CAAMpN,QAAA,CAASO,MAAA,GAAS,GAAG,IAAI,CAAC,GAC/FP,QAAA,CAASF,MAAA,EACTE,QAAA,CAASD,OAAA,EACTC,QACF,CAAC;EACH;AACF;;;ACrBA,IAAOqN,eAAA,GAAQnH,eAAA,CAASP,oBAAA;AAAA;AAGrB;AAAA,SAAS2H,mBAAA,EAAqB;EAC7B,OAAO;IACLC,KAAA,EAAO,SAASA,MAAMtY,IAAA,EAAM8F,KAAA,EAAOyS,OAAA,EAASrM,IAAA,EAAMsM,OAAA,EAAQC,MAAA,EAAQ;MAChE,MAAMC,MAAA,GAAS,EAAC;MAChBA,MAAA,CAAOjc,IAAA,CAAKuD,IAAA,GAAO,MAAMqO,kBAAA,CAAmBvI,KAAK,CAAC;MAElD,IAAI2E,aAAA,CAAMxH,QAAA,CAASsV,OAAO,GAAG;QAC3BG,MAAA,CAAOjc,IAAA,CAAK,aAAa,IAAIkc,IAAA,CAAKJ,OAAO,EAAEK,WAAA,CAAY,CAAC;MAC1D;MAEA,IAAInO,aAAA,CAAMlN,QAAA,CAAS2O,IAAI,GAAG;QACxBwM,MAAA,CAAOjc,IAAA,CAAK,UAAUyP,IAAI;MAC5B;MAEA,IAAIzB,aAAA,CAAMlN,QAAA,CAASib,OAAM,GAAG;QAC1BE,MAAA,CAAOjc,IAAA,CAAK,YAAY+b,OAAM;MAChC;MAEA,IAAIC,MAAA,KAAW,MAAM;QACnBC,MAAA,CAAOjc,IAAA,CAAK,QAAQ;MACtB;MAEAoU,QAAA,CAAS6H,MAAA,GAASA,MAAA,CAAOhc,IAAA,CAAK,IAAI;IACpC;IAEAmc,IAAA,EAAM,SAASA,KAAK7Y,IAAA,EAAM;MACxB,MAAMsO,KAAA,GAAQuC,QAAA,CAAS6H,MAAA,CAAOpK,KAAA,CAAM,IAAIwK,MAAA,CAAO,eAAe9Y,IAAA,GAAO,WAAW,CAAC;MACjF,OAAQsO,KAAA,GAAQyK,kBAAA,CAAmBzK,KAAA,CAAM,CAAC,CAAC,IAAI;IACjD;IAEA0K,MAAA,EAAQ,SAASA,OAAOhZ,IAAA,EAAM;MAC5B,KAAKsY,KAAA,CAAMtY,IAAA,EAAM,IAAI2Y,IAAA,CAAKM,GAAA,CAAI,IAAI,KAAQ;IAC5C;EACF;AACF,EAAG;AAAA;AAGF;AAAA,SAASC,sBAAA,EAAwB;EAChC,OAAO;IACLZ,KAAA,EAAO,SAASA,MAAA,EAAQ,CAAC;IACzBO,IAAA,EAAM,SAASA,KAAA,EAAO;MAAE,OAAO;IAAM;IACrCG,MAAA,EAAQ,SAASA,OAAA,EAAS,CAAC;EAC7B;AACF,EAAG;;;AC1CU,SAARG,cAA+BlK,GAAA,EAAK;EAIzC,OAAO,8BAA8BtC,IAAA,CAAKsC,GAAG;AAC/C;;;ACJe,SAARmK,YAA6BC,OAAA,EAASC,WAAA,EAAa;EACxD,OAAOA,WAAA,GACHD,OAAA,CAAQjV,OAAA,CAAQ,QAAQ,EAAE,IAAI,MAAMkV,WAAA,CAAYlV,OAAA,CAAQ,QAAQ,EAAE,IAClEiV,OAAA;AACN;;;ACCe,SAARE,cAA+BF,OAAA,EAASG,YAAA,EAAc;EAC3D,IAAIH,OAAA,IAAW,CAACF,aAAA,CAAcK,YAAY,GAAG;IAC3C,OAAOJ,WAAA,CAAYC,OAAA,EAASG,YAAY;EAC1C;EACA,OAAOA,YAAA;AACT;;;ACfA,IAAOC,uBAAA,GAAQxI,eAAA,CAASP,oBAAA;AAAA;AAAA;AAIrB,SAASgJ,oBAAA,EAAqB;EAC7B,MAAMC,IAAA,GAAO,kBAAkBhN,IAAA,CAAKiE,SAAA,CAAUgJ,SAAS;EACvD,MAAMC,cAAA,GAAiBhJ,QAAA,CAASiJ,aAAA,CAAc,GAAG;EACjD,IAAIC,SAAA;EAQJ,SAASC,WAAW/K,GAAA,EAAK;IACvB,IAAIgL,IAAA,GAAOhL,GAAA;IAEX,IAAI0K,IAAA,EAAM;MAERE,cAAA,CAAeK,YAAA,CAAa,QAAQD,IAAI;MACxCA,IAAA,GAAOJ,cAAA,CAAeI,IAAA;IACxB;IAEAJ,cAAA,CAAeK,YAAA,CAAa,QAAQD,IAAI;IAGxC,OAAO;MACLA,IAAA,EAAMJ,cAAA,CAAeI,IAAA;MACrBE,QAAA,EAAUN,cAAA,CAAeM,QAAA,GAAWN,cAAA,CAAeM,QAAA,CAAS/V,OAAA,CAAQ,MAAM,EAAE,IAAI;MAChFgW,IAAA,EAAMP,cAAA,CAAeO,IAAA;MACrBC,MAAA,EAAQR,cAAA,CAAeQ,MAAA,GAASR,cAAA,CAAeQ,MAAA,CAAOjW,OAAA,CAAQ,OAAO,EAAE,IAAI;MAC3EkW,IAAA,EAAMT,cAAA,CAAeS,IAAA,GAAOT,cAAA,CAAeS,IAAA,CAAKlW,OAAA,CAAQ,MAAM,EAAE,IAAI;MACpEmW,QAAA,EAAUV,cAAA,CAAeU,QAAA;MACzBC,IAAA,EAAMX,cAAA,CAAeW,IAAA;MACrBC,QAAA,EAAWZ,cAAA,CAAeY,QAAA,CAAS3c,MAAA,CAAO,CAAC,MAAM,MAC/C+b,cAAA,CAAeY,QAAA,GACf,MAAMZ,cAAA,CAAeY;IACzB;EACF;EAEAV,SAAA,GAAYC,UAAA,CAAW5c,MAAA,CAAOsd,QAAA,CAAST,IAAI;EAQ3C,OAAO,SAASU,gBAAgBC,UAAA,EAAY;IAC1C,MAAMvG,MAAA,GAAU5J,aAAA,CAAMlN,QAAA,CAASqd,UAAU,IAAKZ,UAAA,CAAWY,UAAU,IAAIA,UAAA;IACvE,OAAQvG,MAAA,CAAO8F,QAAA,KAAaJ,SAAA,CAAUI,QAAA,IAClC9F,MAAA,CAAO+F,IAAA,KAASL,SAAA,CAAUK,IAAA;EAChC;AACF,EAAG;AAAA;AAGF;AAAA,SAASS,uBAAA,EAAwB;EAChC,OAAO,SAASF,gBAAA,EAAkB;IAChC,OAAO;EACT;AACF,EAAG;;;AChEU,SAARG,cAA+B7L,GAAA,EAAK;EACzC,MAAMX,KAAA,GAAQ,4BAA4BhH,IAAA,CAAK2H,GAAG;EAClD,OAAOX,KAAA,IAASA,KAAA,CAAM,CAAC,KAAK;AAC9B;;;ACGA,SAASyM,YAAYC,YAAA,EAAcC,GAAA,EAAK;EACtCD,YAAA,GAAeA,YAAA,IAAgB;EAC/B,MAAME,KAAA,GAAQ,IAAIngB,KAAA,CAAMigB,YAAY;EACpC,MAAMG,UAAA,GAAa,IAAIpgB,KAAA,CAAMigB,YAAY;EACzC,IAAII,IAAA,GAAO;EACX,IAAIC,IAAA,GAAO;EACX,IAAIC,aAAA;EAEJL,GAAA,GAAMA,GAAA,KAAQ,SAAYA,GAAA,GAAM;EAEhC,OAAO,SAASxe,KAAK8e,WAAA,EAAa;IAChC,MAAMtC,GAAA,GAAMN,IAAA,CAAKM,GAAA,CAAI;IAErB,MAAMuC,SAAA,GAAYL,UAAA,CAAWE,IAAI;IAEjC,IAAI,CAACC,aAAA,EAAe;MAClBA,aAAA,GAAgBrC,GAAA;IAClB;IAEAiC,KAAA,CAAME,IAAI,IAAIG,WAAA;IACdJ,UAAA,CAAWC,IAAI,IAAInC,GAAA;IAEnB,IAAIhe,CAAA,GAAIogB,IAAA;IACR,IAAII,UAAA,GAAa;IAEjB,OAAOxgB,CAAA,KAAMmgB,IAAA,EAAM;MACjBK,UAAA,IAAcP,KAAA,CAAMjgB,CAAA,EAAG;MACvBA,CAAA,GAAIA,CAAA,GAAI+f,YAAA;IACV;IAEAI,IAAA,IAAQA,IAAA,GAAO,KAAKJ,YAAA;IAEpB,IAAII,IAAA,KAASC,IAAA,EAAM;MACjBA,IAAA,IAAQA,IAAA,GAAO,KAAKL,YAAA;IACtB;IAEA,IAAI/B,GAAA,GAAMqC,aAAA,GAAgBL,GAAA,EAAK;MAC7B;IACF;IAEA,MAAMS,MAAA,GAASF,SAAA,IAAavC,GAAA,GAAMuC,SAAA;IAElC,OAAOE,MAAA,GAAS9R,IAAA,CAAK+R,KAAA,CAAMF,UAAA,GAAa,MAAOC,MAAM,IAAI;EAC3D;AACF;AAEA,IAAOE,mBAAA,GAAQb,WAAA;;;ACtCf,SAASc,qBAAqBC,QAAA,EAAUC,gBAAA,EAAkB;EACxD,IAAIC,aAAA,GAAgB;EACpB,MAAMC,YAAA,GAAeL,mBAAA,CAAY,IAAI,GAAG;EAExC,OAAOtd,CAAA,IAAK;IACV,MAAM4d,MAAA,GAAS5d,CAAA,CAAE4d,MAAA;IACjB,MAAMC,KAAA,GAAQ7d,CAAA,CAAE8d,gBAAA,GAAmB9d,CAAA,CAAE6d,KAAA,GAAQ;IAC7C,MAAME,aAAA,GAAgBH,MAAA,GAASF,aAAA;IAC/B,MAAMM,IAAA,GAAOL,YAAA,CAAaI,aAAa;IACvC,MAAME,OAAA,GAAUL,MAAA,IAAUC,KAAA;IAE1BH,aAAA,GAAgBE,MAAA;IAEhB,MAAMhe,IAAA,GAAO;MACXge,MAAA;MACAC,KAAA;MACAK,QAAA,EAAUL,KAAA,GAASD,MAAA,GAASC,KAAA,GAAS;MACrCjB,KAAA,EAAOmB,aAAA;MACPC,IAAA,EAAMA,IAAA,GAAOA,IAAA,GAAO;MACpBG,SAAA,EAAWH,IAAA,IAAQH,KAAA,IAASI,OAAA,IAAWJ,KAAA,GAAQD,MAAA,IAAUI,IAAA,GAAO;MAChEI,KAAA,EAAOpe;IACT;IAEAJ,IAAA,CAAK6d,gBAAA,GAAmB,aAAa,QAAQ,IAAI;IAEjDD,QAAA,CAAS5d,IAAI;EACf;AACF;AAEA,IAAMye,qBAAA,GAAwB,OAAOC,cAAA,KAAmB;AAExD,IAAOC,WAAA,GAAQF,qBAAA,IAAyB,UAAU9R,MAAA,EAAQ;EACxD,OAAO,IAAIiS,OAAA,CAAQ,SAASC,mBAAmBhF,OAAA,EAASC,MAAA,EAAQ;IAC9D,IAAIgF,WAAA,GAAcnS,MAAA,CAAO3M,IAAA;IACzB,MAAM+e,cAAA,GAAiB5F,oBAAA,CAAa7L,IAAA,CAAKX,MAAA,CAAO2H,OAAO,EAAEgE,SAAA,CAAU;IACnE,MAAMlD,YAAA,GAAezI,MAAA,CAAOyI,YAAA;IAC5B,IAAI4J,UAAA;IACJ,SAASjW,KAAA,EAAO;MACd,IAAI4D,MAAA,CAAOsS,WAAA,EAAa;QACtBtS,MAAA,CAAOsS,WAAA,CAAYC,WAAA,CAAYF,UAAU;MAC3C;MAEA,IAAIrS,MAAA,CAAOwS,MAAA,EAAQ;QACjBxS,MAAA,CAAOwS,MAAA,CAAOC,mBAAA,CAAoB,SAASJ,UAAU;MACvD;IACF;IAEA,IAAIzK,WAAA;IAEJ,IAAIhI,aAAA,CAAM1G,UAAA,CAAWiZ,WAAW,GAAG;MACjC,IAAI/L,eAAA,CAASP,oBAAA,IAAwBO,eAAA,CAASH,6BAAA,EAA+B;QAC3EmM,cAAA,CAAenK,cAAA,CAAe,KAAK;MACrC,WAAU,CAACmK,cAAA,CAAevK,cAAA,CAAe,0BAA0B,GAAE;QACnEuK,cAAA,CAAenK,cAAA,CAAe,qBAAqB;MACrD,WAAUrI,aAAA,CAAMlN,QAAA,CAASkV,WAAA,GAAcwK,cAAA,CAAevK,cAAA,CAAe,CAAC,GAAE;QAEtEuK,cAAA,CAAenK,cAAA,CAAeL,WAAA,CAAYrO,OAAA,CAAQ,gCAAgC,IAAI,CAAC;MACzF;IACF;IAEA,IAAI0G,OAAA,GAAU,IAAI8R,cAAA,CAAe;IAGjC,IAAI/R,MAAA,CAAO0S,IAAA,EAAM;MACf,MAAMC,QAAA,GAAW3S,MAAA,CAAO0S,IAAA,CAAKC,QAAA,IAAY;MACzC,MAAMC,QAAA,GAAW5S,MAAA,CAAO0S,IAAA,CAAKE,QAAA,GAAWC,QAAA,CAASrP,kBAAA,CAAmBxD,MAAA,CAAO0S,IAAA,CAAKE,QAAQ,CAAC,IAAI;MAC7FR,cAAA,CAAetU,GAAA,CAAI,iBAAiB,WAAWgV,IAAA,CAAKH,QAAA,GAAW,MAAMC,QAAQ,CAAC;IAChF;IAEA,MAAMG,QAAA,GAAWrE,aAAA,CAAc1O,MAAA,CAAOwO,OAAA,EAASxO,MAAA,CAAOoE,GAAG;IAEzDnE,OAAA,CAAQ+S,IAAA,CAAKhT,MAAA,CAAOmJ,MAAA,CAAOnM,WAAA,CAAY,GAAGmH,QAAA,CAAS4O,QAAA,EAAU/S,MAAA,CAAO2D,MAAA,EAAQ3D,MAAA,CAAOiT,gBAAgB,GAAG,IAAI;IAG1GhT,OAAA,CAAQ2I,OAAA,GAAU5I,MAAA,CAAO4I,OAAA;IAEzB,SAASsK,UAAA,EAAY;MACnB,IAAI,CAACjT,OAAA,EAAS;QACZ;MACF;MAEA,MAAMkT,eAAA,GAAkB3G,oBAAA,CAAa7L,IAAA,CACnC,2BAA2BV,OAAA,IAAWA,OAAA,CAAQmT,qBAAA,CAAsB,CACtE;MACA,MAAMC,YAAA,GAAe,CAAC5K,YAAA,IAAgBA,YAAA,KAAiB,UAAUA,YAAA,KAAiB,SAChFxI,OAAA,CAAQqT,YAAA,GAAerT,OAAA,CAAQC,QAAA;MACjC,MAAMA,QAAA,GAAW;QACf7M,IAAA,EAAMggB,YAAA;QACN5S,MAAA,EAAQR,OAAA,CAAQQ,MAAA;QAChB8S,UAAA,EAAYtT,OAAA,CAAQsT,UAAA;QACpB5L,OAAA,EAASwL,eAAA;QACTnT,MAAA;QACAC;MACF;MAEAgN,MAAA,CAAO,SAASuG,SAASvY,KAAA,EAAO;QAC9BiS,OAAA,CAAQjS,KAAK;QACbmB,IAAA,CAAK;MACP,GAAG,SAASqX,QAAQC,GAAA,EAAK;QACvBvG,MAAA,CAAOuG,GAAG;QACVtX,IAAA,CAAK;MACP,GAAG8D,QAAQ;MAGXD,OAAA,GAAU;IACZ;IAEA,IAAI,eAAeA,OAAA,EAAS;MAE1BA,OAAA,CAAQiT,SAAA,GAAYA,SAAA;IACtB,OAAO;MAELjT,OAAA,CAAQ0T,kBAAA,GAAqB,SAASC,WAAA,EAAa;QACjD,IAAI,CAAC3T,OAAA,IAAWA,OAAA,CAAQ4T,UAAA,KAAe,GAAG;UACxC;QACF;QAMA,IAAI5T,OAAA,CAAQQ,MAAA,KAAW,KAAK,EAAER,OAAA,CAAQ6T,WAAA,IAAe7T,OAAA,CAAQ6T,WAAA,CAAYjjB,OAAA,CAAQ,OAAO,MAAM,IAAI;UAChG;QACF;QAGAkjB,UAAA,CAAWb,SAAS;MACtB;IACF;IAGAjT,OAAA,CAAQ+T,OAAA,GAAU,SAASC,YAAA,EAAc;MACvC,IAAI,CAAChU,OAAA,EAAS;QACZ;MACF;MAEAkN,MAAA,CAAO,IAAInM,kBAAA,CAAW,mBAAmBA,kBAAA,CAAWkT,YAAA,EAAclU,MAAA,EAAQC,OAAO,CAAC;MAGlFA,OAAA,GAAU;IACZ;IAGAA,OAAA,CAAQkU,OAAA,GAAU,SAASC,YAAA,EAAc;MAGvCjH,MAAA,CAAO,IAAInM,kBAAA,CAAW,iBAAiBA,kBAAA,CAAWqT,WAAA,EAAarU,MAAA,EAAQC,OAAO,CAAC;MAG/EA,OAAA,GAAU;IACZ;IAGAA,OAAA,CAAQqU,SAAA,GAAY,SAASC,cAAA,EAAgB;MAC3C,IAAIC,mBAAA,GAAsBxU,MAAA,CAAO4I,OAAA,GAAU,gBAAgB5I,MAAA,CAAO4I,OAAA,GAAU,gBAAgB;MAC5F,MAAML,aAAA,GAAevI,MAAA,CAAOwH,YAAA,IAAgBnC,oBAAA;MAC5C,IAAIrF,MAAA,CAAOwU,mBAAA,EAAqB;QAC9BA,mBAAA,GAAsBxU,MAAA,CAAOwU,mBAAA;MAC/B;MACArH,MAAA,CAAO,IAAInM,kBAAA,CACTwT,mBAAA,EACAjM,aAAA,CAAa/C,mBAAA,GAAsBxE,kBAAA,CAAWyT,SAAA,GAAYzT,kBAAA,CAAWkT,YAAA,EACrElU,MAAA,EACAC,OAAO,CAAC;MAGVA,OAAA,GAAU;IACZ;IAKA,IAAImG,eAAA,CAASP,oBAAA,EAAsB;MAGjC,MAAM6O,SAAA,GAAY9F,uBAAA,CAAgBmE,QAAQ,KAAK/S,MAAA,CAAO6I,cAAA,IAAkB0E,eAAA,CAAQS,IAAA,CAAKhO,MAAA,CAAO6I,cAAc;MAE1G,IAAI6L,SAAA,EAAW;QACbtC,cAAA,CAAetU,GAAA,CAAIkC,MAAA,CAAO8I,cAAA,EAAgB4L,SAAS;MACrD;IACF;IAGAvC,WAAA,KAAgB,UAAaC,cAAA,CAAenK,cAAA,CAAe,IAAI;IAG/D,IAAI,sBAAsBhI,OAAA,EAAS;MACjCL,aAAA,CAAMpG,OAAA,CAAQ4Y,cAAA,CAAehS,MAAA,CAAO,GAAG,SAASuU,iBAAiB/c,GAAA,EAAKiC,GAAA,EAAK;QACzEoG,OAAA,CAAQ0U,gBAAA,CAAiB9a,GAAA,EAAKjC,GAAG;MACnC,CAAC;IACH;IAGA,IAAI,CAACgI,aAAA,CAAMlI,WAAA,CAAYsI,MAAA,CAAO4U,eAAe,GAAG;MAC9C3U,OAAA,CAAQ2U,eAAA,GAAkB,CAAC,CAAC5U,MAAA,CAAO4U,eAAA;IACrC;IAGA,IAAInM,YAAA,IAAgBA,YAAA,KAAiB,QAAQ;MAC3CxI,OAAA,CAAQwI,YAAA,GAAezI,MAAA,CAAOyI,YAAA;IAChC;IAGA,IAAI,OAAOzI,MAAA,CAAO6U,kBAAA,KAAuB,YAAY;MACnD5U,OAAA,CAAQ6U,gBAAA,CAAiB,YAAY9D,oBAAA,CAAqBhR,MAAA,CAAO6U,kBAAA,EAAoB,IAAI,CAAC;IAC5F;IAGA,IAAI,OAAO7U,MAAA,CAAO+U,gBAAA,KAAqB,cAAc9U,OAAA,CAAQ+U,MAAA,EAAQ;MACnE/U,OAAA,CAAQ+U,MAAA,CAAOF,gBAAA,CAAiB,YAAY9D,oBAAA,CAAqBhR,MAAA,CAAO+U,gBAAgB,CAAC;IAC3F;IAEA,IAAI/U,MAAA,CAAOsS,WAAA,IAAetS,MAAA,CAAOwS,MAAA,EAAQ;MAGvCH,UAAA,GAAa4C,MAAA,IAAU;QACrB,IAAI,CAAChV,OAAA,EAAS;UACZ;QACF;QACAkN,MAAA,CAAO,CAAC8H,MAAA,IAAUA,MAAA,CAAO1d,IAAA,GAAO,IAAIyV,qBAAA,CAAc,MAAMhN,MAAA,EAAQC,OAAO,IAAIgV,MAAM;QACjFhV,OAAA,CAAQiV,KAAA,CAAM;QACdjV,OAAA,GAAU;MACZ;MAEAD,MAAA,CAAOsS,WAAA,IAAetS,MAAA,CAAOsS,WAAA,CAAY6C,SAAA,CAAU9C,UAAU;MAC7D,IAAIrS,MAAA,CAAOwS,MAAA,EAAQ;QACjBxS,MAAA,CAAOwS,MAAA,CAAO4C,OAAA,GAAU/C,UAAA,CAAW,IAAIrS,MAAA,CAAOwS,MAAA,CAAOsC,gBAAA,CAAiB,SAASzC,UAAU;MAC3F;IACF;IAEA,MAAM/C,QAAA,GAAWW,aAAA,CAAc8C,QAAQ;IAEvC,IAAIzD,QAAA,IAAYlJ,eAAA,CAASG,SAAA,CAAU1V,OAAA,CAAQye,QAAQ,MAAM,IAAI;MAC3DnC,MAAA,CAAO,IAAInM,kBAAA,CAAW,0BAA0BsO,QAAA,GAAW,KAAKtO,kBAAA,CAAWqM,eAAA,EAAiBrN,MAAM,CAAC;MACnG;IACF;IAIAC,OAAA,CAAQoV,IAAA,CAAKlD,WAAA,IAAe,IAAI;EAClC,CAAC;AACH;;;AC5PA,IAAMmD,aAAA,GAAgB;EACpBC,IAAA,EAAMtU,YAAA;EACNuU,GAAA,EAAKxD;AACP;AAEApS,aAAA,CAAMpG,OAAA,CAAQ8b,aAAA,EAAe,CAAChf,EAAA,EAAI2E,KAAA,KAAU;EAC1C,IAAI3E,EAAA,EAAI;IACN,IAAI;MACFM,MAAA,CAAOoE,cAAA,CAAe1E,EAAA,EAAI,QAAQ;QAAC2E;MAAK,CAAC;IAC3C,SAASxH,CAAA,EAAG,CAEZ;IACAmD,MAAA,CAAOoE,cAAA,CAAe1E,EAAA,EAAI,eAAe;MAAC2E;IAAK,CAAC;EAClD;AACF,CAAC;AAED,IAAMwa,YAAA,GAAgBC,MAAA,IAAW,KAAKA,MAAM;AAE5C,IAAMC,gBAAA,GAAoBlO,OAAA,IAAY7H,aAAA,CAAM/H,UAAA,CAAW4P,OAAO,KAAKA,OAAA,KAAY,QAAQA,OAAA,KAAY;AAEnG,IAAOmO,gBAAA,GAAQ;EACbC,UAAA,EAAaC,QAAA,IAAa;IACxBA,QAAA,GAAWlW,aAAA,CAAMnI,OAAA,CAAQqe,QAAQ,IAAIA,QAAA,GAAW,CAACA,QAAQ;IAEzD,MAAM;MAACxlB;IAAM,IAAIwlB,QAAA;IACjB,IAAIC,aAAA;IACJ,IAAItO,OAAA;IAEJ,MAAMuO,eAAA,GAAkB,CAAC;IAEzB,SAAS5lB,CAAA,GAAI,GAAGA,CAAA,GAAIE,MAAA,EAAQF,CAAA,IAAK;MAC/B2lB,aAAA,GAAgBD,QAAA,CAAS1lB,CAAC;MAC1B,IAAIoE,EAAA;MAEJiT,OAAA,GAAUsO,aAAA;MAEV,IAAI,CAACJ,gBAAA,CAAiBI,aAAa,GAAG;QACpCtO,OAAA,GAAU6N,aAAA,EAAe9gB,EAAA,GAAKb,MAAA,CAAOoiB,aAAa,GAAG1e,WAAA,CAAY,CAAC;QAElE,IAAIoQ,OAAA,KAAY,QAAW;UACzB,MAAM,IAAIzG,kBAAA,CAAW,oBAAoBxM,EAAE,GAAG;QAChD;MACF;MAEA,IAAIiT,OAAA,EAAS;QACX;MACF;MAEAuO,eAAA,CAAgBxhB,EAAA,IAAM,MAAMpE,CAAC,IAAIqX,OAAA;IACnC;IAEA,IAAI,CAACA,OAAA,EAAS;MAEZ,MAAMwO,OAAA,GAAUrf,MAAA,CAAOqQ,OAAA,CAAQ+O,eAAe,EAC3CljB,GAAA,CAAI,CAAC,CAAC0B,EAAA,EAAI0hB,KAAK,MAAM,WAAW1hB,EAAE,OAChC0hB,KAAA,KAAU,QAAQ,wCAAwC,gCAC7D;MAEF,IAAI1iB,CAAA,GAAIlD,MAAA,GACL2lB,OAAA,CAAQ3lB,MAAA,GAAS,IAAI,cAAc2lB,OAAA,CAAQnjB,GAAA,CAAI2iB,YAAY,EAAE5jB,IAAA,CAAK,IAAI,IAAI,MAAM4jB,YAAA,CAAaQ,OAAA,CAAQ,CAAC,CAAC,IACxG;MAEF,MAAM,IAAIjV,kBAAA,CACR,0DAA0DxN,CAAA,EAC1D,iBACF;IACF;IAEA,OAAOiU,OAAA;EACT;EACAqO,QAAA,EAAUR;AACZ;;;AC5DA,SAASa,6BAA6BnW,MAAA,EAAQ;EAC5C,IAAIA,MAAA,CAAOsS,WAAA,EAAa;IACtBtS,MAAA,CAAOsS,WAAA,CAAY8D,gBAAA,CAAiB;EACtC;EAEA,IAAIpW,MAAA,CAAOwS,MAAA,IAAUxS,MAAA,CAAOwS,MAAA,CAAO4C,OAAA,EAAS;IAC1C,MAAM,IAAIpI,qBAAA,CAAc,MAAMhN,MAAM;EACtC;AACF;AASe,SAARqW,gBAAiCrW,MAAA,EAAQ;EAC9CmW,4BAAA,CAA6BnW,MAAM;EAEnCA,MAAA,CAAO2H,OAAA,GAAU6E,oBAAA,CAAa7L,IAAA,CAAKX,MAAA,CAAO2H,OAAO;EAGjD3H,MAAA,CAAO3M,IAAA,GAAOoZ,aAAA,CAActV,IAAA,CAC1B6I,MAAA,EACAA,MAAA,CAAO0H,gBACT;EAEA,IAAI,CAAC,QAAQ,OAAO,OAAO,EAAE7W,OAAA,CAAQmP,MAAA,CAAOmJ,MAAM,MAAM,IAAI;IAC1DnJ,MAAA,CAAO2H,OAAA,CAAQM,cAAA,CAAe,qCAAqC,KAAK;EAC1E;EAEA,MAAMR,OAAA,GAAUmO,gBAAA,CAASC,UAAA,CAAW7V,MAAA,CAAOyH,OAAA,IAAW2B,gBAAA,CAAS3B,OAAO;EAEtE,OAAOA,OAAA,CAAQzH,MAAM,EAAEN,IAAA,CAAK,SAAS4W,oBAAoBpW,QAAA,EAAU;IACjEiW,4BAAA,CAA6BnW,MAAM;IAGnCE,QAAA,CAAS7M,IAAA,GAAOoZ,aAAA,CAActV,IAAA,CAC5B6I,MAAA,EACAA,MAAA,CAAOsI,iBAAA,EACPpI,QACF;IAEAA,QAAA,CAASyH,OAAA,GAAU6E,oBAAA,CAAa7L,IAAA,CAAKT,QAAA,CAASyH,OAAO;IAErD,OAAOzH,QAAA;EACT,GAAG,SAASqW,mBAAmBb,MAAA,EAAQ;IACrC,IAAI,CAAC9I,QAAA,CAAS8I,MAAM,GAAG;MACrBS,4BAAA,CAA6BnW,MAAM;MAGnC,IAAI0V,MAAA,IAAUA,MAAA,CAAOxV,QAAA,EAAU;QAC7BwV,MAAA,CAAOxV,QAAA,CAAS7M,IAAA,GAAOoZ,aAAA,CAActV,IAAA,CACnC6I,MAAA,EACAA,MAAA,CAAOsI,iBAAA,EACPoN,MAAA,CAAOxV,QACT;QACAwV,MAAA,CAAOxV,QAAA,CAASyH,OAAA,GAAU6E,oBAAA,CAAa7L,IAAA,CAAK+U,MAAA,CAAOxV,QAAA,CAASyH,OAAO;MACrE;IACF;IAEA,OAAOsK,OAAA,CAAQ9E,MAAA,CAAOuI,MAAM;EAC9B,CAAC;AACH;;;AC3EA,IAAMc,eAAA,GAAmBvf,KAAA,IAAUA,KAAA,YAAiBuV,oBAAA,GAAevV,KAAA,CAAMmJ,MAAA,CAAO,IAAInJ,KAAA;AAWrE,SAARwf,YAA6BC,OAAA,EAASC,OAAA,EAAS;EAEpDA,OAAA,GAAUA,OAAA,IAAW,CAAC;EACtB,MAAM3W,MAAA,GAAS,CAAC;EAEhB,SAAS4W,eAAetX,MAAA,EAAQD,MAAA,EAAQ/E,QAAA,EAAU;IAChD,IAAIsF,aAAA,CAAMrH,aAAA,CAAc+G,MAAM,KAAKM,aAAA,CAAMrH,aAAA,CAAc8G,MAAM,GAAG;MAC9D,OAAOO,aAAA,CAAMvF,KAAA,CAAMlD,IAAA,CAAK;QAACmD;MAAQ,GAAGgF,MAAA,EAAQD,MAAM;IACpD,WAAWO,aAAA,CAAMrH,aAAA,CAAc8G,MAAM,GAAG;MACtC,OAAOO,aAAA,CAAMvF,KAAA,CAAM,CAAC,GAAGgF,MAAM;IAC/B,WAAWO,aAAA,CAAMnI,OAAA,CAAQ4H,MAAM,GAAG;MAChC,OAAOA,MAAA,CAAOjI,KAAA,CAAM;IACtB;IACA,OAAOiI,MAAA;EACT;EAGA,SAASwX,oBAAoB3iB,CAAA,EAAGJ,CAAA,EAAGwG,QAAA,EAAU;IAC3C,IAAI,CAACsF,aAAA,CAAMlI,WAAA,CAAY5D,CAAC,GAAG;MACzB,OAAO8iB,cAAA,CAAe1iB,CAAA,EAAGJ,CAAA,EAAGwG,QAAQ;IACtC,WAAW,CAACsF,aAAA,CAAMlI,WAAA,CAAYxD,CAAC,GAAG;MAChC,OAAO0iB,cAAA,CAAe,QAAW1iB,CAAA,EAAGoG,QAAQ;IAC9C;EACF;EAGA,SAASwc,iBAAiB5iB,CAAA,EAAGJ,CAAA,EAAG;IAC9B,IAAI,CAAC8L,aAAA,CAAMlI,WAAA,CAAY5D,CAAC,GAAG;MACzB,OAAO8iB,cAAA,CAAe,QAAW9iB,CAAC;IACpC;EACF;EAGA,SAASijB,iBAAiB7iB,CAAA,EAAGJ,CAAA,EAAG;IAC9B,IAAI,CAAC8L,aAAA,CAAMlI,WAAA,CAAY5D,CAAC,GAAG;MACzB,OAAO8iB,cAAA,CAAe,QAAW9iB,CAAC;IACpC,WAAW,CAAC8L,aAAA,CAAMlI,WAAA,CAAYxD,CAAC,GAAG;MAChC,OAAO0iB,cAAA,CAAe,QAAW1iB,CAAC;IACpC;EACF;EAGA,SAAS8iB,gBAAgB9iB,CAAA,EAAGJ,CAAA,EAAG0H,IAAA,EAAM;IACnC,IAAIA,IAAA,IAAQmb,OAAA,EAAS;MACnB,OAAOC,cAAA,CAAe1iB,CAAA,EAAGJ,CAAC;IAC5B,WAAW0H,IAAA,IAAQkb,OAAA,EAAS;MAC1B,OAAOE,cAAA,CAAe,QAAW1iB,CAAC;IACpC;EACF;EAEA,MAAM+iB,QAAA,GAAW;IACf7S,GAAA,EAAK0S,gBAAA;IACL3N,MAAA,EAAQ2N,gBAAA;IACRzjB,IAAA,EAAMyjB,gBAAA;IACNtI,OAAA,EAASuI,gBAAA;IACTrP,gBAAA,EAAkBqP,gBAAA;IAClBzO,iBAAA,EAAmByO,gBAAA;IACnB9D,gBAAA,EAAkB8D,gBAAA;IAClBnO,OAAA,EAASmO,gBAAA;IACTG,cAAA,EAAgBH,gBAAA;IAChBnC,eAAA,EAAiBmC,gBAAA;IACjBtP,OAAA,EAASsP,gBAAA;IACTtO,YAAA,EAAcsO,gBAAA;IACdlO,cAAA,EAAgBkO,gBAAA;IAChBjO,cAAA,EAAgBiO,gBAAA;IAChBhC,gBAAA,EAAkBgC,gBAAA;IAClBlC,kBAAA,EAAoBkC,gBAAA;IACpBI,UAAA,EAAYJ,gBAAA;IACZhO,gBAAA,EAAkBgO,gBAAA;IAClB/N,aAAA,EAAe+N,gBAAA;IACfK,cAAA,EAAgBL,gBAAA;IAChBM,SAAA,EAAWN,gBAAA;IACXO,SAAA,EAAWP,gBAAA;IACXQ,UAAA,EAAYR,gBAAA;IACZzE,WAAA,EAAayE,gBAAA;IACbS,UAAA,EAAYT,gBAAA;IACZU,gBAAA,EAAkBV,gBAAA;IAClB9N,cAAA,EAAgB+N,eAAA;IAChBrP,OAAA,EAASA,CAACzT,CAAA,EAAGJ,CAAA,KAAM+iB,mBAAA,CAAoBL,eAAA,CAAgBtiB,CAAC,GAAGsiB,eAAA,CAAgB1iB,CAAC,GAAG,IAAI;EACrF;EAEA8L,aAAA,CAAMpG,OAAA,CAAQ5C,MAAA,CAAO+C,IAAA,CAAK/C,MAAA,CAAOsE,MAAA,CAAO,CAAC,GAAGwb,OAAA,EAASC,OAAO,CAAC,GAAG,SAASe,mBAAmBlc,IAAA,EAAM;IAChG,MAAMmc,MAAA,GAAQV,QAAA,CAASzb,IAAI,KAAKqb,mBAAA;IAChC,MAAMe,WAAA,GAAcD,MAAA,CAAMjB,OAAA,CAAQlb,IAAI,GAAGmb,OAAA,CAAQnb,IAAI,GAAGA,IAAI;IAC3DoE,aAAA,CAAMlI,WAAA,CAAYkgB,WAAW,KAAKD,MAAA,KAAUX,eAAA,KAAqBhX,MAAA,CAAOxE,IAAI,IAAIoc,WAAA;EACnF,CAAC;EAED,OAAO5X,MAAA;AACT;;;ACxGO,IAAM6X,OAAA,GAAU;;;ACKvB,IAAMC,UAAA,GAAa,CAAC;AAGpB,CAAC,UAAU,WAAW,UAAU,YAAY,UAAU,QAAQ,EAAEte,OAAA,CAAQ,CAACjC,IAAA,EAAMnH,CAAA,KAAM;EACnF0nB,UAAA,CAAWvgB,IAAI,IAAI,SAASwgB,UAAU9gB,KAAA,EAAO;IAC3C,OAAO,OAAOA,KAAA,KAAUM,IAAA,IAAQ,OAAOnH,CAAA,GAAI,IAAI,OAAO,OAAOmH,IAAA;EAC/D;AACF,CAAC;AAED,IAAMygB,kBAAA,GAAqB,CAAC;AAW5BF,UAAA,CAAWtQ,YAAA,GAAe,SAASA,aAAauQ,SAAA,EAAWE,OAAA,EAASlY,OAAA,EAAS;EAC3E,SAASmY,eAAcC,GAAA,EAAKC,IAAA,EAAM;IAChC,OAAO,aAAaP,OAAA,GAAU,4BAA6BM,GAAA,GAAM,MAAOC,IAAA,IAAQrY,OAAA,GAAU,OAAOA,OAAA,GAAU;EAC7G;EAGA,OAAO,CAAC9E,KAAA,EAAOkd,GAAA,EAAKE,IAAA,KAAS;IAC3B,IAAIN,SAAA,KAAc,OAAO;MACvB,MAAM,IAAI/W,kBAAA,CACRkX,cAAA,CAAcC,GAAA,EAAK,uBAAuBF,OAAA,GAAU,SAASA,OAAA,GAAU,GAAG,GAC1EjX,kBAAA,CAAWsX,cACb;IACF;IAEA,IAAIL,OAAA,IAAW,CAACD,kBAAA,CAAmBG,GAAG,GAAG;MACvCH,kBAAA,CAAmBG,GAAG,IAAI;MAE1BI,OAAA,CAAQC,IAAA,CACNN,cAAA,CACEC,GAAA,EACA,iCAAiCF,OAAA,GAAU,yCAC7C,CACF;IACF;IAEA,OAAOF,SAAA,GAAYA,SAAA,CAAU9c,KAAA,EAAOkd,GAAA,EAAKE,IAAI,IAAI;EACnD;AACF;AAYA,SAASI,cAAc9iB,OAAA,EAAS+iB,MAAA,EAAQC,YAAA,EAAc;EACpD,IAAI,OAAOhjB,OAAA,KAAY,UAAU;IAC/B,MAAM,IAAIqL,kBAAA,CAAW,6BAA6BA,kBAAA,CAAW4X,oBAAoB;EACnF;EACA,MAAMjf,IAAA,GAAO/C,MAAA,CAAO+C,IAAA,CAAKhE,OAAO;EAChC,IAAIvF,CAAA,GAAIuJ,IAAA,CAAKrJ,MAAA;EACb,OAAOF,CAAA,KAAM,GAAG;IACd,MAAM+nB,GAAA,GAAMxe,IAAA,CAAKvJ,CAAC;IAClB,MAAM2nB,SAAA,GAAYW,MAAA,CAAOP,GAAG;IAC5B,IAAIJ,SAAA,EAAW;MACb,MAAM9c,KAAA,GAAQtF,OAAA,CAAQwiB,GAAG;MACzB,MAAM5iB,MAAA,GAAS0F,KAAA,KAAU,UAAa8c,SAAA,CAAU9c,KAAA,EAAOkd,GAAA,EAAKxiB,OAAO;MACnE,IAAIJ,MAAA,KAAW,MAAM;QACnB,MAAM,IAAIyL,kBAAA,CAAW,YAAYmX,GAAA,GAAM,cAAc5iB,MAAA,EAAQyL,kBAAA,CAAW4X,oBAAoB;MAC9F;MACA;IACF;IACA,IAAID,YAAA,KAAiB,MAAM;MACzB,MAAM,IAAI3X,kBAAA,CAAW,oBAAoBmX,GAAA,EAAKnX,kBAAA,CAAW6X,cAAc;IACzE;EACF;AACF;AAEA,IAAOC,iBAAA,GAAQ;EACbL,aAAA;EACAX;AACF;;;AC/EA,IAAMiB,WAAA,GAAaD,iBAAA,CAAUhB,UAAA;AAS7B,IAAMkB,KAAA,GAAN,MAAY;EACV1kB,YAAY2kB,cAAA,EAAgB;IAC1B,KAAK1R,QAAA,GAAW0R,cAAA;IAChB,KAAKC,YAAA,GAAe;MAClBjZ,OAAA,EAAS,IAAImF,0BAAA,CAAmB;MAChClF,QAAA,EAAU,IAAIkF,0BAAA,CAAmB;IACnC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAnF,QAAQkZ,WAAA,EAAanZ,MAAA,EAAQ;IAG3B,IAAI,OAAOmZ,WAAA,KAAgB,UAAU;MACnCnZ,MAAA,GAASA,MAAA,IAAU,CAAC;MACpBA,MAAA,CAAOoE,GAAA,GAAM+U,WAAA;IACf,OAAO;MACLnZ,MAAA,GAASmZ,WAAA,IAAe,CAAC;IAC3B;IAEAnZ,MAAA,GAASyW,WAAA,CAAY,KAAKlP,QAAA,EAAUvH,MAAM;IAE1C,MAAM;MAACwH,YAAA,EAAAe,aAAA;MAAc0K,gBAAA;MAAkBtL;IAAO,IAAI3H,MAAA;IAElD,IAAIuI,aAAA,KAAiB,QAAW;MAC9BuQ,iBAAA,CAAUL,aAAA,CAAclQ,aAAA,EAAc;QACpCjD,iBAAA,EAAmByT,WAAA,CAAWvR,YAAA,CAAauR,WAAA,CAAWK,OAAO;QAC7D7T,iBAAA,EAAmBwT,WAAA,CAAWvR,YAAA,CAAauR,WAAA,CAAWK,OAAO;QAC7D5T,mBAAA,EAAqBuT,WAAA,CAAWvR,YAAA,CAAauR,WAAA,CAAWK,OAAO;MACjE,GAAG,KAAK;IACV;IAEA,IAAInG,gBAAA,IAAoB,MAAM;MAC5B,IAAIrT,aAAA,CAAM/H,UAAA,CAAWob,gBAAgB,GAAG;QACtCjT,MAAA,CAAOiT,gBAAA,GAAmB;UACxB3O,SAAA,EAAW2O;QACb;MACF,OAAO;QACL6F,iBAAA,CAAUL,aAAA,CAAcxF,gBAAA,EAAkB;UACxC3P,MAAA,EAAQyV,WAAA,CAAWM,QAAA;UACnB/U,SAAA,EAAWyU,WAAA,CAAWM;QACxB,GAAG,IAAI;MACT;IACF;IAGArZ,MAAA,CAAOmJ,MAAA,IAAUnJ,MAAA,CAAOmJ,MAAA,IAAU,KAAK5B,QAAA,CAAS4B,MAAA,IAAU,OAAO9R,WAAA,CAAY;IAG7E,IAAIiiB,cAAA,GAAiB3R,OAAA,IAAW/H,aAAA,CAAMvF,KAAA,CACpCsN,OAAA,CAAQuB,MAAA,EACRvB,OAAA,CAAQ3H,MAAA,CAAOmJ,MAAM,CACvB;IAEAxB,OAAA,IAAW/H,aAAA,CAAMpG,OAAA,CACf,CAAC,UAAU,OAAO,QAAQ,QAAQ,OAAO,SAAS,QAAQ,GACzD2P,MAAA,IAAW;MACV,OAAOxB,OAAA,CAAQwB,MAAM;IACvB,CACF;IAEAnJ,MAAA,CAAO2H,OAAA,GAAU6E,oBAAA,CAAajL,MAAA,CAAO+X,cAAA,EAAgB3R,OAAO;IAG5D,MAAM4R,uBAAA,GAA0B,EAAC;IACjC,IAAIC,8BAAA,GAAiC;IACrC,KAAKN,YAAA,CAAajZ,OAAA,CAAQzG,OAAA,CAAQ,SAASigB,2BAA2BC,WAAA,EAAa;MACjF,IAAI,OAAOA,WAAA,CAAY3U,OAAA,KAAY,cAAc2U,WAAA,CAAY3U,OAAA,CAAQ/E,MAAM,MAAM,OAAO;QACtF;MACF;MAEAwZ,8BAAA,GAAiCA,8BAAA,IAAkCE,WAAA,CAAY5U,WAAA;MAE/EyU,uBAAA,CAAwBI,OAAA,CAAQD,WAAA,CAAY9U,SAAA,EAAW8U,WAAA,CAAY7U,QAAQ;IAC7E,CAAC;IAED,MAAM+U,wBAAA,GAA2B,EAAC;IAClC,KAAKV,YAAA,CAAahZ,QAAA,CAAS1G,OAAA,CAAQ,SAASqgB,yBAAyBH,WAAA,EAAa;MAChFE,wBAAA,CAAyBhoB,IAAA,CAAK8nB,WAAA,CAAY9U,SAAA,EAAW8U,WAAA,CAAY7U,QAAQ;IAC3E,CAAC;IAED,IAAIiV,OAAA;IACJ,IAAI1pB,CAAA,GAAI;IACR,IAAIC,GAAA;IAEJ,IAAI,CAACmpB,8BAAA,EAAgC;MACnC,MAAMO,KAAA,GAAQ,CAAC1D,eAAA,CAAgBhgB,IAAA,CAAK,IAAI,GAAG,MAAS;MACpD0jB,KAAA,CAAMJ,OAAA,CAAQljB,KAAA,CAAMsjB,KAAA,EAAOR,uBAAuB;MAClDQ,KAAA,CAAMnoB,IAAA,CAAK6E,KAAA,CAAMsjB,KAAA,EAAOH,wBAAwB;MAChDvpB,GAAA,GAAM0pB,KAAA,CAAMzpB,MAAA;MAEZwpB,OAAA,GAAU7H,OAAA,CAAQ/E,OAAA,CAAQlN,MAAM;MAEhC,OAAO5P,CAAA,GAAIC,GAAA,EAAK;QACdypB,OAAA,GAAUA,OAAA,CAAQpa,IAAA,CAAKqa,KAAA,CAAM3pB,CAAA,EAAG,GAAG2pB,KAAA,CAAM3pB,CAAA,EAAG,CAAC;MAC/C;MAEA,OAAO0pB,OAAA;IACT;IAEAzpB,GAAA,GAAMkpB,uBAAA,CAAwBjpB,MAAA;IAE9B,IAAI0pB,SAAA,GAAYha,MAAA;IAEhB5P,CAAA,GAAI;IAEJ,OAAOA,CAAA,GAAIC,GAAA,EAAK;MACd,MAAM4pB,WAAA,GAAcV,uBAAA,CAAwBnpB,CAAA,EAAG;MAC/C,MAAM8pB,UAAA,GAAaX,uBAAA,CAAwBnpB,CAAA,EAAG;MAC9C,IAAI;QACF4pB,SAAA,GAAYC,WAAA,CAAYD,SAAS;MACnC,SAASpZ,KAAA,EAAO;QACdsZ,UAAA,CAAW/iB,IAAA,CAAK,MAAMyJ,KAAK;QAC3B;MACF;IACF;IAEA,IAAI;MACFkZ,OAAA,GAAUzD,eAAA,CAAgBlf,IAAA,CAAK,MAAM6iB,SAAS;IAChD,SAASpZ,KAAA,EAAO;MACd,OAAOqR,OAAA,CAAQ9E,MAAA,CAAOvM,KAAK;IAC7B;IAEAxQ,CAAA,GAAI;IACJC,GAAA,GAAMupB,wBAAA,CAAyBtpB,MAAA;IAE/B,OAAOF,CAAA,GAAIC,GAAA,EAAK;MACdypB,OAAA,GAAUA,OAAA,CAAQpa,IAAA,CAAKka,wBAAA,CAAyBxpB,CAAA,EAAG,GAAGwpB,wBAAA,CAAyBxpB,CAAA,EAAG,CAAC;IACrF;IAEA,OAAO0pB,OAAA;EACT;EAEAK,OAAOna,MAAA,EAAQ;IACbA,MAAA,GAASyW,WAAA,CAAY,KAAKlP,QAAA,EAAUvH,MAAM;IAC1C,MAAM+S,QAAA,GAAWrE,aAAA,CAAc1O,MAAA,CAAOwO,OAAA,EAASxO,MAAA,CAAOoE,GAAG;IACzD,OAAOD,QAAA,CAAS4O,QAAA,EAAU/S,MAAA,CAAO2D,MAAA,EAAQ3D,MAAA,CAAOiT,gBAAgB;EAClE;AACF;AAGArT,aAAA,CAAMpG,OAAA,CAAQ,CAAC,UAAU,OAAO,QAAQ,SAAS,GAAG,SAAS4gB,oBAAoBjR,MAAA,EAAQ;EAEvF6P,KAAA,CAAMniB,SAAA,CAAUsS,MAAM,IAAI,UAAS/E,GAAA,EAAKpE,MAAA,EAAQ;IAC9C,OAAO,KAAKC,OAAA,CAAQwW,WAAA,CAAYzW,MAAA,IAAU,CAAC,GAAG;MAC5CmJ,MAAA;MACA/E,GAAA;MACA/Q,IAAA,GAAO2M,MAAA,IAAU,CAAC,GAAG3M;IACvB,CAAC,CAAC;EACJ;AACF,CAAC;AAEDuM,aAAA,CAAMpG,OAAA,CAAQ,CAAC,QAAQ,OAAO,OAAO,GAAG,SAAS6gB,sBAAsBlR,MAAA,EAAQ;EAG7E,SAASmR,mBAAmBC,MAAA,EAAQ;IAClC,OAAO,SAASC,WAAWpW,GAAA,EAAK/Q,IAAA,EAAM2M,MAAA,EAAQ;MAC5C,OAAO,KAAKC,OAAA,CAAQwW,WAAA,CAAYzW,MAAA,IAAU,CAAC,GAAG;QAC5CmJ,MAAA;QACAxB,OAAA,EAAS4S,MAAA,GAAS;UAChB,gBAAgB;QAClB,IAAI,CAAC;QACLnW,GAAA;QACA/Q;MACF,CAAC,CAAC;IACJ;EACF;EAEA2lB,KAAA,CAAMniB,SAAA,CAAUsS,MAAM,IAAImR,kBAAA,CAAmB;EAE7CtB,KAAA,CAAMniB,SAAA,CAAUsS,MAAA,GAAS,MAAM,IAAImR,kBAAA,CAAmB,IAAI;AAC5D,CAAC;AAED,IAAOG,aAAA,GAAQzB,KAAA;;;AC7Lf,IAAM0B,WAAA,GAAN,MAAMC,YAAA,CAAY;EAChBrmB,YAAYsmB,QAAA,EAAU;IACpB,IAAI,OAAOA,QAAA,KAAa,YAAY;MAClC,MAAM,IAAI3Y,SAAA,CAAU,8BAA8B;IACpD;IAEA,IAAI4Y,cAAA;IAEJ,KAAKf,OAAA,GAAU,IAAI7H,OAAA,CAAQ,SAAS6I,gBAAgB5N,OAAA,EAAS;MAC3D2N,cAAA,GAAiB3N,OAAA;IACnB,CAAC;IAED,MAAMzL,KAAA,GAAQ;IAGd,KAAKqY,OAAA,CAAQpa,IAAA,CAAKuV,MAAA,IAAU;MAC1B,IAAI,CAACxT,KAAA,CAAMsZ,UAAA,EAAY;MAEvB,IAAI3qB,CAAA,GAAIqR,KAAA,CAAMsZ,UAAA,CAAWzqB,MAAA;MAEzB,OAAOF,CAAA,KAAM,GAAG;QACdqR,KAAA,CAAMsZ,UAAA,CAAW3qB,CAAC,EAAE6kB,MAAM;MAC5B;MACAxT,KAAA,CAAMsZ,UAAA,GAAa;IACrB,CAAC;IAGD,KAAKjB,OAAA,CAAQpa,IAAA,GAAOsb,WAAA,IAAe;MACjC,IAAIxH,QAAA;MAEJ,MAAMsG,OAAA,GAAU,IAAI7H,OAAA,CAAQ/E,OAAA,IAAW;QACrCzL,KAAA,CAAM0T,SAAA,CAAUjI,OAAO;QACvBsG,QAAA,GAAWtG,OAAA;MACb,CAAC,EAAExN,IAAA,CAAKsb,WAAW;MAEnBlB,OAAA,CAAQ7E,MAAA,GAAS,SAAS9H,OAAA,EAAS;QACjC1L,KAAA,CAAM8Q,WAAA,CAAYiB,QAAQ;MAC5B;MAEA,OAAOsG,OAAA;IACT;IAEAc,QAAA,CAAS,SAAS3F,OAAOlV,OAAA,EAASC,MAAA,EAAQC,OAAA,EAAS;MACjD,IAAIwB,KAAA,CAAMiU,MAAA,EAAQ;QAEhB;MACF;MAEAjU,KAAA,CAAMiU,MAAA,GAAS,IAAI1I,qBAAA,CAAcjN,OAAA,EAASC,MAAA,EAAQC,OAAO;MACzD4a,cAAA,CAAepZ,KAAA,CAAMiU,MAAM;IAC7B,CAAC;EACH;EAAA;AAAA;AAAA;EAKAU,iBAAA,EAAmB;IACjB,IAAI,KAAKV,MAAA,EAAQ;MACf,MAAM,KAAKA,MAAA;IACb;EACF;EAAA;AAAA;AAAA;EAMAP,UAAUlE,QAAA,EAAU;IAClB,IAAI,KAAKyE,MAAA,EAAQ;MACfzE,QAAA,CAAS,KAAKyE,MAAM;MACpB;IACF;IAEA,IAAI,KAAKqF,UAAA,EAAY;MACnB,KAAKA,UAAA,CAAWnpB,IAAA,CAAKqf,QAAQ;IAC/B,OAAO;MACL,KAAK8J,UAAA,GAAa,CAAC9J,QAAQ;IAC7B;EACF;EAAA;AAAA;AAAA;EAMAsB,YAAYtB,QAAA,EAAU;IACpB,IAAI,CAAC,KAAK8J,UAAA,EAAY;MACpB;IACF;IACA,MAAM9X,KAAA,GAAQ,KAAK8X,UAAA,CAAWlqB,OAAA,CAAQogB,QAAQ;IAC9C,IAAIhO,KAAA,KAAU,IAAI;MAChB,KAAK8X,UAAA,CAAWE,MAAA,CAAOhY,KAAA,EAAO,CAAC;IACjC;EACF;EAAA;AAAA;AAAA;AAAA;EAMA,OAAO5D,OAAA,EAAS;IACd,IAAI4V,MAAA;IACJ,MAAMxT,KAAA,GAAQ,IAAIkZ,YAAA,CAAY,SAASC,SAAS7mB,CAAA,EAAG;MACjDkhB,MAAA,GAASlhB,CAAA;IACX,CAAC;IACD,OAAO;MACL0N,KAAA;MACAwT;IACF;EACF;AACF;AAEA,IAAOiG,mBAAA,GAAQR,WAAA;;;ACjGA,SAARS,OAAwBtoB,QAAA,EAAU;EACvC,OAAO,SAAS2D,KAAKtF,GAAA,EAAK;IACxB,OAAO2B,QAAA,CAAS4D,KAAA,CAAM,MAAMvF,GAAG;EACjC;AACF;;;AChBe,SAARkqB,aAA8BC,OAAA,EAAS;EAC5C,OAAOzb,aAAA,CAAMvH,QAAA,CAASgjB,OAAO,KAAMA,OAAA,CAAQD,YAAA,KAAiB;AAC9D;;;ACbA,IAAME,cAAA,GAAiB;EACrBC,QAAA,EAAU;EACVC,kBAAA,EAAoB;EACpBC,UAAA,EAAY;EACZC,UAAA,EAAY;EACZC,EAAA,EAAI;EACJC,OAAA,EAAS;EACTC,QAAA,EAAU;EACVC,2BAAA,EAA6B;EAC7BC,SAAA,EAAW;EACXC,YAAA,EAAc;EACdC,cAAA,EAAgB;EAChBC,WAAA,EAAa;EACbC,eAAA,EAAiB;EACjBC,MAAA,EAAQ;EACRC,eAAA,EAAiB;EACjBC,gBAAA,EAAkB;EAClBC,KAAA,EAAO;EACPC,QAAA,EAAU;EACVC,WAAA,EAAa;EACbC,QAAA,EAAU;EACVC,MAAA,EAAQ;EACRC,iBAAA,EAAmB;EACnBC,iBAAA,EAAmB;EACnBC,UAAA,EAAY;EACZC,YAAA,EAAc;EACdC,eAAA,EAAiB;EACjBC,SAAA,EAAW;EACXC,QAAA,EAAU;EACVC,gBAAA,EAAkB;EAClBC,aAAA,EAAe;EACfC,2BAAA,EAA6B;EAC7BC,cAAA,EAAgB;EAChBC,QAAA,EAAU;EACVC,IAAA,EAAM;EACNC,cAAA,EAAgB;EAChBC,kBAAA,EAAoB;EACpBC,eAAA,EAAiB;EACjBC,UAAA,EAAY;EACZC,oBAAA,EAAsB;EACtBC,mBAAA,EAAqB;EACrBC,iBAAA,EAAmB;EACnBC,SAAA,EAAW;EACXC,kBAAA,EAAoB;EACpBC,mBAAA,EAAqB;EACrBC,MAAA,EAAQ;EACRC,gBAAA,EAAkB;EAClBC,QAAA,EAAU;EACVC,eAAA,EAAiB;EACjBC,oBAAA,EAAsB;EACtBC,eAAA,EAAiB;EACjBC,2BAAA,EAA6B;EAC7BC,0BAAA,EAA4B;EAC5BC,mBAAA,EAAqB;EACrBC,cAAA,EAAgB;EAChBC,UAAA,EAAY;EACZC,kBAAA,EAAoB;EACpBC,cAAA,EAAgB;EAChBC,uBAAA,EAAyB;EACzBC,qBAAA,EAAuB;EACvBC,mBAAA,EAAqB;EACrBC,YAAA,EAAc;EACdC,WAAA,EAAa;EACbC,6BAAA,EAA+B;AACjC;AAEAzoB,MAAA,CAAOqQ,OAAA,CAAQqU,cAAc,EAAE9hB,OAAA,CAAQ,CAAC,CAACK,GAAA,EAAKoB,KAAK,MAAM;EACvDqgB,cAAA,CAAergB,KAAK,IAAIpB,GAAA;AAC1B,CAAC;AAED,IAAOylB,sBAAA,GAAQhE,cAAA;;;AC3Cf,SAASiE,eAAeC,aAAA,EAAe;EACrC,MAAMplB,OAAA,GAAU,IAAIqgB,aAAA,CAAM+E,aAAa;EACvC,MAAMC,QAAA,GAAWppB,IAAA,CAAKokB,aAAA,CAAM5jB,SAAA,CAAUoJ,OAAA,EAAS7F,OAAO;EAGtDwF,aAAA,CAAMnF,MAAA,CAAOglB,QAAA,EAAUhF,aAAA,CAAM5jB,SAAA,EAAWuD,OAAA,EAAS;IAACV,UAAA,EAAY;EAAI,CAAC;EAGnEkG,aAAA,CAAMnF,MAAA,CAAOglB,QAAA,EAAUrlB,OAAA,EAAS,MAAM;IAACV,UAAA,EAAY;EAAI,CAAC;EAGxD+lB,QAAA,CAAShrB,MAAA,GAAS,SAASA,OAAOwkB,cAAA,EAAgB;IAChD,OAAOsG,cAAA,CAAe9I,WAAA,CAAY+I,aAAA,EAAevG,cAAc,CAAC;EAClE;EAEA,OAAOwG,QAAA;AACT;AAGA,IAAMC,KAAA,GAAQH,cAAA,CAAenW,gBAAQ;AAGrCsW,KAAA,CAAM1G,KAAA,GAAQyB,aAAA;AAGdiF,KAAA,CAAM5S,aAAA,GAAgBE,qBAAA;AACtB0S,KAAA,CAAMhF,WAAA,GAAcQ,mBAAA;AACpBwE,KAAA,CAAM9S,QAAA,GAAWA,QAAA;AACjB8S,KAAA,CAAM7H,OAAA,GAAUA,OAAA;AAChB6H,KAAA,CAAM3d,UAAA,GAAasB,kBAAA;AAGnBqc,KAAA,CAAM5f,UAAA,GAAakB,kBAAA;AAGnB0e,KAAA,CAAMC,MAAA,GAASD,KAAA,CAAM5S,aAAA;AAGrB4S,KAAA,CAAME,GAAA,GAAM,SAASA,IAAIC,QAAA,EAAU;EACjC,OAAO5N,OAAA,CAAQ2N,GAAA,CAAIC,QAAQ;AAC7B;AAEAH,KAAA,CAAMvE,MAAA,GAASA,MAAA;AAGfuE,KAAA,CAAMtE,YAAA,GAAeA,YAAA;AAGrBsE,KAAA,CAAMjJ,WAAA,GAAcA,WAAA;AAEpBiJ,KAAA,CAAM7U,YAAA,GAAe2B,oBAAA;AAErBkT,KAAA,CAAMI,UAAA,GAAa7oB,KAAA,IAASiQ,sBAAA,CAAetH,aAAA,CAAMlD,UAAA,CAAWzF,KAAK,IAAI,IAAI3E,QAAA,CAAS2E,KAAK,IAAIA,KAAK;AAEhGyoB,KAAA,CAAM7J,UAAA,GAAaD,gBAAA,CAASC,UAAA;AAE5B6J,KAAA,CAAMpE,cAAA,GAAiBgE,sBAAA;AAEvBI,KAAA,CAAMK,OAAA,GAAUL,KAAA;AAGhB,IAAOM,aAAA,GAAQN,KAAA;;;ACnFf,IAAM;EACJ1G,KAAA,EAAAiH,MAAA;EACAngB,UAAA,EAAAogB,WAAA;EACApT,aAAA,EAAAqT,cAAA;EACAvT,QAAA,EAAAwT,SAAA;EACA1F,WAAA,EAAA2F,YAAA;EACAxI,OAAA,EAAAyI,QAAA;EACAV,GAAA,EAAAW,IAAA;EACAZ,MAAA;EACAvE,YAAA,EAAAoF,aAAA;EACArF,MAAA,EAAAsF,OAAA;EACA1e,UAAA,EAAA2e,WAAA;EACA7V,YAAA,EAAA8V,aAAA;EACArF,cAAA,EAAAsF,eAAA;EACAd,UAAA;EACAjK,UAAA;EACAY,WAAA,EAAAoK;AACF,IAAIb,aAAA;;;ACjBJ,IAAAc,YAAA,GAAkBruB,OAAA,CAAAsuB,aAAA;;;ACLlB,IAAAC,gBAAA,GAAqBvuB,OAAA,CAAAP,eAAA;;;ACAd,IAAM+uB,6CAAA,GAAgD;AACtD,IAAMC,4CAAA,GAA+C;AACrD,IAAMC,8BAAA,GAAiC;EAAEC,OAAA,EAAS;EAAOC,OAAA,EAAS;AAAM;AACxE,IAAMC,+BAAA,GAAkC,MAAM,OAAO;AACrD,IAAMC,iCAAA,GAAoC;AAC1C,IAAMC,yCAAA,GAA4C;AAClD,IAAMC,+BAAA,GAAkC;EAAA;EAE7CC,UAAA,EAAY;EACZC,UAAA,EAAY;EACZC,SAAA,EAAW;EACXC,UAAA,EAAY;EACZC,OAAA,EAAS;EAAA;EAETC,eAAA,EAAiB;EACjBC,cAAA,EAAgB;EAAA;EAEhBC,gBAAA,EAAkB;EAClBC,aAAA,EAAe;EACfC,eAAA,EAAiB;EACjBC,WAAA,EAAa;EAAA;EAEbC,IAAA,EAAM;EACN9qB,IAAA,EAAM;EACN+qB,IAAA,EAAM;EACNC,MAAA,EAAQ;EACRC,IAAA,EAAM;AACR;AACO,IAAMC,oBAAA,GAAuB;EAAE7hB,KAAA,EAAO;AAAK;AAC3C,IAAM8hB,kCAAA,GAAqC;AAC3C,IAAMC,yCAAA,GAA4C;;;ADMlD,SAASC,wBAA2B9I,OAAA,EAAqB3kB,IAAA,EAAc;EAC5E2kB,OAAA,CAAQpa,IAAA,CAAK,EAAEC,KAAA,CAAOiB,KAAA,IAAU;IAC9B2X,OAAA,CAAQC,IAAA,CAAK,gBAAgBrjB,IAAI,sBAAsByL,KAAK;EAC9D,CAAC;AACH;AAEO,IAAMiiB,KAAA,GAAShmB,CAAA,IAA6B,IAAIoV,OAAA,CAAS9d,CAAA,IAAM4f,UAAA,CAAW5f,CAAA,EAAG0I,CAAC,CAAC;AAE/E,SAASimB,YAAW7nB,KAAA,EAA0D;EACnF,OACE,OAAOA,KAAA,KAAU,cACjBA,KAAA,YAAiB8nB,QAAA,IACjBnsB,MAAA,CAAOC,SAAA,CAAUF,QAAA,CAASQ,IAAA,CAAK8D,KAAK,MAAM;AAE9C;AAEO,IAAM+nB,SAAA,GAAY;EACvBC,aAAA,EAAe;EACfC,iBAAA,EAAmB;AACrB;AAEA,SAASC,iBAAiB1pB,GAAA,EAAwC;EAChE,OACEA,GAAA,KAAQ,QACR,OAAOA,GAAA,KAAQ,aACbA,GAAA,CAA0B2pB,QAAA,IAC1B,OAAQ3pB,GAAA,CAA0B4pB,KAAA,KAAU;AAElD;AAEA,SAASC,UAAS7pB,GAAA,EAA6B;EAC7C,OACEA,GAAA,IAAO,QACNA,GAAA,CAAenF,WAAA,IAAe;EAAA;EAE/B,OAAOmF,GAAA,CAAInF,WAAA,CAAYqD,QAAA,KAAa;EAAA;EAEpC8B,GAAA,CAAInF,WAAA,CAAYqD,QAAA,CAAS8B,GAAG;AAEhC;AAEA,SAAS8pB,aAAaC,GAAA,EAA2B;EAC/C,OAAO,OAAOjxB,MAAA,KAAW,eAAe,UAAUA,MAAA,IAAUixB,GAAA,YAAeC,IAAA;AAC7E;AAEO,SAASC,UACdlB,IAAA,EACyB;EACzB,OAAQA,IAAA,EAA0BmB,kBAAA,KAAuB;AAC3D;AAEA,SAASC,aAAaJ,GAAA,EAA2B;EAC/C,OAAO,OAAOjxB,MAAA,KAAW,eAAe,UAAUA,MAAA,IAAUixB,GAAA,YAAe/gB,IAAA;AAC7E;AAEO,SAASohB,sBAAsBC,QAAA,EAAkB;EACtD,MAAMC,qBAAA,GAEF;IACFC,aAAA,EAAe;IACfC,OAAA,EAAS;IACTC,KAAA,EAAO;IACPP,kBAAA,EAAoB;IACpBQ,eAAA,EAAiB;IACjBC,YAAA,EAAc;IACdC,cAAA,EAAgB;IAChBC,SAAA,EAAW;IACXC,gBAAA,EAAkB;IAClBC,KAAA,EAAO;IACPC,gBAAA,EAAkB;EACpB;EAEA,OAAOV,qBAAA,CAAsBD,QAA6B;AAC5D;AAEO,SAASY,kBACdlB,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA;EACA,MAAMvU,IAAA,GAAO,IAAI2tB,gBAAA,CAAAjB,OAAA,CAAS;EAE1B,IAAIoD,gBAAA,CAAiBK,GAAG,KAAKF,SAAA,CAASE,GAAG,KAAKD,YAAA,CAAaC,GAAG,KAAKI,YAAA,CAAaJ,GAAG,GAAG;IACpF,IAAIruB,IAAA,EAAM9B,IAAA,CAAK+F,MAAA,CAAO,QAAQoqB,GAAA,EAAKruB,IAAI,OAClC9B,IAAA,CAAK+F,MAAA,CAAO,QAAQoqB,GAAG;EAC9B,OAAO;IACLnwB,IAAA,CAAK+F,MAAA,CAAO,QAAQ;MAClBoqB,GAAA;MACAruB,IAAA,EAAMA,IAAA,IAASquB,GAAA,CAAetlB,KAAA,CAAM,GAAG,EAAEymB,OAAA,CAAQ,EAAE,CAAC;MACpD/c,WAAA,EAAaA,WAAA,IAAe;MAC5BrQ,IAAA,EAAMqQ,WAAA,IAAe;IACvB,CAAC;EACH;EAEA,OAAOvU,IAAA;AACT;AACO,SAASuxB,mBACdC,IAAA,EACA;EACA,MAAMC,UAAA,GAA4D,EAAC;EACnE,MAAMC,OAAA,GAAU70B,KAAA,CAAMuH,OAAA,CAAQotB,IAAI,IAAIA,IAAA,GAAO,CAACA,IAAI;EAClD,WAAWG,IAAA,IAAQD,OAAA,EAAS;IAC1B,MAAM9d,OAAA,GAAUrQ,MAAA,CAAOqQ,OAAA,CAAQ+d,IAAI;IACnC,IAAI/d,OAAA,CAAQ3W,MAAA,GAAS,GAAG;MACtBioB,OAAA,CAAQC,IAAA,CACN,gHACF;IACF;IACA,WAAW,CAACyM,KAAA,EAAOC,SAAS,KAAKje,OAAA,EAAS;MACxC6d,UAAA,CAAWlzB,IAAA,CAAK;QAAEqzB,KAAA;QAAOC;MAAU,CAAC;IACtC;EACF;EACA,OAAOJ,UAAA;AACT;AAOO,SAASK,cAAcC,gBAAA,EAA0B;EAEtD,MAAMC,GAAA,GAAMtmB,IAAA,CAAKqR,GAAA,CAAI,MAAMgV,gBAAA,GAAmB,KAAM,IAAK;EACzD,MAAMhV,GAAA,GAAMrR,IAAA,CAAKqR,GAAA,CAAIrR,IAAA,CAAKsmB,GAAA,CAAI,MAAMD,gBAAA,GAAmB,KAAK,GAAI,GAAG,IAAK;EACxE,OAAOrmB,IAAA,CAAKuO,KAAA,CAAMvO,IAAA,CAAKC,MAAA,CAAO,KAAKqmB,GAAA,GAAMjV,GAAA,IAAOA,GAAG;AACrD;AAEO,SAASkV,SAAA,EAAW;EACzB,OAAOC,cAAA,CAAe;AACxB;AAEA,SAASC,IAAInV,KAAA,EAA2B;EACtC,IAAI7c,CAAA,GAAI;EACR,SAASpD,CAAA,GAAI,GAAGA,CAAA,GAAIigB,KAAA,CAAM/f,MAAA,EAAQF,CAAA,IAAK;IACrCoD,CAAA,IAAK6c,KAAA,CAAMjgB,CAAC,EAAEuG,QAAA,CAAS,EAAE,EAAE8uB,QAAA,CAAS,GAAG,GAAG;EAC5C;EACA,OAAOjyB,CAAA;AACT;AAGO,SAAS+xB,eAAA,EAAiB;EAC/B,MAAMlV,KAAA,GAAQqV,cAAA,CAAe,EAAE;EAC/BrV,KAAA,CAAM,CAAC,IAAKA,KAAA,CAAM,CAAC,IAAI,KAAQ;EAC/BA,KAAA,CAAM,CAAC,IAAKA,KAAA,CAAM,CAAC,IAAI,MAAQ;EAE/B,OACEmV,GAAA,CAAInV,KAAA,CAAMsV,QAAA,CAAS,GAAG,CAAC,CAAC,IACxB,MACAH,GAAA,CAAInV,KAAA,CAAMsV,QAAA,CAAS,GAAG,CAAC,CAAC,IACxB,MACAH,GAAA,CAAInV,KAAA,CAAMsV,QAAA,CAAS,GAAG,CAAC,CAAC,IACxB,MACAH,GAAA,CAAInV,KAAA,CAAMsV,QAAA,CAAS,GAAG,EAAE,CAAC,IACzB,MACAH,GAAA,CAAInV,KAAA,CAAMsV,QAAA,CAAS,IAAI,EAAE,CAAC;AAE9B;AAEA,SAASC,8BAA8BvV,KAAA,EAAyB;EAC9D,MAAMgV,GAAA,GAAMtmB,IAAA,CAAK8mB,GAAA,CAAI,GAAI,IAAIxV,KAAA,CAAM3gB,UAAA,GAAc2gB,KAAA,CAAM/f,MAAM;EAC7D,SAASF,CAAA,GAAI,GAAGA,CAAA,GAAIigB,KAAA,CAAM/f,MAAA,EAAQF,CAAA,IAAK;IACrCigB,KAAA,CAAMjgB,CAAC,IAAI2O,IAAA,CAAKC,MAAA,CAAO,IAAIqmB,GAAA;EAC7B;AACF;AAGA,IAAMS,eAAA,IAAmB,MAAM;EAC7B,IAAI,OAAOC,MAAA,KAAW,eAAe,OAAOA,MAAA,EAAQD,eAAA,KAAoB,aAAa;IACnF,OAAOC,MAAA,CAAOD,eAAA,CAAgBzvB,IAAA,CAAK0vB,MAAM;EAC3C,WAAW,OAAOC,QAAA,KAAa,aAAa;IAC1C,OAAOA,QAAA,CAASF,eAAA,CAAgBzvB,IAAA,CAAK2vB,QAAQ;EAC/C,OAAO;IACL,OAAOJ,6BAAA;EACT;AACF,GAAG;AAEH,SAASF,eAAep1B,MAAA,EAA4B;EAClD,MAAM+f,KAAA,GAAQ,IAAIpgB,UAAA,CAAWK,MAAM;EACnCw1B,eAAA,CAAgBzV,KAAK;EACrB,OAAOA,KAAA;AACT;AAEO,SAAS4V,mBAAmBvS,GAAA,EAAY;EAC7C,MAAMwS,OAAA,GAAU,CAAC;EAEjB,IAAI,CAACxS,GAAA,EAAK,OAAOwS,OAAA;EAEjB,IAAI;IACFtvB,MAAA,CAAOgD,mBAAA,CAAoB8Z,GAAG,EAAEla,OAAA,CAASK,GAAA,IAAQ;MAC/CqsB,OAAA,CAAQrsB,GAAG,IAAIjD,MAAA,CAAOuvB,wBAAA,CAAyBzS,GAAA,EAAK7Z,GAAG;IACzD,CAAC;EACH,SAASusB,CAAA,EAAG;IACV,OAAO;MACLxlB,KAAA,EAAO;IACT;EACF;EAEA,OAAOslB,OAAA;AACT;AAMO,SAASG,SAAA,EAAW;EACzB,MAAMC,GAAA,GACJ,OAAOvgB,SAAA,KAAc,cACjBA,SAAA,GACA,OAAOxT,MAAA,KAAW,eAAeA,MAAA,CAAOwT,SAAA,GACtCxT,MAAA,CAAOwT,SAAA,GACP;EAER,IAAI,CAACugB,GAAA,EAAK;IACR/N,OAAA,CAAQC,IAAA,CACN,yEACF;IACA,OAAO;EACT;EAGA,IAAI,OAAO8N,GAAA,CAAIC,MAAA,KAAW,WAAW;IACnC,OAAO;EACT;EAEA,OAAOD,GAAA,CAAIC,MAAA;AACb;AAKO,SAASC,4BAA4BC,EAAA,EAAwB;EAClE,IAAI,OAAOl0B,MAAA,KAAW,eAAeA,MAAA,CAAOuiB,gBAAA,EAAkB;IAC5DviB,MAAA,CAAOuiB,gBAAA,CAAiB,WAAW2R,EAAE;IACrCl0B,MAAA,CAAOuiB,gBAAA,CAAiB,UAAU2R,EAAE;EACtC;AACF;AAEO,SAASC,+BAA+BD,EAAA,EAAwB;EACrE,IAAI,OAAOl0B,MAAA,KAAW,eAAeA,MAAA,CAAOkgB,mBAAA,EAAqB;IAC/DlgB,MAAA,CAAOkgB,mBAAA,CAAoB,WAAWgU,EAAE;IACxCl0B,MAAA,CAAOkgB,mBAAA,CAAoB,UAAUgU,EAAE;EACzC;AACF;AAEO,IAAME,qBAAA,GAAiEhjB,MAAA,IAAW;EACvF,MAAMijB,SAAA,GAAY,EAAC;EACnB,WAAW5zB,CAAA,IAAK2Q,MAAA,EAAQ;IAGtB,IAAIA,MAAA,CAAO3Q,CAAC,MAAM,QAAW;IAE7B,IAAI9C,KAAA,CAAMuH,OAAA,CAAQkM,MAAA,CAAO3Q,CAAC,CAAC,KAAK,OAAO2Q,MAAA,CAAO3Q,CAAC,MAAM,UAAU;MAC7D4zB,SAAA,CAAUh1B,IAAA,CAAK,GAAGoB,CAAC,IAAIwQ,kBAAA,CAAmBV,IAAA,CAAKC,SAAA,CAAUY,MAAA,CAAO3Q,CAAC,CAAC,CAAC,CAAC,EAAE;IACxE,OAAO;MACL4zB,SAAA,CAAUh1B,IAAA,CAAK,GAAGoB,CAAC,IAAIwQ,kBAAA,CAAmBG,MAAA,CAAO3Q,CAAC,CAAC,CAAC,EAAE;IACxD;EACF;EAEA,OAAO4zB,SAAA,CAAU/0B,IAAA,CAAK,GAAG;AAC3B;AAQO,SAASg1B,cACd9mB,OAAA,EACc;EACd,MAAM+mB,kBAAA,GACJC,GAAA,IAC4B;IAC5B,IAAI,CAACA,GAAA,EAAK,OAAO;IACjB,OAAO;MACL,GAAGA,GAAA;MACHrF,UAAA,EAAY3hB,OAAA,CAAQ2hB,UAAA,GAAa,IAAI5T,IAAA,CAAK/N,OAAA,CAAQ2hB,UAAU,IAAI,mBAAI5T,IAAA,CAAK;MACzE6T,UAAA,EAAY5hB,OAAA,CAAQ4hB,UAAA,GAAa,IAAI7T,IAAA,CAAK/N,OAAA,CAAQ4hB,UAAU,IAAI;MAChEC,SAAA,EAAW7hB,OAAA,CAAQ6hB,SAAA,GAAY,IAAI9T,IAAA,CAAK/N,OAAA,CAAQ6hB,SAAS,IAAI;MAC7DoF,eAAA,EAAiBC,8BAAA,CACflnB,OAAA,CAAQinB,eAAA,EACRjnB,OAAA,CAAQoiB,eAAA,EACRpiB,OAAA,CAAQmnB,eACV;MACAzmB,MAAA,EAAQV,OAAA,CAAQU,MAAA,IAAU;MAC1BohB,UAAA,EAAY9hB,OAAA,CAAQ8hB,UAAA,GAAa,IAAI/T,IAAA,CAAK/N,OAAA,CAAQ8hB,UAAU,IAAI,mBAAI/T,IAAA,CAAK;IAC3E;EACF;EAEA,OAAO;IACL,GAAGgZ,kBAAA,CAAmB/mB,OAAO;IAC7Ba,KAAA,EAAQb,OAAA,CAAyBa,KAAA,IAAS;IAC1CohB,cAAA,EAAgB8E,kBAAA,CAAoB/mB,OAAA,CAA4BiiB,cAAc;EAChF;AACF;AAUO,SAASmF,gBAAgBpnB,OAAA,EAAwC;EACtE,MAAMqnB,qBAAA,GACJL,GAAA,IAC+B;IAC/B,IAAI,CAACA,GAAA,EAAK,OAAO;IACjB,MAAMM,aAAA,IAAgB,mBAAIvZ,IAAA,CAAK,GAAElL,WAAA,CAAY;IAC7C,OAAO;MACL,GAAGmkB,GAAA;MACHrF,UAAA,EAAY3hB,OAAA,CAAQ2hB,UAAA,GAAa3hB,OAAA,CAAQ2hB,UAAA,CAAW9e,WAAA,CAAY,IAAIykB,aAAA;MACpE1F,UAAA,EAAY5hB,OAAA,CAAQ4hB,UAAA,GAAa5hB,OAAA,CAAQ4hB,UAAA,CAAW/e,WAAA,CAAY,IAAI;MACpEgf,SAAA,EAAW7hB,OAAA,CAAQ6hB,SAAA,GAAY7hB,OAAA,CAAQ6hB,SAAA,CAAUhf,WAAA,CAAY,IAAI;MACjEif,UAAA,EAAY9hB,OAAA,CAAQ8hB,UAAA,GAAa9hB,OAAA,CAAQ8hB,UAAA,CAAWjf,WAAA,CAAY,IAAIykB;IACtE;EACF;EAEA,OAAO;IACL,GAAGD,qBAAA,CAAsBrnB,OAAO;IAChCiiB,cAAA,EAAgBoF,qBAAA,CAAuBrnB,OAAA,CAAyBiiB,cAAc;EAChF;AACF;AAEO,IAAMsF,+BAAA,GAAmCC,YAAA,IAAwC;EAEtF,MAAM;IAAA;IAAA;IAGJ7F,UAAA;IACAG,UAAA;IACAF,UAAA;IAAA;IAEA/gB,KAAA;IACAH,MAAA;IAAA;IAEAwhB,gBAAA;IACAC,aAAA;IACAC,eAAA;IACA+E,eAAA;IACA9E,WAAA;IAAA;IAEAN,OAAA;IACAQ,IAAA;IACAD,IAAA;IACAL,cAAA;IACAD,eAAA;IAAA;IAEA,GAAGyF;EACL,IAAID,YAAA;EAEJ,OAAO;IACL,GAAGC,aAAA;IACH5F,SAAA,EAAW4F,aAAA,CAAc5F,SAAA,EAAWhf,WAAA,CAAY;IAChDmf,eAAA,EAAiBA,eAAA,EAAiBjvB,GAAA,CAAK0vB,IAAA,IAASA,IAAA,CAAKhuB,EAAE;EACzD;AACF;AAEO,IAAMizB,uBAAA,GACX1nB,OAAA,IACmB;EACnB,MAAM2nB,YAAA,GAAe;IACnB,GAAGjG,+BAAA;IACH,GAAGgB;EACL;EAEA,MAAM+E,aAAA,GAAgB5wB,MAAA,CAAO+wB,WAAA,CAC3B/wB,MAAA,CAAOqQ,OAAA,CAAQlH,OAAO,EAAE8B,MAAA,CACtB,CAAC,CAAChI,GAAG,MAAM,CAAC6tB,YAAA,CAAa7tB,GAAgC,CAC3D,CACF;EAEA,OAAO;IACL,GAAG2tB,aAAA;IACHI,MAAA,EAAQ,CAAC,CAAC7nB,OAAA,CAAQ6hB,SAAA;IAClBG,eAAA,EAAiBhiB,OAAA,CAAQgiB,eAAA,EAAiBjvB,GAAA,CAAK0vB,IAAA,IAC7C,OAAOA,IAAA,KAAS,WAAWA,IAAA,GAAOA,IAAA,CAAKhuB,EACzC;EACF;AACF;AAEO,IAAMqzB,sBAAA,GAAyBA,CAAO;EAC3CC,MAAA;EACAC,WAAA;EACAC,SAAA;EACAC,oBAAA,GAAwBx0B,CAAA,IAAMA,CAAA;EAC9By0B,aAAA,GAAgB;AAClB,MAiCM;EACJ,IAAI,CAACH,WAAA,CAAYz3B,MAAA,EAAQ,OAAO;EAEhC,IAAI63B,IAAA,GAAO;EACX,IAAIC,KAAA,GAAQL,WAAA,CAAYz3B,MAAA,GAAS;EACjC,IAAI+3B,MAAA,GAAS;EAEb,MAAMC,iBAAA,GAAoBA,CAAA,KAAM;IAC9BD,MAAA,GAAStpB,IAAA,CAAK+R,KAAA,EAAOqX,IAAA,GAAOC,KAAA,IAAS,CAAC;EACxC;EAEA,MAAMG,gBAAA,GAAmBN,oBAAA,CAAqBH,MAAM;EAEpD,OAAOK,IAAA,IAAQC,KAAA,EAAO;IACpBE,iBAAA,CAAkB;IAElB,MAAME,gBAAA,GAAmBP,oBAAA,CAAqBF,WAAA,CAAYM,MAAM,CAAC;IAEjE,IACGH,aAAA,KAAkB,eAAeK,gBAAA,GAAmBC,gBAAA,IACpDN,aAAA,KAAkB,gBAAgBK,gBAAA,IAAoBC,gBAAA,EACvD;MACAJ,KAAA,GAAQC,MAAA,GAAS;IACnB,OAAO;MACLF,IAAA,GAAOE,MAAA,GAAS;IAClB;EACF;EAKA,IAAIL,SAAA,EAAW;IACb,MAAMS,SAAA,GAAYT,SAAA,CAAUF,MAAM;IAClC,MAAMY,IAAA,GAAOR,aAAA,KAAkB,cAAc,KAAK;IAClD,SACM93B,CAAA,GAAI+3B,IAAA,GAAOO,IAAA,EACf,KAAKt4B,CAAA,IACLA,CAAA,GAAI23B,WAAA,CAAYz3B,MAAA,IAChB23B,oBAAA,CAAqBF,WAAA,CAAY33B,CAAC,CAAC,MAAMm4B,gBAAA,EACzCn4B,CAAA,IAAKs4B,IAAA,EACL;MACA,IAAIV,SAAA,CAAUD,WAAA,CAAY33B,CAAC,CAAC,MAAMq4B,SAAA,EAAW;QAC3C,OAAOr4B,CAAA;MACT;IACF;EACF;EAEA,OAAO+3B,IAAA;AACT;AAEO,SAASQ,iBACdC,QAAA,EACAC,UAAA,EACAC,gBAAA,GAAmB,OACnBC,MAAA,GAAqC,cACrCC,iBAAA,GAAoB,MACpB;EACA,MAAMC,gBAAA,GAAmBD,iBAAA,IAAqBF,gBAAA;EAC9C,IAAII,WAAA,GAAc,CAAC,GAAGN,QAAQ;EAI9B,IAAIE,gBAAA,EAAkB;IACpBI,WAAA,GAAcA,WAAA,CAAYrnB,MAAA,CACvB9B,OAAA,IAAY,EAAEA,OAAA,CAAQvL,EAAA,IAAMq0B,UAAA,CAAWr0B,EAAA,KAAOuL,OAAA,CAAQvL,EAAA,CACzD;EACF;EAGA,IAAI00B,WAAA,CAAY54B,MAAA,KAAW,KAAK24B,gBAAA,EAAkB;IAChD,OAAOC,WAAA,CAAY3nB,MAAA,CAAOsnB,UAAU;EACtC,WAAWK,WAAA,CAAY54B,MAAA,KAAW,GAAG;IACnC,OAAO44B,WAAA;EACT;EAGA,MAAMC,WAAA,GAAcN,UAAA,CAAWE,MAAM,EAAGK,OAAA,CAAQ;EAEhD,MAAMC,eAAA,GAAkBH,WAAA,CAAYI,EAAA,CAAG,EAAE,EAAGP,MAAM,EAAGK,OAAA,CAAQ,IAAID,WAAA;EAGjE,IAAIE,eAAA,IAAmBJ,gBAAA,EAAkB;IACvC,OAAOC,WAAA,CAAY3nB,MAAA,CAAOsnB,UAAU;EACtC,WAAWQ,eAAA,EAAiB;IAC1B,OAAOH,WAAA;EACT;EAGA,MAAMK,cAAA,GAAiB1B,sBAAA,CAAuB;IAC5CC,MAAA,EAAQe,UAAA;IACRd,WAAA,EAAamB,WAAA;IACbhB,aAAA,EAAe;IAAA;IAEfD,oBAAA,EAAuBprB,CAAA,IAAMA,CAAA,CAAEksB,MAAM,EAAGK,OAAA,CAAQ;IAChDpB,SAAA,EAAYnrB,CAAA,IAAMA,CAAA,CAAErI;EACtB,CAAC;EAGD,IACE,CAACs0B,gBAAA,IACDD,UAAA,CAAWr0B,EAAA,IACX00B,WAAA,CAAYK,cAAc,KAC1BV,UAAA,CAAWr0B,EAAA,KAAO00B,WAAA,CAAYK,cAAc,EAAE/0B,EAAA,EAC9C;IACA00B,WAAA,CAAYK,cAAc,IAAIV,UAAA;IAC9B,OAAOK,WAAA;EACT;EAGA,IAAID,gBAAA,EAAkB;IACpBC,WAAA,CAAYjO,MAAA,CAAOsO,cAAA,EAAgB,GAAGV,UAAU;EAClD;EAEA,OAAOK,WAAA;AACT;AAEA,SAASjC,+BACPuC,MAAA,EACAC,MAAA,EACAC,MAAA,EACiD;EACjD,IAAIF,MAAA,EAAQ;IACV,OAAOA,MAAA;EACT;EAEA,IAAIC,MAAA,IAAUC,MAAA,EAAQ;IACpB,MAAMC,QAAA,GAAqD,CAAC;IAE5D,WAAWpyB,IAAA,IAAQX,MAAA,CAAO+C,IAAA,CAAK8vB,MAAM,GAAG;MACtCE,QAAA,CAASpyB,IAAI,IAAI;QACfqyB,KAAA,EAAOH,MAAA,CAAOlyB,IAAI;QAClBsyB,UAAA,EAAYH,MAAA,CAAOnyB,IAAI;MACzB;IACF;IAEA,OAAOoyB,QAAA;EACT;EAEA,OAAO;AACT;AAgCO,IAAMG,QAAA,GAAWA,CACtBxzB,EAAA,EACAsS,OAAA,GAAU,GACV;EAAEmhB,OAAA,GAAU;EAAOC,QAAA,GAAW;AAAK,IAA+C,CAAC,MAC9D;EACrB,IAAIC,cAAA,GAAwC;EAC5C,IAAIC,wBAAA,GAAiD;EACrD,IAAIC,UAAA;EAEJ,MAAMC,WAAA,GAAcA,CAAA,GAAIC,IAAA,KAAwB;IAC9C,IAAIJ,cAAA,EAAgB;MAClBK,YAAA,CAAaL,cAAc;IAC7B,WAAWF,OAAA,EAAS;MAClBI,UAAA,GAAa7zB,EAAA,CAAG,GAAG+zB,IAAI;IACzB;IACA,IAAIL,QAAA,EAAUE,wBAAA,GAA2BG,IAAA;IAEzC,MAAME,cAAA,GAAiBA,CAAA,KAAM;MAC3B,IAAIL,wBAAA,EAA0B;QAC5BC,UAAA,GAAa7zB,EAAA,CAAG,GAAG4zB,wBAAwB;QAC3CA,wBAAA,GAA2B;MAC7B;MACAD,cAAA,GAAiB;IACnB;IAEAA,cAAA,GAAiBlW,UAAA,CAAWwW,cAAA,EAAgB3hB,OAAO;IACnD,OAAOuhB,UAAA;EACT;EAEAC,WAAA,CAAYnV,MAAA,GAAS,MAAM;IACzB,IAAIgV,cAAA,EAAgBK,YAAA,CAAaL,cAAc;EACjD;EAEAG,WAAA,CAAYI,KAAA,GAAQ,MAAM;IACxB,IAAIP,cAAA,EAAgB;MAClBK,YAAA,CAAaL,cAAc;MAC3BA,cAAA,GAAiB;MACjB,IAAIC,wBAAA,EAA0B;QAC5BC,UAAA,GAAa7zB,EAAA,CAAG,GAAG4zB,wBAAwB;MAC7C;IACF;IACA,OAAOC,UAAA;EACT;EACA,OAAOC,WAAA;AACT;AAGO,IAAMK,QAAA,GAAWA,CACtBn0B,EAAA,EACAsS,OAAA,GAAU,KACV;EAAEmhB,OAAA,GAAU;EAAMC,QAAA,GAAW;AAAM,IAA+C,CAAC,MAChF;EACH,IAAIC,cAAA,GAAwC;EAC5C,IAAIS,UAAA,GAAmC;EAEvC,OAAO,IAAIL,IAAA,KAAwB;IACjC,IAAIJ,cAAA,EAAgB;MAClB,IAAID,QAAA,EAAUU,UAAA,GAAaL,IAAA;MAC3B;IACF;IAEA,IAAIN,OAAA,EAASzzB,EAAA,CAAG,GAAG+zB,IAAI;IAEvB,MAAME,cAAA,GAAiBA,CAAA,KAAM;MAC3B,IAAIG,UAAA,EAAY;QACdp0B,EAAA,CAAG,GAAGo0B,UAAU;QAChBA,UAAA,GAAa;QACbT,cAAA,GAAiBlW,UAAA,CAAWwW,cAAA,EAAgB3hB,OAAO;QAEnD;MACF;MAEAqhB,cAAA,GAAiB;IACnB;IAEAA,cAAA,GAAiBlW,UAAA,CAAWwW,cAAA,EAAgB3hB,OAAO;EACrD;AACF;AAEA,IAAMzS,GAAA,GAAMA,CAAIsD,GAAA,EAAQ4H,IAAA,KACtBA,IAAA,CAAKnD,KAAA,CAAM,GAAG,EAAEysB,MAAA,CAAgB,CAACC,GAAA,EAAK/wB,GAAA,KAAQ;EAC5C,IAAI+wB,GAAA,IAAO,OAAOA,GAAA,KAAQ,YAAY/wB,GAAA,IAAO+wB,GAAA,EAAK;IAChD,OAAQA,GAAA,CAAgC/wB,GAAG;EAC7C;EACA,OAAO;AACT,GAAGJ,GAAG;AAGD,IAAMoxB,MAAA,GAASA,CACpBC,KAAA,EACAC,QAAA,KACQ;EACR,IAAI,CAAC76B,KAAA,CAAMuH,OAAA,CAAQqzB,KAAK,GAAG,OAAO,EAAC;EAEnC,MAAME,IAAA,GAAO,mBAAIC,GAAA,CAAa;EAC9B,OAAOH,KAAA,CAAMjpB,MAAA,CAAQmjB,IAAA,IAAS;IAC5B,MAAMnrB,GAAA,GACJ,OAAOkxB,QAAA,KAAa,aAAaA,QAAA,CAAS/F,IAAI,IAAI7uB,GAAA,CAAI6uB,IAAA,EAAM+F,QAAkB;IAChF,IAAIC,IAAA,CAAKzf,GAAA,CAAI1R,GAAG,GAAG,OAAO;IAC1BmxB,IAAA,CAAKE,GAAA,CAAIrxB,GAAG;IACZ,OAAO;EACT,CAAC;AACH;AAUO,SAASsxB,wCACdL,KAAA,EAGAM,UAAA,EACQ;EACR,IAAIjD,IAAA,GAAO;EACX,IAAIC,KAAA,GAAQ0C,KAAA,CAAMx6B,MAAA,GAAS;EAE3B,OAAO63B,IAAA,IAAQC,KAAA,EAAO;IACpB,MAAMiD,GAAA,GAAMtsB,IAAA,CAAKuO,KAAA,EAAO6a,IAAA,GAAOC,KAAA,IAAS,CAAC;IACzC,MAAMkD,YAAA,GAAeR,KAAA,CAAMO,GAAG,EAAE3J,UAAA;IAChC,IAAI,CAAC4J,YAAA,EAAc;MACjBnD,IAAA,IAAQ;MACR;IACF;IACA,MAAMoD,OAAA,GAAU,IAAIzd,IAAA,CAAKwd,YAAY;IAErC,IAAIC,OAAA,CAAQnC,OAAA,CAAQ,MAAMgC,UAAA,CAAWhC,OAAA,CAAQ,GAAG;MAC9C,OAAOiC,GAAA;IACT,WAAWE,OAAA,CAAQnC,OAAA,CAAQ,IAAIgC,UAAA,CAAWhC,OAAA,CAAQ,GAAG;MACnDjB,IAAA,GAAOkD,GAAA,GAAM;IACf,OAAO;MACLjD,KAAA,GAAQiD,GAAA,GAAM;IAChB;EACF;EAEA,OAAOlD,IAAA;AACT;AAEA,IAAMqD,gCAAA,GAAmCA,CAAC;EACxCC,SAAA;EACAC,iBAAA;EACAC,YAAA;EACAC;AACF,MAAsC;EACpC,MAAMC,aAAA,GAAgB;IAAE,GAAGJ,SAAA,CAAUK;EAAW;EAChD,IAAI,CAACF,wBAAA,EAA0BG,iBAAA,EAAmB,OAAOF,aAAA;EACzD,IAAIxK,OAAA;EACJ,IAAID,OAAA;EACJ,IAAI4K,aAAA;EACJ,IAAIC,aAAA;EACJ,MAAMC,mBAAA,GAAsB,IAAIpe,IAAA,CAAK8d,wBAAA,CAAyBG,iBAAiB;EAC/E,MAAM,CAACI,YAAA,EAAcC,WAAW,IAAI,CAACT,YAAA,CAAa,CAAC,GAAGA,YAAA,CAAav0B,KAAA,CAAM,EAAE,EAAE,CAAC,CAAC;EAG/E,MAAMi1B,yBAAA,GACJ,CAAC,CAACF,YAAA,EAAczK,UAAA,IAAc,IAAI5T,IAAA,CAAKqe,YAAA,CAAazK,UAAU,IAAIwK,mBAAA;EACpE,MAAMI,yBAAA,GACJ,CAAC,CAACF,WAAA,EAAa1K,UAAA,IAAc,IAAI5T,IAAA,CAAKse,WAAA,CAAY1K,UAAU,IAAIwK,mBAAA;EAElE,MAAMK,uBAAA,GACJb,iBAAA,GAAoBD,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,IACvCo7B,iBAAA,GAAoBC,YAAA,CAAar7B,MAAA;EACnC,MAAMk8B,cAAA,IACHd,iBAAA,GAAoBD,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,IACtCm7B,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,IAAUq7B,YAAA,CAAar7B,MAAA,KAC5Co7B,iBAAA,GAAoBC,YAAA,CAAar7B,MAAA;EAEnC,IAAI+7B,yBAAA,EAA2B;IAC7BhL,OAAA,GAAU;IACV2K,aAAA,GAAgB;IAChB,IAAIO,uBAAA,EAAyB;MAC3BnL,OAAA,GAAU;MACV6K,aAAA,GAAgB;IAClB;EACF,WAAWK,yBAAA,EAA2B;IACpClL,OAAA,GAAU;IACV6K,aAAA,GAAgB;IAChB,IAAIM,uBAAA,EAAyB;MAC3BlL,OAAA,GAAU;MACV2K,aAAA,GAAgB;IAClB;EACF,WAAWQ,cAAA,EAAgB;IACzBpL,OAAA,GAAUC,OAAA,GAAU;IACpB2K,aAAA,GAAgBC,aAAA,GAAgB;EAClC,OAAO;IACL,MAAM,CAACQ,wBAAA,EAA0BC,sBAAsB,IAAI,CACzDP,YAAA,EAAc33B,EAAA,IAAM23B,YAAA,CAAa33B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAAS,CAAC,GAAGp0B,EAAA,EAC/D43B,WAAA,EAAa53B,EAAA,IAAM43B,WAAA,CAAY53B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAASxxB,KAAA,CAAM,EAAE,EAAE,CAAC,GAAG5C,EAAA,CACzE;IACAw3B,aAAA,GAAgBS,wBAAA;IAChBR,aAAA,GAAgBS,sBAAA;IAChB,MAAMC,eAAA,GAAkB5tB,IAAA,CAAKuO,KAAA,CAAMqe,YAAA,CAAar7B,MAAA,GAAS,CAAC;IAC1D,MAAMs8B,sBAAA,GAAyBzB,uCAAA,CAC7BQ,YAAA,EACAO,mBACF;IAEA,IAAIU,sBAAA,KAA2B,IAAI;MACjCvL,OAAA,GAAUsL,eAAA,IAAmBC,sBAAA;MAC7BxL,OAAA,GAAUuL,eAAA,IAAmBC,sBAAA;IAC/B;EACF;EAEA,IAAIZ,aAAA,IAAiB,OAAO3K,OAAA,KAAY,aAAawK,aAAA,CAAcxK,OAAA,GAAUA,OAAA;EAC7E,IAAI4K,aAAA,IAAiB,OAAO7K,OAAA,KAAY,aAAayK,aAAA,CAAczK,OAAA,GAAUA,OAAA;EAE7E,OAAOyK,aAAA;AACT;AAEA,IAAMgB,yBAAA,GAA4BA,CAAC;EACjCpB,SAAA;EACAC,iBAAA;EACAC,YAAA;EACAC;AACF,MAAsC;EACpC,MAAMC,aAAA,GAAgB;IAAE,GAAGJ,SAAA,CAAUK;EAAW;EAChD,MAAM;IAAEgB;EAAU,IAAIlB,wBAAA,IAA4B,CAAC;EACnD,IAAI,CAACkB,SAAA,EAAW,OAAOjB,aAAA;EACvB,IAAIxK,OAAA;EACJ,IAAID,OAAA;EAEJ,MAAM,CAAC+K,YAAA,EAAcC,WAAW,IAAI,CAACT,YAAA,CAAa,CAAC,GAAGA,YAAA,CAAav0B,KAAA,CAAM,EAAE,EAAE,CAAC,CAAC;EAC/E,MAAM,CAACq1B,wBAAA,EAA0BC,sBAAsB,IAAI,CACzDP,YAAA,EAAc33B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAAS,CAAC,GAAGp0B,EAAA,EAC5C43B,WAAA,EAAa53B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAASxxB,KAAA,CAAM,EAAE,EAAE,CAAC,GAAG5C,EAAA,CACvD;EACA,IAAIw3B,aAAA,GAAgBS,wBAAA;EACpB,IAAIR,aAAA,GAAgBS,sBAAA;EAEpB,MAAMK,QAAA,GAAWhuB,IAAA,CAAKuO,KAAA,CAAMqe,YAAA,CAAar7B,MAAA,GAAS,CAAC;EACnD,MAAMk8B,cAAA,IACHd,iBAAA,GAAoBD,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,IACtCm7B,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,IAAUq7B,YAAA,CAAar7B,MAAA,KAC5Co7B,iBAAA,GAAoBC,YAAA,CAAar7B,MAAA;EAEnC,IAAIk8B,cAAA,EAAgB;IAClBpL,OAAA,GAAUC,OAAA,GAAU;IACpB2K,aAAA,GAAgBC,aAAA,GAAgB;EAClC,WAAW,CAACN,YAAA,CAAaoB,QAAQ,GAAG;IAClC,OAAOlB,aAAA;EACT,WAAWF,YAAA,CAAaoB,QAAQ,EAAEv4B,EAAA,KAAOs4B,SAAA,EAAW;IAClDzL,OAAA,GAAUD,OAAA,GAAU;EACtB,OAAO;IACL,IAAI4L,SAAA;IACJ,MAAMC,MAAA,GAAS,CAACtB,YAAA,CAAav0B,KAAA,CAAM,GAAG21B,QAAQ,GAAGpB,YAAA,CAAav0B,KAAA,CAAM21B,QAAQ,CAAC;IAC7E1L,OAAA,GAAUD,OAAA,GAAU;IACpB,SAAShxB,CAAA,GAAI,GAAGA,CAAA,GAAI68B,MAAA,CAAO38B,MAAA,EAAQF,CAAA,IAAK;MACtC48B,SAAA,GAAYC,MAAA,CAAO78B,CAAC,EAAE88B,IAAA,CAAMntB,OAAA,IAAYA,OAAA,CAAQvL,EAAA,KAAOs4B,SAAS;MAChE,IAAIE,SAAA,IAAa58B,CAAA,KAAM,GAAG;QACxBixB,OAAA,GAAU;MACZ;MACA,IAAI2L,SAAA,IAAa58B,CAAA,KAAM,GAAG;QACxBgxB,OAAA,GAAU;MACZ;IACF;EACF;EAEA,IAAI4K,aAAA,IAAiB,OAAO3K,OAAA,KAAY,aAAawK,aAAA,CAAcxK,OAAA,GAAUA,OAAA;EAC7E,IAAI4K,aAAA,IAAiB,OAAO7K,OAAA,KAAY,aAAayK,aAAA,CAAczK,OAAA,GAAUA,OAAA;EAE7E,OAAOyK,aAAA;AACT;AAEA,IAAMsB,uBAAA,GAA0BA,CAAC;EAC/B1B,SAAA;EACAC,iBAAA;EACAC,YAAA;EACAC;AACF,MAAsC;EACpC,MAAMC,aAAA,GAAgB;IAAE,GAAGJ,SAAA,CAAUK;EAAW;EAEhD,IAAIzK,OAAA;EACJ,IAAID,OAAA;EAEJ,MAAM,CAAC+K,YAAA,EAAcC,WAAW,IAAI,CAACT,YAAA,CAAa,CAAC,GAAGA,YAAA,CAAav0B,KAAA,CAAM,EAAE,EAAE,CAAC,CAAC;EAC/E,MAAM,CAACq1B,wBAAA,EAA0BC,sBAAsB,IAAI,CACzDP,YAAA,EAAc33B,EAAA,IAAM23B,YAAA,CAAa33B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAAS,CAAC,GAAGp0B,EAAA,EAC/D43B,WAAA,EAAa53B,EAAA,IAAM43B,WAAA,CAAY53B,EAAA,KAAOi3B,SAAA,CAAU7C,QAAA,CAASxxB,KAAA,CAAM,EAAE,EAAE,CAAC,GAAG5C,EAAA,CACzE;EAEA,MAAM44B,mBAAA,GACJxB,wBAAA,KACCA,wBAAA,CAAyByB,yBAAA,IACxBzB,wBAAA,CAAyB0B,gBAAA,IACzB1B,wBAAA,CAAyB2B,KAAA,IACzB3B,wBAAA,CAAyB4B,MAAA;EAE7B,MAAMC,mBAAA,GACJ,OAAO7B,wBAAA,KAA6B,cAChC,OACAA,wBAAA,CAAyB8B,0BAAA,IACzB9B,wBAAA,CAAyB+B,iBAAA,IACzB/B,wBAAA,CAAyBgC,KAAA,IACzBhC,wBAAA,CAAyBiC,MAAA,IACzBjC,wBAAA,CAAyBkC,MAAA;EAE/B,MAAMC,+BAAA,GACJ,CAACX,mBAAA,IACD,CAACK,mBAAA,IACD,CAAC7B,wBAAA,EAA0BkB,SAAA,IAC3B,CAAClB,wBAAA,EAA0BG,iBAAA;EAE7B,MAAMiC,OAAA,GAAUrC,YAAA,CAAar7B,MAAA,IAAUo7B,iBAAA;EAEvC,IAAI,OAAO+B,mBAAA,KAAwB,eAAeM,+BAAA,EAAiC;IACjF1M,OAAA,GAAU2M,OAAA;EACZ;EACA,IAAI,OAAOZ,mBAAA,KAAwB,aAAa;IAC9ChM,OAAA,GAAU4M,OAAA;EACZ;EACA,MAAMC,mBAAA,GAAsBtC,YAAA,CAAar7B,MAAA,KAAW;EAEpD,KAAKm8B,wBAAA,IAA4BwB,mBAAA,KAAwB,OAAO5M,OAAA,KAAY,aAC1EwK,aAAA,CAAcxK,OAAA,GAAUA,OAAA;EAC1B,KAAKqL,sBAAA,IAA0BuB,mBAAA,KAAwB,OAAO7M,OAAA,KAAY,aACxEyK,aAAA,CAAczK,OAAA,GAAUA,OAAA;EAE1B,OAAOyK,aAAA;AACT;AAEO,IAAMqC,oBAAA,GAAwBvqB,MAAA,IAA2C;EAC9E,IAAIA,MAAA,CAAO8nB,SAAA,CAAU7C,QAAA,CAASt4B,MAAA,GAASqT,MAAA,CAAOgoB,YAAA,CAAar7B,MAAA,EAAQ;IACjEqT,MAAA,CAAOwqB,MAAA,GACL,SACA,mEACF;IACA,OAAOxqB,MAAA,CAAO8nB,SAAA,CAAUK,UAAA;EAC1B;EAEA,IAAInoB,MAAA,CAAOioB,wBAAA,EAA0BG,iBAAA,EAAmB;IACtD,OAAOP,gCAAA,CAAiC7nB,MAAM;EAChD,WAAWA,MAAA,CAAOioB,wBAAA,EAA0BkB,SAAA,EAAW;IACrD,OAAOD,yBAAA,CAA0BlpB,MAAM;EACzC,OAAO;IACL,OAAOwpB,uBAAA,CAAwBxpB,MAAM;EACvC;AACF;AAMA,IAAMyqB,mCAAA,GAGF,CAAC;AAoBE,IAAMC,kBAAA,GAAqB,MAAAA,CAAO;EACvCC,OAAA;EACA/5B,MAAA;EACAC,EAAA;EACA+5B,OAAA;EACA54B,OAAA;EACA4B;AACF,MAAwB;EACtB,IAAI,CAAC+2B,OAAA,IAAW,CAAC/2B,IAAA,EAAM;IACrB,MAAM,IAAI5G,KAAA,CAAM,iEAAiE;EACnF;EAIA,MAAM69B,cAAA,GAAiBF,OAAA,IAAW/5B,MAAA,CAAO+5B,OAAA,CAAQ/2B,IAAA,EAAO/C,EAAA,EAAI;IAAE+5B;EAAQ,CAAC;EAGvE,MAAME,WAAA,GAAcD,cAAA,CAAeh6B,EAAA,GAC/Bg6B,cAAA,CAAeE,GAAA,GACfH,OAAA,IAAWA,OAAA,CAAQj+B,MAAA,GACjBq+B,sBAAA,CAAuBH,cAAA,CAAej3B,IAAA,EAAMg3B,OAAO,IACnD;EAEN,IAAI,CAACE,WAAA,EAAa;IAChB,MAAM,IAAI99B,KAAA,CACR,6EACF;EACF;EAEA,MAAMi+B,YAAA,GAAeR,mCAAA,CAAoCK,WAAW;EAEpE,IAAIG,YAAA,EAAc;IAChB,MAAMA,YAAA;EACR,OAAO;IACL,IAAI;MACFR,mCAAA,CAAoCK,WAAW,IAAID,cAAA,CAAeK,KAAA,CAAMl5B,OAAO;MAC/E,MAAMy4B,mCAAA,CAAoCK,WAAW;IACvD,UAAE;MACA,OAAOL,mCAAA,CAAoCK,WAAW;IACxD;EACF;EAEA,OAAOD,cAAA;AACT;AASO,IAAMG,sBAAA,GAAyBA,CAACG,WAAA,EAAqBP,OAAA,KAAsB;EAChF,IAAI,CAACA,OAAA,EAAS;EACd,MAAMQ,UAAA,GAAa,CAAC,GAAGR,OAAO,EAAE1J,IAAA,CAAK,EAAEhzB,IAAA,CAAK,GAAG;EAC/C,IAAI,CAACk9B,UAAA,EAAY;EACjB,OAAO,GAAGD,WAAW,aAAaC,UAAU;AAC9C;AAMO,IAAMC,eAAA,GAAmBV,OAAA,IAAqB;EACnD,IAAI,CAACA,OAAA,EAAS,OAAO;EAErB,MAAMW,MAAA,GAASX,OAAA,CAAQpY,KAAA,CAAMgZ,UAAA;EAE7B,OAAO,CAAC,CAACD,MAAA,EAAQrN,SAAA;AACnB;AAMO,IAAMuN,iBAAA,GAAqBb,OAAA,IAAqB;EACrD,IAAI,CAACA,OAAA,EAAS,OAAO;EAErB,MAAMW,MAAA,GAASX,OAAA,CAAQpY,KAAA,CAAMgZ,UAAA;EAE7B,OAAO,CAAC,CAACD,MAAA,EAAQG,WAAA;AACnB;AAOO,IAAMC,8BAAA,GAAkCC,OAAA,IAA4B;EACzE,IAAI,CAACA,OAAA,EAAS,OAAO;EAErB,OAAO,OAAOA,OAAA,CAAQC,QAAA,KAAa;AACrC;AAUO,IAAMC,gBAAA,GAAmBA,CAAC;EAC/BC,OAAA;EACA5K,IAAA;EACArqB;AACF,MAIM;EACJ,IAAI,CAACqqB,IAAA,EAAM,OAAO;EAClB,IAAIxiB,MAAA,GAAiC;EAErC,IAAInS,KAAA,CAAMuH,OAAA,CAAQotB,IAAI,GAAG;IACvBxiB,MAAA,GAASwiB,IAAA,CAAK4K,OAAO,KAAK;EAC5B,OAAO;IACL,IAAIxsB,KAAA,GAAQ;IACZ,WAAWpJ,GAAA,IAAOgrB,IAAA,EAAM;MACtB,IAAI5hB,KAAA,KAAUwsB,OAAA,EAAS;QACrBxsB,KAAA;QACA;MACF;MAEA,IAAIpJ,GAAA,KAAQW,SAAA,EAAW;QACrB,OAAO;MACT;MAEA6H,MAAA,GAASwiB,IAAA;MAET;IACF;EACF;EAEA,OAAOxiB,MAAA,GAAS7H,SAAS,KAAK;AAChC;AAKO,IAAMk1B,4BAAA,GAAgC7K,IAAA,IAAsB;EACjE,MAAM5pB,KAAA,GAAQ00B,qBAAA,CAAsB;IAAE9K;EAAK,CAAC;EAE5C,IAAI,OAAO5pB,KAAA,KAAU,UAAU,OAAO;EAEtC,OAAO8D,IAAA,CAAK6wB,GAAA,CAAI30B,KAAK,MAAM;AAC7B;AAOO,IAAM00B,qBAAA,GAAwBA,CAAC;EAAE9K;AAAK,MAC3C2K,gBAAA,CAAiB;EACfC,OAAA,EAAS;EACT5K,IAAA;EACArqB,SAAA,EAAW;AACb,CAAC;AAQI,IAAMq1B,0BAAA,GAA6BA,CAAC;EAAEC;AAAS,MAA+B;EACnF,IAAIC,sBAAA,GAAwC;EAE5C,WAAWzB,OAAA,IAAWwB,QAAA,EAAU;IAC9B,IAAI,CAACd,eAAA,CAAgBV,OAAO,GAAG;IAE/B,IAAI,OAAOyB,sBAAA,KAA2B,UAAU;MAC9CA,sBAAA;IACF,OAAO;MACLA,sBAAA,GAAyB;IAC3B;EACF;EAEA,OAAOA,sBAAA;AACT;AAWO,IAAMC,cAAA,GAAiBA,CAAC;EAC7BF,QAAA;EACAG,aAAA;EACAC,gCAAA;EACArL;AACF,MAA4B;EAE1B,MAAMsL,kBAAA,GACJD,gCAAA,IACAJ,QAAA,CAASM,SAAA,CAAW9B,OAAA,IAAYA,OAAA,CAAQI,GAAA,KAAQuB,aAAA,CAAcvB,GAAG;EAEnE,MAAM2B,6BAAA,GAAgCF,kBAAA,IAAsB;EAC5D,MAAMG,4BAAA,GAA+BH,kBAAA,KAAuB;EAK5D,MAAMI,sBAAA,GAAyBb,4BAAA,CAA6B7K,IAAI;EAChE,MAAM2L,qBAAA,GAAwBxB,eAAA,CAAgBiB,aAAa;EAE3D,IAAIK,4BAAA,IAAiCC,sBAAA,IAA0BC,qBAAA,EAAwB;IACrF,OAAOV,QAAA;EACT;EAEA,MAAMW,WAAA,GAAc,CAAC,GAAGX,QAAQ;EAGhC,IAAIO,6BAAA,EAA+B;IACjCI,WAAA,CAAYxV,MAAA,CAAOkV,kBAAA,EAAoB,CAAC;EAC1C;EAIA,IAAIJ,sBAAA,GAAwC;EAC5C,IAAIQ,sBAAA,EAAwB;IAC1BR,sBAAA,GAAyBF,0BAAA,CAA2B;MAAEC,QAAA,EAAUW;IAAY,CAAC;EAC/E;EAGAA,WAAA,CAAYxV,MAAA,CACV,OAAO8U,sBAAA,KAA2B,WAAWA,sBAAA,GAAyB,IAAI,GAC1E,GACAE,aACF;EAEA,OAAOQ,WAAA;AACT;AAEO,IAAMC,OAAA,GAAUz1B,KAAA,IAAkC,CAAC,CAAEA,KAAA,CAAemuB,OAAA;AAEpE,IAAMuH,cAAA,GAAkB5wB,OAAA,IAC7B2wB,OAAA,CAAQ3wB,OAAA,CAAyB2hB,UAAU;AAEtC,IAAMkP,WAAA,GAAcA,CACzB/9B,QAAA,EACA8C,OAAA,KAKG;EACH,MAAM;IAAEyE,OAAA;IAASy2B,iBAAA,GAAoBA,CAAA,KAAM;IAAWC;EAAgB,IAAIn7B,OAAA,IAAW,CAAC;EACtF,MAAMo7B,cAAA,GAAkBnwB,KAAA,IAAiB;IACvC2X,OAAA,CAAQyY,GAAA,CAAI,oCAAoC52B,OAAO,KAAKwG,KAAK,EAAE;EACrE;EACA,MAAMqwB,OAAA,GAAUH,eAAA,IAAmBC,cAAA;EAEnC,IAAIjX,OAAA,GAAUjnB,QAAA;EAEd,IAAIg+B,iBAAA,EAAmB;IACrB/W,OAAA,GAAUA,OAAA,CAAQpa,IAAA,CAAKmxB,iBAAiB;EAC1C;EAEA/W,OAAA,CAAQna,KAAA,CAAMsxB,OAAO;AACvB;;;AEhtCO,IAAMC,YAAA,GAAN,MAAmB;EA6BxB58B,YAAYg6B,OAAA,EAAkB;IAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA6C,WAAA,GAA4B,EAAC;IAwF7B;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAtK,aAAA,GAAiB9mB,OAAA,IACf8mB,aAAA,CAAc9mB,OAAO;IA0cvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAqxB,aAAA,GAAiBC,UAAA,IAAwB;MACvC,KAAKA,UAAA,GAAaA,UAAA;IACpB;IAgEA,KAAAC,sBAAA,GAAyB,CACvBC,QAAA,EACAxK,GAAA,KACG;MACH,MAAMxxB,MAAA,GAASg8B,QAAA,CAAS1vB,MAAA,CACrB9B,OAAA,IAAY,EAAE,CAAC,CAACA,OAAA,CAAQvL,EAAA,IAAM,CAAC,CAACuyB,GAAA,CAAIvyB,EAAA,IAAMuL,OAAA,CAAQvL,EAAA,KAAOuyB,GAAA,CAAIvyB,EAAA,CAChE;MAEA,OAAO;QAAEg9B,OAAA,EAASj8B,MAAA,CAAOjF,MAAA,GAASihC,QAAA,CAASjhC,MAAA;QAAQiF;MAAO;IAC5D;IAOA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAk8B,kBAAA,GAAsBjP,IAAA,IAAuB;MAC3C,MAAMkP,mBAAA,GAAsBA,CAC1B9I,QAAA,EACA+I,KAAA,KACG;QACH,SAASvhC,CAAA,GAAI,GAAGA,CAAA,GAAIw4B,QAAA,CAASt4B,MAAA,EAAQF,CAAA,IAAK;UACxC,MAAMyM,CAAA,GAAI+rB,QAAA,CAASx4B,CAAC;UACpB,IAAIyM,CAAA,CAAE2lB,IAAA,EAAMhuB,EAAA,KAAOm9B,KAAA,CAAKn9B,EAAA,EAAI;YAC1Bo0B,QAAA,CAASx4B,CAAC,IAAI;cAAE,GAAGyM,CAAA;cAAG2lB,IAAA,EAAAmP;YAAK;UAC7B;QACF;MACF;MAEA,KAAKR,WAAA,CAAY33B,OAAA,CAASsE,GAAA,IAAQ4zB,mBAAA,CAAoB5zB,GAAA,CAAI8qB,QAAA,EAAUpG,IAAI,CAAC;MAEzE,WAAWoP,QAAA,IAAY,KAAKC,OAAA,EAAS;QACnCH,mBAAA,CAAoB,KAAKG,OAAA,CAAQD,QAAQ,GAAGpP,IAAI;MAClD;MAEAkP,mBAAA,CAAoB,KAAKI,cAAA,EAAgBtP,IAAI;IAC/C;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAuP,kBAAA,GAAqB,CAACvP,IAAA,EAAoBwP,UAAA,GAAa,UAAU;MAC/D,MAAMC,mBAAA,GAAsBA,CAC1BrJ,QAAA,EACA+I,KAAA,EACAO,WAAA,GAAa,UACV;QACH,SAAS9hC,CAAA,GAAI,GAAGA,CAAA,GAAIw4B,QAAA,CAASt4B,MAAA,EAAQF,CAAA,IAAK;UACxC,MAAMyM,CAAA,GAAI+rB,QAAA,CAASx4B,CAAC;UACpB,IAAIyM,CAAA,CAAE2lB,IAAA,EAAMhuB,EAAA,KAAOm9B,KAAA,CAAKn9B,EAAA,EAAI;YAC1B;UACF;UAEA,IAAI09B,WAAA,EAAY;YAKdtJ,QAAA,CAASx4B,CAAC,IAAI;cACZs+B,GAAA,EAAK7xB,CAAA,CAAE6xB,GAAA;cACPhN,UAAA,EAAY7kB,CAAA,CAAE6kB,UAAA;cACdC,UAAA,EAAYgQ,KAAA,CAAKhQ,UAAA;cACjBntB,EAAA,EAAIqI,CAAA,CAAErI,EAAA;cACNytB,gBAAA,EAAkB,EAAC;cACnBF,eAAA,EAAiB,EAAC;cAClBG,aAAA,EAAe,EAAC;cAChBiQ,SAAA,EAAWt1B,CAAA,CAAEs1B,SAAA;cACb/P,WAAA,EAAavlB,CAAA,CAAEulB,WAAA;cACf3hB,MAAA,EAAQ5D,CAAA,CAAE4D,MAAA;cACV2xB,mBAAA,EAAqBv1B,CAAA,CAAEu1B,mBAAA;cACvB76B,IAAA,EAAM;cACNsqB,UAAA,EAAYhlB,CAAA,CAAEglB,UAAA;cACdW,IAAA,EAAM3lB,CAAA,CAAE2lB;YACV;UACF,OAAO;YACLoG,QAAA,CAASx4B,CAAC,IAAI;cACZ,GAAGyM,CAAA;cACHtF,IAAA,EAAM;cACNoqB,UAAA,EAAYgQ,KAAA,CAAKhQ,UAAA,GAAa,IAAI7T,IAAA,CAAK6jB,KAAA,CAAKhQ,UAAU,IAAI;YAC5D;UACF;QACF;MACF;MAEA,KAAKwP,WAAA,CAAY33B,OAAA,CAASsE,GAAA,IACxBm0B,mBAAA,CAAoBn0B,GAAA,CAAI8qB,QAAA,EAAUpG,IAAA,EAAMwP,UAAU,CACpD;MAEA,WAAWJ,QAAA,IAAY,KAAKC,OAAA,EAAS;QACnCI,mBAAA,CAAoB,KAAKJ,OAAA,CAAQD,QAAQ,GAAGpP,IAAA,EAAMwP,UAAU;MAC9D;MAEAC,mBAAA,CAAoB,KAAKH,cAAA,EAAgBtP,IAAA,EAAMwP,UAAU;IAC3D;IAlsBE,KAAKK,QAAA,GAAW/D,OAAA;IAChB,KAAKgE,aAAA,GAAgB;IACrB,KAAKC,MAAA,GAAS,CAAC;IACf,KAAKvkB,IAAA,GAAO,CAAC;IACb,KAAKwkB,YAAA,CAAa;IAClB,KAAKV,cAAA,GAAiB,EAAC;IACvB,KAAKW,gBAAA,GAAmB,EAAC;IACzB,KAAKZ,OAAA,GAAU,CAAC;IAEhB,KAAKa,UAAA,GAAa,EAAC;IACnB,KAAKC,QAAA,GAAW,CAAC;IACjB,KAAKpE,OAAA,GAAU,CAAC;IAChB,KAAKW,UAAA,GAAa,CAAC;IACnB,KAAK0D,WAAA,GAAc;IAOnB,KAAKvB,UAAA,GAAa;IAClB,KAAKwB,eAAA,GACHvE,OAAA,EAASpY,KAAA,EAAO2c,eAAA,IAAmB,OAC/B,IAAI/kB,IAAA,CAAKwgB,OAAA,CAAQpY,KAAA,CAAM2c,eAAe,IACtC;EACR;EAEA,IAAIjK,SAAA,EAAW;IACb,OAAO,KAAKuI,WAAA,CAAYjE,IAAA,CAAM15B,CAAA,IAAMA,CAAA,CAAEs/B,SAAS,GAAGlK,QAAA,IAAY,EAAC;EACjE;EAEA,IAAIA,SAASA,QAAA,EAA4D;IACvE,MAAM3lB,KAAA,GAAQ,KAAKkuB,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAAMA,CAAA,CAAEs/B,SAAS;IAC3D,KAAK3B,WAAA,CAAYluB,KAAK,EAAE2lB,QAAA,GAAWA,QAAA;EACrC;EAAA;AAAA;AAAA;AAAA;EAMA,IAAImK,eAAA,EAAiB;IACnB,OAAO,KAAK5B,WAAA,CAAYjE,IAAA,CAAM15B,CAAA,IAAMA,CAAA,CAAEw/B,QAAQ,GAAGpK,QAAA,IAAY,EAAC;EAChE;EAEA,IAAImK,eAAenK,QAAA,EAA4D;IAC7E,MAAM3lB,KAAA,GAAQ,KAAKkuB,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAAMA,CAAA,CAAEw/B,QAAQ;IAC1D,KAAK7B,WAAA,CAAYluB,KAAK,EAAE2lB,QAAA,GAAWA,QAAA;EACrC;EAEA,IAAIqK,kBAAA,EAAoB;IACtB,OACE,KAAK9B,WAAA,CAAYjE,IAAA,CAAM15B,CAAA,IAAMA,CAAA,CAAEs/B,SAAS,GAAGhH,UAAA,IAC3C3K,8BAAA;EAEJ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA+R,iBACErK,UAAA,EACAC,gBAAA,GAAmB,OACnBE,iBAAA,GAAoB,MACpBmK,+BAAA,GAAkD,UAClD;IACA,OAAO,KAAKC,iBAAA,CACV,CAACvK,UAAU,GACXC,gBAAA,EACA,OACAE,iBAAA,EACAmK,+BACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAqBAC,kBACElK,WAAA,EACAJ,gBAAA,GAAmB,OACnBuK,YAAA,GAAe,OACfrK,iBAAA,GAAoB,MACpBmK,+BAAA,GAAkD,WAClD;IACA,MAAM;MAAEG,aAAA;MAAeC;IAAsB,IAAI,KAAKC,oBAAA,CACpDtK,WAAA,EACAF,iBAAA,EACAmK,+BACF;IAEA,SAAS/iC,CAAA,GAAI,GAAGA,CAAA,GAAIkjC,aAAA,CAAchjC,MAAA,EAAQF,CAAA,IAAK,GAAG;MAChD,MAAMqjC,sBAAA,GAAyBH,aAAA,CAAcljC,CAAC,EAAEsjC,QAAA;MAChD,IAAID,sBAAA,EAAwB;QAC1B;MACF;MAIA,MAAME,kBAAA,GAAqBL,aAAA,CAAcljC,CAAC,EAAEsxB,UAAA,YAAsB5T,IAAA;MAClE,IAAI/N,OAAA;MACJ,IAAI4zB,kBAAA,EAAoB;QACtB5zB,OAAA,GAAUuzB,aAAA,CAAcljC,CAAC;MAC3B,OAAO;QACL2P,OAAA,GAAU,KAAK8mB,aAAA,CAAcyM,aAAA,CAAcljC,CAAC,CAAC;QAE7C,IAAI2P,OAAA,CAAQyiB,IAAA,IAAQ,KAAK6P,QAAA,EAAU3D,GAAA,EAAK;UAMtC,KAAK2D,QAAA,CACFuB,SAAA,CAAU,EACV1d,KAAA,CAAM2d,mBAAA,CAAoB9zB,OAAA,CAAQyiB,IAAA,EAAM,KAAK6P,QAAA,CAAS3D,GAAG;QAC9D;QAEA,IAAI2E,YAAA,IAAgBtzB,OAAA,CAAQvL,EAAA,IAAM,KAAKq9B,OAAA,CAAQ9xB,OAAA,CAAQvL,EAAE,GAAG;UAK1D,OAAO,KAAKq9B,OAAA,CAAQ9xB,OAAA,CAAQvL,EAAE;QAChC;QAEA,IAAI,CAAC,KAAKq+B,eAAA,EAAiB;UACzB,KAAKA,eAAA,GAAkB,IAAI/kB,IAAA,CAAK/N,OAAA,CAAQ2hB,UAAA,CAAW0H,OAAA,CAAQ,CAAC;QAC9D;QAEA,IAAIrpB,OAAA,CAAQ2hB,UAAA,CAAW0H,OAAA,CAAQ,IAAI,KAAKyJ,eAAA,CAAgBzJ,OAAA,CAAQ,GAAG;UACjE,KAAKyJ,eAAA,GAAkB,IAAI/kB,IAAA,CAAK/N,OAAA,CAAQ2hB,UAAA,CAAW0H,OAAA,CAAQ,CAAC;QAC9D;MACF;MAGA,MAAM0K,QAAA,GAAW/zB,OAAA,CAAQoyB,SAAA;MAGzB,KAAK,CAAC2B,QAAA,IAAY/zB,OAAA,CAAQg0B,eAAA,KAAoBR,qBAAA,KAA0B,IAAI;QAC1E,KAAKpC,WAAA,CAAYoC,qBAAqB,EAAE3K,QAAA,GAAW,KAAKoL,iBAAA,CACtD,KAAK7C,WAAA,CAAYoC,qBAAqB,EAAE3K,QAAA,EACxC7oB,OAAA,EACA+oB,gBAAA,EACA,cACAE,iBACF;MACF;MAWA,IAAI8K,QAAA,IAAY,CAACT,YAAA,EAAc;QAC7B,MAAMY,MAAA,GAAS,KAAKpC,OAAA,CAAQiC,QAAQ,KAAK,EAAC;QAC1C,KAAKjC,OAAA,CAAQiC,QAAQ,IAAI,KAAKE,iBAAA,CAC5BC,MAAA,EACAl0B,OAAA,EACA+oB,gBAAA,EACA,cACAE,iBACF;MACF;IACF;IAEA,OAAO;MACLkL,UAAA,EAAY,KAAK/C,WAAA,CAAYoC,qBAAqB;IACpD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAY,kBAAkBrC,cAAA,EAAmC;IACnD,SAAS1hC,CAAA,GAAI,GAAGA,CAAA,GAAI0hC,cAAA,CAAexhC,MAAA,EAAQF,CAAA,IAAK,GAAG;MACjD,KAAKgkC,gBAAA,CAAiBtC,cAAA,CAAe1hC,CAAC,CAAC;IACzC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAgkC,iBAAiBC,aAAA,EAAgC;IAC/C,KAAKvC,cAAA,GAAiB,KAAKkC,iBAAA,CACzB,KAAKlC,cAAA,EACL,KAAKjL,aAAA,CAAcwN,aAAa,GAChC,OACA,WACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAC,oBAAoBv0B,OAAA,EAA0B;IAC5C,MAAM;MAAExK;IAAO,IAAI,KAAK+7B,sBAAA,CAAuB,KAAKQ,cAAA,EAAgB/xB,OAAO;IAC3E,KAAK+xB,cAAA,GAAiBv8B,MAAA;EACxB;EAEAg/B,YACEC,QAAA,EACAz0B,OAAA,EACA00B,cAAA,EACA;IACA,MAAMC,mBAAA,GAAsB30B,OAAA;IAC5B,IAAI40B,gBAAA;IACJ,IAAI,CAACD,mBAAA,EAAqB;MACxBC,gBAAA,GAAmB,KAAKC,WAAA,CAAYJ,QAAA,CAASK,UAAU;IACzD;IAEA,IAAI,CAACH,mBAAA,IAAuB,CAACC,gBAAA,EAAkB;MAC7C;IACF;IAEA,MAAMG,eAAA,GAAkBJ,mBAAA,IAAuBC,gBAAA;IAC/C,MAAMI,UAAA,GAAa;MACjBvgC,EAAA,EAAIsgC,eAAA,EAAiBtgC,EAAA;MACrB29B,SAAA,EAAW2C,eAAA,EAAiB3C,SAAA;MAC5BvK,MAAA,EAAQkN,eAAA,EAAiBlN,MAAA;MACzBmM,eAAA,EAAiBe,eAAA,EAAiBf;IACpC;IAEA,KAAKiB,cAAA,CAAeD,UAAA,EAAahO,GAAA,IAAQ;MACvC,IAAI2N,mBAAA,EAAqB;QACvB,MAAMO,cAAA,GAAiB;UAAE,GAAGP;QAAoB;QAOhDA,mBAAA,CAAoBxS,aAAA,GAAgB,KAAKgT,wBAAA,CACvCnO,GAAA,CAAI7E,aAAA,EACJsS,QAAA,EACAC,cACF;QAIAQ,cAAA,CAAe/S,aAAA,GACb,KAAKmQ,QAAA,CAASuB,SAAA,CAAU,EAAEuB,MAAA,KAAWX,QAAA,CAASY,OAAA,GAC1CV,mBAAA,CAAoBxS,aAAA,GACpB6E,GAAA,CAAI7E,aAAA;QACV,OAAO,KAAK2E,aAAA,CAAcoO,cAAc;MAC1C;MAEA,IAAIN,gBAAA,EAAkB;QACpB,OAAO,KAAKU,mBAAA,CAAoBV,gBAAA,EAAkBH,QAAA,EAAUC,cAAc;MAC5E;MAEA,OAAO1N,GAAA;IACT,CAAC;IACD,OAAO2N,mBAAA,IAAuBC,gBAAA;EAChC;EAEAU,oBACEV,gBAAA,EACAH,QAAA,EACAC,cAAA,EACA;IACA,IAAI,CAACE,gBAAA,CAAiB3N,eAAA,EAAiB;MACrC2N,gBAAA,CAAiB3N,eAAA,GAAkB,CAAC;IACtC;IAIA,IAAIyN,cAAA,EAAgB;MAClB,WAAWa,WAAA,IAAeX,gBAAA,CAAiBzS,aAAA,IAAiB,EAAC,EAAG;QAC9D,MAAMqT,sBAAA,GAAyBZ,gBAAA,CAAiB3N,eAAA,CAAgBsO,WAAA,CAAY/9B,IAAI;QAChFo9B,gBAAA,CAAiB3N,eAAA,CAAgBsO,WAAA,CAAY/9B,IAAI,IAAI;UACnD,GAAGg+B,sBAAA;UACH3L,KAAA,EAAO2L,sBAAA,CAAuB3L,KAAA,GAAQ;UACtCC,UAAA,EAAY0L,sBAAA,CAAuB1L,UAAA,IAAcyL,WAAA,CAAYE,KAAA,IAAS;QACxE;QAEA,IAAIb,gBAAA,CAAiB3N,eAAA,CAAgBsO,WAAA,CAAY/9B,IAAI,EAAEqyB,KAAA,GAAQ,GAAG;UAChE,OAAO+K,gBAAA,CAAiB3N,eAAA,CAAgBsO,WAAA,CAAY/9B,IAAI;QAC1D;MACF;IACF;IAEA,MAAMk+B,iBAAA,GAAoBd,gBAAA,CAAiB3N,eAAA;IAC3C,MAAM0O,mBAAA,GAAsBD,iBAAA,CAAkBjB,QAAA,CAASj9B,IAAI;IAC3D,MAAMi+B,KAAA,GAAQhB,QAAA,CAASgB,KAAA,IAAS;IAGhCb,gBAAA,CAAiB3N,eAAA,CAAgBwN,QAAA,CAASj9B,IAAI,IAAIm+B,mBAAA,GAC9C;MACE,GAAGA,mBAAA;MACH9L,KAAA,EAAO8L,mBAAA,CAAoB9L,KAAA,GAAQ;MACnCC,UAAA,EAAY6L,mBAAA,CAAoB7L,UAAA,GAAa2L,KAAA;MAC7CG,gBAAA,EAAkBnB,QAAA,CAAS9S;IAC7B,IACA;MACEkI,KAAA,EAAO;MACPgM,iBAAA,EAAmBpB,QAAA,CAAS9S,UAAA;MAC5BiU,gBAAA,EAAkBnB,QAAA,CAAS9S,UAAA;MAC3BmI,UAAA,EAAY2L;IACd;IAGJb,gBAAA,CAAiBzS,aAAA,GAAgB,KAAKgT,wBAAA,CACpCP,gBAAA,CAAiBzS,aAAA,EACjBsS,QAAA,EACAC,cACF;IAIA,MAAMoB,MAAA,GAAS,KAAKxD,QAAA,CAASuB,SAAA,CAAU,EAAEuB,MAAA;IACzCR,gBAAA,CAAiB1S,gBAAA,GAAmBwS,cAAA,GAChC,CACE,IAAIE,gBAAA,CAAiB1S,gBAAA,IAAoB,EAAC,EAAGpgB,MAAA,CAC1C1N,CAAA,IAAMA,CAAA,CAAEihC,OAAA,KAAYS,MACvB,GACArB,QAAA,CACF,GACA,CAAC,IAAIG,gBAAA,CAAiB1S,gBAAA,IAAoB,EAAC,GAAIuS,QAAQ;IAE3D,OAAOG,gBAAA;EACT;EAEAO,yBACEY,YAAA,EACAtB,QAAA,EACAC,cAAA,EACA;IACA,IAAIA,cAAA,EAAgB;MAClBqB,YAAA,GAAe,EAAC;IAClB,OAAO;MACLA,YAAA,GAAe,KAAKC,6BAAA,CAA8BD,YAAA,EAActB,QAAQ;IAC1E;IAEAsB,YAAA,GAAeA,YAAA,IAAgB,EAAC;IAChC,IAAI,KAAKzD,QAAA,CAASuB,SAAA,CAAU,EAAEuB,MAAA,KAAWX,QAAA,CAASY,OAAA,EAAS;MACzDU,YAAA,CAAalkC,IAAA,CAAK4iC,QAAQ;IAC5B;IAEA,OAAOsB,YAAA;EACT;EAEAC,8BACED,YAAA,EACAtB,QAAA,EACA;IACA,IAAIsB,YAAA,EAAc;MAChB,OAAOA,YAAA,CAAaj0B,MAAA,CACjBmjB,IAAA,IAASA,IAAA,CAAKoQ,OAAA,KAAYZ,QAAA,CAASY,OAAA,IAAWpQ,IAAA,CAAKztB,IAAA,KAASi9B,QAAA,CAASj9B,IACxE;IACF;IACA,OAAOu+B,YAAA;EACT;EAEAE,eAAexB,QAAA,EAA4Bz0B,OAAA,EAA2B;IACpE,MAAMk2B,0BAAA,GAA6Bl2B,OAAA;IACnC,IAAI40B,gBAAA;IACJ,IAAI,CAACsB,0BAAA,EAA4B;MAC/BtB,gBAAA,GAAmB,KAAKC,WAAA,CAAYJ,QAAA,CAASK,UAAU;IACzD;IAEA,IAAI,CAACoB,0BAAA,IAA8B,CAACtB,gBAAA,EAAkB;MACpD;IACF;IAEA,MAAMG,eAAA,GAAkBmB,0BAAA,IAA8BtB,gBAAA;IACtD,MAAMI,UAAA,GAAa;MACjBvgC,EAAA,EAAIsgC,eAAA,EAAiBtgC,EAAA;MACrB29B,SAAA,EAAW2C,eAAA,EAAiB3C,SAAA;MAC5BvK,MAAA,EAAQkN,eAAA,EAAiBlN,MAAA;MACzBmM,eAAA,EAAiBe,eAAA,EAAiBf;IACpC;IACA,KAAKiB,cAAA,CAAeD,UAAA,EAAahO,GAAA,IAAQ;MACvC,IAAIkP,0BAAA,EAA4B;QAC9BA,0BAAA,CAA2B/T,aAAA,GAAgB,KAAK6T,6BAAA,CAC9ChP,GAAA,CAAI7E,aAAA,EACJsS,QACF;QACA,OAAO,KAAK3N,aAAA,CAAcoP,0BAA0B;MACtD;MAEA,IAAItB,gBAAA,EAAkB;QACpB,OAAO,KAAKuB,wBAAA,CAAyBvB,gBAAA,EAAkBH,QAAQ;MACjE;MAEA,OAAOzN,GAAA;IACT,CAAC;IACD,OAAOkP,0BAAA;EACT;EAEAC,yBAAyBvB,gBAAA,EAAgCH,QAAA,EAA4B;IACnF,MAAM2B,gBAAA,GAAmBxB,gBAAA,CAAiBzS,aAAA,EAAegL,IAAA,CACtD/4B,CAAA,IAAMA,CAAA,CAAEoD,IAAA,KAASi9B,QAAA,CAASj9B,IAC7B;IACA,IAAI4+B,gBAAA,IAAoBxB,gBAAA,CAAiB3N,eAAA,GAAkBmP,gBAAA,CAAiB5+B,IAAI,GAAG;MACjF,MAAM6+B,gBAAA,GAAmBzB,gBAAA,CAAiB3N,eAAA,CAAgBmP,gBAAA,CAAiB5+B,IAAI;MAC/Eo9B,gBAAA,CAAiB3N,eAAA,CAAgBmP,gBAAA,CAAiB5+B,IAAI,IAAI;QACxD,GAAG6+B,gBAAA;QACHxM,KAAA,EAAOwM,gBAAA,CAAiBxM,KAAA,GAAQ;QAChCC,UAAA,EAAYuM,gBAAA,CAAiBvM,UAAA,IAAcsM,gBAAA,CAAiBX,KAAA,IAAS;MACvE;MAEA,IAAIb,gBAAA,CAAiB3N,eAAA,CAAgBmP,gBAAA,CAAiB5+B,IAAI,EAAEqyB,KAAA,GAAQ,GAAG;QACrE,OAAO+K,gBAAA,CAAiB3N,eAAA,CAAgBmP,gBAAA,CAAiB5+B,IAAI;MAC/D;IACF;IACAo9B,gBAAA,CAAiBzS,aAAA,GAAgByS,gBAAA,CAAiBzS,aAAA,EAAergB,MAAA,CAC9D1N,CAAA,IAAMA,CAAA,CAAEoD,IAAA,KAASi9B,QAAA,CAASj9B,IAC7B;IACA,MAAMs+B,MAAA,GAAS,KAAKxD,QAAA,CAASuB,SAAA,CAAU,EAAEuB,MAAA;IACzCR,gBAAA,CAAiB1S,gBAAA,GAAmB0S,gBAAA,CAAiB1S,gBAAA,EAAkBpgB,MAAA,CACpE1N,CAAA,IAAM,EAAEA,CAAA,CAAEihC,OAAA,KAAYS,MAAA,IAAU1hC,CAAA,CAAEoD,IAAA,KAASi9B,QAAA,CAASj9B,IAAA,CACvD;IACA,OAAOo9B,gBAAA;EACT;EAEA0B,+BAA+B;IAC7Bt2B,OAAA;IACAoO;EACF,GAGG;IACD,MAAMmoB,YAAA,GAAgBz5B,CAAA,KACnB;MACC,GAAGA,CAAA;MACH6kB,UAAA,EAAY7kB,CAAA,CAAE6kB,UAAA,CAAW9e,WAAA,CAAY;MACrCgf,SAAA,EAAW/kB,CAAA,CAAE+kB,SAAA,EAAWhf,WAAA,CAAY;MACpCif,UAAA,EAAYhlB,CAAA,CAAEglB,UAAA,EAAYjf,WAAA,CAAY;IACxC;IAEF,MAAM/M,MAAA,GAAU+yB,QAAA,IAA6B;MAC3C,MAAM2N,eAAA,GAAkB3N,QAAA,CAAS+B,MAAA,CAA0B,CAACC,GAAA,EAAK7D,GAAA,KAAQ;QACvE,IAAIA,GAAA,CAAIyP,iBAAA,KAAsBz2B,OAAA,CAAQvL,EAAA,EAAI;UACxCo2B,GAAA,CAAIh5B,IAAA,CAAK;YACP,GAAG0kC,YAAA,CAAavP,GAAG;YACnB/E,cAAA,EAAgB7T,MAAA,GAAS;cAAE,GAAGpO,OAAA;cAAS02B,WAAA,EAAa;YAAG,IAAI12B;UAC7D,CAAC;QACH;QACA,OAAO6qB,GAAA;MACT,GAAG,EAAE;MACL,KAAKwI,iBAAA,CAAkBmD,eAAA,EAAiB,IAAI;IAC9C;IAEA,IAAI,CAACx2B,OAAA,CAAQoyB,SAAA,EAAW;MACtB,KAAKhB,WAAA,CAAY33B,OAAA,CAASsE,GAAA,IAAQjI,MAAA,CAAOiI,GAAA,CAAI8qB,QAAQ,CAAC;IACxD,WAAW7oB,OAAA,CAAQoyB,SAAA,IAAa,KAAKN,OAAA,CAAQ9xB,OAAA,CAAQoyB,SAAS,GAAG;MAE/Dt8B,MAAA,CAAO,KAAKg8B,OAAA,CAAQ9xB,OAAA,CAAQoyB,SAAS,CAAC;IACxC;EACF;EAEAuE,8BAA8B32B,OAAA,EAA0B;IACtD,KAAKs2B,8BAAA,CAA+B;MAAEt2B,OAAA;MAASoO,MAAA,EAAQ;IAAK,CAAC;EAC/D;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA6mB,eACEj1B,OAAA,EAMA42B,UAAA,EAGA;IACA,MAAM;MAAExE,SAAA;MAAW4B,eAAA;MAAiBnM;IAAO,IAAI7nB,OAAA;IAE/C,IAAIoyB,SAAA,IAAa,KAAKN,OAAA,CAAQM,SAAS,GAAG;MACxC,MAAM8B,MAAA,GAAS,KAAKpC,OAAA,CAAQM,SAAS;MACrC,MAAMyE,QAAA,GAAW3C,MAAA,CAAO7D,SAAA,CAAWrJ,GAAA,IAAQA,GAAA,CAAIvyB,EAAA,KAAOuL,OAAA,CAAQvL,EAAE;MAChE,IAAIoiC,QAAA,KAAa,IAAI;QACnB3C,MAAA,CAAO2C,QAAQ,IAAID,UAAA,CAAW1C,MAAA,CAAO2C,QAAQ,CAAC;QAC9C,KAAK/E,OAAA,CAAQM,SAAS,IAAI8B,MAAA;MAC5B;IACF;IAEA,IAAK,CAACF,eAAA,IAAmB,CAAC5B,SAAA,IAAc4B,eAAA,EAAiB;MACvD,MAAM8C,eAAA,GAAkB,KAAKC,mBAAA,CAAoB/2B,OAAO;MACxD,IAAI82B,eAAA,KAAoB,IAAI;QAC1B,MAAMD,QAAA,GAAW,KAAKzF,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,CAASwH,SAAA,CACzDrJ,GAAA,IAAQA,GAAA,CAAIvyB,EAAA,KAAOuL,OAAA,CAAQvL,EAC9B;QACA,IAAIoiC,QAAA,KAAa,IAAI;UACnB,MAAMG,KAAA,GAAQJ,UAAA,CAAW,KAAKxF,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,CAASgO,QAAQ,CAAC;UAC7E,KAAKzF,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,CAASgO,QAAQ,IAAIG,KAAA;QACzD;MACF;IACF;IAEA,IAAInP,MAAA,EAAQ;MACV,MAAMgP,QAAA,GAAW,KAAK9E,cAAA,CAAe1B,SAAA,CAAWrJ,GAAA,IAAQA,GAAA,CAAIvyB,EAAA,KAAOuL,OAAA,CAAQvL,EAAE;MAC7E,IAAIoiC,QAAA,KAAa,IAAI;QACnB,KAAK9E,cAAA,CAAe8E,QAAQ,IAAID,UAAA,CAAW,KAAK7E,cAAA,CAAe8E,QAAQ,CAAC;MAC1E;IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuBA5C,kBACEpL,QAAA,EACA7oB,OAAA,EACA+oB,gBAAA,GAAmB,OACnBC,MAAA,GAAqC,cACrCC,iBAAA,GAAoB,MACpB;IACA,OAAOL,gBAAA,CACLC,QAAA,EACA7oB,OAAA,EACA+oB,gBAAA,EACAC,MAAA,EACAC,iBACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAgO,cAAcC,eAAA,EAIX;IACD,IAAIC,SAAA,GAAY;IAChB,IAAID,eAAA,CAAgB9E,SAAA,IAAa,KAAKN,OAAA,CAAQoF,eAAA,CAAgB9E,SAAS,GAAG;MACxE,MAAM;QAAEX,OAAA;QAASj8B,MAAA,EAAQ4hC;MAAe,IAAI,KAAK7F,sBAAA,CAC/C,KAAKO,OAAA,CAAQoF,eAAA,CAAgB9E,SAAS,GACtC8E,eACF;MAEA,KAAKpF,OAAA,CAAQoF,eAAA,CAAgB9E,SAAS,IAAIgF,cAAA;MAC1CD,SAAA,GAAY1F,OAAA;IACd,OAAO;MACL,MAAMqF,eAAA,GACJI,eAAA,CAAgBJ,eAAA,IAAmB,KAAKC,mBAAA,CAAoBG,eAAe;MAC7E,IAAIJ,eAAA,KAAoB,IAAI;QAC1B,MAAM;UAAErF,OAAA;UAASj8B,MAAA,EAAQqzB;QAAS,IAAI,KAAK0I,sBAAA,CACzC,KAAKH,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,EAClCqO,eACF;QACA,KAAK9F,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,GAAWA,QAAA;QAC7CsO,SAAA,GAAY1F,OAAA;MACd;IACF;IAEA,OAAO0F,SAAA;EACT;EAAA;AAAA;AAAA;AAAA;EAwGAE,oBAAA,EAAsB;IACpB,MAAMC,gBAAA,GAAmB,KAAKtE,cAAA,CAAelxB,MAAA,CAC1C9B,OAAA,IAAYA,OAAA,CAAQxI,IAAA,KAAS,OAChC;IAEA,KAAKw7B,cAAA,GAAiBsE,gBAAA;EACxB;EAAA;AAAA;AAAA;EAKAC,MAAA,EAAQ;IACN,MAAMlpB,GAAA,GAAM,mBAAIN,IAAA,CAAK;IAErB,WAAW,CAACqnB,MAAA,EAAQoC,SAAS,KAAK3gC,MAAA,CAAOqQ,OAAA,CAAQ,KAAKsrB,MAAM,GAAG;MAC7D,MAAMiF,UAAA,GACJ,OAAOD,SAAA,CAAUE,WAAA,KAAgB,WAC7B,IAAI3pB,IAAA,CAAKypB,SAAA,CAAUE,WAAW,IAC9BF,SAAA,CAAUE,WAAA,IAAe,mBAAI3pB,IAAA,CAAK;MACxC,IAAIM,GAAA,CAAIgb,OAAA,CAAQ,IAAIoO,UAAA,CAAWpO,OAAA,CAAQ,IAAI,KAAM;QAC/C,OAAO,KAAKmJ,MAAA,CAAO4C,MAAM;QACzB,KAAK9C,QAAA,CAASuB,SAAA,CAAU,EAAE8D,aAAA,CAAc;UACtChJ,GAAA,EAAK,KAAK2D,QAAA,CAAS3D,GAAA;UACnBn3B,IAAA,EAAM;UACNirB,IAAA,EAAM;YAAEhuB,EAAA,EAAI2gC;UAAO;QACrB,CAAU;MACZ;IACF;EACF;EAEAwC,cAAA,EAAgB;IACd,KAAKnF,YAAA,CAAa;IAClB,KAAKV,cAAA,GAAiB,EAAC;EACzB;EAEAU,aAAA,EAAe;IACb,KAAKrB,WAAA,GAAc,CACjB;MACEvI,QAAA,EAAU,EAAC;MACXoK,QAAA,EAAU;MACVF,SAAA,EAAW;MACXhH,UAAA,EAAY3K;IACd,EACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMyW,qBACJC,SAAA,EACAC,eAAA,EACAC,KAAA,GAAQ,IACR;IACA,IAAIlB,eAAA;IACJ,IAAImB,oBAAA,GAAuB;IAC3B,IAAIC,mBAAA,GAAsB;IAC1B,MAAMC,eAAA,GAAkBJ,eAAA,IAAmBD,SAAA;IAC3C,IAAIA,SAAA,KAAc,UAAU;MAC1B,IAAI,KAAKjP,QAAA,KAAa,KAAKmK,cAAA,EAAgB;QACzC;MACF;MACA8D,eAAA,GAAkB,KAAK1F,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAAMA,CAAA,CAAEw/B,QAAQ;IAChE,OAAO;MACL6D,eAAA,GAAkB,KAAKC,mBAAA,CAAoB;QAAEtiC,EAAA,EAAI0jC;MAAgB,CAAC;IACpE;IACA,IAAIrB,eAAA,KAAoB,IAAI;MAC1B,KAAKsB,kBAAA,CAAmBtB,eAAe;MACvCmB,oBAAA,GAAuB;IACzB;IACAC,mBAAA,GACE,CAACH,eAAA,IACD,CAAC,CAAC,KAAKjG,OAAA,CAAQiG,eAAe,GAAG5K,IAAA,CAAMrwB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAOqjC,SAAS;IACjE,IAAIG,oBAAA,IAAwBC,mBAAA,EAAqB;MAC/C;IACF;IACA,IAAI,CAACD,oBAAA,EAAsB;MACzB,MAAM,KAAK3F,QAAA,CAAS+F,KAAA,CAClB;QAAExP,QAAA,EAAU;UAAEkE,SAAA,EAAWoL,eAAA;UAAiBH;QAAM;MAAE,GAClD,KACF;IACF;IACA,IAAI,CAACE,mBAAA,IAAuBH,eAAA,EAAiB;MAC3C,MAAM,KAAKzF,QAAA,CAASgG,UAAA,CAAWP,eAAA,EAAiB;QAAEhL,SAAA,EAAW+K,SAAA;QAAWE;MAAM,CAAC;IACjF;IACAlB,eAAA,GAAkB,KAAKC,mBAAA,CAAoB;MAAEtiC,EAAA,EAAI0jC;IAAgB,CAAC;IAClE,IAAIrB,eAAA,KAAoB,IAAI;MAC1B,KAAKsB,kBAAA,CAAmBtB,eAAe;IACzC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAjC,YAAYiD,SAAA,EAAmBC,eAAA,EAA0B;IACvD,IAAIA,eAAA,EAAiB;MACnB,MAAMlP,QAAA,GAAW,KAAKiJ,OAAA,CAAQiG,eAAe;MAC7C,IAAI,CAAClP,QAAA,EAAU;QACb,OAAO;MACT;MACA,OAAOA,QAAA,CAASsE,IAAA,CAAMrwB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAOqjC,SAAS;IAChD;IAEA,MAAMhB,eAAA,GAAkB,KAAKC,mBAAA,CAAoB;MAAEtiC,EAAA,EAAIqjC;IAAU,CAAC;IAClE,IAAIhB,eAAA,KAAoB,IAAI;MAC1B,OAAO;IACT;IACA,OAAO,KAAK1F,WAAA,CAAY0F,eAAe,EAAEjO,QAAA,CAASsE,IAAA,CAAMrwB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAOqjC,SAAS;EAClF;EAEQM,mBAAmBl1B,KAAA,EAAe;IACxC,MAAMq1B,eAAA,GAAkB,KAAKnH,WAAA,CAAYjE,IAAA,CAAM15B,CAAA,IAAMA,CAAA,CAAEs/B,SAAS;IAChE,IAAI,CAACwF,eAAA,EAAiB;MACpB;IACF;IACAA,eAAA,CAAgBxF,SAAA,GAAY;IAC5B,KAAK3B,WAAA,CAAYluB,KAAK,EAAE6vB,SAAA,GAAY;EACtC;EAEQyF,sBACNC,SAAA,EACAC,SAAA,EACA;IACA,OAAOD,SAAA,CAAU72B,IAAA,CAAM+2B,EAAA,IAAOD,SAAA,CAAUvL,IAAA,CAAMyL,EAAA,IAAOD,EAAA,CAAGlkC,EAAA,KAAOmkC,EAAA,CAAGnkC,EAAE,CAAC;EACvE;EAEQsiC,oBAAoB/2B,OAAA,EAA0B;IACpD,OAAO,KAAKoxB,WAAA,CAAYf,SAAA,CACrBtyB,GAAA,IAAQ,CAAC,CAACA,GAAA,CAAI8qB,QAAA,CAASsE,IAAA,CAAMrwB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAOuL,OAAA,CAAQvL,EAAE,CACzD;EACF;EAEQg/B,qBACNtK,WAAA,EACAF,iBAAA,GAAoB,MACpBmK,+BAAA,GAAkD,WAClD;IACA,IAAIG,aAAA,GAAoDpK,WAAA;IACxD,IAAIqK,qBAAA;IACJ,IAAIvK,iBAAA,EAAmB;MACrB,MAAM4P,4BAAA,GAA+B,KAAKzH,WAAA,CACvCr+B,GAAA,CAAI,CAACszB,CAAA,EAAGh2B,CAAA,KAAMA,CAAC,EACfyR,MAAA,CAAQzR,CAAA,IACP,KAAKmoC,qBAAA,CAAsB,KAAKpH,WAAA,CAAY/gC,CAAC,EAAEw4B,QAAA,EAAUM,WAAW,CACtE;MACF,QAAQiK,+BAAA;QACN,KAAK;UACH,IAAIyF,4BAAA,CAA6BtoC,MAAA,GAAS,GAAG;YAC3CijC,qBAAA,GAAwBqF,4BAAA,CAA6B,CAAC;UAExD,WAAW1P,WAAA,CAAYvnB,IAAA,CAAM9E,CAAA,IAAM,CAACA,CAAA,CAAEs1B,SAAS,GAAG;YAChD,KAAKhB,WAAA,CAAYv/B,IAAA,CAAK;cACpBg3B,QAAA,EAAU,EAAC;cACXkK,SAAA,EAAW;cACXE,QAAA,EAAU;cACVlH,UAAA,EAAY3K;YACd,CAAC;YACDoS,qBAAA,GAAwB,KAAKpC,WAAA,CAAY7gC,MAAA,GAAS;UACpD;UACA;QACF,KAAK;UACHijC,qBAAA,GAAwB,KAAKpC,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAAMA,CAAA,CAAEs/B,SAAS;UACrE;QACF,KAAK;UACHS,qBAAA,GAAwB,KAAKpC,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAAMA,CAAA,CAAEw/B,QAAQ;UACpE;QACF;UACEO,qBAAA,GAAwB;MAC5B;MAEA,MAAMsF,0BAAA,GAA6BD,4BAAA,CAA6B3d,MAAA,CAAO,GAAG,CAAC,EAAE,CAAC;MAC9E,MAAM6d,4BAAA,GAA+B,CAAC,GAAGF,4BAA4B;MACrE,IACEC,0BAAA,KAA+B,UAC/BA,0BAAA,KAA+BtF,qBAAA,EAC/B;QACAuF,4BAAA,CAA6BlnC,IAAA,CAAK2hC,qBAAqB;MACzD;MAEA,IAAIuF,4BAAA,CAA6BxoC,MAAA,GAAS,GAAG;QAC3C,MAAMgP,MAAA,GAAS,KAAK6xB,WAAA,CAAY0H,0BAA0B;QAC1D,MAAME,OAAA,GAAU,KAAK5H,WAAA,CAAYtvB,MAAA,CAC/B,CAACukB,CAAA,EAAGh2B,CAAA,KAAM0oC,4BAAA,CAA6BjoC,OAAA,CAAQT,CAAC,MAAM,EACxD;QACA2oC,OAAA,CAAQv/B,OAAA,CAAS06B,UAAA,IAAe;UAC9B50B,MAAA,CAAO0zB,QAAA,GAAW1zB,MAAA,CAAO0zB,QAAA,IAAYkB,UAAA,CAAWlB,QAAA;UAChD1zB,MAAA,CAAOwzB,SAAA,GAAYxzB,MAAA,CAAOwzB,SAAA,IAAaoB,UAAA,CAAWpB,SAAA;UAClDxzB,MAAA,CAAOwsB,UAAA,CAAWzK,OAAA,GAChB6S,UAAA,CAAWtL,QAAA,CAAS,CAAC,EAAElH,UAAA,GAAapiB,MAAA,CAAOspB,QAAA,CAAS,CAAC,EAAElH,UAAA,GACnDwS,UAAA,CAAWpI,UAAA,CAAWzK,OAAA,GACtB/hB,MAAA,CAAOwsB,UAAA,CAAWzK,OAAA;UACxB/hB,MAAA,CAAOwsB,UAAA,CAAW1K,OAAA,GAChB9hB,MAAA,CAAOspB,QAAA,CAASxxB,KAAA,CAAM,EAAE,EAAE,CAAC,EAAEsqB,UAAA,GAC7BwS,UAAA,CAAWtL,QAAA,CAASxxB,KAAA,CAAM,EAAE,EAAE,CAAC,EAAEsqB,UAAA,GAC7BwS,UAAA,CAAWpI,UAAA,CAAW1K,OAAA,GACtB9hB,MAAA,CAAOwsB,UAAA,CAAW1K,OAAA;UACxBkS,aAAA,GAAgB,CAAC,GAAGA,aAAA,EAAe,GAAGY,UAAA,CAAWtL,QAAQ;QAC3D,CAAC;QACDmQ,OAAA,CAAQv/B,OAAA,CAAShG,CAAA,IAAM,KAAK29B,WAAA,CAAYlW,MAAA,CAAO,KAAKkW,WAAA,CAAYtgC,OAAA,CAAQ2C,CAAC,GAAG,CAAC,CAAC;QAC9E,MAAMwlC,0BAAA,GAA6B,KAAK7H,WAAA,CAAYf,SAAA,CAAW58B,CAAA,IAC7D,KAAK+kC,qBAAA,CAAsB/kC,CAAA,CAAEo1B,QAAA,EAAUM,WAAW,CACpD;QACAqK,qBAAA,GAAwByF,0BAAA;MAC1B;IACF,OAAO;MAELzF,qBAAA,GAAwB,KAAKuD,mBAAA,CAAoB5N,WAAA,CAAY,CAAC,CAAC;IACjE;IAEA,OAAO;MAAEqK,qBAAA;MAAuBD;IAAc;EAChD;AACF;;;AC/8BO,IAAM2F,gBAAA,GAAoBC,UAAA,IAC/B,CAAC,CAACA,UAAA,EAAYC,aAAA,IAAiB,CAAC,CAACD,UAAA,EAAYE,UAAA;AAExC,IAAMC,iBAAA,GAAqBH,UAAA,IAChC,CAAC,CAAEA,UAAA,EAAgCI,aAAA,EAAe9kC,EAAA;AAE7C,IAAM+kC,uBAAA,GACXL,UAAA,IAEA,CAAC,CAAEA,UAAA,EAAgCI,aAAA,EAAeE,WAAA;AAE7C,IAAMC,gBAAA,GAAmBA,CAC9BP,UAAA,EACAQ,oBAAA,GAAiC,EAAC,KAElCR,UAAA,CAAW3hC,IAAA,KAAS,UACpB,CAAC,EACC2hC,UAAA,CAAWS,SAAA,IACXD,oBAAA,CAAqB7oC,OAAA,CAAQqoC,UAAA,CAAWS,SAAS,MAAM,MACvDT,UAAA,CAAW3hC,IAAA,KAAS;AAGjB,IAAMqiC,qBAAA,GACXV,UAAA,IAEAO,gBAAA,CAAiBP,UAAU,KAAKG,iBAAA,CAAkBH,UAAU;AAEvD,IAAMW,iBAAA,GACXX,UAAA,IAEAA,UAAA,CAAW3hC,IAAA,KAAS,WAAW,CAAC0hC,gBAAA,CAAiBC,UAAU;AAEtD,IAAMY,sBAAA,GACXZ,UAAA,IAEAW,iBAAA,CAAkBX,UAAU,KAAKG,iBAAA,CAAkBH,UAAU;AAExD,IAAMa,iBAAA,GACXb,UAAA,IACkCA,UAAA,CAAW3hC,IAAA,KAAS;AAEjD,IAAMyiC,sBAAA,GACXd,UAAA,IAEAa,iBAAA,CAAkBb,UAAU,KAAKG,iBAAA,CAAkBH,UAAU;AAExD,IAAMe,0BAAA,GACXf,UAAA,IAC2CA,UAAA,CAAW3hC,IAAA,KAAS;AAE1D,IAAM2iC,+BAAA,GACXhB,UAAA,IAEAe,0BAAA,CAA2Bf,UAAU,KAAKG,iBAAA,CAAkBH,UAAU;AAEjE,IAAMiB,iBAAA,GAAoBA,CAC/BjB,UAAA,EACAQ,oBAAA,GAAiC,EAAC,KAElCR,UAAA,CAAW3hC,IAAA,KAAS,WACpB,CAAC,EAAE2hC,UAAA,CAAWS,SAAA,IAAaD,oBAAA,CAAqB7oC,OAAA,CAAQqoC,UAAA,CAAWS,SAAS,MAAM;AAE7E,IAAMS,sBAAA,GACXlB,UAAA,IAEAiB,iBAAA,CAAkBjB,UAAU,KAAKG,iBAAA,CAAkBH,UAAU;AAExD,IAAMmB,oBAAA,GACXnB,UAAA,IAEAa,iBAAA,CAAkBb,UAAU,KAC5BO,gBAAA,CAAiBP,UAAU,KAC3BW,iBAAA,CAAkBX,UAAU,KAC5BiB,iBAAA,CAAkBjB,UAAU,KAC5Be,0BAAA,CAA2Bf,UAAU;;;ACjFhC,IAAMoB,OAAA,GAAUC,QAAA,IACrB,CAAC,CAAEA,QAAA,CAAkBC,YAAA,IAAgB,EAAE,SAASD,QAAA;AAE3C,IAAME,WAAA,GAAchhC,GAAA,IAAkC;EAC3D,IAAIA,GAAA,KAAQ,QAAQA,GAAA,KAAQ,QAAW,OAAO;EAC9C,IAAI,OAAOA,GAAA,KAAQ,UAAU,OAAO;EAEpC,OACG,OAAOihC,QAAA,KAAa,eAAgBjhC,GAAA,YAA0BihC,QAAA,IAC9D,UAAUjhC,GAAA,IAAO,YAAYA,GAAA,IAAO,CAACvJ,KAAA,CAAMuH,OAAA,CAAQgC,GAAG;AAE3D;AAEO,IAAMkhC,gBAAA,GAAoBlhC,GAAA,IAC/BA,GAAA,YAAegJ,IAAA,IAAQ,EAAEhJ,GAAA,YAAegqB,IAAA;AAEnC,IAAMmX,eAAA,GAAmBnhC,GAAA,IAC9BA,GAAA,KAAQ,QACR,OAAOA,GAAA,KAAQ,YACf,CAAC6gC,OAAA,CAAO7gC,GAAG,KACX,CAACkhC,gBAAA,CAAiBlhC,GAAG,KACrB,OAAOA,GAAA,CAAItE,IAAA,KAAS,YACpB,OAAOsE,GAAA,CAAI+pB,GAAA,KAAQ,YACnB,OAAO/pB,GAAA,CAAIoF,IAAA,KAAS,YACpB,OAAOpF,GAAA,CAAIlC,IAAA,KAAS;AAEf,IAAMsjC,mBAAA,GAAsBA,CAAC;EAClCC,UAAA;EACAx6B,QAAA;EACAy6B;AACF,MAIM;EACJ,MAAMC,gBAAA,GAAmB,IAAIv4B,IAAA,CAAKq4B,UAAA,EAAY;IAAEvjC,IAAA,EAAMwjC;EAAS,CAAC;EAChE,OAAO,IAAItX,IAAA,CAAK,CAACuX,gBAAgB,GAAG16B,QAAA,EAAU;IAAE/I,IAAA,EAAMyjC,gBAAA,CAAiBzjC;EAAK,CAAC;AAC/E;AAEO,IAAM0jC,wBAAA,GAA4BF,QAAA,IAAqB;EAC5D,MAAMt3B,KAAA,GAAQs3B,QAAA,CAASt3B,KAAA,CAAM,YAAY;EACzC,OAAOA,KAAA,GAAQ,CAAC;AAClB;AAEO,IAAMy3B,qBAAA,GAAyBC,IAAA,IACpC,IAAIlpB,OAAA,CAAQ,CAAC/E,OAAA,EAASC,MAAA,KAAW;EAC/B,MAAMiuB,UAAA,GAAa,IAAIC,UAAA,CAAW;EAClCD,UAAA,CAAWE,MAAA,GAAS,MAAM;IACxBpuB,OAAA,CAAQkuB,UAAA,CAAW7lC,MAAqB;EAC1C;EAEA6lC,UAAA,CAAWjnB,OAAA,GAAU,MAAM;IACzBhH,MAAA,CAAOiuB,UAAA,CAAWx6B,KAAK;EACzB;EAEAw6B,UAAA,CAAWG,iBAAA,CAAkBJ,IAAI;AACnC,CAAC;AAEI,IAAMK,gBAAA,GAAoBT,QAAA,IAAqB;EACpD,MAAMU,SAAA,GAAYR,wBAAA,CAAyBF,QAAQ;EACnD,OAAO,SAAQ,mBAAIjtB,IAAA,CAAK,GAAElL,WAAA,CAAY,CAAC,GAAG64B,SAAA,GAAY,MAAMA,SAAA,GAAY,EAAE;AAC5E;AAEO,IAAMC,WAAA,GAAenB,QAAA,IAAuC;EACjE,MAAMQ,QAAA,GAAWR,QAAA,CAAShjC,IAAA;EAC1B,OAAOwjC,QAAA,CAASY,UAAA,CAAW,QAAQ,KAAK,CAACZ,QAAA,CAASr/B,QAAA,CAAS,YAAY;AACzE;AAEO,IAAMkgC,6BAAA,GAAiCb,QAAA,IAAqB;EACjE,IAAIA,QAAA,CAASY,UAAA,CAAW,QAAQ,KAAK,CAACZ,QAAA,CAASr/B,QAAA,CAAS,YAAY,GAAG,OAAO;EAC9E,IAAIq/B,QAAA,CAASc,QAAA,CAAS,QAAQ,GAAG,OAAO;EACxC,IAAId,QAAA,CAASc,QAAA,CAAS,QAAQ,GAAG,OAAO;EACxC,OAAO;AACT;AAEO,IAAMC,uBAAA,GACX5C,UAAA,IAC2B;EAC3B,IAAI,CAACA,UAAA,EAAY,OAAO;EACxB,IAAIG,iBAAA,CAAkBH,UAAU,GAAG;IACjC,OAAOA,UAAA;EACT;EAEA,MAAM;IAAEI,aAAA;IAAe,GAAGyC;EAAK,IAAI7C,UAAA;EACnC,OAAO;IACLI,aAAA,EAAe;MACb,IAAIA,aAAA,IAAiB,CAAC;MACtB9kC,EAAA,EAAK8kC,aAAA,EAA+C9kC,EAAA,IAAM+wB,cAAA,CAAe;IAC3E;IACA,GAAGwW;EACL;AACF;;;AC7FO,IAAMC,OAAA,GAAc/gC,KAAA,IACzB,OAAOA,KAAA,KAAU;AAGnB,IAAMghC,KAAA,GAAO99B,CAAA,KAAM,CAAC;AAEb,IAAM+9B,UAAA,GAAN,MAAoD;EAIzD5nC,YAAsB2G,KAAA,EAAU;IAAV,KAAAA,KAAA,GAAAA,KAAA;IAHtB,KAAUyJ,QAAA,GAAW,mBAAIumB,GAAA,CAAgB;IACzC,KAAUkR,aAAA,GAAgB,mBAAIlR,GAAA,CAAqB;IAwCnD,KAAOmR,WAAA,GAAeC,OAAA,IACpB,KAAKlgC,IAAA,CAAMmgC,OAAA,KAAa;MAAE,GAAGA,OAAA;MAAS,GAAGD;IAAQ,EAAE;IAcrD,KAAOE,qBAAA,GAAwB,CAG7BC,QAAA,EACAC,OAAA,KACG;MAEH,IAAIC,wBAAA;MAEJ,MAAMC,cAAA,GAA8BC,SAAA,IAAc;QAChD,MAAMC,mBAAA,GAAsBL,QAAA,CAASI,SAAS;QAE9C,IAAIE,gBAAA,GAAmB,OAAOJ,wBAAA,KAA6B;QAE3D,WAAW7iC,GAAA,IAAO6iC,wBAAA,EAA0B;UAC1C,IAAIA,wBAAA,CAAyB7iC,GAAG,MAAMgjC,mBAAA,CAAoBhjC,GAAG,GAAG;UAChEijC,gBAAA,GAAmB;UACnB;QACF;QAEA,IAAI,CAACA,gBAAA,EAAkB;QAOvB,MAAMC,4BAAA,GAA+BL,wBAAA;QACrCA,wBAAA,GAA2BG,mBAAA;QAE3BJ,OAAA,CAAQI,mBAAA,EAAqBE,4BAA4B;MAC3D;MAEA,OAAO,KAAK5nB,SAAA,CAAUwnB,cAAc;IACtC;EAvFiC;EAAA;AAAA;AAAA;AAAA;AAAA;EAAA;EAQ1BtiC,MACL2iC,UAAA,EAKA;IACA,OAAO,IAAIC,gBAAA,CAA+D;MACxEC,QAAA,EAAU;MACVzhC,MAAA,EAAQuhC;IACV,CAAC;EACH;EAEO7gC,KAAKghC,eAAA,EAAwC;IAElD,MAAMC,QAAA,GAAWpB,OAAA,CAAQmB,eAAe,IACpCA,eAAA,CAAgB,KAAKliC,KAAK,IAC1BkiC,eAAA;IAGJ,IAAIC,QAAA,KAAa,KAAKniC,KAAA,EAAO;IAE7B,KAAKkhC,aAAA,CAAc3iC,OAAA,CAAS6jC,YAAA,IAAiBA,YAAA,CAAaD,QAAA,EAAU,KAAKniC,KAAK,CAAC;IAE/E,MAAMqiC,QAAA,GAAW,KAAKriC,KAAA;IACtB,KAAKA,KAAA,GAAQmiC,QAAA;IAEb,KAAK14B,QAAA,CAASlL,OAAA,CAASijC,OAAA,IAAYA,OAAA,CAAQ,KAAKxhC,KAAA,EAAOqiC,QAAQ,CAAC;EAClE;EAKOC,eAAA,EAAoB;IACzB,OAAO,KAAKtiC,KAAA;EACd;EAEOka,UAAUsnB,OAAA,EAAkC;IACjDA,OAAA,CAAQ,KAAKxhC,KAAA,EAAO,MAAS;IAC7B,KAAKyJ,QAAA,CAASwmB,GAAA,CAAIuR,OAAO;IACzB,OAAO,MAAM;MACX,KAAK/3B,QAAA,CAAS3O,MAAA,CAAO0mC,OAAO;IAC9B;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAyEOe,gBAAgBH,YAAA,EAAmD;IACxE,KAAKlB,aAAA,CAAcjR,GAAA,CAAImS,YAAY;IAEnC,OAAO,MAAM;MACX,KAAKlB,aAAA,CAAcpmC,MAAA,CAAOsnC,YAAY;IACxC;EACF;AACF;AAkBO,IAAMJ,gBAAA,GAAN,MAAMQ,iBAAA,SAGHvB,UAAA,CAAkB;EAM1B5nC,YAAY;IAAE4oC,QAAA;IAAUzhC;EAAO,GAAuD;IACpF,MAAMiiC,aAAA,GAAgBR,QAAA,CAASK,cAAA,CAAe;IAC9C,MAAMI,WAAA,GAAcliC,MAAA,CAAO8hC,cAAA,CAAe;IAE1C,MAAM;MACJ,GAAGG,aAAA;MACH,GAAGC;IACL,CAAC;IAuGH;IAAA,KAAOxhC,IAAA,GAAO,MAAM;MAClBoc,OAAA,CAAQC,IAAA,CACN,GAAGilB,iBAAA,CAAiBtoC,IAAI,8DAC1B;IACF;IACA,KAAOinC,WAAA,GAAc,MAAM;MACzB7jB,OAAA,CAAQC,IAAA,CACN,GAAGilB,iBAAA,CAAiBtoC,IAAI,mFAC1B;IACF;IA9GE,KAAKyoC,mBAAA,GAAsBF,aAAA;IAC3B,KAAKG,iBAAA,GAAoBF,WAAA;IAEzB,KAAKT,QAAA,GAAWA,QAAA;IAChB,KAAKzhC,MAAA,GAASA,MAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiBO0Z,UAAUsnB,OAAA,EAAyB;IACxC,MAAMqB,oBAAA,GAAsC,EAAC;IAO7C,IAAI,CAAC,KAAKp5B,QAAA,CAAS7F,IAAA,EAAM;MACvB,MAAMk/B,IAAA,GAAQnB,SAAA,IAAqB;QACjC,MAAMzgC,IAAA,CAAM6hC,YAAA,KAAkB;UAC5B,GAAGA,YAAA;UACH,GAAGpB;QACL,EAAE;MACJ;MAEAkB,oBAAA,CAAqBlsC,IAAA,CACnB,KAAKsrC,QAAA,CAAS/nB,SAAA,CAAWynB,SAAA,IAAc;QACrC,IAAIA,SAAA,KAAc,KAAKgB,mBAAA,EAAqB;QAC5C,KAAKA,mBAAA,GAAsBhB,SAAA;QAC3BmB,IAAA,CAAKnB,SAAS;MAChB,CAAC,GACD,KAAKnhC,MAAA,CAAO0Z,SAAA,CAAWynB,SAAA,IAAc;QACnC,IAAIA,SAAA,KAAc,KAAKiB,iBAAA,EAAmB;QAC1C,KAAKA,iBAAA,GAAoBjB,SAAA;QACzBmB,IAAA,CAAKnB,SAAS;MAChB,CAAC,CACH;IACF;IAEAkB,oBAAA,CAAqBlsC,IAAA,CAAK,MAAMujB,SAAA,CAAUsnB,OAAO,CAAC;IAElD,OAAO,MAAM;MACXqB,oBAAA,CAAqBtkC,OAAA,CAAS+Y,WAAA,IAAgBA,WAAA,CAAY,CAAC;IAC7D;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAoBOgrB,eAAA,EAAiB;IAGtB,IAAI,CAAC,KAAK74B,QAAA,CAAS7F,IAAA,EAAM;MACvB,MAAM6+B,aAAA,GAAgB,KAAKR,QAAA,CAASK,cAAA,CAAe;MACnD,MAAMI,WAAA,GAAc,KAAKliC,MAAA,CAAO8hC,cAAA,CAAe;MAE/C,IACEG,aAAA,KAAkB,KAAKE,mBAAA,IACvBD,WAAA,KAAgB,KAAKE,iBAAA,EACrB;QACA,KAAK5iC,KAAA,GAAQ;UACX,GAAGyiC,aAAA;UACH,GAAGC;QACL;QACA,KAAKE,iBAAA,GAAoBF,WAAA;QACzB,KAAKC,mBAAA,GAAsBF,aAAA;MAC7B;IACF;IAEA,OAAO,MAAMH,cAAA,CAAe;EAC9B;EAaOC,gBAAA,EAAkB;IACvBjlB,OAAA,CAAQC,IAAA,CACN,GAAGilB,iBAAA,CAAiBtoC,IAAI,+FAC1B;IACA,OAAO8mC,KAAA;EACT;AACF;;;AChRO,IAAMgC,eAAA,GAAmBhjC,KAAA,IAA4B;EAC1D,IAAI,CAACA,KAAA,IAAS,OAAOA,KAAA,KAAU,UAAU,OAAO;EAGhD,IAAI/K,KAAA,CAAMuH,OAAA,CAAQwD,KAAK,GAAG,OAAO;EAGjC,MAAMijC,KAAA,GAAQtnC,MAAA,CAAOE,cAAA,CAAemE,KAAK;EAGzC,IAAIijC,KAAA,KAAU,QAAQA,KAAA,KAAUtnC,MAAA,CAAOC,SAAA,EAAW,OAAO;EAGzD,OAAOoE,KAAA,CAAM3G,WAAA,IAAe2G,KAAA,CAAM3G,WAAA,KAAgBsC,MAAA;AACpD;AAMO,IAAMunC,OAAA,GAAUA,CACrBC,MAAA,EACAC,MAAA,EACAC,YAAA,GAAe,mBAAIrT,GAAA,CAAwB,GAC3CsT,YAAA,GAAe,mBAAIC,OAAA,CAAgB,GACnCC,YAAA,GAAe,mBAAID,OAAA,CAAgB,MACvB;EAEZ,IAAIJ,MAAA,KAAWC,MAAA,EAAQ,OAAO;EAG9B,IAAID,MAAA,IAAU,QAAQC,MAAA,IAAU,MAAM,OAAO;EAG7C,MAAMK,KAAA,GAAQ,OAAON,MAAA;EACrB,MAAMO,KAAA,GAAQ,OAAON,MAAA;EAGrB,IAAIK,KAAA,KAAUC,KAAA,EAAO,OAAO;EAG5B,IAAID,KAAA,KAAU,UAAU;IAGtB,IAAIN,MAAA,KAAWA,MAAA,IAAUC,MAAA,KAAWA,MAAA,EAAQ,OAAO;IACnD,OAAOD,MAAA,KAAWC,MAAA;EACpB;EAGA,MAAMO,IAAA,GAAOR,MAAA;EACb,MAAMS,IAAA,GAAOR,MAAA;EAGb,IAAIE,YAAA,CAAahzB,GAAA,CAAIqzB,IAAI,KAAKH,YAAA,CAAalzB,GAAA,CAAIszB,IAAI,GAAG;IAGpD,OAAON,YAAA,CAAahzB,GAAA,CAAIqzB,IAAI,KAAKH,YAAA,CAAalzB,GAAA,CAAIszB,IAAI;EACxD;EAGAN,YAAA,CAAarT,GAAA,CAAI0T,IAAI;EACrBH,YAAA,CAAavT,GAAA,CAAI2T,IAAI;EAGrB,IAAIT,MAAA,YAAkBtwB,IAAA,IAAQuwB,MAAA,YAAkBvwB,IAAA,EAAM;IACpDywB,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAOT,MAAA,CAAOhV,OAAA,CAAQ,MAAMiV,MAAA,CAAOjV,OAAA,CAAQ;EAC7C;EAGA,IAAIgV,MAAA,YAAkBnwB,MAAA,IAAUowB,MAAA,YAAkBpwB,MAAA,EAAQ;IACxDswB,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAOT,MAAA,CAAOznC,QAAA,CAAS,MAAM0nC,MAAA,CAAO1nC,QAAA,CAAS;EAC/C;EAGA,IAAIsnC,eAAA,CAAgBG,MAAM,KAAKH,eAAA,CAAgBI,MAAM,GAAG;IAEtDE,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAO;EACT;EAGA,MAAMC,QAAA,GAAW5uC,KAAA,CAAMuH,OAAA,CAAQ2mC,MAAM;EACrC,MAAMW,QAAA,GAAW7uC,KAAA,CAAMuH,OAAA,CAAQ4mC,MAAM;EAErC,IAAIS,QAAA,KAAaC,QAAA,EAAU;IAEzBR,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAO;EACT;EAEA,IAAIC,QAAA,IAAYC,QAAA,EAAU;IACxB,MAAMC,IAAA,GAAOZ,MAAA;IACb,MAAMa,IAAA,GAAOZ,MAAA;IAEb,IAAIW,IAAA,CAAK1uC,MAAA,KAAW2uC,IAAA,CAAK3uC,MAAA,EAAQ;MAE/BiuC,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;MACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;MACxB,OAAO;IACT;IAGA,MAAMK,QAAA,GAA8B,CAACd,MAAA,EAAQC,MAAM;IACnD,IAAIC,YAAA,CAAa/yB,GAAA,CAAI2zB,QAAO,GAAG;MAE7BX,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;MACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;MACxB,OAAO;IACT;IACAP,YAAA,CAAapT,GAAA,CAAIgU,QAAO;IAGxB,SAAS9uC,CAAA,GAAI,GAAGA,CAAA,GAAI4uC,IAAA,CAAK1uC,MAAA,EAAQF,CAAA,IAAK;MACpC,IAAI,CAAC+tC,OAAA,CAAQa,IAAA,CAAK5uC,CAAC,GAAG6uC,IAAA,CAAK7uC,CAAC,GAAGkuC,YAAA,EAAcC,YAAA,EAAcE,YAAY,GAAG;QACxEH,YAAA,CAAavoC,MAAA,CAAOmpC,QAAO;QAE3BX,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;QACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;QACxB,OAAO;MACT;IACF;IAEAP,YAAA,CAAavoC,MAAA,CAAOmpC,QAAO;IAC3BX,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAO;EACT;EAGA,MAAMM,SAAA,GAAYf,MAAA;EAClB,MAAMgB,SAAA,GAAYf,MAAA;EAElB,MAAMgB,KAAA,GAAQzoC,MAAA,CAAO+C,IAAA,CAAKwlC,SAAS;EACnC,MAAMG,KAAA,GAAQ1oC,MAAA,CAAO+C,IAAA,CAAKylC,SAAS;EAGnC,IAAIC,KAAA,CAAM/uC,MAAA,KAAWgvC,KAAA,CAAMhvC,MAAA,EAAQ;IAEjCiuC,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAO;EACT;EAIA,WAAWhlC,GAAA,IAAOylC,KAAA,EAAO;IACvB,IAAI,CAAC1oC,MAAA,CAAOC,SAAA,CAAUoG,cAAA,CAAe9F,IAAA,CAAKgoC,SAAA,EAAWtlC,GAAG,GAAG;MAEzD0kC,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;MACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;MACxB,OAAO;IACT;EACF;EAGA,MAAMU,OAAA,GAA8B,CAACnB,MAAA,EAAQC,MAAM;EACnD,IAAIC,YAAA,CAAa/yB,GAAA,CAAIg0B,OAAO,GAAG;IAE7BhB,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;IACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;IACxB,OAAO;EACT;EACAP,YAAA,CAAapT,GAAA,CAAIqU,OAAO;EAGxB,WAAW1lC,GAAA,IAAOwlC,KAAA,EAAO;IACvB,IACE,CAAClB,OAAA,CAAQgB,SAAA,CAAUtlC,GAAG,GAAGulC,SAAA,CAAUvlC,GAAG,GAAGykC,YAAA,EAAcC,YAAA,EAAcE,YAAY,GACjF;MACAH,YAAA,CAAavoC,MAAA,CAAOwpC,OAAO;MAE3BhB,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;MACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;MACxB,OAAO;IACT;EACF;EAEAP,YAAA,CAAavoC,MAAA,CAAOwpC,OAAO;EAE3BhB,YAAA,CAAaxoC,MAAA,CAAO6oC,IAAI;EACxBH,YAAA,CAAa1oC,MAAA,CAAO8oC,IAAI;EACxB,OAAO;AACT;AAMO,SAASW,aAAatC,QAAA,EAAmBuC,QAAA,EAAoC;EAElF,MAAMC,QAAA,GAAqB;IAAEC,QAAA,EAAU,CAAC;EAAE;EAG1CC,mBAAA,CAAoB1C,QAAA,EAAUuC,QAAA,EAAUC,QAAQ;EAGhD,OAAOG,eAAA,CAAgBH,QAAQ;AACjC;AAKA,SAASE,oBACP1C,QAAA,EACAuC,QAAA,EACAK,cAAA,EACAjmC,GAAA,EAOAykC,YAAA,GAAe,mBAAIrT,GAAA,CAAwB,GAO3C8U,WAAA,GAAc,mBAAI9U,GAAA,CAAa,GACzB;EAEN,IAAIkT,OAAA,CAAQjB,QAAA,EAAUuC,QAAA,EAAU,IAAIxU,GAAA,CAAIqT,YAAY,CAAC,GAAG;IACtD;EACF;EAGA,IAAIpB,QAAA,KAAa,UAAaA,QAAA,KAAa,MAAM;IAC/C,IAAIrjC,GAAA,KAAQ,QAAW;MACrBimC,cAAA,CAAeH,QAAA,CAAShsC,MAAA,CAAOkG,GAAG,CAAC,IAAI;QACrCtC,IAAA,EAAM;QACN0D,KAAA,EAAOwkC,QAAA;QACPE,QAAA,EAAU,CAAC;MACb;IACF;IACA;EACF;EAGA,IAAI,OAAOzC,QAAA,KAAa,YAAYA,QAAA,KAAa,MAAM;IACrD,IAAI6C,WAAA,CAAYx0B,GAAA,CAAI2xB,QAAQ,GAAG;MAC7B,IAAIrjC,GAAA,KAAQ,QAAW;QACrBimC,cAAA,CAAeH,QAAA,CAAShsC,MAAA,CAAOkG,GAAG,CAAC,IAAI;UACrCtC,IAAA,EAAM;UACN0D,KAAA,EAAOwkC,QAAA;UACPnC,QAAA,EAAUJ,QAAA;UACVyC,QAAA,EAAU,CAAC;QACb;MACF;MACA;IACF;IACAI,WAAA,CAAY7U,GAAA,CAAIgS,QAAQ;EAC1B;EAGA,MAAM8C,qBAAA,GACJ,OAAO9C,QAAA,KAAa,YACpB,OAAOuC,QAAA,KAAa,YACpBvC,QAAA,KAAa,QACbuC,QAAA,KAAa,QACbvvC,KAAA,CAAMuH,OAAA,CAAQylC,QAAQ,MAAMhtC,KAAA,CAAMuH,OAAA,CAAQgoC,QAAQ,KAClDxB,eAAA,CAAgBf,QAAQ,KACxBe,eAAA,CAAgBwB,QAAQ;EAE1B,IAAIO,qBAAA,EAAuB;IACzB,IAAInmC,GAAA,KAAQ,QAAW;MACrBimC,cAAA,CAAeH,QAAA,CAAShsC,MAAA,CAAOkG,GAAG,CAAC,IAAI;QACrCtC,IAAA,EAAM;QACN0D,KAAA,EAAOwkC,QAAA;QACPnC,QAAA,EAAUJ,QAAA;QACVyC,QAAA,EAAU,CAAC;MACb;IACF;IAGA,IAAI,OAAOzC,QAAA,KAAa,YAAYA,QAAA,KAAa,MAAM;MACrD6C,WAAA,CAAYhqC,MAAA,CAAOmnC,QAAQ;IAC7B;IACA;EACF;EAGA,MAAM+C,WAAA,GAAc/C,QAAA;EACpB,MAAMgD,WAAA,GAAcT,QAAA;EAGpB,MAAMU,eAAA,GACJtmC,GAAA,KAAQ,SACJ;IACEtC,IAAA,EAAM;IACNooC,QAAA,EAAU,CAAC;IACXrC,QAAA,EAAUJ,QAAA;IACVjiC,KAAA,EAAOwkC;EACT,IACAK,cAAA;EAEN,IAAIjmC,GAAA,KAAQ,QAAW;IACrBimC,cAAA,CAAeH,QAAA,CAAShsC,MAAA,CAAOkG,GAAG,CAAC,IAAIsmC,eAAA;EACzC;EAGA,MAAMZ,OAAA,GAA8B,CAACrC,QAAA,EAAUuC,QAAQ;EACvD,IAAInB,YAAA,CAAa/yB,GAAA,CAAIg0B,OAAO,GAAG;IAE7B,IAAI,OAAOrC,QAAA,KAAa,YAAYA,QAAA,KAAa,MAAM;MACrD6C,WAAA,CAAYhqC,MAAA,CAAOmnC,QAAQ;IAC7B;IACA;EACF;EACAoB,YAAA,CAAapT,GAAA,CAAIqU,OAAO;EAGxB,MAAMa,OAAA,GAAU,mBAAInV,GAAA,CAAI,CACtB,GAAGr0B,MAAA,CAAO+C,IAAA,CAAKsmC,WAAW,GAC1B,GAAGrpC,MAAA,CAAOypC,qBAAA,CAAsBJ,WAAW,GAC3C,GAAGrpC,MAAA,CAAO+C,IAAA,CAAKumC,WAAW,GAC1B,GAAGtpC,MAAA,CAAOypC,qBAAA,CAAsBH,WAAW,EAC5C;EAED,WAAWI,QAAA,IAAYF,OAAA,EAAS;IAC9B,MAAM1C,aAAA,GAAgBuC,WAAA,CAAYK,QAAQ;IAC1C,MAAMC,aAAA,GAAgBL,WAAA,CAAYI,QAAQ;IAG1C,IAAI,EAAEA,QAAA,IAAYJ,WAAA,GAAc;MAE9B;IACF;IAGA,IAAI,EAAEI,QAAA,IAAYL,WAAA,GAAc;MAC9BE,eAAA,CAAgBR,QAAA,CAAShsC,MAAA,CAAO2sC,QAAQ,CAAC,IAAI;QAC3C/oC,IAAA,EAAM;QACN0D,KAAA,EAAOslC,aAAA;QACPZ,QAAA,EAAU,CAAC;MACb;MACA;IACF;IAGAC,mBAAA,CACElC,aAAA,EACA6C,aAAA,EACAJ,eAAA,EACAG,QAAA,EACAhC,YAAA,EACAyB,WACF;EACF;EAEAzB,YAAA,CAAavoC,MAAA,CAAOwpC,OAAO;EAG3B,IAAI,OAAOrC,QAAA,KAAa,YAAYA,QAAA,KAAa,MAAM;IACrD6C,WAAA,CAAYhqC,MAAA,CAAOmnC,QAAQ;EAC7B;AACF;AAEO,SAASsD,gBAAkC7qC,OAAA,GAAmC,CAAC,GAAG;EACvF,MAAM;IAAE8qC,SAAA,GAAY;EAAM,IAAI9qC,OAAA;EAE9B,OAAO,SAAS+qC,UAAU;IACxBphC,MAAA;IACAD,MAAA;IACAshC;EACF,GAIyC;IACvC,MAAM5H,OAAA,GAAU7oC,KAAA,CAAMuH,OAAA,CAAQ4H,MAAM,IAAIA,MAAA,GAAS,CAACA,MAAM;IAGxD,MAAMuhC,cAAA,GAAiBH,SAAA,GAAYI,eAAA,CAAgBvhC,MAAM,IAAI;IAE7D,SAASwhC,iBACPC,WAAA,EACAC,QAAA,EACAC,SAAA,EACAC,OAAA,EACAC,GAAA,EACAhiC,KAAA,EACS;MACT,MAAMiiC,WAAA,GAAcT,UAAA,GAClBI,WAAA,EACAC,QAAA,EACAC,SAAA,EACAC,OAAA,EACAC,GAAA,EACAhiC,KACF;MACA,IAAIiiC,WAAA,KAAgB,QAAW;QAC7BxqC,MAAA,CAAOoE,cAAA,CAAekmC,OAAA,EAAQD,SAAA,EAAW;UACvChmC,KAAA,EAAOmmC,WAAA;UACPxjC,UAAA,EAAY;UACZC,QAAA,EAAU;UACV+M,YAAA,EAAc;QAChB,CAAC;QACD,OAAO;MACT;MACA,OAAO;IACT;IAEA,SAASy2B,gBAAgBN,WAAA,EAAsBC,QAAA,EAA0B;MACvE,IAAID,WAAA,KAAgB,QAAQ,OAAOA,WAAA,KAAgB,aAAa;QAC9D,OAAOC,QAAA;MACT;MACA,IAAI,CAAC9wC,KAAA,CAAMuH,OAAA,CAAQspC,WAAW,KAAK,OAAOA,WAAA,KAAgB,UAAU;QAClE,OAAOC,QAAA;MACT;MACA,IAAID,WAAA,IAAe,OAAOA,WAAA,KAAgB,UAAU;QAElD,MAAMO,qBAAA,GAAwBrD,eAAA,CAAgB8C,WAAW;QACzD,MAAMQ,qBAAA,GAAwBtD,eAAA,CAAgB+C,QAAQ;QAGtD,IAAIM,qBAAA,IAAyBC,qBAAA,EAAuB;UAElD,IAAIA,qBAAA,EAAuB;YACzB,OAAOP,QAAA;UACT;UAEA,OAAOD,WAAA;QACT;QAGA,OAAO7wC,KAAA,CAAMuH,OAAA,CAAQspC,WAAW,IAAI,CAAC,GAAGA,WAAW,IAAI;UAAE,GAAGA;QAAY;MAC1E;MACA,OAAO7wC,KAAA,CAAMuH,OAAA,CAAQupC,QAAQ,IAAI,EAAC,GAAI,CAAC;IACzC;IAEA,SAASQ,mBACPN,OAAA,EACAC,GAAA,EACAF,SAAA,EACA9hC,KAAA,EACAsiC,aAAA,EACM;MACN,MAAMT,QAAA,GAAWG,GAAA,CAAIF,SAA6B;MAClD,MAAMF,WAAA,GAAcG,OAAA,CAAOD,SAAgC;MAE3D,IAAIH,gBAAA,CAAiBC,WAAA,EAAaC,QAAA,EAAUC,SAAA,EAAWC,OAAA,EAAQC,GAAA,EAAKhiC,KAAK,GAAG;QAC1E;MACF;MAEA,IAAI6hC,QAAA,IAAY,OAAOA,QAAA,KAAa,UAAU;QAC5C,IAAI,CAAC7hC,KAAA,CAAMoM,GAAA,CAAIy1B,QAAQ,GAAG;UACxB,MAAMU,SAAA,GAAYL,eAAA,CAAgBN,WAAA,EAAaC,QAAQ;UACvDpqC,MAAA,CAAOoE,cAAA,CAAekmC,OAAA,EAAQD,SAAA,EAAW;YACvChmC,KAAA,EAAOymC,SAAA;YACP9jC,UAAA,EAAY;YACZC,QAAA,EAAU;YACV+M,YAAA,EAAc;UAChB,CAAC;UAED,IAAIqzB,eAAA,CAAgByD,SAAS,GAAG;UAEhCD,aAAA,CAAc7vC,IAAA,CAAK;YACjB0N,MAAA,EAAQoiC,SAAA;YACRriC,MAAA,EAAQ2hC,QAAA;YACRC,SAAA;YACAU,YAAA,EAAcT;UAChB,CAAC;QACH;MACF,WAAWF,QAAA,KAAa,QAAW;QACjCE,OAAA,CAAOD,SAAgC,IAAID,QAAA;MAC7C;IACF;IAEA,SAASY,YACPV,OAAA,EACAW,OAAA,EACA1iC,KAAA,EACAsiC,aAAA,EACM;MACN,MAAMK,UAAA,GAAa,CACjB,GAAGlrC,MAAA,CAAO+C,IAAA,CAAKkoC,OAAM,GACrB,GAAGjrC,MAAA,CAAOypC,qBAAA,CAAsBwB,OAAM,EACxC;MACA,WAAWZ,SAAA,IAAaa,UAAA,EAAY;QAClCN,kBAAA,CAAmBN,OAAA,EAAQW,OAAA,EAAQZ,SAAA,EAAW9hC,KAAA,EAAOsiC,aAAa;MACpE;IACF;IAEA,SAASM,oBACP;MAAEziC,MAAA,EAAA4hC,OAAA;MAAQ7hC,MAAA,EAAAwiC,OAAA;MAAQZ,SAAA;MAAWU;IAAa,GAC1CxiC,KAAA,EACAsiC,aAAA,EACM;MACN,IAAItiC,KAAA,CAAMoM,GAAA,CAAIs2B,OAAM,GAAG;QAKrB,IAAIpB,SAAA,IAAaQ,SAAA,IAAaU,YAAA,EAAc;UAC1C/qC,MAAA,CAAOoE,cAAA,CAAe2mC,YAAA,EAAcV,SAAA,EAAW;YAC7ChmC,KAAA,EAAOimC,OAAA;YACPtjC,UAAA,EAAY;YACZC,QAAA,EAAU;YACV+M,YAAA,EAAc;UAChB,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACzL,KAAA,CAAMoM,GAAA,CAAI21B,OAAM,KAAK,CAAC/hC,KAAA,CAAMoM,GAAA,CAAIs2B,OAAM,GAAG;QAC5C1iC,KAAA,CAAM+rB,GAAA,CAAIgW,OAAM;QAChB/hC,KAAA,CAAM+rB,GAAA,CAAI2W,OAAM;QAChBD,WAAA,CAAYV,OAAA,EAAQW,OAAA,EAAQ1iC,KAAA,EAAOsiC,aAAa;QAChDtiC,KAAA,CAAMpJ,MAAA,CAAO8rC,OAAM;QACnB1iC,KAAA,CAAMpJ,MAAA,CAAOmrC,OAAM;MACrB;IACF;IAEA,SAASc,UAAUC,MAAA,EAAWJ,OAAA,EAAgB1iC,KAAA,GAAQ,mBAAI8rB,GAAA,CAAa,GAAM;MAE3E,IAAI9rB,KAAA,CAAMoM,GAAA,CAAI02B,MAAM,KAAK9iC,KAAA,CAAMoM,GAAA,CAAIs2B,OAAM,GAAG;QAC1C,OAAO;UAAE,GAAGI;QAAO;MACrB;MAEA,MAAMC,OAAA,GAAS;QAAE,GAAGD;MAAO;MAC3B,MAAMR,aAAA,GAAgC,EAAC;MACvCtiC,KAAA,CAAM+rB,GAAA,CAAIgX,OAAM;MAChB/iC,KAAA,CAAM+rB,GAAA,CAAI2W,OAAM;MAEhBD,WAAA,CAAYM,OAAA,EAAQL,OAAA,EAAQ1iC,KAAA,EAAOsiC,aAAa;MAEhD,OAAOA,aAAA,CAAcnxC,MAAA,EAAQ;QAE3ByxC,mBAAA,CAAoBN,aAAA,CAAcr+B,GAAA,CAAI,GAAIjE,KAAA,EAAOsiC,aAAa;MAChE;MAEAtiC,KAAA,CAAMpJ,MAAA,CAAO8rC,OAAM;MACnB1iC,KAAA,CAAMpJ,MAAA,CAAOmsC,OAAM;MAEnB,OAAOA,OAAA;IACT;IAEA,MAAM3sC,MAAA,GAASwjC,OAAA,CAAQpO,MAAA,CAAU,CAACuX,OAAA,EAAQL,OAAA,KAAWG,SAAA,CAAUE,OAAA,EAAQL,OAAM,GAAQ;MACnF,GAAGviC;IACL,CAAM;IAGN,MAAM6iC,IAAA,GACJ1B,SAAA,IAAaG,cAAA,GAAiBpB,YAAA,CAAaoB,cAAA,EAAgBrrC,MAAM,IAAI;IAEvE,OAAO;MAAEA,MAAA;MAAQ4sC;IAAK;EACxB;AACF;AAGO,SAAStC,gBAAgBuC,QAAA,EAAqC;EACnE,MAAMC,aAAA,GAAmD,CAAC;EAC1D,IAAIC,WAAA,GAAc;EAElB,WAAWzoC,GAAA,IAAOuoC,QAAA,CAASzC,QAAA,EAAU;IACnC,MAAM4C,SAAA,GAAY1C,eAAA,CAAgBuC,QAAA,CAASzC,QAAA,CAAS9lC,GAAG,CAAC;IACxD,IAAI0oC,SAAA,EAAW;MACbF,aAAA,CAAcxoC,GAAG,IAAI0oC,SAAA;MACrBD,WAAA,GAAc;IAChB;EACF;EAGA,IAAIF,QAAA,CAAS7qC,IAAA,IAAQ+qC,WAAA,EAAa;IAChC,OAAO;MACL,GAAGF,QAAA;MACHzC,QAAA,EAAU0C;IACZ;EACF;EAEA,OAAO;AACT;;;AC7jBO,SAASG,UACdljC,MAAA,EACAD,MAAA,EACAshC,UAAA,EACG;EACH,MAAMD,SAAA,GAAYF,eAAA,CAAmB;EACrC,OAAOE,SAAA,CAAU;IAAEphC,MAAA;IAAQD,MAAA;IAAQshC;EAAW,CAAC,EAAEprC,MAAA;AACnD;;;ACFO,SAASktC,cACdnjC,MAAA,EACAD,MAAA,EACAshC,UAAA,EAC+B;EAC/B,MAAMD,SAAA,GAAYF,eAAA,CAAmB;IAAEC,SAAA,EAAW;EAAK,CAAC;EACxD,MAAM;IAAElrC,MAAA;IAAQ4sC;EAAK,IAAIzB,SAAA,CAAU;IAAEphC,MAAA;IAAQD,MAAA;IAAQshC;EAAW,CAAC;EAIjE,OAAO;IAAEprC,MAAA;IAAQ4sC,IAAA,EAAMtC,eAAA,CAAgBsC,IAAA,IAAQ;MAAExC,QAAA,EAAU,CAAC;IAAE,CAAC,KAAK;MAAEA,QAAA,EAAU,CAAC;IAAE;EAAE;AACvF;;;ACAA,IAAM+C,SAAA,GAAYA,CAAC;EACjB3iC;AACF,OAE+B;EAC7B02B,WAAA,GAAc12B,OAAA,EAAS02B,WAAA,IAAe,EAAC,GACnC50B,MAAA,CAAO,CAAC;IAAEs3B;EAAc,MAAM,CAACA,aAAa,EAC7CrmC,GAAA,CAAK6vC,GAAA,IAAQ;IACZ,MAAMrJ,aAAA,GAAgBe,oBAAA,CAAqBsI,GAAG,IAC1C;MAAEnuC,EAAA,EAAI+wB,cAAA,CAAe;MAAGiU,WAAA,EAAa;IAAW,IAChD;MAAEhlC,EAAA,EAAI+wB,cAAA,CAAe;IAAE;IAC3B,OAAO;MACL,GAAGod,GAAA;MACHrJ;IACF;EACF,CAAC;AACL;AAEO,IAAMsJ,iBAAA,GAAN,MAAwB;EAQ7BtuC,YAAY;IAAEuuC,QAAA;IAAU9iC;EAAQ,GAA6B;IAiE7D,KAAA+iC,iBAAA,GAAqBC,eAAA,IAAqC;MACxD,KAAKF,QAAA,CAASG,YAAA,CAAa;QAAEvM,WAAA,EAAa;UAAEsM;QAAgB;MAAE,CAAC;IACjE;IAsDA,KAAAL,SAAA,GAAY,CAAC;MAAE3iC;IAAQ,IAA+C,CAAC,MAAM;MAC3E,KAAKmW,KAAA,CAAM/Z,IAAA,CAAKumC,SAAA,CAAU;QAAE3iC;MAAQ,CAAC,CAAC;IACxC;IAEA,KAAAkjC,kBAAA,GAAsBC,OAAA,IAAoB;MACxC,MAAMC,eAAA,GAAkB,KAAKA,eAAA;MAE7B,OAAO,KAAK1M,WAAA,CAAY5lC,OAAA,CAAQsyC,eAAA,CAAgBD,OAAO,CAAC;IAC1D;IAEA,KAAQE,uBAAA,GAA2BC,kBAAA,IAAwC;MACzE,MAAMC,gBAAA,GAAmB,KAAK7M,WAAA;MAC9B,MAAMA,WAAA,GAAc,CAAC,GAAG,KAAKA,WAAW;MACxC,MAAM8M,eAAA,GAAkB,KAAKN,kBAAA,CAAmBI,kBAAA,CAAmB/J,aAAA,CAAc9kC,EAAE;MACnF,IAAI+uC,eAAA,KAAoB,IAAI,OAAO;MAGnC,MAAM9nC,MAAA,GAASgnC,aAAA,CACba,gBAAA,CAAiBC,eAAe,GAChCF,kBACF;MACA,MAAMG,cAAA,GAAiB/nC,MAAA,CAAO0mC,IAAA,IAAQvrC,MAAA,CAAO+C,IAAA,CAAK8B,MAAA,CAAO0mC,IAAA,CAAKxC,QAAQ,EAAErvC,MAAA;MACxE,IAAIkzC,cAAA,EAAgB;QAClB,MAAMC,eAAA,GAAkB3H,uBAAA,CAAwBrgC,MAAA,CAAOlG,MAAM;QAC7D,IAAIkuC,eAAA,EAAiB;UACnBhN,WAAA,CAAYxb,MAAA,CAAOsoB,eAAA,EAAiB,GAAGE,eAAe;UACtD,OAAOhN,WAAA;QACT;MACF;MACA,OAAO;IACT;IAEA,KAAAiN,gBAAA,GAAoBL,kBAAA,IAAwC;MAC1D,MAAMM,kBAAA,GAAqB,KAAKP,uBAAA,CAAwBC,kBAAkB;MAC1E,IAAIM,kBAAA,EAAoB;QACtB,KAAKztB,KAAA,CAAMkmB,WAAA,CAAY;UAAE3F,WAAA,EAAakN;QAAmB,CAAC;MAC5D;IACF;IAEA,KAAAC,iBAAA,GAAqBC,mBAAA,IAA2C;MAC9D,IAAI,CAACA,mBAAA,CAAoBvzC,MAAA,EAAQ;MACjC,IAAImmC,WAAA,GAAc,CAAC,GAAG,KAAKA,WAAW;MACtC,IAAIqN,UAAA,GAAa;MACjBD,mBAAA,CAAoBrqC,OAAA,CAAS0/B,UAAA,IAAe;QAC1C,MAAMyK,kBAAA,GAAqB,KAAKP,uBAAA,CAAwBlK,UAAU;QAClE,IAAIyK,kBAAA,EAAoB;UACtBlN,WAAA,GAAckN,kBAAA;UACdG,UAAA,GAAa;QACf,OAAO;UACL,MAAML,eAAA,GAAkB3H,uBAAA,CAAwB5C,UAAU;UAC1D,IAAIuK,eAAA,EAAiB;YACnBhN,WAAA,CAAY7kC,IAAA,CAAK6xC,eAAe;YAChCK,UAAA,GAAa;UACf;QACF;MACF,CAAC;MACD,IAAIA,UAAA,EAAY;QACd,KAAK5tB,KAAA,CAAMkmB,WAAA,CAAY;UAAE3F;QAAY,CAAC;MACxC;IACF;IAEA,KAAAsN,iBAAA,GAAqBC,kBAAA,IAAiC;MACpD,KAAK9tB,KAAA,CAAMkmB,WAAA,CAAY;QACrB3F,WAAA,EAAa,KAAKA,WAAA,CAAY50B,MAAA,CAC3Bq3B,UAAA,IAAe,CAAC8K,kBAAA,CAAmBnI,QAAA,CAAS3C,UAAA,CAAWI,aAAA,EAAe9kC,EAAE,CAC3E;MACF,CAAC;IACH;IAEA,KAAAyvC,oBAAA,GAAuB,MACrB1J,QAAA,IACyC;MACzC,MAAMhmC,MAAA,GAAS,KAAK+5B,OAAA,CAAQsF,SAAA,CAAU;MACtC,IAAIsQ,WAAA;MACJ,IAAI,CAAC3vC,MAAA,CAAO4vC,kBAAA,EAAoB;QAC9BD,WAAA,GAAc,MAAM3vC,MAAA,CAAO6vC,cAAA,CAAe;MAC5C,OAAO;QACLF,WAAA,GAAc,MAAM3vC,MAAA,CAAO4vC,kBAAA;MAC7B;MACA,MAAME,YAAA,GAAe3I,WAAA,CAAYnB,QAAQ,IACrC2J,WAAA,EAAaI,GAAA,EAAKC,mBAAA,GAClBL,WAAA,EAAaI,GAAA,EAAKE,kBAAA;MACtB,IAAI,CAACH,YAAA,EAAc,OAAO;QAAEI,aAAA,EAAe;MAAM;MAEjD,MAAM;QACJC,uBAAA;QACAC,kBAAA;QACAC,uBAAA;QACAC,kBAAA;QACAC;MACF,IAAIT,YAAA;MAEJ,MAAMU,SAAA,GAAYD,UAAA,IAAcxjB,+BAAA;MAChC,MAAMyZ,QAAA,GAAWR,QAAA,CAAShjC,IAAA;MAE1B,IAAI+iC,OAAA,CAAOC,QAAQ,KAAKK,eAAA,CAAgBL,QAAQ,GAAG;QACjD,IACEmK,uBAAA,EAAyBp0C,MAAA,IACzB,CAACo0C,uBAAA,CAAwB/iC,IAAA,CAAMqjC,GAAA,IAC7BzK,QAAA,CAASplC,IAAA,CAAKkC,WAAA,CAAY,EAAEqE,QAAA,CAASspC,GAAA,CAAI3tC,WAAA,CAAY,CAAC,CACxD,GACA;UACA,OAAO;YAAEotC,aAAA,EAAe;YAAM/uB,MAAA,EAAQ;UAA0B;QAClE;QAEA,IACEkvB,uBAAA,EAAyBt0C,MAAA,IACzBs0C,uBAAA,CAAwBjjC,IAAA,CAAMqjC,GAAA,IAC5BzK,QAAA,CAASplC,IAAA,CAAKkC,WAAA,CAAY,EAAEqE,QAAA,CAASspC,GAAA,CAAI3tC,WAAA,CAAY,CAAC,CACxD,GACA;UACA,OAAO;YAAEotC,aAAA,EAAe;YAAM/uB,MAAA,EAAQ;UAA0B;QAClE;MACF;MAEA,IACEivB,kBAAA,EAAoBr0C,MAAA,IACpB,CAACq0C,kBAAA,CAAmBhjC,IAAA,CAAMpK,IAAA,IAASA,IAAA,CAAKF,WAAA,CAAY,MAAM0jC,QAAA,EAAU1jC,WAAA,CAAY,CAAC,GACjF;QACA,OAAO;UAAEotC,aAAA,EAAe;UAAM/uB,MAAA,EAAQ;QAAqB;MAC7D;MAEA,IACEmvB,kBAAA,EAAoBv0C,MAAA,IACpBu0C,kBAAA,CAAmBljC,IAAA,CAAMpK,IAAA,IAASA,IAAA,CAAKF,WAAA,CAAY,MAAM0jC,QAAA,EAAU1jC,WAAA,CAAY,CAAC,GAChF;QACA,OAAO;UAAEotC,aAAA,EAAe;UAAM/uB,MAAA,EAAQ;QAAqB;MAC7D;MAEA,IAAI6kB,QAAA,CAAS17B,IAAA,IAAQ07B,QAAA,CAAS17B,IAAA,GAAOkmC,SAAA,EAAW;QAC9C,OAAO;UAAEN,aAAA,EAAe;UAAM/uB,MAAA,EAAQ;QAAa;MACrD;MAEA,OAAO;QAAE+uB,aAAA,EAAe;MAAM;IAChC;IAEA,KAAAQ,2BAAA,GAA8B,MAC5B1K,QAAA,IACmC;MACnC,MAAMY,IAAA,GACJP,eAAA,CAAgBL,QAAQ,KAAKD,OAAA,CAAOC,QAAQ,IACxCA,QAAA,GACAM,mBAAA,CAAoB;QAClBC,UAAA,EAAY,CAACP,QAAQ;QACrBj6B,QAAA,EAAUk7B,gBAAA,CAAiBjB,QAAA,CAAShjC,IAAI;QACxCwjC,QAAA,EAAUR,QAAA,CAAShjC;MACrB,CAAC;MAEP,MAAM2tC,qBAAA,GAAwB,MAAM,KAAKjB,oBAAA,CAAqB9I,IAAI;MAElE,MAAMsI,eAAA,GAAyC;QAC7C0B,SAAA,EAAWhK,IAAA,CAAKt8B,IAAA;QAChB86B,SAAA,EAAWwB,IAAA,CAAK5jC,IAAA;QAChB+hC,aAAA,EAAe;UACb6B,IAAA;UACA3mC,EAAA,EAAI+wB,cAAA,CAAe;UACnB2f,qBAAA;UACA1L,WAAA,EAAa0L,qBAAA,CAAsBT,aAAA,GAAgB,YAAY;QACjE;QACAltC,IAAA,EAAMqkC,6BAAA,CAA8BT,IAAA,CAAK5jC,IAAI;MAC/C;MAEAksC,eAAA,CAAgB/H,WAAA,CAAYP,IAAI,IAAI,aAAa,OAAO,IAAIA,IAAA,CAAKhmC,IAAA;MAEjE,IAAIumC,WAAA,CAAYP,IAAI,GAAG;QACrBsI,eAAA,CAAgBnK,aAAA,CAAc8L,UAAA,GAAaxK,eAAA,CAAgBL,QAAQ,IAC/DA,QAAA,CAAS/W,GAAA,GACT6hB,GAAA,CAAIC,eAAA,GAAkB/K,QAAQ;QAElC,IAAIK,eAAA,CAAgBL,QAAQ,KAAKA,QAAA,CAASgL,MAAA,IAAUhL,QAAA,CAASiL,KAAA,EAAO;UAClE/B,eAAA,CAAgBgC,eAAA,GAAkBlL,QAAA,CAASgL,MAAA;UAC3C9B,eAAA,CAAgBiC,cAAA,GAAiBnL,QAAA,CAASiL,KAAA;QAC5C;MACF;MAEA,IAAI5K,eAAA,CAAgBL,QAAQ,KAAKA,QAAA,CAASoL,SAAA,EAAW;QACnDlC,eAAA,CAAgBkC,SAAA,GAAYpL,QAAA,CAASoL,SAAA;MACvC;MAEA,OAAOlC,eAAA;IACT;IAEA,KAAQmC,2BAAA,GAA8B,MACpC1M,UAAA,IACG;MACH,IAAI,CAACA,UAAA,CAAWI,aAAA,EAAe6B,IAAA,IAAQ,CAACjC,UAAA,CAAWI,aAAA,CAAc9kC,EAAA,EAAI;QACnE,KAAKD,MAAA,CAAOsxC,aAAA,CAAcC,QAAA,CAAS;UACjC/lC,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YAAEC,OAAA,EAAS;YAAqB5rC,OAAA,EAAS;cAAE8+B;YAAW;UAAE;UAChEvjC,OAAA,EAAS;YAAE4B,IAAA,EAAM;UAAqC;QACxD,CAAC;QACD;MACF;MAEA,IAAI,CAAC,KAAK0uC,gBAAA,CAAiB/M,UAAU,GAAG;MAExC,MAAMgN,aAAA,GAAgB,MAAM,KAAKjB,2BAAA,CAC/B/L,UAAA,CAAWI,aAAA,CAAc6B,IAC3B;MACA,IAAIjC,UAAA,CAAWI,aAAA,CAAc9kC,EAAA,EAAI;QAC/B0xC,aAAA,CAAc5M,aAAA,CAAc9kC,EAAA,GAAK0kC,UAAA,CAAWI,aAAA,CAAc9kC,EAAA;MAC5D;MACA,OAAO0xC,aAAA;IACT;IAMA;AAAA;AAAA;AAAA;IAAA,KAAAC,sBAAA,GAAyB,MAAO5L,QAAA,IAAuC;MACrE,IAAIK,eAAA,CAAgBL,QAAQ,GAAG;QAC7B,OAAO,KAAKjM,OAAA,CAAQoN,WAAA,CAAYnB,QAAQ,IAAI,cAAc,UAAU,EAClEA,QAAA,CAAS/W,GAAA,EACT+W,QAAA,CAASplC,IAAA,EACTolC,QAAA,CAAShjC,IACX;MACF;MAEA,MAAM4jC,IAAA,GAAOb,OAAA,CAAOC,QAAQ,IACxBA,QAAA,GACAM,mBAAA,CAAoB;QAClBC,UAAA,EAAY,CAACP,QAAQ;QACrBj6B,QAAA,EAAUk7B,gBAAA,CAAiBjB,QAAA,CAAShjC,IAAI;QACxCwjC,QAAA,EAAUR,QAAA,CAAShjC;MACrB,CAAC;MAGL,MAAM;QAAE6uC,QAAA;QAAU,GAAG7wC;MAAO,IAC1B,MAAM,KAAK+4B,OAAA,CAAQoN,WAAA,CAAYnB,QAAQ,IAAI,cAAc,UAAU,EAAEY,IAAI;MAC3E,OAAO5lC,MAAA;IACT;IAMA;AAAA;AAAA;IAAA,KAAAwtC,eAAA,GAAkB,MAAOxI,QAAA,IAAuC;MAC9D,MAAM8L,cAAA,GAAiB,KAAKrmC,MAAA,CAAO+iC,eAAA;MACnC,IAAIsD,cAAA,EAAgB;QAClB,OAAO,MAAMA,cAAA,CAAe9L,QAAQ;MACtC;MAEA,OAAO,KAAK4L,sBAAA,CAAuB5L,QAAQ;IAC7C;IAEA,KAAA+L,gBAAA,GAAmB,MAAOpN,UAAA,IAAsC;MAC9D,IAAI,CAAC,KAAKqN,eAAA,EAAiB;MAE3B,MAAM9C,eAAA,GAAkB,MAAM,KAAKmC,2BAAA,CAA4B1M,UAAU;MAEzE,IAAI,OAAOuK,eAAA,KAAoB,aAAa;MAE5C,IAAIA,eAAA,CAAgBnK,aAAA,CAAcE,WAAA,KAAgB,WAAW;QAC3D,KAAKoK,iBAAA,CAAkB,CAACH,eAAe,CAAC;QACxC,KAAKlvC,MAAA,CAAOsxC,aAAA,CAAcC,QAAA,CAAS;UACjC/lC,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YACNC,OAAA,EAAS;YACT5rC,OAAA,EAAS;cAAE8+B,UAAA;cAAYsN,iBAAA,EAAmB/C;YAAgB;UAC5D;UACA9tC,OAAA,EAAS;YACP4B,IAAA,EAAM;YACNkvC,QAAA,EAAU;cACR/wB,MAAA,EAAQ+tB,eAAA,CAAgBnK,aAAA,CAAc4L,qBAAA,EAAuBxvB;YAC/D;UACF;QACF,CAAC;QACD,OAAO+tB,eAAA;MACT;MAEA,KAAKG,iBAAA,CAAkB,CACrB;QACE,GAAG1K,UAAA;QACHI,aAAA,EAAe;UACb,GAAGJ,UAAA,CAAWI,aAAA;UACdE,WAAA,EAAa;QACf;MACF,EACD;MAED,IAAIt5B,QAAA;MACJ,IAAI;QACFA,QAAA,GAAW,MAAM,KAAK6iC,eAAA,CAAgBU,eAAA,CAAgBnK,aAAA,CAAc6B,IAAI;MAC1E,SAASv6B,KAAA,EAAO;QACd,MAAM8U,MAAA,GAAS9U,KAAA,YAAiBjQ,KAAA,GAAQiQ,KAAA,CAAMb,OAAA,GAAU;QACxD,MAAM2mC,gBAAA,GAA0C;UAC9C,GAAGxN,UAAA;UACHI,aAAA,EAAe;YACb,GAAGJ,UAAA,CAAWI,aAAA;YACdE,WAAA,EAAa;UACf;QACF;QAEA,KAAKjlC,MAAA,CAAOsxC,aAAA,CAAcC,QAAA,CAAS;UACjC/lC,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YACNC,OAAA,EAAS;YACT5rC,OAAA,EAAS;cAAE8+B,UAAA;cAAYwN;YAAiB;UAC1C;UACA/wC,OAAA,EAAS;YACP4B,IAAA,EAAM;YACNkvC,QAAA,EAAU;cAAE/wB;YAAO;YACnBixB,aAAA,EAAe/lC,KAAA,YAAiBjQ,KAAA,GAAQiQ,KAAA,GAAQ;UAClD;QACF,CAAC;QAED,KAAK8iC,gBAAA,CAAiBgD,gBAAgB;QACtC,OAAOA,gBAAA;MACT;MAEA,IAAI,CAACxmC,QAAA,EAAU;QAKb,KAAK6jC,iBAAA,CAAkB,CAAC7K,UAAA,CAAWI,aAAA,CAAc9kC,EAAE,CAAC;QACpD;MACF;MAEA,MAAMoyC,kBAAA,GAA4C;QAChD,GAAG1N,UAAA;QACHI,aAAA,EAAe;UACb,GAAGJ,UAAA,CAAWI,aAAA;UACdE,WAAA,EAAa;QACf;MACF;MAEA,IAAIM,sBAAA,CAAuB8M,kBAAkB,GAAG;QAC9C,IAAIA,kBAAA,CAAmBtN,aAAA,CAAc8L,UAAA,EAAY;UAC/CC,GAAA,CAAIwB,eAAA,CAAgBD,kBAAA,CAAmBtN,aAAA,CAAc8L,UAAU;UAC/D,OAAOwB,kBAAA,CAAmBtN,aAAA,CAAc8L,UAAA;QAC1C;QACAwB,kBAAA,CAAmBE,SAAA,GAAY5mC,QAAA,CAASi7B,IAAA;MAC1C,OAAO;QACJyL,kBAAA,CAA+CG,SAAA,GAAY7mC,QAAA,CAASi7B,IAAA;MACvE;MACA,IAAIj7B,QAAA,CAASylC,SAAA,EAAW;QACrBiB,kBAAA,CAA+CjB,SAAA,GAAYzlC,QAAA,CAASylC,SAAA;MACvE;MAEA,KAAKjC,gBAAA,CAAiBkD,kBAAkB;MAExC,OAAOA,kBAAA;IACT;IAEA,KAAAI,WAAA,GAAc,MAAOC,KAAA,IAAmD;MACtE,IAAI,CAAC,KAAKV,eAAA,EAAiB;MAC3B,MAAMW,aAAA,GAA8CzM,WAAA,CAAWwM,KAAK,IAChE/2C,KAAA,CAAMyQ,IAAA,CAAKsmC,KAAK,IAChBA,KAAA;MACJ,MAAMxQ,WAAA,GAAc,MAAMxkB,OAAA,CAAQ2N,GAAA,CAChCsnB,aAAA,CAAcp0C,GAAA,CAAI,KAAKmyC,2BAA2B,CACpD;MAEA,OAAOhzB,OAAA,CAAQ2N,GAAA,CACb6W,WAAA,CACG50B,MAAA,CAAO,KAAKokC,gBAAgB,EAC5B7uC,KAAA,CAAM,GAAG,KAAK+vC,oBAAoB,EAClCr0C,GAAA,CAAI,KAAKwzC,gBAAgB,CAC9B;IACF;IAheE,KAAKzD,QAAA,GAAWA,QAAA;IAChB,KAAK3sB,KAAA,GAAQ,IAAIgmB,UAAA,CAAmCwG,SAAA,CAAU;MAAE3iC;IAAQ,CAAC,CAAC;IAC1E,KAAKqnC,0BAAA,GAA6B;MAAEjE,eAAA,EAAiB,CAAC;MAAG1M,WAAA,EAAa;IAAG;EAC3E;EAEA,IAAI0M,gBAAA,EAAkB;IACpB,MAAM;MAAE1M;IAAY,IAAI,KAAKvgB,KAAA,CAAMqnB,cAAA,CAAe;IAElD,IAAI9G,WAAA,KAAgB,KAAK2Q,0BAAA,CAA2B3Q,WAAA,EAAa;MAC/D,KAAK2Q,0BAAA,CAA2B3Q,WAAA,GAAcA,WAAA;MAC9C,KAAK2Q,0BAAA,CAA2BjE,eAAA,GAAkB1M,WAAA,CAAY9L,MAAA,CAE5D,CAAC0c,kBAAA,EAAoBnO,UAAA,KAAe;QA3F5C,IAAAoO,EAAA;QA6FQ,IAAI,CAACpO,UAAA,CAAWI,aAAA,CAAc9kC,EAAA,EAAI,OAAO6yC,kBAAA;QAEzCA,kBAAA,CAAAC,EAAA,GAAmBpO,UAAA,CAAWI,aAAA,CAAc9kC,EAAA,MAA5C6yC,kBAAA,CAAAC,EAAA,IAAoDpO,UAAA;QAEpD,OAAOmO,kBAAA;MACT,GAAG,CAAC,CAAC;IACP;IAEA,OAAO,KAAKD,0BAAA,CAA2BjE,eAAA;EACzC;EAEA,IAAI5uC,OAAA,EAAS;IACX,OAAO,KAAKsuC,QAAA,CAAStuC,MAAA;EACvB;EAEA,IAAI+5B,QAAA,EAAU;IACZ,OAAO,KAAKuU,QAAA,CAASvU,OAAA;EACvB;EAEA,IAAItuB,OAAA,EAAS;IACX,OAAO,KAAK6iC,QAAA,CAAS7iC,MAAA,CAAOy2B,WAAA;EAC9B;EAEA,IAAI8Q,cAAA,EAAgB;IAClB,OAAO,KAAKvnC,MAAA,CAAOunC,aAAA;EACrB;EAEA,IAAIA,cAAcA,aAAA,EAAyD;IACzE,KAAK1E,QAAA,CAASG,YAAA,CAAa;MAAEvM,WAAA,EAAa;QAAE8Q;MAAc;IAAE,CAAC;EAC/D;EAEA,IAAItB,iBAAA,EAAmB;IACrB,OAAO,KAAKjmC,MAAA,CAAOimC,gBAAA;EACrB;EAEA,IAAIA,iBAAiBA,gBAAA,EAA+D;IAClF,KAAKpD,QAAA,CAASG,YAAA,CAAa;MAAEvM,WAAA,EAAa;QAAEwP;MAAiB;IAAE,CAAC;EAClE;EAEA,IAAIuB,2BAAA,EAA6B;IAC/B,OAAO,KAAKxnC,MAAA,CAAOwnC,0BAAA;EACrB;EAEA,IAAIA,2BACFA,0BAAA,EACA;IACA,IAAIA,0BAAA,KAA+B,KAAKA,0BAAA,EAA4B;IACpE,KAAK3E,QAAA,CAASG,YAAA,CAAa;MAAEvM,WAAA,EAAa;QAAE+Q;MAA2B;IAAE,CAAC;EAC5E;EAMA,IAAI/Q,YAAA,EAAc;IAChB,OAAO,KAAKvgB,KAAA,CAAMqnB,cAAA,CAAe,EAAE9G,WAAA;EACrC;EAEA,IAAIgR,oBAAA,EAAsB;IACxB,OAAO,CAAC,CACN,KAAKnZ,OAAA,CAAQj7B,IAAA,EAAMq0C,gBAAA,EAClB7L,QAAA,CAAS,aAAa;EAC3B;EAEA,IAAI0K,gBAAA,EAAkB;IACpB,OAAO,KAAKkB,mBAAA,IAAuB,KAAKN,oBAAA,GAAuB;EACjE;EAEA,IAAIQ,kBAAA,EAAoB;IACtB,OAAO,KAAKC,iBAAA,CAAkB,UAAU;EAC1C;EAEA,IAAIC,uBAAA,EAAyB;IAC3B,OAAO,KAAKF,iBAAA,CAAkBr3C,MAAA;EAChC;EAEA,IAAIw3C,uBAAA,EAAyB;IAC3B,OAAO,KAAKF,iBAAA,CAAkB,WAAW,EAAEt3C,MAAA;EAC7C;EAEA,IAAIy3C,mBAAA,EAAqB;IACvB,OAAO,KAAKH,iBAAA,CAAkB,QAAQ,EAAEt3C,MAAA;EAC1C;EAEA,IAAI03C,oBAAA,EAAsB;IACxB,OAAO,KAAKJ,iBAAA,CAAkB,SAAS,EAAEt3C,MAAA;EAC3C;EAEA,IAAI23C,oBAAA,EAAsB;IACxB,OAAO,KAAKL,iBAAA,CAAkB,SAAS,EAAEt3C,MAAA;EAC3C;EAEA,IAAI62C,qBAAA,EAAuB;IACzB,OACE,KAAKnnC,MAAA,CAAOwnC,0BAAA,GACZ,KAAKK,sBAAA,GACL,KAAKC,sBAAA;EAET;EAEAF,kBAAkB1xB,KAAA,EAA+B;IAC/C,OAAOtf,MAAA,CAAOsxC,MAAA,CAAO,KAAKzR,WAAW,EAAE50B,MAAA,CACrC,CAAC;MAAEy3B;IAAc,MAAMA,aAAA,CAAcE,WAAA,KAAgBtjB,KACvD;EACF;AA2WF;;;AC7iBA,IAAMiyB,WAAA,GAAc;AAEpB,IAAMC,YAAA,GAAe;AASrB,IAAMltC,MAAA,GAASA,CAACoE,MAAA,EAAQ+oC,UAAA,KAAe;EACrC,WAAWxuC,GAAA,IAAOwuC,UAAA,EAAY;IAC5B/oC,MAAA,CAAOzF,GAAG,IAAIwuC,UAAA,CAAWxuC,GAAG;EAC9B;EACA,OAAOyF,MAAA;AACT;AAgBA,IAAMgpC,OAAA,GAAU;AAChB,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,YAAA,GAAe;AACrB,IAAMC,YAAA,GAAe;AACrB,IAAMC,MAAA,GAAS;AACf,IAAMC,KAAA,GAAQ;AACd,IAAMC,MAAA,GAAS;AACf,IAAMC,WAAA,GAAc;AACpB,IAAMC,UAAA,GAAa;AAQnB,SAASC,cAAc7zC,IAAA,EAAMq0B,MAAA,EAAQ;EACnC,IAAI,EAAEr0B,IAAA,IAAQq0B,MAAA,GAAS;IACrBA,MAAA,CAAOr0B,IAAI,IAAI,EAAC;EAClB;EACA,OAAOq0B,MAAA,CAAOr0B,IAAI;AACpB;AAQA,SAAS8zC,YAAYC,CAAA,EAAGC,KAAA,EAAO3f,MAAA,EAAQ;EACrC,IAAI2f,KAAA,CAAMb,OAAO,GAAG;IAClBa,KAAA,CAAMV,YAAY,IAAI;IACtBU,KAAA,CAAMT,YAAY,IAAI;EACxB;EACA,IAAIS,KAAA,CAAMZ,KAAK,GAAG;IAChBY,KAAA,CAAMV,YAAY,IAAI;IACtBU,KAAA,CAAMX,KAAK,IAAI;EACjB;EACA,IAAIW,KAAA,CAAMV,YAAY,GAAG;IACvBU,KAAA,CAAMT,YAAY,IAAI;EACxB;EACA,IAAIS,KAAA,CAAMX,KAAK,GAAG;IAChBW,KAAA,CAAMT,YAAY,IAAI;EACxB;EACA,IAAIS,KAAA,CAAMT,YAAY,GAAG;IACvBS,KAAA,CAAMR,MAAM,IAAI;EAClB;EACA,IAAIQ,KAAA,CAAMP,KAAK,GAAG;IAChBO,KAAA,CAAMR,MAAM,IAAI;EAClB;EACA,WAAW31C,CAAA,IAAKm2C,KAAA,EAAO;IACrB,MAAMC,KAAA,GAAQJ,aAAA,CAAch2C,CAAA,EAAGw2B,MAAM;IACrC,IAAI4f,KAAA,CAAMv4C,OAAA,CAAQq4C,CAAC,IAAI,GAAG;MACxBE,KAAA,CAAMx3C,IAAA,CAAKs3C,CAAC;IACd;EACF;AACF;AAQA,SAASG,cAAcH,CAAA,EAAG1f,MAAA,EAAQ;EAChC,MAAMj0B,MAAA,GAAS,CAAC;EAChB,WAAWxB,CAAA,IAAKy1B,MAAA,EAAQ;IACtB,IAAIA,MAAA,CAAOz1B,CAAC,EAAElD,OAAA,CAAQq4C,CAAC,KAAK,GAAG;MAC7B3zC,MAAA,CAAOxB,CAAC,IAAI;IACd;EACF;EACA,OAAOwB,MAAA;AACT;AAoBA,SAAS+zC,MAAM7nC,KAAA,GAAQ,MAAM;EAG3B,KAAK8nC,CAAA,GAAI,CAAC;EAGV,KAAKC,EAAA,GAAK,EAAC;EAEX,KAAKC,EAAA,GAAK;EAEV,KAAKP,CAAA,GAAIznC,KAAA;AACX;AAMA6nC,KAAA,CAAM9f,MAAA,GAAS,CAAC;AAChB8f,KAAA,CAAMzyC,SAAA,GAAY;EAChB6yC,QAAA,EAAU;IACR,OAAO,CAAC,CAAC,KAAKR,CAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAOAS,GAAGC,KAAA,EAAO;IACR,MAAM1zB,KAAA,GAAQ;IACd,MAAM2zB,SAAA,GAAY3zB,KAAA,CAAMqzB,CAAA,CAAEK,KAAK;IAC/B,IAAIC,SAAA,EAAW;MACb,OAAOA,SAAA;IACT;IACA,SAASz5C,CAAA,GAAI,GAAGA,CAAA,GAAI8lB,KAAA,CAAMszB,EAAA,CAAGl5C,MAAA,EAAQF,CAAA,IAAK;MACxC,MAAM05C,KAAA,GAAQ5zB,KAAA,CAAMszB,EAAA,CAAGp5C,CAAC,EAAE,CAAC;MAC3B,MAAM25C,UAAA,GAAY7zB,KAAA,CAAMszB,EAAA,CAAGp5C,CAAC,EAAE,CAAC;MAC/B,IAAI25C,UAAA,IAAaD,KAAA,CAAMhoC,IAAA,CAAK8nC,KAAK,GAAG;QAClC,OAAOG,UAAA;MACT;IACF;IAEA,OAAO7zB,KAAA,CAAMuzB,EAAA;EACf;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAl+B,IAAIq+B,KAAA,EAAOI,SAAA,GAAY,OAAO;IAC5B,OAAOA,SAAA,GAAYJ,KAAA,IAAS,KAAKL,CAAA,GAAI,CAAC,CAAC,KAAKI,EAAA,CAAGC,KAAK;EACtD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAK,GAAGC,MAAA,EAAQ/tC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,EAAQ;IAC9B,SAASp5B,CAAA,GAAI,GAAGA,CAAA,GAAI85C,MAAA,CAAO55C,MAAA,EAAQF,CAAA,IAAK;MACtC,KAAK+5C,EAAA,CAAGD,MAAA,CAAO95C,CAAC,GAAG+L,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;IACxC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA4gB,GAAGC,MAAA,EAAQluC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,EAAQ;IAC9BA,MAAA,GAASA,MAAA,IAAU8f,KAAA,CAAM9f,MAAA;IACzB,IAAIqgB,SAAA;IACJ,IAAI1tC,IAAA,IAAQA,IAAA,CAAKotC,CAAA,EAAG;MAClBM,SAAA,GAAY1tC,IAAA;IACd,OAAO;MAEL0tC,SAAA,GAAY,IAAIP,KAAA,CAAMntC,IAAI;MAC1B,IAAIgtC,KAAA,IAAS3f,MAAA,EAAQ;QACnByf,WAAA,CAAY9sC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;MACjC;IACF;IACA,KAAKggB,EAAA,CAAG53C,IAAA,CAAK,CAACy4C,MAAA,EAAQR,SAAS,CAAC;IAChC,OAAOA,SAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAS,GAAGV,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,EAAQ;IAC7B,IAAItT,KAAA,GAAQ;IACZ,MAAM7lB,GAAA,GAAMu5C,KAAA,CAAMt5C,MAAA;IAClB,IAAI,CAACD,GAAA,EAAK;MACR,OAAO6lB,KAAA;IACT;IACA,SAAS9lB,CAAA,GAAI,GAAGA,CAAA,GAAIC,GAAA,GAAM,GAAGD,CAAA,IAAK;MAChC8lB,KAAA,GAAQA,KAAA,CAAMi0B,EAAA,CAAGP,KAAA,CAAMx5C,CAAC,CAAC;IAC3B;IACA,OAAO8lB,KAAA,CAAMi0B,EAAA,CAAGP,KAAA,CAAMv5C,GAAA,GAAM,CAAC,GAAG8L,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;EACrD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA2BA2gB,GAAGP,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,EAAQ;IAC7BA,MAAA,GAASA,MAAA,IAAU8f,KAAA,CAAM9f,MAAA;IACzB,MAAMtT,KAAA,GAAQ;IAGd,IAAI/Z,IAAA,IAAQA,IAAA,CAAKotC,CAAA,EAAG;MAClBrzB,KAAA,CAAMqzB,CAAA,CAAEK,KAAK,IAAIztC,IAAA;MACjB,OAAOA,IAAA;IACT;IACA,MAAM+sC,CAAA,GAAI/sC,IAAA;IAIV,IAAI0tC,SAAA;MACFU,aAAA,GAAgBr0B,KAAA,CAAMyzB,EAAA,CAAGC,KAAK;IAChC,IAAIW,aAAA,EAAe;MACjBV,SAAA,GAAY,IAAIP,KAAA,CAAM;MACtBpuC,MAAA,CAAO2uC,SAAA,CAAUN,CAAA,EAAGgB,aAAA,CAAchB,CAAC;MACnCM,SAAA,CAAUL,EAAA,CAAG53C,IAAA,CAAK6E,KAAA,CAAMozC,SAAA,CAAUL,EAAA,EAAIe,aAAA,CAAcf,EAAE;MACtDK,SAAA,CAAUJ,EAAA,GAAKc,aAAA,CAAcd,EAAA;MAC7BI,SAAA,CAAUX,CAAA,GAAIqB,aAAA,CAAcrB,CAAA;IAC9B,OAAO;MACLW,SAAA,GAAY,IAAIP,KAAA,CAAM;IACxB;IACA,IAAIJ,CAAA,EAAG;MAEL,IAAI1f,MAAA,EAAQ;QACV,IAAIqgB,SAAA,CAAUX,CAAA,IAAK,OAAOW,SAAA,CAAUX,CAAA,KAAM,UAAU;UAClD,MAAMsB,QAAA,GAAWtvC,MAAA,CAAOmuC,aAAA,CAAcQ,SAAA,CAAUX,CAAA,EAAG1f,MAAM,GAAG2f,KAAK;UACjEF,WAAA,CAAYC,CAAA,EAAGsB,QAAA,EAAUhhB,MAAM;QACjC,WAAW2f,KAAA,EAAO;UAChBF,WAAA,CAAYC,CAAA,EAAGC,KAAA,EAAO3f,MAAM;QAC9B;MACF;MACAqgB,SAAA,CAAUX,CAAA,GAAIA,CAAA;IAChB;IACAhzB,KAAA,CAAMqzB,CAAA,CAAEK,KAAK,IAAIC,SAAA;IACjB,OAAOA,SAAA;EACT;AACF;AAWA,IAAMI,EAAA,GAAKA,CAAC/zB,KAAA,EAAO0zB,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,KAAWtT,KAAA,CAAM+zB,EAAA,CAAGL,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;AAUrF,IAAM4gB,EAAA,GAAKA,CAACl0B,KAAA,EAAOm0B,MAAA,EAAQluC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,KAAWtT,KAAA,CAAMk0B,EAAA,CAAGC,MAAA,EAAQluC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;AAUvF,IAAM8gB,EAAA,GAAKA,CAACp0B,KAAA,EAAO0zB,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,KAAWtT,KAAA,CAAMo0B,EAAA,CAAGV,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;AAUrF,IAAM2gB,EAAA,GAAKA,CAACj0B,KAAA,EAAO0zB,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAA,KAAWtT,KAAA,CAAMi0B,EAAA,CAAGP,KAAA,EAAOztC,IAAA,EAAMgtC,KAAA,EAAO3f,MAAM;AAQrF,IAAMihB,IAAA,GAAO;AACb,IAAMC,KAAA,GAAQ;AACd,IAAMC,cAAA,GAAiB;AACvB,IAAMC,cAAA,GAAiB;AAGvB,IAAMC,SAAA,GAAY;AAGlB,IAAMC,GAAA,GAAM;AAGZ,IAAMC,IAAA,GAAO;AAKb,IAAMC,MAAA,GAAS;AAKf,IAAMC,YAAA,GAAe;AAGrB,IAAMC,GAAA,GAAM;AAGZ,IAAMC,EAAA,GAAK;AAGX,IAAMC,EAAA,GAAK;AAKX,IAAMC,SAAA,GAAY;AAClB,IAAMC,UAAA,GAAa;AACnB,IAAMC,WAAA,GAAc;AACpB,IAAMC,YAAA,GAAe;AACrB,IAAMC,SAAA,GAAY;AAClB,IAAMC,UAAA,GAAa;AACnB,IAAMC,gBAAA,GAAmB;AACzB,IAAMC,iBAAA,GAAoB;AAC1B,IAAMC,kBAAA,GAAqB;AAC3B,IAAMC,mBAAA,GAAsB;AAC5B,IAAMC,iBAAA,GAAoB;AAC1B,IAAMC,kBAAA,GAAqB;AAC3B,IAAMC,sBAAA,GAAyB;AAC/B,IAAMC,uBAAA,GAA0B;AAChC,IAAMC,iBAAA,GAAoB;AAC1B,IAAMC,oBAAA,GAAuB;AAG7B,IAAMC,SAAA,GAAY;AAClB,IAAMC,UAAA,GAAa;AACnB,IAAMC,QAAA,GAAW;AACjB,IAAMC,EAAA,GAAK;AACX,IAAMC,SAAA,GAAY;AAClB,IAAMC,QAAA,GAAW;AACjB,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,MAAA,GAAS;AACf,IAAMC,GAAA,GAAM;AACZ,IAAMC,MAAA,GAAS;AACf,IAAMC,WAAA,GAAc;AACpB,IAAMC,MAAA,GAAS;AACf,IAAMC,OAAA,GAAU;AAChB,IAAMC,IAAA,GAAO;AACb,IAAMC,IAAA,GAAO;AACb,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,kBAAA,GAAqB;AAE3B,IAAMC,IAAA,GAAO;AACb,IAAMC,KAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AACd,IAAMC,UAAA,GAAa;AAGnB,IAAMC,OAAA,GAAU;AAGhB,IAAMC,GAAA,GAAM;AAEZ,IAAIC,EAAA,GAAkB,eAAAp3C,MAAA,CAAOq3C,MAAA,CAAO;EACnCC,SAAA,EAAW;EACXzD,IAAA;EACAC,KAAA;EACAC,cAAA;EACAC,cAAA;EACAC,SAAA;EACAC,GAAA;EACAC,IAAA;EACAC,MAAA;EACAC,YAAA;EACAC,GAAA;EACAC,EAAA;EACAC,EAAA;EACAC,SAAA;EACAC,UAAA;EACAC,WAAA;EACAC,YAAA;EACAC,SAAA;EACAC,UAAA;EACAC,gBAAA;EACAC,iBAAA;EACAC,kBAAA;EACAC,mBAAA;EACAC,iBAAA;EACAC,kBAAA;EACAC,sBAAA;EACAC,uBAAA;EACAC,iBAAA;EACAC,oBAAA;EACAC,SAAA;EACAC,UAAA;EACAC,QAAA;EACAC,EAAA;EACAC,SAAA;EACAC,QAAA;EACAC,KAAA;EACAC,KAAA;EACAC,KAAA;EACAC,MAAA;EACAC,GAAA;EACAC,MAAA;EACAC,WAAA;EACAC,MAAA;EACAC,OAAA;EACAC,IAAA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;EACAC,KAAA;EACAC,kBAAA;EACAC,IAAA;EACAC,KAAA;EACAC,KAAA;EACAC,UAAA;EACAM,KAAA,EAAOL,OAAA;EACPC;AACD,CAAC;AAGD,IAAMK,YAAA,GAAe;AACrB,IAAMC,MAAA,GAAS;AACf,IAAMF,KAAA,GAAQ;AAEd,IAAMG,MAAA,GAAQ;AACd,IAAMC,KAAA,GAAQ;AAgBd,IAAMC,EAAA,GAAK;AACX,IAAMC,EAAA,GAAK;AACX,IAAMC,eAAA,GAAkB;AACxB,IAAMC,YAAA,GAAe;AACrB,IAAMC,kBAAA,GAAqB;AAE3B,IAAIC,IAAA,GAAO;AAAX,IACEC,KAAA,GAAQ;AAuBV,SAASC,OAAOC,aAAA,GAAgB,EAAC,EAAG;EAGlC,MAAMxlB,MAAA,GAAS,CAAC;EAChB8f,KAAA,CAAM9f,MAAA,GAASA,MAAA;EAEf,MAAMylB,KAAA,GAAQ,IAAI3F,KAAA,CAAM;EACxB,IAAIuF,IAAA,IAAQ,MAAM;IAChBA,IAAA,GAAOK,UAAA,CAAW/G,WAAW;EAC/B;EACA,IAAI2G,KAAA,IAAS,MAAM;IACjBA,KAAA,GAAQI,UAAA,CAAW9G,YAAY;EACjC;EAGA+B,EAAA,CAAG8E,KAAA,EAAO,KAAK3C,UAAU;EACzBnC,EAAA,CAAG8E,KAAA,EAAO,KAAK5D,SAAS;EACxBlB,EAAA,CAAG8E,KAAA,EAAO,KAAK3D,UAAU;EACzBnB,EAAA,CAAG8E,KAAA,EAAO,KAAK1D,WAAW;EAC1BpB,EAAA,CAAG8E,KAAA,EAAO,KAAKzD,YAAY;EAC3BrB,EAAA,CAAG8E,KAAA,EAAO,KAAKxD,SAAS;EACxBtB,EAAA,CAAG8E,KAAA,EAAO,KAAKvD,UAAU;EACzBvB,EAAA,CAAG8E,KAAA,EAAO,KAAKtD,gBAAgB;EAC/BxB,EAAA,CAAG8E,KAAA,EAAO,KAAKrD,iBAAiB;EAChCzB,EAAA,CAAG8E,KAAA,EAAO,UAAKpD,kBAAkB;EACjC1B,EAAA,CAAG8E,KAAA,EAAO,UAAKnD,mBAAmB;EAClC3B,EAAA,CAAG8E,KAAA,EAAO,UAAKlD,iBAAiB;EAChC5B,EAAA,CAAG8E,KAAA,EAAO,UAAKjD,kBAAkB;EACjC7B,EAAA,CAAG8E,KAAA,EAAO,UAAKhD,sBAAsB;EACrC9B,EAAA,CAAG8E,KAAA,EAAO,UAAK/C,uBAAuB;EACtC/B,EAAA,CAAG8E,KAAA,EAAO,UAAK9C,iBAAiB;EAChChC,EAAA,CAAG8E,KAAA,EAAO,UAAK7C,oBAAoB;EACnCjC,EAAA,CAAG8E,KAAA,EAAO,KAAK5C,SAAS;EACxBlC,EAAA,CAAG8E,KAAA,EAAO,KAAK1C,QAAQ;EACvBpC,EAAA,CAAG8E,KAAA,EAAO,KAAKzC,EAAE;EACjBrC,EAAA,CAAG8E,KAAA,EAAO,KAAKvC,QAAQ;EACvBvC,EAAA,CAAG8E,KAAA,EAAO,KAAKtC,KAAK;EACpBxC,EAAA,CAAG8E,KAAA,EAAO,KAAKrC,KAAK;EACpBzC,EAAA,CAAG8E,KAAA,EAAO,KAAKpC,KAAK;EACpB1C,EAAA,CAAG8E,KAAA,EAAO,KAAKnC,MAAM;EACrB3C,EAAA,CAAG8E,KAAA,EAAO,KAAKlC,GAAG;EAClB5C,EAAA,CAAG8E,KAAA,EAAO,KAAKjC,MAAM;EACrB7C,EAAA,CAAG8E,KAAA,EAAO,KAAKhC,WAAW;EAC1B9C,EAAA,CAAG8E,KAAA,EAAO,KAAK/B,MAAM;EACrB/C,EAAA,CAAG8E,KAAA,EAAO,KAAK9B,OAAO;EACtBhD,EAAA,CAAG8E,KAAA,EAAO,KAAK7B,IAAI;EACnBjD,EAAA,CAAG8E,KAAA,EAAO,KAAK5B,IAAI;EACnBlD,EAAA,CAAG8E,KAAA,EAAO,KAAK3B,KAAK;EACpBnD,EAAA,CAAG8E,KAAA,EAAO,KAAK1B,KAAK;EACpBpD,EAAA,CAAG8E,KAAA,EAAO,KAAKzB,KAAK;EACpBrD,EAAA,CAAG8E,KAAA,EAAO,KAAKtB,KAAK;EACpBxD,EAAA,CAAG8E,KAAA,EAAO,KAAKvB,IAAI;EACnBvD,EAAA,CAAG8E,KAAA,EAAO,KAAKrB,KAAK;EACpBzD,EAAA,CAAG8E,KAAA,EAAO,KAAKpB,UAAU;EACzB1D,EAAA,CAAG8E,KAAA,EAAO,MAAMxC,SAAS;EACzBtC,EAAA,CAAG8E,KAAA,EAAO,UAAKxB,kBAAkB;EACjC,MAAM0B,GAAA,GAAM/E,EAAA,CAAG6E,KAAA,EAAOX,MAAA,EAAOpD,GAAA,EAAK;IAChC,CAAC5C,OAAO,GAAG;EACb,CAAC;EACD8B,EAAA,CAAG+E,GAAA,EAAKb,MAAA,EAAOa,GAAG;EAClB,MAAMC,YAAA,GAAehF,EAAA,CAAG+E,GAAA,EAAKf,YAAA,EAAczD,cAAA,EAAgB;IACzD,CAAClC,YAAY,GAAG;EAClB,CAAC;EACD,MAAM4G,YAAA,GAAejF,EAAA,CAAG+E,GAAA,EAAKd,MAAA,EAAQzD,cAAA,EAAgB;IACnD,CAAClC,YAAY,GAAG;EAClB,CAAC;EAGD,MAAM4G,IAAA,GAAOlF,EAAA,CAAG6E,KAAA,EAAOb,YAAA,EAAc3D,IAAA,EAAM;IACzC,CAAClC,KAAK,GAAG;EACX,CAAC;EACD6B,EAAA,CAAGkF,IAAA,EAAMhB,MAAA,EAAOc,YAAY;EAC5BhF,EAAA,CAAGkF,IAAA,EAAMlB,YAAA,EAAckB,IAAI;EAC3BlF,EAAA,CAAGgF,YAAA,EAAcd,MAAA,EAAOc,YAAY;EACpChF,EAAA,CAAGgF,YAAA,EAAchB,YAAA,EAAcgB,YAAY;EAG3C,MAAMG,KAAA,GAAQnF,EAAA,CAAG6E,KAAA,EAAOZ,MAAA,EAAQ3D,KAAA,EAAO;IACrC,CAAClC,KAAK,GAAG;EACX,CAAC;EACD4B,EAAA,CAAGmF,KAAA,EAAOnB,YAAY;EACtBhE,EAAA,CAAGmF,KAAA,EAAOjB,MAAA,EAAOe,YAAY;EAC7BjF,EAAA,CAAGmF,KAAA,EAAOlB,MAAA,EAAQkB,KAAK;EACvBnF,EAAA,CAAGiF,YAAA,EAAcf,MAAA,EAAOe,YAAY;EACpCjF,EAAA,CAAGiF,YAAA,EAAcjB,YAAY;EAC7BhE,EAAA,CAAGiF,YAAA,EAAchB,MAAA,EAAQgB,YAAY;EAKrC,MAAMG,GAAA,GAAKrF,EAAA,CAAG8E,KAAA,EAAOR,EAAA,EAAIrD,EAAA,EAAI;IAC3B,CAACrC,UAAU,GAAG;EAChB,CAAC;EACD,MAAM0G,EAAA,GAAKtF,EAAA,CAAG8E,KAAA,EAAOT,EAAA,EAAIrD,EAAA,EAAI;IAC3B,CAACpC,UAAU,GAAG;EAChB,CAAC;EACD,MAAM2G,EAAA,GAAKtF,EAAA,CAAG6E,KAAA,EAAOV,KAAA,EAAOpD,EAAA,EAAI;IAC9B,CAACpC,UAAU,GAAG;EAChB,CAAC;EACDoB,EAAA,CAAG8E,KAAA,EAAOL,kBAAA,EAAoBc,EAAE;EAChCvF,EAAA,CAAGsF,EAAA,EAAIhB,EAAA,EAAIe,GAAE;EACbrF,EAAA,CAAGsF,EAAA,EAAIb,kBAAA,EAAoBc,EAAE;EAC7BtF,EAAA,CAAGqF,EAAA,EAAIlB,KAAA,EAAOmB,EAAE;EAChBvF,EAAA,CAAGuF,EAAA,EAAIlB,EAAE;EACTrE,EAAA,CAAGuF,EAAA,EAAIjB,EAAE;EACTrE,EAAA,CAAGsF,EAAA,EAAInB,KAAA,EAAOmB,EAAE;EAChBvF,EAAA,CAAGuF,EAAA,EAAId,kBAAA,EAAoBc,EAAE;EAI7B,MAAMC,KAAA,GAAQvF,EAAA,CAAG6E,KAAA,EAAOd,KAAA,EAAOL,OAAA,EAAS;IACtC,CAAClF,KAAK,GAAG;EACX,CAAC;EACDuB,EAAA,CAAGwF,KAAA,EAAO,GAAG;EACbvF,EAAA,CAAGuF,KAAA,EAAOxB,KAAA,EAAOwB,KAAK;EACtBxF,EAAA,CAAGwF,KAAA,EAAOjB,eAAA,EAAiBiB,KAAK;EAGhC,MAAMC,WAAA,GAAczF,EAAA,CAAGwF,KAAA,EAAOhB,YAAY;EAC1CxE,EAAA,CAAGyF,WAAA,EAAa,GAAG;EACnBxF,EAAA,CAAGwF,WAAA,EAAazB,KAAA,EAAOwB,KAAK;EAK5B,MAAME,MAAA,GAAS,CAAC,CAACzB,YAAA,EAAckB,IAAI,GAAG,CAAChB,MAAA,EAAOc,YAAY,CAAC;EAC3D,MAAMU,OAAA,GAAU,CAAC,CAAC1B,YAAA,EAAc,IAAI,GAAG,CAACC,MAAA,EAAQkB,KAAK,GAAG,CAACjB,MAAA,EAAOe,YAAY,CAAC;EAC7E,SAASj/C,CAAA,GAAI,GAAGA,CAAA,GAAIy+C,IAAA,CAAKv+C,MAAA,EAAQF,CAAA,IAAK;IACpC2/C,MAAA,CAAOd,KAAA,EAAOJ,IAAA,CAAKz+C,CAAC,GAAG06C,GAAA,EAAKL,IAAA,EAAMoF,MAAM;EAC1C;EACA,SAASz/C,CAAA,GAAI,GAAGA,CAAA,GAAI0+C,KAAA,CAAMx+C,MAAA,EAAQF,CAAA,IAAK;IACrC2/C,MAAA,CAAOd,KAAA,EAAOH,KAAA,CAAM1+C,CAAC,GAAG26C,IAAA,EAAML,KAAA,EAAOoF,OAAO;EAC9C;EACA7G,WAAA,CAAY6B,GAAA,EAAK;IACfkF,GAAA,EAAK;IACLzH,KAAA,EAAO;EACT,GAAG/e,MAAM;EACTyf,WAAA,CAAY8B,IAAA,EAAM;IAChBkF,IAAA,EAAM;IACNzH,KAAA,EAAO;EACT,GAAGhf,MAAM;EAKTumB,MAAA,CAAOd,KAAA,EAAO,QAAQjE,MAAA,EAAQP,IAAA,EAAMoF,MAAM;EAC1CE,MAAA,CAAOd,KAAA,EAAO,UAAUjE,MAAA,EAAQP,IAAA,EAAMoF,MAAM;EAC5CE,MAAA,CAAOd,KAAA,EAAO,QAAQhE,YAAA,EAAcR,IAAA,EAAMoF,MAAM;EAChDE,MAAA,CAAOd,KAAA,EAAO,SAAShE,YAAA,EAAcR,IAAA,EAAMoF,MAAM;EACjDE,MAAA,CAAOd,KAAA,EAAO,OAAOhE,YAAA,EAAcR,IAAA,EAAMoF,MAAM;EAC/CE,MAAA,CAAOd,KAAA,EAAO,QAAQhE,YAAA,EAAcR,IAAA,EAAMoF,MAAM;EAChD5G,WAAA,CAAY+B,MAAA,EAAQ;IAClBnC,MAAA,EAAQ;IACRN,KAAA,EAAO;EACT,GAAG/e,MAAM;EACTyf,WAAA,CAAYgC,YAAA,EAAc;IACxBnC,WAAA,EAAa;IACbP,KAAA,EAAO;EACT,GAAG/e,MAAM;EAGTwlB,aAAA,GAAgBA,aAAA,CAAcnqB,IAAA,CAAK,CAAC3wB,CAAA,EAAGJ,CAAA,KAAMI,CAAA,CAAE,CAAC,IAAIJ,CAAA,CAAE,CAAC,IAAI,IAAI,EAAE;EACjE,SAAS1D,CAAA,GAAI,GAAGA,CAAA,GAAI4+C,aAAA,CAAc1+C,MAAA,EAAQF,CAAA,IAAK;IAC7C,MAAM8/C,GAAA,GAAMlB,aAAA,CAAc5+C,CAAC,EAAE,CAAC;IAC9B,MAAM+/C,kBAAA,GAAqBnB,aAAA,CAAc5+C,CAAC,EAAE,CAAC;IAC7C,MAAM+4C,KAAA,GAAQgH,kBAAA,GAAqB;MACjC,CAACtH,MAAM,GAAG;IACZ,IAAI;MACF,CAACC,WAAW,GAAG;IACjB;IACA,IAAIoH,GAAA,CAAIr/C,OAAA,CAAQ,GAAG,KAAK,GAAG;MACzBs4C,KAAA,CAAMR,MAAM,IAAI;IAClB,WAAW,CAACyF,YAAA,CAAatsC,IAAA,CAAKouC,GAAG,GAAG;MAClC/G,KAAA,CAAMb,OAAO,IAAI;IACnB,WAAWgG,MAAA,CAAMxsC,IAAA,CAAKouC,GAAG,GAAG;MAC1B/G,KAAA,CAAMV,YAAY,IAAI;IACxB,OAAO;MACLU,KAAA,CAAMZ,KAAK,IAAI;IACjB;IACA+B,EAAA,CAAG2E,KAAA,EAAOiB,GAAA,EAAKA,GAAA,EAAK/G,KAAK;EAC3B;EAGAmB,EAAA,CAAG2E,KAAA,EAAO,aAAapE,SAAA,EAAW;IAChCtC,KAAA,EAAO;EACT,CAAC;EAGD0G,KAAA,CAAMxF,EAAA,GAAK,IAAIH,KAAA,CAAMyE,GAAG;EACxB,OAAO;IACLt8C,KAAA,EAAOw9C,KAAA;IACPjlC,MAAA,EAAQ9O,MAAA,CAAO;MACbsuB;IACF,GAAGwkB,EAAE;EACP;AACF;AAWA,SAASoC,MAAM3+C,KAAA,EAAOyF,GAAA,EAAK;EAKzB,MAAMm5C,QAAA,GAAWC,aAAA,CAAcp5C,GAAA,CAAIqC,OAAA,CAAQ,UAAUxF,CAAA,IAAKA,CAAA,CAAEsD,WAAA,CAAY,CAAC,CAAC;EAC1E,MAAMk5C,SAAA,GAAYF,QAAA,CAAS//C,MAAA;EAC3B,MAAM0Z,MAAA,GAAS,EAAC;EAIhB,IAAIwmC,MAAA,GAAS;EAGb,IAAIC,UAAA,GAAa;EAGjB,OAAOA,UAAA,GAAaF,SAAA,EAAW;IAC7B,IAAIr6B,KAAA,GAAQzkB,KAAA;IACZ,IAAIo4C,SAAA,GAAY;IAChB,IAAI6G,WAAA,GAAc;IAClB,IAAIC,eAAA,GAAkB;IACtB,IAAIC,YAAA,GAAe;IACnB,IAAIC,iBAAA,GAAoB;IACxB,OAAOJ,UAAA,GAAaF,SAAA,KAAc1G,SAAA,GAAY3zB,KAAA,CAAMyzB,EAAA,CAAG0G,QAAA,CAASI,UAAU,CAAC,IAAI;MAC7Ev6B,KAAA,GAAQ2zB,SAAA;MAGR,IAAI3zB,KAAA,CAAMwzB,OAAA,CAAQ,GAAG;QACnBkH,YAAA,GAAe;QACfC,iBAAA,GAAoB;QACpBF,eAAA,GAAkBz6B,KAAA;MACpB,WAAW06B,YAAA,IAAgB,GAAG;QAC5BA,YAAA,IAAgBP,QAAA,CAASI,UAAU,EAAEngD,MAAA;QACrCugD,iBAAA;MACF;MACAH,WAAA,IAAeL,QAAA,CAASI,UAAU,EAAEngD,MAAA;MACpCkgD,MAAA,IAAUH,QAAA,CAASI,UAAU,EAAEngD,MAAA;MAC/BmgD,UAAA;IACF;IAGAD,MAAA,IAAUI,YAAA;IACVH,UAAA,IAAcI,iBAAA;IACdH,WAAA,IAAeE,YAAA;IAGf5mC,MAAA,CAAOpY,IAAA,CAAK;MACVs3C,CAAA,EAAGyH,eAAA,CAAgBzH,CAAA;MAAA;MAEnB4H,CAAA,EAAG55C,GAAA,CAAIE,KAAA,CAAMo5C,MAAA,GAASE,WAAA,EAAaF,MAAM;MAAA;MAEzCh9C,CAAA,EAAGg9C,MAAA,GAASE,WAAA;MAAA;MAEZj9C,CAAA,EAAG+8C;MAAA;IACL,CAAC;EACH;EACA,OAAOxmC,MAAA;AACT;AAaA,SAASsmC,cAAcp5C,GAAA,EAAK;EAC1B,MAAM3B,MAAA,GAAS,EAAC;EAChB,MAAMlF,GAAA,GAAM6G,GAAA,CAAI5G,MAAA;EAChB,IAAI2S,KAAA,GAAQ;EACZ,OAAOA,KAAA,GAAQ5S,GAAA,EAAK;IAClB,IAAI2b,KAAA,GAAQ9U,GAAA,CAAI3G,UAAA,CAAW0S,KAAK;IAChC,IAAI8tC,MAAA;IACJ,IAAIz9C,IAAA,GAAO0Y,KAAA,GAAQ,SAAUA,KAAA,GAAQ,SAAU/I,KAAA,GAAQ,MAAM5S,GAAA,KAAQ0gD,MAAA,GAAS75C,GAAA,CAAI3G,UAAA,CAAW0S,KAAA,GAAQ,CAAC,KAAK,SAAU8tC,MAAA,GAAS,QAAS75C,GAAA,CAAI+L,KAAK,IAC9I/L,GAAA,CAAIE,KAAA,CAAM6L,KAAA,EAAOA,KAAA,GAAQ,CAAC;IAC5B1N,MAAA,CAAO3D,IAAA,CAAK0B,IAAI;IAChB2P,KAAA,IAAS3P,IAAA,CAAKhD,MAAA;EAChB;EACA,OAAOiF,MAAA;AACT;AAWA,SAASw6C,OAAO75B,KAAA,EAAO0zB,KAAA,EAAOV,CAAA,EAAG8H,QAAA,EAAUxH,EAAA,EAAI;EAC7C,IAAIrtC,IAAA;EACJ,MAAM9L,GAAA,GAAMu5C,KAAA,CAAMt5C,MAAA;EAClB,SAASF,CAAA,GAAI,GAAGA,CAAA,GAAIC,GAAA,GAAM,GAAGD,CAAA,IAAK;IAChC,MAAMkD,IAAA,GAAOs2C,KAAA,CAAMx5C,CAAC;IACpB,IAAI8lB,KAAA,CAAMqzB,CAAA,CAAEj2C,IAAI,GAAG;MACjB6I,IAAA,GAAO+Z,KAAA,CAAMqzB,CAAA,CAAEj2C,IAAI;IACrB,OAAO;MACL6I,IAAA,GAAO,IAAImtC,KAAA,CAAM0H,QAAQ;MACzB70C,IAAA,CAAKqtC,EAAA,GAAKA,EAAA,CAAGpyC,KAAA,CAAM;MACnB8e,KAAA,CAAMqzB,CAAA,CAAEj2C,IAAI,IAAI6I,IAAA;IAClB;IACA+Z,KAAA,GAAQ/Z,IAAA;EACV;EACAA,IAAA,GAAO,IAAImtC,KAAA,CAAMJ,CAAC;EAClB/sC,IAAA,CAAKqtC,EAAA,GAAKA,EAAA,CAAGpyC,KAAA,CAAM;EACnB8e,KAAA,CAAMqzB,CAAA,CAAEK,KAAA,CAAMv5C,GAAA,GAAM,CAAC,CAAC,IAAI8L,IAAA;EAC1B,OAAOA,IAAA;AACT;AAQA,SAAS+yC,WAAW+B,OAAA,EAAS;EAC3B,MAAMC,KAAA,GAAQ,EAAC;EACf,MAAM/xC,KAAA,GAAQ,EAAC;EACf,IAAI/O,CAAA,GAAI;EACR,IAAI+gD,MAAA,GAAS;EACb,OAAO/gD,CAAA,GAAI6gD,OAAA,CAAQ3gD,MAAA,EAAQ;IACzB,IAAI8gD,aAAA,GAAgB;IACpB,OAAOD,MAAA,CAAOtgD,OAAA,CAAQogD,OAAA,CAAQ7gD,CAAA,GAAIghD,aAAa,CAAC,KAAK,GAAG;MACtDA,aAAA;IACF;IACA,IAAIA,aAAA,GAAgB,GAAG;MACrBF,KAAA,CAAMt/C,IAAA,CAAKuN,KAAA,CAAMtN,IAAA,CAAK,EAAE,CAAC;MACzB,SAASw/C,QAAA,GAAWC,QAAA,CAASL,OAAA,CAAQvnC,SAAA,CAAUtZ,CAAA,EAAGA,CAAA,GAAIghD,aAAa,GAAG,EAAE,GAAGC,QAAA,GAAW,GAAGA,QAAA,IAAY;QACnGlyC,KAAA,CAAMiE,GAAA,CAAI;MACZ;MACAhT,CAAA,IAAKghD,aAAA;IACP,OAAO;MACLjyC,KAAA,CAAMvN,IAAA,CAAKq/C,OAAA,CAAQ7gD,CAAC,CAAC;MACrBA,CAAA;IACF;EACF;EACA,OAAO8gD,KAAA;AACT;AAmFA,IAAMK,SAAA,GAAW;EACfC,eAAA,EAAiB;EACjBC,MAAA,EAAQ;EACR7lC,MAAA,EAAQ8lC,KAAA;EACRC,UAAA,EAAYD,KAAA;EACZE,KAAA,EAAO;EACPC,OAAA,EAAS;EACTvyC,MAAA,EAAQ;EACRwyC,GAAA,EAAK;EACLC,QAAA,EAAU;EACVC,QAAA,EAAUC,QAAA;EACVC,SAAA,EAAW;EACXC,UAAA,EAAY;EACZC,UAAA,EAAY,EAAC;EACbC,MAAA,EAAQ;AACV;AAYA,SAASC,QAAQj6B,IAAA,EAAMk6B,aAAA,GAAgB,MAAM;EAC3C,IAAIC,CAAA,GAAIt3C,MAAA,CAAO,CAAC,GAAGq2C,SAAQ;EAC3B,IAAIl5B,IAAA,EAAM;IACRm6B,CAAA,GAAIt3C,MAAA,CAAOs3C,CAAA,EAAGn6B,IAAA,YAAgBi6B,OAAA,GAAUj6B,IAAA,CAAKm6B,CAAA,GAAIn6B,IAAI;EACvD;EAGA,MAAMo6B,WAAA,GAAcD,CAAA,CAAEJ,UAAA;EACtB,MAAMM,oBAAA,GAAuB,EAAC;EAC9B,SAAStiD,CAAA,GAAI,GAAGA,CAAA,GAAIqiD,WAAA,CAAYniD,MAAA,EAAQF,CAAA,IAAK;IAC3CsiD,oBAAA,CAAqB9gD,IAAA,CAAK6gD,WAAA,CAAYriD,CAAC,EAAE4M,WAAA,CAAY,CAAC;EACxD;EAEA,KAAKw1C,CAAA,GAAIA,CAAA;EACT,IAAID,aAAA,EAAe;IACjB,KAAKA,aAAA,GAAgBA,aAAA;EACvB;EACA,KAAKH,UAAA,GAAaM,oBAAA;AACpB;AACAJ,OAAA,CAAQz7C,SAAA,GAAY;EAClB27C,CAAA,EAAGjB,SAAA;EAAA;AAAA;AAAA;EAIHa,UAAA,EAAY,EAAC;EAAA;AAAA;AAAA;AAAA;EAKbG,cAAcI,EAAA,EAAI;IAChB,OAAOA,EAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAOAC,MAAMnxC,KAAA,EAAO;IACX,OAAO,KAAKtL,GAAA,CAAI,YAAYsL,KAAA,CAAM9K,QAAA,CAAS,GAAG8K,KAAK;EACrD;EAAA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcAtL,IAAI0D,GAAA,EAAKg5C,QAAA,EAAUpxC,KAAA,EAAO;IACxB,MAAMqxC,UAAA,GAAaD,QAAA,IAAY;IAC/B,IAAIxwC,MAAA,GAAS,KAAKmwC,CAAA,CAAE34C,GAAG;IACvB,IAAI,CAACwI,MAAA,EAAQ;MACX,OAAOA,MAAA;IACT;IACA,IAAI,OAAOA,MAAA,KAAW,UAAU;MAC9BA,MAAA,GAASZ,KAAA,CAAMynC,CAAA,IAAK7mC,MAAA,GAASA,MAAA,CAAOZ,KAAA,CAAMynC,CAAC,IAAIqI,SAAA,CAAS13C,GAAG;MAC3D,IAAI,OAAOwI,MAAA,KAAW,cAAcywC,UAAA,EAAY;QAC9CzwC,MAAA,GAASA,MAAA,CAAOwwC,QAAA,EAAUpxC,KAAK;MACjC;IACF,WAAW,OAAOY,MAAA,KAAW,cAAcywC,UAAA,EAAY;MACrDzwC,MAAA,GAASA,MAAA,CAAOwwC,QAAA,EAAUpxC,KAAA,CAAMynC,CAAA,EAAGznC,KAAK;IAC1C;IACA,OAAOY,MAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA0wC,OAAOl5C,GAAA,EAAKg5C,QAAA,EAAUpxC,KAAA,EAAO;IAC3B,IAAIhI,GAAA,GAAM,KAAK+4C,CAAA,CAAE34C,GAAG;IACpB,IAAI,OAAOJ,GAAA,KAAQ,cAAco5C,QAAA,IAAY,MAAM;MACjDp5C,GAAA,GAAMA,GAAA,CAAIo5C,QAAA,EAAUpxC,KAAA,CAAMynC,CAAA,EAAGznC,KAAK;IACpC;IACA,OAAOhI,GAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA44C,OAAO5wC,KAAA,EAAO;IACZ,MAAMkxC,EAAA,GAAKlxC,KAAA,CAAM4wC,MAAA,CAAO,IAAI;IAC5B,MAAMW,QAAA,GAAW,KAAK78C,GAAA,CAAI,UAAU,MAAMsL,KAAK,KAAK,KAAK8wC,aAAA;IACzD,OAAOS,QAAA,CAASL,EAAA,EAAIlxC,KAAA,CAAMynC,CAAA,EAAGznC,KAAK;EACpC;AACF;AACA,SAASiwC,MAAK95C,GAAA,EAAK;EACjB,OAAOA,GAAA;AACT;AAkBA,SAASq7C,WAAWh4C,KAAA,EAAO+O,MAAA,EAAQ;EACjC,KAAKk/B,CAAA,GAAI;EACT,KAAK4H,CAAA,GAAI71C,KAAA;EACT,KAAK+yC,EAAA,GAAKhkC,MAAA;AACZ;AAeAipC,UAAA,CAAWp8C,SAAA,GAAY;EACrBq8C,MAAA,EAAQ;EAAA;AAAA;AAAA;AAAA;EAKRv8C,SAAA,EAAW;IACT,OAAO,KAAKm6C,CAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAOAqC,OAAOC,OAAA,EAAQ;IACb,OAAO,KAAKz8C,QAAA,CAAS;EACvB;EAAA;AAAA;AAAA;AAAA;EAKA08C,kBAAkB19C,OAAA,EAAS;IACzB,MAAMiC,GAAA,GAAM,KAAKjB,QAAA,CAAS;IAC1B,MAAMq7C,QAAA,GAAWr8C,OAAA,CAAQQ,GAAA,CAAI,YAAYyB,GAAA,EAAK,IAAI;IAClD,MAAM07C,SAAA,GAAY39C,OAAA,CAAQQ,GAAA,CAAI,UAAUyB,GAAA,EAAK,IAAI;IACjD,OAAOo6C,QAAA,IAAYsB,SAAA,CAAUhjD,MAAA,GAAS0hD,QAAA,GAAWsB,SAAA,CAAU5pC,SAAA,CAAU,GAAGsoC,QAAQ,IAAI,WAAMsB,SAAA;EAC5F;EAAA;AAAA;AAAA;AAAA;AAAA;EAMAC,gBAAgB59C,OAAA,EAAS;IACvB,OAAOA,OAAA,CAAQQ,GAAA,CAAI,cAAc,KAAKg9C,MAAA,CAAOx9C,OAAA,CAAQQ,GAAA,CAAI,iBAAiB,CAAC,GAAG,IAAI;EACpF;EAAA;AAAA;AAAA;AAAA;EAKAq9C,WAAA,EAAa;IACX,OAAO,KAAKxF,EAAA,CAAG,CAAC,EAAEx6C,CAAA;EACpB;EAAA;AAAA;AAAA;AAAA;AAAA;EAMAigD,SAAA,EAAW;IACT,OAAO,KAAKzF,EAAA,CAAG,KAAKA,EAAA,CAAG19C,MAAA,GAAS,CAAC,EAAEmD,CAAA;EACrC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAigD,SAASpkC,QAAA,GAAWiiC,SAAA,CAASC,eAAA,EAAiB;IAC5C,OAAO;MACLj6C,IAAA,EAAM,KAAK2xC,CAAA;MACXjuC,KAAA,EAAO,KAAKtE,QAAA,CAAS;MACrBu8C,MAAA,EAAQ,KAAKA,MAAA;MACb9jC,IAAA,EAAM,KAAK+jC,MAAA,CAAO7jC,QAAQ;MAC1B7d,KAAA,EAAO,KAAK+hD,UAAA,CAAW;MACvB9hD,GAAA,EAAK,KAAK+hD,QAAA,CAAS;IACrB;EACF;EAAA;AAAA;AAAA;AAAA;EAKAE,kBAAkBh+C,OAAA,EAAS;IACzB,OAAO;MACL4B,IAAA,EAAM,KAAK2xC,CAAA;MACXjuC,KAAA,EAAO,KAAKo4C,iBAAA,CAAkB19C,OAAO;MACrCu9C,MAAA,EAAQ,KAAKA,MAAA;MACb9jC,IAAA,EAAM,KAAKmkC,eAAA,CAAgB59C,OAAO;MAClClE,KAAA,EAAO,KAAK+hD,UAAA,CAAW;MACvB9hD,GAAA,EAAK,KAAK+hD,QAAA,CAAS;IACrB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAMA1B,SAASp8C,OAAA,EAAS;IAChB,OAAOA,OAAA,CAAQQ,GAAA,CAAI,YAAY,KAAKQ,QAAA,CAAS,GAAG,IAAI;EACtD;EAAA;AAAA;AAAA;AAAA;EAKA07C,OAAO18C,OAAA,EAAS;IACd,MAAM8L,KAAA,GAAQ;IACd,MAAM2N,IAAA,GAAO,KAAK+jC,MAAA,CAAOx9C,OAAA,CAAQQ,GAAA,CAAI,iBAAiB,CAAC;IACvD,MAAMy9C,aAAA,GAAgBj+C,OAAA,CAAQQ,GAAA,CAAI,cAAciZ,IAAA,EAAM,IAAI;IAC1D,MAAMyiC,OAAA,GAAUl8C,OAAA,CAAQQ,GAAA,CAAI,WAAWiZ,IAAA,EAAM3N,KAAK;IAClD,MAAM9G,OAAA,GAAU,KAAK04C,iBAAA,CAAkB19C,OAAO;IAC9C,MAAMw8C,UAAA,GAAa,CAAC;IACpB,MAAMD,SAAA,GAAYv8C,OAAA,CAAQQ,GAAA,CAAI,aAAaiZ,IAAA,EAAM3N,KAAK;IACtD,MAAMnC,MAAA,GAAS3J,OAAA,CAAQQ,GAAA,CAAI,UAAUiZ,IAAA,EAAM3N,KAAK;IAChD,MAAMqwC,GAAA,GAAMn8C,OAAA,CAAQQ,GAAA,CAAI,OAAOiZ,IAAA,EAAM3N,KAAK;IAC1C,MAAMoyC,KAAA,GAAQl+C,OAAA,CAAQo9C,MAAA,CAAO,cAAc3jC,IAAA,EAAM3N,KAAK;IACtD,MAAMqyC,cAAA,GAAiBn+C,OAAA,CAAQo9C,MAAA,CAAO,UAAU3jC,IAAA,EAAM3N,KAAK;IAC3D0wC,UAAA,CAAW/iC,IAAA,GAAOwkC,aAAA;IAClB,IAAI1B,SAAA,EAAW;MACbC,UAAA,CAAW4B,KAAA,GAAQ7B,SAAA;IACrB;IACA,IAAI5yC,MAAA,EAAQ;MACV6yC,UAAA,CAAW7yC,MAAA,GAASA,MAAA;IACtB;IACA,IAAIwyC,GAAA,EAAK;MACPK,UAAA,CAAWL,GAAA,GAAMA,GAAA;IACnB;IACA,IAAI+B,KAAA,EAAO;MACT34C,MAAA,CAAOi3C,UAAA,EAAY0B,KAAK;IAC1B;IACA,OAAO;MACLhC,OAAA;MACAM,UAAA;MACAx3C,OAAA;MACAm5C;IACF;EACF;AACF;AAQA,SAASE,iBAAiBz8C,IAAA,EAAMuD,KAAA,EAAO;EACrC,MAAMm5C,KAAA,SAAchB,UAAA,CAAW;IAC7B3+C,YAAY2G,KAAA,EAAO+O,MAAA,EAAQ;MACzB,MAAM/O,KAAA,EAAO+O,MAAM;MACnB,KAAKk/B,CAAA,GAAI3xC,IAAA;IACX;EACF;EACA,WAAW28C,CAAA,IAAKp5C,KAAA,EAAO;IACrBm5C,KAAA,CAAMp9C,SAAA,CAAUq9C,CAAC,IAAIp5C,KAAA,CAAMo5C,CAAC;EAC9B;EACAD,KAAA,CAAM/K,CAAA,GAAI3xC,IAAA;EACV,OAAO08C,KAAA;AACT;AAKA,IAAME,KAAA,GAAQH,gBAAA,CAAiB,SAAS;EACtCd,MAAA,EAAQ;EACRC,OAAA,EAAS;IACP,OAAO,YAAY,KAAKx8C,QAAA,CAAS;EACnC;AACF,CAAC;AAKD,IAAMy9C,IAAA,GAAOJ,gBAAA,CAAiB,MAAM;AAMpC,IAAMK,EAAA,GAAKL,gBAAA,CAAiB,IAAI;AAMhC,IAAMM,GAAA,GAAMN,gBAAA,CAAiB,OAAO;EAClCd,MAAA,EAAQ;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQRC,OAAOC,OAAA,GAAS7B,SAAA,CAASC,eAAA,EAAiB;IAExC,OAAO,KAAK+C,WAAA,CAAY,IAAI,KAAKzD,CAAA,GAAI,GAAGsC,OAAM,MAAM,KAAKtC,CAAC;EAC5D;EAAA;AAAA;AAAA;AAAA;EAKAyD,YAAA,EAAc;IACZ,MAAMvqC,MAAA,GAAS,KAAKgkC,EAAA;IACpB,OAAOhkC,MAAA,CAAO1Z,MAAA,IAAU,KAAK0Z,MAAA,CAAO,CAAC,EAAEk/B,CAAA,KAAM2B,SAAA,IAAa7gC,MAAA,CAAO,CAAC,EAAEk/B,CAAA,KAAM0D,KAAA;EAC5E;AACF,CAAC;AA2BD,IAAM4H,SAAA,GAAYC,GAAA,IAAO,IAAInL,KAAA,CAAMmL,GAAG;AAMtC,SAASC,OAAO;EACdlrB;AACF,GAAG;EAED,MAAMmrB,WAAA,GAAcnrB,MAAA,CAAOmf,MAAA,CAAOpnC,MAAA,CAAO,CAAC8qC,SAAA,EAAWE,QAAA,EAAUC,EAAA,EAAIC,SAAA,EAAWC,QAAA,EAAUC,KAAA,EAAOG,MAAA,EAAQE,MAAA,EAAQE,MAAA,EAAQhC,GAAA,EAAKiC,OAAA,EAASC,IAAA,EAAMC,IAAA,EAAMC,KAAA,EAAOK,KAAA,EAAOI,GAAA,EAAKH,KAAA,EAAOC,UAAU,CAAC;EAKtL,MAAM+G,cAAA,GAAiB,CAAChI,KAAA,EAAOC,KAAA,EAAOE,GAAA,EAAKE,WAAA,EAAaE,OAAA,EAASI,KAAA,EAAOC,KAAA,EAAOE,IAAA,EAAM/B,gBAAA,EAAkBC,iBAAA,EAAmBP,SAAA,EAAWC,UAAA,EAAYE,YAAA,EAAcD,WAAA,EAAaE,SAAA,EAAWC,UAAA,EAAYG,kBAAA,EAAoBC,mBAAA,EAAqBC,iBAAA,EAAmBC,kBAAA,EAAoBC,sBAAA,EAAwBC,uBAAA,EAAyBC,iBAAA,EAAmBC,oBAAoB;EAI3W,MAAMyI,kBAAA,GAAqB,CAACxI,SAAA,EAAWC,UAAA,EAAYC,QAAA,EAAUE,SAAA,EAAWC,QAAA,EAAUC,KAAA,EAAOG,MAAA,EAAQE,MAAA,EAAQE,MAAA,EAAQ7B,SAAA,EAAWC,UAAA,EAAY6B,OAAA,EAASC,IAAA,EAAMC,IAAA,EAAMC,KAAA,EAAOC,KAAA,EAAOI,KAAA,EAAOI,GAAA,EAAKH,KAAA,EAAOC,UAAU;EAMxM,MAAMoB,KAAA,GAAQuF,SAAA,CAAU;EACxB,MAAMM,SAAA,GAAY3K,EAAA,CAAG8E,KAAA,EAAOrB,KAAK;EACjC3D,EAAA,CAAG6K,SAAA,EAAWD,kBAAA,EAAoBC,SAAS;EAC3C7K,EAAA,CAAG6K,SAAA,EAAWtrB,MAAA,CAAOmf,MAAA,EAAQmM,SAAS;EACtC,MAAMC,MAAA,GAASP,SAAA,CAAU;IACvBQ,MAAA,GAASR,SAAA,CAAU;IACnBS,WAAA,GAAcT,SAAA,CAAU;EAC1BvK,EAAA,CAAGgF,KAAA,EAAOzlB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EAC/B9K,EAAA,CAAGgF,KAAA,EAAOzlB,MAAA,CAAOqf,MAAA,EAAQmM,MAAM;EAC/B/K,EAAA,CAAGgF,KAAA,EAAOzlB,MAAA,CAAOsf,WAAA,EAAamM,WAAW;EAEzChL,EAAA,CAAG8K,MAAA,EAAQF,kBAAA,EAAoBC,SAAS;EACxC7K,EAAA,CAAG8K,MAAA,EAAQvrB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EAChC,MAAMG,WAAA,GAAc/K,EAAA,CAAG4K,MAAA,EAAQvI,EAAE;EAEjCrC,EAAA,CAAG2K,SAAA,EAAWtI,EAAA,EAAI0I,WAAW;EAG7B/K,EAAA,CAAG6K,MAAA,EAAQxI,EAAA,EAAI0I,WAAW;EAC1B/K,EAAA,CAAG8K,WAAA,EAAazI,EAAA,EAAI0I,WAAW;EAC/B,MAAMC,YAAA,GAAehL,EAAA,CAAG2K,SAAA,EAAW/H,GAAG;EACtC9C,EAAA,CAAGkL,YAAA,EAAcN,kBAAA,EAAoBC,SAAS;EAC9C7K,EAAA,CAAGkL,YAAA,EAAc3rB,MAAA,CAAOmf,MAAA,EAAQmM,SAAS;EACzC,MAAMM,WAAA,GAAcZ,SAAA,CAAU;EAC9BvK,EAAA,CAAGiL,WAAA,EAAa1rB,MAAA,CAAOmf,MAAA,EAAQyM,WAAW;EAC1CnL,EAAA,CAAGmL,WAAA,EAAa5rB,MAAA,CAAOmf,MAAA,EAAQyM,WAAW;EAC1C,MAAMC,cAAA,GAAiBlL,EAAA,CAAGiL,WAAA,EAAarI,GAAG;EAC1C9C,EAAA,CAAGoL,cAAA,EAAgB7rB,MAAA,CAAOmf,MAAA,EAAQyM,WAAW;EAC7C,MAAME,OAAA,GAAUd,SAAA,CAAUL,KAAK;EAC/BlK,EAAA,CAAGoL,cAAA,EAAgB7rB,MAAA,CAAOwmB,GAAA,EAAKsF,OAAO;EACtCrL,EAAA,CAAGoL,cAAA,EAAgB7rB,MAAA,CAAOymB,IAAA,EAAMqF,OAAO;EACvCnL,EAAA,CAAG+K,WAAA,EAAarK,SAAA,EAAWyK,OAAO;EAGlC,MAAMC,iBAAA,GAAoBpL,EAAA,CAAGiL,WAAA,EAAalI,MAAM;EAChD/C,EAAA,CAAGoL,iBAAA,EAAmBrI,MAAA,EAAQqI,iBAAiB;EAC/CtL,EAAA,CAAGsL,iBAAA,EAAmB/rB,MAAA,CAAOmf,MAAA,EAAQyM,WAAW;EAChDnL,EAAA,CAAGqL,OAAA,EAAS9rB,MAAA,CAAOmf,MAAA,EAAQyM,WAAW;EACtCjL,EAAA,CAAGmL,OAAA,EAASvI,GAAA,EAAKsI,cAAc;EAC/BlL,EAAA,CAAGmL,OAAA,EAASpI,MAAA,EAAQqI,iBAAiB;EAGrC,MAAMC,UAAA,GAAarL,EAAA,CAAGmL,OAAA,EAAS1I,KAAK;EAEpC3C,EAAA,CAAGuL,UAAA,EAAYhsB,MAAA,CAAO8e,OAAA,EAAS6L,KAAK;EAIpC,MAAMsB,YAAA,GAAetL,EAAA,CAAG4K,MAAA,EAAQ7H,MAAM;EACtC,MAAMwI,SAAA,GAAYvL,EAAA,CAAG4K,MAAA,EAAQhI,GAAG;EAChC5C,EAAA,CAAGsL,YAAA,EAAcvI,MAAA,EAAQuI,YAAY;EACrCxL,EAAA,CAAGwL,YAAA,EAAcjsB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EACtC9K,EAAA,CAAGyL,SAAA,EAAWb,kBAAA,EAAoBC,SAAS;EAC3C7K,EAAA,CAAGyL,SAAA,EAAWlsB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EACnC,MAAMY,YAAA,GAAenB,SAAA,CAAUF,GAAG;EAClCrK,EAAA,CAAGyL,SAAA,EAAWlsB,MAAA,CAAOwmB,GAAA,EAAK2F,YAAY;EACtC1L,EAAA,CAAGyL,SAAA,EAAWlsB,MAAA,CAAOymB,IAAA,EAAM0F,YAAY;EACvC1L,EAAA,CAAG0L,YAAA,EAAcnsB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EACtC9K,EAAA,CAAG0L,YAAA,EAAcd,kBAAA,EAAoBC,SAAS;EAC9C3K,EAAA,CAAGwL,YAAA,EAAc5I,GAAA,EAAK2I,SAAS;EAC/BvL,EAAA,CAAGwL,YAAA,EAAczI,MAAA,EAAQuI,YAAY;EACrCtL,EAAA,CAAGwL,YAAA,EAAcnJ,EAAA,EAAI0I,WAAW;EAChC,MAAMU,iBAAA,GAAoBzL,EAAA,CAAGwL,YAAA,EAAc/I,KAAK;EAChD,MAAMiJ,qBAAA,GAAwBrB,SAAA,CAAUF,GAAG;EAC3CrK,EAAA,CAAG2L,iBAAA,EAAmBpsB,MAAA,CAAO8e,OAAA,EAASuN,qBAAqB;EAG3D,MAAMC,KAAA,GAAQtB,SAAA,CAAUF,GAAG;EAG3B,MAAMyB,YAAA,GAAevB,SAAA,CAAU;EAG/BvK,EAAA,CAAG6L,KAAA,EAAOnB,WAAA,EAAamB,KAAK;EAC5B7L,EAAA,CAAG6L,KAAA,EAAOlB,cAAA,EAAgBmB,YAAY;EACtC9L,EAAA,CAAG8L,YAAA,EAAcpB,WAAA,EAAamB,KAAK;EACnC7L,EAAA,CAAG8L,YAAA,EAAcnB,cAAA,EAAgBmB,YAAY;EAI7C5L,EAAA,CAAGwL,YAAA,EAAchI,KAAA,EAAOmI,KAAK;EAC7B3L,EAAA,CAAG0L,qBAAA,EAAuBlI,KAAA,EAAOmI,KAAK;EAGtC,MAAME,WAAA,GAAc7L,EAAA,CAAG6K,MAAA,EAAQpI,KAAK;EACpC,MAAMqJ,gBAAA,GAAmB9L,EAAA,CAAG8K,WAAA,EAAarI,KAAK;EAC9C,MAAMsJ,qBAAA,GAAwB/L,EAAA,CAAG8L,gBAAA,EAAkBtI,KAAK;EAExD,MAAMwI,SAAA,GAAYhM,EAAA,CAAG+L,qBAAA,EAAuBvI,KAAK;EAGjD1D,EAAA,CAAG+K,MAAA,EAAQxrB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EAChC5K,EAAA,CAAG6K,MAAA,EAAQjI,GAAA,EAAK2I,SAAS;EACzBvL,EAAA,CAAG6K,MAAA,EAAQ9H,MAAA,EAAQuI,YAAY;EAC/BxL,EAAA,CAAGgL,WAAA,EAAazrB,MAAA,CAAOmf,MAAA,EAAQoM,MAAM;EACrC5K,EAAA,CAAG8K,WAAA,EAAalI,GAAA,EAAK2I,SAAS;EAC9BvL,EAAA,CAAG8K,WAAA,EAAa/H,MAAA,EAAQuI,YAAY;EAGpCxL,EAAA,CAAG+L,WAAA,EAAaxsB,MAAA,CAAOmf,MAAA,EAAQmN,KAAK;EACpC3L,EAAA,CAAG6L,WAAA,EAAarI,KAAA,EAAOmI,KAAK;EAC5B3L,EAAA,CAAG6L,WAAA,EAAazI,KAAA,EAAOuI,KAAK;EAC5B7L,EAAA,CAAGkM,SAAA,EAAW3sB,MAAA,CAAOmf,MAAA,EAAQmN,KAAK;EAClC7L,EAAA,CAAGkM,SAAA,EAAWxB,WAAA,EAAamB,KAAK;EAChC3L,EAAA,CAAGgM,SAAA,EAAWxI,KAAA,EAAOmI,KAAK;EAC1B,MAAMM,YAAA,GAAe,CAAC,CAAC/K,SAAA,EAAWC,UAAU;EAAA;EAE5C,CAACC,WAAA,EAAaC,YAAY;EAAA;EAE1B,CAACC,SAAA,EAAWC,UAAU;EAAA;EAEtB,CAACC,gBAAA,EAAkBC,iBAAiB;EAAA;EAEpC,CAACC,kBAAA,EAAoBC,mBAAmB;EAAA;EAExC,CAACC,iBAAA,EAAmBC,kBAAkB;EAAA;EAEtC,CAACC,sBAAA,EAAwBC,uBAAuB;EAAA;EAEhD,CAACC,iBAAA,EAAmBC,oBAAoB;EAAA;EAAA,CACxC;EACA,SAASh8C,CAAA,GAAI,GAAGA,CAAA,GAAIgmD,YAAA,CAAa9lD,MAAA,EAAQF,CAAA,IAAK;IAC5C,MAAM,CAACimD,IAAA,EAAMC,KAAK,IAAIF,YAAA,CAAahmD,CAAC;IACpC,MAAMmmD,OAAA,GAAUpM,EAAA,CAAG2L,KAAA,EAAOO,IAAI;IAG9BlM,EAAA,CAAG4L,YAAA,EAAcM,IAAA,EAAME,OAAO;IAG9BpM,EAAA,CAAGoM,OAAA,EAASD,KAAA,EAAOR,KAAK;IAKxB,MAAMU,QAAA,GAAWhC,SAAA,CAAUF,GAAG;IAC9BrK,EAAA,CAAGsM,OAAA,EAAS5B,WAAA,EAAa6B,QAAQ;IACjC,MAAMC,WAAA,GAAcjC,SAAA,CAAU;IAC9BvK,EAAA,CAAGsM,OAAA,EAAS3B,cAAc;IAG1B3K,EAAA,CAAGuM,QAAA,EAAU7B,WAAA,EAAa6B,QAAQ;IAClCvM,EAAA,CAAGuM,QAAA,EAAU5B,cAAA,EAAgB6B,WAAW;IACxCxM,EAAA,CAAGwM,WAAA,EAAa9B,WAAA,EAAa6B,QAAQ;IACrCvM,EAAA,CAAGwM,WAAA,EAAa7B,cAAA,EAAgB6B,WAAW;IAG3CtM,EAAA,CAAGqM,QAAA,EAAUF,KAAA,EAAOR,KAAK;IACzB3L,EAAA,CAAGsM,WAAA,EAAaH,KAAA,EAAOR,KAAK;EAC9B;EACA3L,EAAA,CAAG8E,KAAA,EAAOpE,SAAA,EAAW8K,YAAY;EACjCxL,EAAA,CAAG8E,KAAA,EAAO7D,EAAA,EAAIiJ,EAAE;EAEhB,OAAO;IACL5iD,KAAA,EAAOw9C,KAAA;IACPjlC,MAAA,EAAQgkC;EACV;AACF;AAYA,SAAS0I,IAAIjlD,KAAA,EAAOm4C,KAAA,EAAO5/B,MAAA,EAAQ;EACjC,IAAI3Z,GAAA,GAAM2Z,MAAA,CAAO1Z,MAAA;EACjB,IAAIkgD,MAAA,GAAS;EACb,IAAImG,MAAA,GAAS,EAAC;EACd,IAAIC,UAAA,GAAa,EAAC;EAClB,OAAOpG,MAAA,GAASngD,GAAA,EAAK;IACnB,IAAI6lB,KAAA,GAAQzkB,KAAA;IACZ,IAAIolD,WAAA,GAAc;IAClB,IAAIhN,SAAA,GAAY;IAChB,IAAIiN,WAAA,GAAc;IAClB,IAAInG,eAAA,GAAkB;IACtB,IAAIC,YAAA,GAAe;IACnB,OAAOJ,MAAA,GAASngD,GAAA,IAAO,EAAEwmD,WAAA,GAAc3gC,KAAA,CAAMyzB,EAAA,CAAG3/B,MAAA,CAAOwmC,MAAM,EAAEtH,CAAC,IAAI;MAGlE0N,UAAA,CAAWhlD,IAAA,CAAKoY,MAAA,CAAOwmC,MAAA,EAAQ,CAAC;IAClC;IACA,OAAOA,MAAA,GAASngD,GAAA,KAAQw5C,SAAA,GAAYgN,WAAA,IAAe3gC,KAAA,CAAMyzB,EAAA,CAAG3/B,MAAA,CAAOwmC,MAAM,EAAEtH,CAAC,IAAI;MAE9E2N,WAAA,GAAc;MACd3gC,KAAA,GAAQ2zB,SAAA;MAGR,IAAI3zB,KAAA,CAAMwzB,OAAA,CAAQ,GAAG;QACnBkH,YAAA,GAAe;QACfD,eAAA,GAAkBz6B,KAAA;MACpB,WAAW06B,YAAA,IAAgB,GAAG;QAC5BA,YAAA;MACF;MACAJ,MAAA;MACAsG,WAAA;IACF;IACA,IAAIlG,YAAA,GAAe,GAAG;MAIpBJ,MAAA,IAAUsG,WAAA;MACV,IAAItG,MAAA,GAASngD,GAAA,EAAK;QAChBumD,UAAA,CAAWhlD,IAAA,CAAKoY,MAAA,CAAOwmC,MAAM,CAAC;QAC9BA,MAAA;MACF;IACF,OAAO;MAGL,IAAIoG,UAAA,CAAWtmD,MAAA,GAAS,GAAG;QACzBqmD,MAAA,CAAO/kD,IAAA,CAAKmlD,cAAA,CAAe3C,IAAA,EAAMxK,KAAA,EAAOgN,UAAU,CAAC;QACnDA,UAAA,GAAa,EAAC;MAChB;MAGApG,MAAA,IAAUI,YAAA;MACVkG,WAAA,IAAelG,YAAA;MAGf,MAAMoG,KAAA,GAAQrG,eAAA,CAAgBzH,CAAA;MAC9B,MAAM+N,SAAA,GAAYjtC,MAAA,CAAO5S,KAAA,CAAMo5C,MAAA,GAASsG,WAAA,EAAatG,MAAM;MAC3DmG,MAAA,CAAO/kD,IAAA,CAAKmlD,cAAA,CAAeC,KAAA,EAAOpN,KAAA,EAAOqN,SAAS,CAAC;IACrD;EACF;EAGA,IAAIL,UAAA,CAAWtmD,MAAA,GAAS,GAAG;IACzBqmD,MAAA,CAAO/kD,IAAA,CAAKmlD,cAAA,CAAe3C,IAAA,EAAMxK,KAAA,EAAOgN,UAAU,CAAC;EACrD;EACA,OAAOD,MAAA;AACT;AAUA,SAASI,eAAeC,KAAA,EAAOpN,KAAA,EAAO5/B,MAAA,EAAQ;EAC5C,MAAMktC,QAAA,GAAWltC,MAAA,CAAO,CAAC,EAAExW,CAAA;EAC3B,MAAM2jD,MAAA,GAASntC,MAAA,CAAOA,MAAA,CAAO1Z,MAAA,GAAS,CAAC,EAAEmD,CAAA;EACzC,MAAMwH,KAAA,GAAQ2uC,KAAA,CAAMxyC,KAAA,CAAM8/C,QAAA,EAAUC,MAAM;EAC1C,OAAO,IAAIH,KAAA,CAAM/7C,KAAA,EAAO+O,MAAM;AAChC;AAMA,IAAMotC,IAAA,GAAO;EACXC,OAAA,EAAS;EACThwC,MAAA,EAAQ;EACRiwC,UAAA,EAAY,EAAC;EACbC,WAAA,EAAa,EAAC;EACdvI,aAAA,EAAe,EAAC;EAChBwI,WAAA,EAAa;AACf;AAgHA,SAASC,KAAA,EAAO;EAEdL,IAAA,CAAKC,OAAA,GAAUtI,MAAA,CAAOqI,IAAA,CAAKpI,aAAa;EACxC,SAAS5+C,CAAA,GAAI,GAAGA,CAAA,GAAIgnD,IAAA,CAAKE,UAAA,CAAWhnD,MAAA,EAAQF,CAAA,IAAK;IAC/CgnD,IAAA,CAAKE,UAAA,CAAWlnD,CAAC,EAAE,CAAC,EAAE;MACpBinD,OAAA,EAASD,IAAA,CAAKC;IAChB,CAAC;EACH;EAGAD,IAAA,CAAK/vC,MAAA,GAASqtC,MAAA,CAAO0C,IAAA,CAAKC,OAAA,CAAQrtC,MAAM;EACxC,SAAS5Z,CAAA,GAAI,GAAGA,CAAA,GAAIgnD,IAAA,CAAKG,WAAA,CAAYjnD,MAAA,EAAQF,CAAA,IAAK;IAChDgnD,IAAA,CAAKG,WAAA,CAAYnnD,CAAC,EAAE,CAAC,EAAE;MACrBinD,OAAA,EAASD,IAAA,CAAKC,OAAA;MACdhwC,MAAA,EAAQ+vC,IAAA,CAAK/vC;IACf,CAAC;EACH;EACA+vC,IAAA,CAAKI,WAAA,GAAc;EACnB,OAAOJ,IAAA;AACT;AAOA,SAASM,SAASxgD,GAAA,EAAK;EACrB,IAAI,CAACkgD,IAAA,CAAKI,WAAA,EAAa;IACrBC,IAAA,CAAK;EACP;EACA,OAAOf,GAAA,CAAIU,IAAA,CAAK/vC,MAAA,CAAO5V,KAAA,EAAOyF,GAAA,EAAKk5C,KAAA,CAAMgH,IAAA,CAAKC,OAAA,CAAQ5lD,KAAA,EAAOyF,GAAG,CAAC;AACnE;AACAwgD,QAAA,CAASC,IAAA,GAAOvH,KAAA;AAUhB,SAASljB,KAAKh2B,GAAA,EAAKK,IAAA,GAAO,MAAM8gB,IAAA,GAAO,MAAM;EAC3C,IAAI9gB,IAAA,IAAQ,OAAOA,IAAA,KAAS,UAAU;IACpC,IAAI8gB,IAAA,EAAM;MACR,MAAM1nB,KAAA,CAAM,gCAAgC4G,IAAI,oBAAoB;IACtE;IACA8gB,IAAA,GAAO9gB,IAAA;IACPA,IAAA,GAAO;EACT;EACA,MAAM5B,OAAA,GAAU,IAAI28C,OAAA,CAAQj6B,IAAI;EAChC,MAAMrO,MAAA,GAAS0tC,QAAA,CAASxgD,GAAG;EAC3B,MAAM0gD,QAAA,GAAW,EAAC;EAClB,SAASxnD,CAAA,GAAI,GAAGA,CAAA,GAAI4Z,MAAA,CAAO1Z,MAAA,EAAQF,CAAA,IAAK;IACtC,MAAMqR,KAAA,GAAQuI,MAAA,CAAO5Z,CAAC;IACtB,IAAIqR,KAAA,CAAMyxC,MAAA,KAAW,CAAC37C,IAAA,IAAQkK,KAAA,CAAMynC,CAAA,KAAM3xC,IAAA,KAAS5B,OAAA,CAAQi9C,KAAA,CAAMnxC,KAAK,GAAG;MACvEm2C,QAAA,CAAShmD,IAAA,CAAK6P,KAAA,CAAMkyC,iBAAA,CAAkBh+C,OAAO,CAAC;IAChD;EACF;EACA,OAAOiiD,QAAA;AACT;;;AC3xDO,IAAMC,mCAAA,GAAiE;EAC5EC,uBAAA,EAAyB;EACzBC,OAAA,EAAS;EACTC,SAAA,EAAYC,IAAA,IACV/qB,IAAA,CAAK+qB,IAAA,EAAM,OAAO;IAAEzG,eAAA,EAAiB;EAAQ,CAAC,EAAE7mB,MAAA,CAAiB,CAACC,GAAA,EAAKstB,IAAA,KAAS;IAC9E,IAAI;MACF,MAAM9zC,GAAA,GAAM,IAAIihC,GAAA,CAAI6S,IAAA,CAAK9oC,IAAI;MAE7B,IAAI8oC,IAAA,CAAKhF,MAAA,IAAU,iCAAiCpxC,IAAA,CAAKsC,GAAA,CAAIsL,QAAQ,GAAG;QACtEkb,GAAA,CAAIh5B,IAAA,CAAKsmD,IAAA,CAAK9oC,IAAI;MACpB;IACF,QAAQ,CAER;IACA,OAAOwb,GAAA;EACT,GAAG,EAAE;AACT;AAEO,IAAMutB,iCAAA,GAA6D;EACxE5Q,aAAA,EAAe,EAAC;EAAA;EAChBtB,gBAAA,EAAkBA,CAAA,KAAM;EACxBuB,0BAAA,EAA4BjmB;AAC9B;AAEO,IAAM62B,4BAAA,GAAmD;EAC9DL,OAAA,EAAS;EACTM,mBAAA,EAAqB;AACvB;AAEO,IAAMC,uBAAA,GAAiD;EAC5D7hB,WAAA,EAAa0hB,iCAAA;EACbI,MAAA,EAAQ;IAAER,OAAA,EAAS;EAAM;EACzBS,YAAA,EAAcX,mCAAA;EACdI,IAAA,EAAMG;AACR;;;ACvBA,IAAMK,UAAA,GAAa9iD,OAAA,IAA8D;EAC/E,IAAI,CAACA,OAAA,EACH,OAAO;IAAEoK,OAAA,EAAS,CAAC;IAAwB24C,MAAA,EAAQ,CAAC;EAA+B;EACrF,OAAO;IAAE34C,OAAA,EAAS,CAAC;IAAwB24C,MAAA,EAAQ,CAAC;EAA+B;AACrF;AAEO,IAAMC,iBAAA,GAAN,MAAwB;EAI7BrkD,YAAY;IAAEuuC,QAAA;IAAU9iC;EAAQ,GAA6B;IAa7D,KAAA64C,kBAAA,GAAqB,CACnB/O,SAAA,EACAgP,aAAA,KACG/1C,IAAA,CAAKC,SAAA,CAAU8mC,SAAA,CAAU9pC,OAAO,MAAM+C,IAAA,CAAKC,SAAA,CAAU81C,aAAA,EAAe94C,OAAO;IAEhF,KAAA2iC,SAAA,GAAY,CAAC;MAAE3iC;IAAQ,IAA+C,CAAC,MAAM;MAC3E,KAAKmW,KAAA,CAAM/Z,IAAA,CAAKs8C,UAAA,CAAU;QAAE5V,QAAA,EAAU,KAAKA,QAAA;QAAU9iC;MAAQ,CAAC,CAAC;IACjE;IAnBE,KAAK8iC,QAAA,GAAWA,QAAA;IAChB,KAAK3sB,KAAA,GAAQ,IAAIgmB,UAAA,CAAmCuc,UAAA,CAAU;MAAE5V,QAAA;MAAU9iC;IAAQ,CAAC,CAAC;EACtF;EAEA,IAAI+4C,kBAAA,EAAoB;IACtB,OAAO,KAAK5iC,KAAA,CAAMqnB,cAAA,CAAe,EAAEx9B,OAAA;EACrC;EAEA,IAAIg5C,mBAAA,EAAqB;IACvB,OAAO,KAAK7iC,KAAA,CAAMqnB,cAAA,CAAe,EAAEmb,MAAA;EACrC;EAWAM,eAAe3lD,IAAA,EAAsC;IACnD,KAAK6iB,KAAA,CAAMkmB,WAAA,CAAY;MACrBr8B,OAAA,EAAS;QACP,GAAG,KAAKmW,KAAA,CAAMqnB,cAAA,CAAe,EAAEx9B,OAAA;QAC/B,GAAG1M;MACL;IACF,CAAC;EACH;EAEA4lD,cAAc5lD,IAAA,EAA8C;IAC1D,KAAK6iB,KAAA,CAAMkmB,WAAA,CAAY;MACrBsc,MAAA,EAAQ;QACN,GAAG,KAAKxiC,KAAA,CAAMqnB,cAAA,CAAe,EAAEmb,MAAA;QAC/B,GAAGrlD;MACL;IACF,CAAC;EACH;AACF;;;AClDO,IAAK6lD,iBAAA,GAAL,gBAAKC,kBAAA,IAAL;EAELA,kBAAA,gBAAY;EAEZA,kBAAA,aAAS;EAETA,kBAAA,aAAS;EAETA,kBAAA,cAAU;EAEVA,kBAAA,cAAU;EAVA,OAAAA,kBAAA;AAAA,GAAAD,iBAAA;AA0BZ,IAAME,qBAAA,GAAyBZ,YAAA,IAC7B,IAAIa,GAAA,CAAIb,YAAA,CAAa1lD,GAAA,CAAKwmD,WAAA,IAAgB,CAACA,WAAA,CAAYngB,aAAA,EAAemgB,WAAW,CAAC,CAAC;AAErF,IAAMC,UAAA,GAAY7W,CAAC;EACjB3iC;AACF,MAGEA,OAAA,GACI;EACEy5C,QAAA,EACEz5C,OAAA,CAAQ02B,WAAA,EAAa9L,MAAA,CAAuB,CAACC,GAAA,EAAKsO,UAAA,KAAe;IAC/D,IAAI,CAACA,UAAA,CAAWC,aAAA,EAAe,OAAOvO,GAAA;IACtCA,GAAA,CAAI9sB,GAAA,CAAIo7B,UAAA,CAAWC,aAAA,EAAe;MAChC,GAAID,UAAA;MACJz4B,MAAA,EAAQ;IACV,CAAC;IACD,OAAOmqB,GAAA;EACT,GAAG,mBAAIyuB,GAAA,CAAI,CAAC,KAAK,mBAAIA,GAAA,CAAI;AAC7B,IACA;EACEG,QAAA,EAAU,mBAAIH,GAAA,CAA0B;AAC1C;AAOC,IAAMI,oBAAA,GAAN,MAAMA,oBAAA,CAAoD;EAM/DnlD,YAAY;IAAEuuC,QAAA;IAAU9iC;EAAQ,GAA+B;IAF/D,KAAQ25C,0BAAA,GAA6B;IA6GrC,KAAAhX,SAAA,GAAY,CAAC;MAAE3iC;IAAQ,IAA+C,CAAC,MAAM;MAC3E,KAAKmW,KAAA,CAAM/Z,IAAA,CAAKo9C,UAAA,CAAU;QAAEx5C,OAAA,EAAS,KAAKg4C,OAAA,GAAUh4C,OAAA,GAAU;MAAU,CAAC,CAAC;IAC5E;IAEA,KAAQ45C,kBAAA,GAAqB,MAAO1B,IAAA,IAAiB;MACnD,IAAI,CAAC,KAAKF,OAAA,EAAS;MACnB,MAAM6B,IAAA,GAAO,KAAK55C,MAAA,CAAOg4C,SAAA,CAAUC,IAAI;MAEvC,KAAKyB,0BAAA,GAA6B,CAACE,IAAA,CAAKtpD,MAAA;MACxC,IAAI,KAAKopD,0BAAA,EAA4B;QACnC,KAAKxjC,KAAA,CAAM/Z,IAAA,CAAK;UAAEq9C,QAAA,EAAU,mBAAIH,GAAA,CAAI;QAAE,CAAC;QACvC;MACF;MACA,MAAMQ,YAAA,GAAe,IAAIR,GAAA,CACvBnpD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAQ,EAAE33C,MAAA,CACxB,CAAC,CAACi4C,UAAU,MAAMF,IAAA,CAAK/d,QAAA,CAASie,UAAU,KAAKF,IAAA,CAAK/d,QAAA,CAASie,UAAA,GAAa,GAAG,CAC/E,CACF;MAEA,MAAMC,eAAA,GAAkBH,IAAA,CACrB/3C,MAAA,CAAQuC,GAAA,IAAQ;QACf,MAAM41C,gBAAA,GAAmB,KAAKR,QAAA;QAE9B,MAAMS,mBAAA,GACJD,gBAAA,CAAiB7jD,GAAA,CAAIiO,GAAG,KAAK41C,gBAAA,CAAiB7jD,GAAA,CAAIiO,GAAA,GAAM,GAAG;QAC7D,OAAO,CAAC61C,mBAAA;MACV,CAAC,EACAnnD,GAAA,CACEsR,GAAA,KACE;QACC+0B,aAAA,EAAe/0B,GAAA,CAAI9K,IAAA,CAAK;QACxBmH,MAAA,EAAQ;MACV,EACJ;MAEF,IAAI,CAACs5C,eAAA,CAAgBzpD,MAAA,EAAQ;MAE7B,KAAK4lB,KAAA,CAAMkmB,WAAA,CAAY;QACrBod,QAAA,EAAU,IAAIH,GAAA,CAAI,CAAC,GAAGQ,YAAA,EAAc,GAAGT,qBAAA,CAAsBW,eAAe,CAAC,CAAC;MAChF,CAAC;MAED,MAAM9nC,OAAA,CAAQ2N,GAAA,CACZm6B,eAAA,CAAgBjnD,GAAA,CAAI,MAAOwmD,WAAA,IAAgB;QACzC,IAAI;UAEF,MAAM;YAAElT,QAAA;YAAU,GAAG8T;UAAa,IAAI,MAAM,KAAK3lD,MAAA,CAAO4lD,SAAA,CACtDb,WAAA,CAAYngB,aACd;UACA,IAAI,KAAKugB,0BAAA,EAA4B;UAErC,IAAI,KAAKF,QAAA,CAASjuC,GAAA,CAAI+tC,WAAA,CAAYngB,aAAa,GAAG;YAChD,KAAKihB,aAAA,CAAcd,WAAA,CAAYngB,aAAA,EAAe;cAC5C14B,MAAA,EAAQ;cACR,GAAGy5C;YACL,CAAC;UACH;QACF,SAASt5C,KAAA,EAAO;UACd,IAAI,KAAK44C,QAAA,CAASjuC,GAAA,CAAI+tC,WAAA,CAAYngB,aAAa,GAAG;YAChD,KAAKihB,aAAA,CAAcd,WAAA,CAAYngB,aAAA,EAAe;cAC5C14B,MAAA,EAAQ;YACV,CAAC;UACH;QACF;QACA,OAAO64C,WAAA;MACT,CAAC,CACH;IACF;IAEA,KAAAe,mBAAA,GAAsB,MAAM;MAC1B,KAAKC,iBAAA,CAAkBrlC,MAAA,CAAO;MAC9B,KAAKqlC,iBAAA,CAAkB9vB,KAAA,CAAM;IAC/B;IAMA;AAAA;AAAA;AAAA;IAAA,KAAA+vB,aAAA,GAAgB,MAAM;MACpB,MAAMC,eAAA,GAAkB,KAAKhB,QAAA;MAC7B,MAAMiB,WAAA,GAAc,mBAAIpB,GAAA,CAA0B;MAGlDmB,eAAA,CAAgBhhD,OAAA,CAAQ,CAACkhD,OAAA,EAASt2C,GAAA,KAAQ;QACxC,IAAIq1C,oBAAA,CAAoBkB,kBAAA,CAAmBD,OAAO,GAAG;UACnDD,WAAA,CAAY38C,GAAA,CAAIsG,GAAA,EAAKs2C,OAAO;QAC9B;MACF,CAAC;MAED,KAAKxkC,KAAA,CAAMkmB,WAAA,CAAY;QAAEod,QAAA,EAAUiB;MAAY,CAAC;IAClD;IAEA,KAAAL,aAAA,GAAgB,CAACh2C,GAAA,EAAcs2C,OAAA,KAAkC;MAC/D,IAAI,CAACt2C,GAAA,EAAK;MACV,MAAMw2C,eAAA,GAAkB,KAAKpB,QAAA,CAASrjD,GAAA,CAAIiO,GAAG;MAC7C,MAAM3D,MAAA,GACJi6C,OAAA,CAAQj6C,MAAA,IAAU,KAAK+4C,QAAA,CAASrjD,GAAA,CAAIiO,GAAG,GAAG3D,MAAA,IAAU;MACtD,IAAIo6C,YAAA,GAAeH,OAAA;MACnB,IAAIE,eAAA,EAAiB;QACnB,MAAMn/C,MAAA,GAASgnC,aAAA,CAAcmY,eAAA,EAAiBF,OAAO;QACrD,MAAMI,MAAA,GAAS,CAACr/C,MAAA,CAAO0mC,IAAA,IAAQvrC,MAAA,CAAO+C,IAAA,CAAK8B,MAAA,CAAO0mC,IAAI,EAAE7xC,MAAA,KAAW;QACnE,IAAIwqD,MAAA,EAAQ;QACZD,YAAA,GAAep/C,MAAA,CAAOlG,MAAA;MACxB;MACA,KAAK2gB,KAAA,CAAMkmB,WAAA,CAAY;QACrBod,QAAA,EAAU,IAAIH,GAAA,CAAI,KAAKG,QAAQ,EAAE17C,GAAA,CAAIsG,GAAA,EAAK;UACxC,GAAGy2C,YAAA;UACH1hB,aAAA,EAAe/0B,GAAA;UACf3D;QACF,CAAC;MACH,CAAC;IACH;IAEA,KAAAs6C,cAAA,GAAkB32C,GAAA,IAAiB;MACjC,MAAMs2C,OAAA,GAAU,KAAKlB,QAAA,CAASrjD,GAAA,CAAIiO,GAAG;MACrC,IAAIs2C,OAAA,EAAS;QACX,KAAKM,sBAAA,GAAyBN,OAAO;QACrC,KAAKN,aAAA,CAAch2C,GAAA,EAAK;UAAE3D,MAAA,EAAQ;QAA4B,CAAC;MACjE;IACF;IAhOE,KAAKoiC,QAAA,GAAWA,QAAA;IAChB,KAAK3sB,KAAA,GAAQ,IAAIgmB,UAAA,CACfqd,UAAA,CAAU;MAAEx5C,OAAA,EAAS,KAAKg4C,OAAA,GAAUh4C,OAAA,GAAU;IAAU,CAAC,CAC3D;IAEA,KAAKu6C,iBAAA,GAAoBxwB,QAAA,CACvB,KAAK6vB,kBAAA,CAAmBtjD,IAAA,CAAK,IAAI,GACjC,KAAK2J,MAAA,CAAO83C,uBACd;EACF;EAEA,IAAIvjD,OAAA,EAAS;IACX,OAAO,KAAKsuC,QAAA,CAAStuC,MAAA;EACvB;EAEA,IAAI+5B,QAAA,EAAU;IACZ,OAAO,KAAKuU,QAAA,CAASvU,OAAA;EACvB;EAEA,IAAIkrB,SAAA,EAAW;IACb,OAAO,KAAKtjC,KAAA,CAAMqnB,cAAA,CAAe,EAAEic,QAAA;EACrC;EAEA,IAAIyB,gBAAA,EAAkB;IACpB,OAAO/qD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAA,CAAStR,MAAA,CAAO,CAAC,EAAErmC,MAAA,CAAQy3C,WAAA,IAChDG,oBAAA,CAAoByB,gBAAA,CAAiB5B,WAAW,CAClD;EACF;EAEA,IAAI6B,eAAA,EAAiB;IACnB,OAAOjrD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAA,CAAStR,MAAA,CAAO,CAAC,EAAErmC,MAAA,CAAQy3C,WAAA,IAChDG,oBAAA,CAAoB2B,eAAA,CAAgB9B,WAAW,CACjD;EACF;EAEA,IAAI+B,kBAAA,EAAoB;IACtB,OAAOnrD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAA,CAAStR,MAAA,CAAO,CAAC,EAAErmC,MAAA,CAAQy3C,WAAA,IAChDG,oBAAA,CAAoBkB,kBAAA,CAAmBrB,WAAW,CACpD;EACF;EAEA,IAAIgC,eAAA,EAAiB;IACnB,OAAOprD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAA,CAAStR,MAAA,CAAO,CAAC,EAAErmC,MAAA,CAAQy3C,WAAA,IAChDG,oBAAA,CAAoB8B,eAAA,CAAgBjC,WAAW,CACjD;EACF;EAEA,IAAIkC,gBAAA,EAAkB;IACpB,OAAOtrD,KAAA,CAAMyQ,IAAA,CAAK,KAAK64C,QAAA,CAAStR,MAAA,CAAO,CAAC,EAAErmC,MAAA,CAAQy3C,WAAA,IAChDG,oBAAA,CAAoBgC,gBAAA,CAAiBnC,WAAW,CAClD;EACF;EAEA,IAAIt5C,OAAA,EAAS;IACX,OAAO,KAAK6iC,QAAA,CAAS7iC,MAAA,CAAOw4C,YAAA;EAC9B;EAEA,IAAIV,wBAAA,EAA0B;IAC5B,OAAO,KAAK93C,MAAA,CAAO83C,uBAAA;EACrB;EAEA,IAAIA,wBACFA,uBAAA,EACA;IACA,KAAKuC,mBAAA,CAAoB;IAEzB,KAAKC,iBAAA,GAAoBxwB,QAAA,CACvB,KAAK6vB,kBAAA,CAAmBtjD,IAAA,CAAK,IAAI,GACjC,KAAK2J,MAAA,CAAO83C,uBACd;IAEA,KAAKjV,QAAA,CAASG,YAAA,CAAa;MAAEwV,YAAA,EAAc;QAAEV;MAAwB;IAAE,CAAC;EAC1E;EAEA,IAAIC,QAAA,EAAU;IAKZ,OACE,CAAC,CAAC,KAAKzpB,OAAA,CAAQotB,SAAA,CAAU,GAAGC,cAAA,IAC5B,KAAK9Y,QAAA,CAAS7iC,MAAA,CAAOw4C,YAAA,CAAaT,OAAA;EAEtC;EAEA,IAAIA,QAAQA,OAAA,EAA+C;IACzD,IAAIA,OAAA,KAAY,KAAKA,OAAA,EAAS;IAC9B,KAAKlV,QAAA,CAASG,YAAA,CAAa;MAAEwV,YAAA,EAAc;QAAET;MAAQ;IAAE,CAAC;EAC1D;EAEA,IAAIC,UAAA,EAAY;IACd,OAAO,KAAKh4C,MAAA,CAAOg4C,SAAA;EACrB;EAEA,IAAIA,UAAU1hD,EAAA,EAA4C;IACxD,KAAKusC,QAAA,CAASG,YAAA,CAAa;MAAEwV,YAAA,EAAc;QAAER,SAAA,EAAW1hD;MAAG;IAAE,CAAC;EAChE;EAEA,IAAI0kD,uBAAA,EAAyB;IAC3B,OAAO,KAAKh7C,MAAA,CAAOg7C,sBAAA;EACrB;EAEA,IAAIA,uBAAuB1kD,EAAA,EAAyD;IAClF,KAAKusC,QAAA,CAASG,YAAA,CAAa;MAAEwV,YAAA,EAAc;QAAEwC,sBAAA,EAAwB1kD;MAAG;IAAE,CAAC;EAC7E;AA8IF;AA7PamjD,oBAAA,CAyOJyB,gBAAA,GAAoBR,OAAA,IACzBA,OAAA,CAAQj6C,MAAA,KAAW;AA1OVg5C,oBAAA,CA4OJ2B,eAAA,GAAmBV,OAAA,IACxBA,OAAA,CAAQj6C,MAAA,KAAW;AA7OVg5C,oBAAA,CA+OJkB,kBAAA,GAAsBD,OAAA,IAC3BA,OAAA,CAAQj6C,MAAA,KAAW;AAhPVg5C,oBAAA,CAkPJ8B,eAAA,GAAmBb,OAAA,IACxBA,OAAA,CAAQj6C,MAAA,KAAW;AAnPVg5C,oBAAA,CAqPJgC,gBAAA,GAAoBf,OAAA,IACzBA,OAAA,CAAQj6C,MAAA,KAAW;AAtPVg5C,oBAAA,CAwPJmC,cAAA,GAAkBlB,OAAA,IAAyB;EAEhD,MAAM;IAAEj6C,MAAA;IAAQ,GAAGpN;EAAK,IAAIqnD,OAAA;EAC5B,OAAOrnD,IAAA;AACT;AA5PK,IAAMwoD,mBAAA,GAANpC,oBAAA;;;ACnDA,IAAMqC,kBAAA,GAAqBC,YAAA,CAAaC,4BAA4B;AAkBpE,IAAMC,gBAAA,GAAmBF,YAAA,CAAaG,oBAAoB;AAEjE,IAAMC,eAAA,GAAkB,mBAAI9C,GAAA,CAAqC;AAqBjE,SAAS0C,aAAqCK,OAAA,EAA6B;EACzE,OAAO,SAASC,KAAIC,GAAA,EAAsB71B,EAAA,EAAgC;IACxE,MAAM;MAAEA,EAAA,EAAI81B,OAAA;MAASC;IAAY,IAAIJ,OAAA,CAAQE,GAAA,EAAK71B,EAAE;IACpD,MAAMg2B,OAAA,GAAUN,eAAA,CAAgBhmD,GAAA,CAAImmD,GAAG;IACvCG,OAAA,EAASD,WAAA,CAAY;IACrB,MAAM1iC,OAAA,GAAU2iC,OAAA,GAAUA,OAAA,CAAQ3iC,OAAA,CAAQpa,IAAA,CAAK68C,OAAA,EAASA,OAAO,IAAIA,OAAA,CAAQ;IAC3EJ,eAAA,CAAgBr+C,GAAA,CAAIw+C,GAAA,EAAK;MAAExiC,OAAA;MAAS0iC;IAAY,CAAC;IACjD,OAAO1iC,OAAA;EACT;AACF;AAOA,SAASkiC,6BAAgCM,GAAA,EAAsB71B,EAAA,EAAsB;EACnF,IAAIi2B,eAAA,GAAkB;EACtB,MAAMH,OAAA,GAAUA,CAAA,KACd91B,EAAA,CAAG,EAAEk2B,OAAA,CAAQ,MAAM;IACjB,IAAI,CAACD,eAAA,EAAiB;MACpBP,eAAA,CAAgBpmD,MAAA,CAAOumD,GAAG;IAC5B;EACF,CAAC;EACH,MAAME,WAAA,GAAcA,CAAA,KAAOE,eAAA,GAAkB;EAC7C,OAAO;IAAEj2B,EAAA,EAAI81B,OAAA;IAASC;EAAY;AACpC;AA0BA,SAASN,qBACPI,GAAA,EACA71B,EAAA,EACA;EACA,MAAMm2B,EAAA,GAAK,IAAIC,eAAA,CAAgB;EAC/B,MAAMN,OAAA,GAAUA,CAAA,KAAM;IACpB,IAAIK,EAAA,CAAGpqC,MAAA,CAAO4C,OAAA,EAAS;MACrB,OAAOnD,OAAA,CAAQ/E,OAAA,CAAQ,UAAmB;IAC5C;IAEA,OAAOuZ,EAAA,CAAGm2B,EAAA,CAAGpqC,MAAM,EAAEmqC,OAAA,CAAQ,MAAM;MACjC,IAAI,CAACC,EAAA,CAAGpqC,MAAA,CAAO4C,OAAA,EAAS;QACtB+mC,eAAA,CAAgBpmD,MAAA,CAAOumD,GAAG;MAC5B;IACF,CAAC;EACH;EACA,MAAME,WAAA,GAAcA,CAAA,KAAMI,EAAA,CAAG1nC,KAAA,CAAM;EACnC,OAAO;IAAEuR,EAAA,EAAI81B,OAAA;IAASC;EAAY;AACpC;;;ACxFO,IAAMM,kBAAA,GAAN,MAA2D;EAIhExoD,YAAA,EAAc;IAFd,KAAQyoD,UAAA,GAA8C,EAAC;IAGrD,KAAKvoD,EAAA,GAAK+wB,cAAA,CAAe;EAC3B;EAEA5gB,IAAIo4C,UAAA,EAA6E;IAC/E,KAAKA,UAAA,GAAa,KAAKA,UAAA,CAAWx7C,MAAA,CAAOw7C,UAAU;IACnD,OAAO;EACT;EAAA;EAGAxjD,QAAQwjD,UAAA,EAA6C;IACnD,MAAMC,aAAA,GAAgB,CAAC,GAAG,KAAKD,UAAU;IACzCA,UAAA,CAAWvjD,OAAA,CAASyjD,QAAA,IAAa;MAC/B,MAAMC,aAAA,GAAgB,KAAKH,UAAA,CAAW3sB,SAAA,CACnC+sB,QAAA,IAAaA,QAAA,CAAS3oD,EAAA,KAAOyoD,QAAA,CAASzoD,EACzC;MACA,IAAI0oD,aAAA,IAAiB,GAAG;QACtBF,aAAA,CAAc/hC,MAAA,CAAOiiC,aAAA,EAAe,GAAGD,QAAQ;MACjD,OAAO;QACLD,aAAA,CAAcprD,IAAA,CAAKqrD,QAAQ;MAC7B;IACF,CAAC;IACD,KAAKF,UAAA,GAAaC,aAAA;IAClB,OAAO;EACT;EAEAI,OAAO;IACLL,UAAA;IACAnhD,QAAA;IACAyhD;EACF,GAIG;IACD,IAAIA,MAAA,EAAQ;MACVN,UAAA,CAAWvjD,OAAA,CAAS8jD,EAAA,IAAO;QACzB,MAAMC,uBAAA,GAA0B,KAAKR,UAAA,CAAW3sB,SAAA,CAAWvzB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAO8oD,EAAA,CAAG9oD,EAAE;QAC/E,IAAI+oD,uBAAA,IAA2B,GAAG;UAChC,KAAKR,UAAA,CAAW9hC,MAAA,CAAOsiC,uBAAA,EAAyB,CAAC;QACnD;MACF,CAAC;IACH;IACA,MAAMC,QAAA,GAAW5hD,QAAA,CAAS6hD,KAAA,IAAS7hD,QAAA,CAAS8hD,MAAA;IAC5C,MAAMC,WAAA,GAAc,KAAKZ,UAAA,CAAW3sB,SAAA,CAAWvzB,CAAA,IAAMA,CAAA,CAAErI,EAAA,KAAOgpD,QAAQ;IACtE,MAAMj0B,cAAA,GAAiB3tB,QAAA,CAAS6hD,KAAA,GAAQE,WAAA,GAAc,IAAIA,WAAA;IAC1D,KAAKZ,UAAA,CAAW9hC,MAAA,CAAOsO,cAAA,EAAgB,GAAG,GAAGwzB,UAAU;IACvD,OAAO;EACT;EAEAa,SAASC,KAAA,EAAiB;IACxB,KAAKd,UAAA,GAAac,KAAA,CACf/qD,GAAA,CAAK0B,EAAA,IAAO,KAAKuoD,UAAA,CAAW7vB,IAAA,CAAM6vB,UAAA,IAAeA,UAAA,CAAWvoD,EAAA,KAAOA,EAAE,CAAC,EACtEqN,MAAA,CAAOi8C,OAAO;EACnB;EAEA,MAAgBC,uBAAuB;IACrCC,SAAA;IACAC;EACF,GAAsE;IACpE,IAAIh7C,KAAA,GAAQ;IAEZ,MAAMi7C,OAAA,GAAU,MAAAA,CACd9tD,CAAA,EACA8lB,KAAA,EACAzV,MAAA,KAC+C;MAC/C,IAAIrQ,CAAA,IAAK6S,KAAA,EAAO;QACd,MAAM,IAAItS,KAAA,CAAM,8BAA8B;MAChD;MAEAsS,KAAA,GAAQ7S,CAAA;MAER,MAAM+tD,eAAA,GACJ/tD,CAAA,KAAM,KAAK2sD,UAAA,CAAWzsD,MAAA,IACrBmQ,MAAA,IAAU,CAAC,YAAY,SAAS,EAAEo7B,QAAA,CAASp7B,MAAM;MACpD,IAAI09C,eAAA,EAAiB,OAAO;QAAEjoC,KAAA;QAAOzV;MAAO;MAE5C,MAAMs8C,UAAA,GAAa,KAAKA,UAAA,CAAW3sD,CAAC;MACpC,MAAMqsC,OAAA,GAAUsgB,UAAA,CAAWr4C,QAAA,CAASs5C,SAAsB;MAE1D,IAAI,CAACvhB,OAAA,EAAS;QACZ,OAAOyhB,OAAA,CAAQ9tD,CAAA,GAAI,GAAG8lB,KAAA,EAAOzV,MAAM;MACrC;MAEA,MAAMtE,IAAA,GAAQiiD,aAAA,IAA0BF,OAAA,CAAQ9tD,CAAA,GAAI,GAAGguD,aAAa;MACpE,MAAMC,QAAA,GAAYD,aAAA,IAChBF,OAAA,CAAQ9tD,CAAA,GAAI,GAAGguD,aAAA,EAAe,UAAU;MAC1C,MAAME,OAAA,GAAUA,CAAA,KAAMJ,OAAA,CAAQ9tD,CAAA,GAAI,GAAG8lB,KAAA,EAAO,SAAS;MACrD,MAAMqoC,OAAA,GAAUA,CAAA,KAAML,OAAA,CAAQ9tD,CAAA,GAAI,GAAG8lB,KAAK;MAE1C,OAAO,MAAMumB,OAAA,CAAQ;QACnBvmB,KAAA;QACA/Z,IAAA;QACAkiD,QAAA;QACAC,OAAA;QACAC;MACF,CAAC;IACH;IAEA,MAAMhpD,MAAA,GAAS,MAAM0mD,gBAAA,CACnB,wBAAwB,KAAKznD,EAAE,IAAIwpD,SAAS,IAC5C,MAAOQ,WAAA,IAAgB;MACrB,MAAMtc,OAAA,GAAS,MAAMgc,OAAA,CAAQ,GAAGD,YAAY;MAC5C,IAAIO,WAAA,CAAYppC,OAAA,EAAS;QACvB,OAAO;MACT;MACA,OAAO8sB,OAAA;IACT,CACF;IAEA,OAAO3sC,MAAA,KAAW,aAAa;MAAE2gB,KAAA,EAAO+nC,YAAA;MAAcx9C,MAAA,EAAQ;IAAU,IAAIlL,MAAA;EAC9E;EAEA,MAAM2oD,QAAQ;IACZF,SAAA;IACAC,YAAA,EAAcQ;EAChB,GAAsE;IACpE,OAAO,MAAM,KAAKV,sBAAA,CAAuB;MACvCC,SAAA;MACAC,YAAA,EAAcQ;IAChB,CAAC;EACH;AACF;;;ACpKO,IAAMC,2BAAA,GAA8B;AAEpC,IAAMC,gBAAA,GAAmB;AAEhC,IAAMC,gBAAA,GAAoB3G,IAAA,IAAiB,CAACA,IAAA,CAAK3+C,IAAA,CAAK;AAe/C,IAAMulD,yBAAA,GAET;EACFC,mBAAA,EAAqBA,CAAA,MAAO;IAAEC,iBAAA,EAAmB;EAAU;EAC3DA,iBAAA,EAAmBA,CAAC;IAAE1rD,IAAA;IAAM4H;EAAM,MAAM;IACtC,IAAI5H,IAAA,CAAKyrD,mBAAA,IAAuB7jD,KAAA,EAC9B,OAAO;MAAE8jD,iBAAA,EAAmB;IAAiC;IAC/D,MAAMC,YAAA,GAAe/jD,KAAA,CAAMwI,KAAA,CAAM,UAAU;IAC3C,IAAI,CAACu7C,YAAA,IAAgB/jD,KAAA,EAAO;MAC1B,OAAO;QAAE8jD,iBAAA,EAAmB;MAA2B;IACzD;IACA,IAAI9jD,KAAA,EAAO3K,MAAA,GAAS,KAAK,CAAC2K,KAAA,CAAMwI,KAAA,CAAMi7C,2BAA2B,GAC/D,OAAO;MAAEK,iBAAA,EAAmB;IAA6B;IAC3D,OAAO;MAAEA,iBAAA,EAAmB;IAAU;EACxC;EACAppD,OAAA,EAASA,CAAC;IAAEsF,KAAA,EAAOtF;EAAQ,MAAM;IAC/B,MAAMspD,MAAA,GAAiC,CAAC;IACxC,MAAMC,WAAA,GAAc,mBAAIj0B,GAAA,CAAY;IAEpCt1B,OAAA,CAAQ6D,OAAA,CAAS6I,MAAA,IAAyC;MACxD,IAAI68C,WAAA,CAAY3zC,GAAA,CAAIlJ,MAAA,CAAO41C,IAAI,KAAK51C,MAAA,CAAO41C,IAAA,CAAK3nD,MAAA,EAAQ;QACtD2uD,MAAA,CAAO58C,MAAA,CAAO7N,EAAE,IAAI;MACtB,OAAO;QACL0qD,WAAA,CAAYh0B,GAAA,CAAI7oB,MAAA,CAAO41C,IAAI;MAC7B;IACF,CAAC;IAED,OAAOrhD,MAAA,CAAO+C,IAAA,CAAKslD,MAAM,EAAE3uD,MAAA,GAAS,IAAI;MAAEqF,OAAA,EAASspD;IAAO,IAAI;MAAEtpD,OAAA,EAAS;IAAU;EACrF;AACF;AAEO,IAAMwpD,qCAAA,GAET;EACFhqD,IAAA,EAAMA,CAAC;IAAEiqD,YAAA;IAAcnkD;EAAM,MAC3BA,KAAA,IAASmkD,YAAA,GACL;IAAEjqD,IAAA,EAAM;EAAU,IAClB;IAAEA,IAAA,EAAM,OAAOiqD,YAAA,KAAiB,WAAWA,YAAA,GAAe;EAAU;AAC5E;AAEO,IAAMC,mCAAA,GAET;EACFN,iBAAA,EAAmBA,CAAC;IAAE9jD;EAAM,MAAM;IAChC,IAAIA,KAAA,IAAS,CAACA,KAAA,CAAMwI,KAAA,CAAMi7C,2BAA2B,GACnD,OAAO;MAAEK,iBAAA,EAAmB;IAA6B;IAC3D,OAAO;MAAEA,iBAAA,EAAmB;IAAU;EACxC;EACA5pD,IAAA,EAAMA,CAAC;IAAE8F;EAAM,MAAM;IACnB,IAAI2jD,gBAAA,CAAiB3jD,KAAK,GAAG,OAAO;MAAE9F,IAAA,EAAM;IAAuB;IACnE,OAAO;MAAEA,IAAA,EAAM;IAAU;EAC3B;EACAQ,OAAA,EAAUgO,MAAA,IAAW;IACnB,MAAM27C,aAAA,GAAgBT,yBAAA,CAA0BlpD,OAAA,GAAUgO,MAAM;IAChE,MAAMs7C,MAAA,GAASK,aAAA,EAAe3pD,OAAA,IAAW,CAAC;IAC1CgO,MAAA,CAAO1I,KAAA,CAAMzB,OAAA,CAAQ,CAAC6I,MAAA,EAAsCY,KAAA,KAAkB;MAC5E,MAAMs8C,eAAA,GAAkBt8C,KAAA,KAAUU,MAAA,CAAO1I,KAAA,CAAM3K,MAAA,GAAS;MACxD,IAAIsuD,gBAAA,CAAiBv8C,MAAA,CAAO41C,IAAI,KAAK,CAACsH,eAAA,EAAiB;QACrDN,MAAA,CAAO58C,MAAA,CAAO7N,EAAE,IAAI;MACtB;IACF,CAAC;IACD,OAAOoC,MAAA,CAAO+C,IAAA,CAAKslD,MAAM,EAAE3uD,MAAA,GAAS,IAAI;MAAEqF,OAAA,EAASspD;IAAO,IAAI;MAAEtpD,OAAA,EAAS;IAAU;EACrF;AACF;AAUO,IAAM6pD,0BAAA,GACXvkD,KAAA,IAEA,CAAC/K,KAAA,CAAMuH,OAAA,CAAQwD,KAAK,KACpB,OAAQA,KAAA,EAAwCgI,KAAA,KAAU,YAC1D,OAAQhI,KAAA,EAAwCg9C,IAAA,KAAS;AAEpD,IAAMwH,8BAAA,GAET;EACFX,mBAAA,EAAqBA,CAAC;IAAE7jD;EAAM,OAAO;IACnC6jD,mBAAA,EAAqB7jD,KAAA;IACrB8jD,iBAAA,EAAmB;EACrB;EACAppD,OAAA,EAASA,CAAC;IAAEsF,KAAA;IAAO5H;EAAK,MAAM;IAE5B,IAAInD,KAAA,CAAMuH,OAAA,CAAQwD,KAAK,GAAG;MACxB,OAAO;QACLtF,OAAA,EAASsF,KAAA,CAAMnI,GAAA,CAAKuP,MAAA,KAAY;UAC9B7N,EAAA,EAAI6N,MAAA,CAAO7N,EAAA;UACXyjD,IAAA,EAAM51C,MAAA,CAAO41C,IAAA,CAAK3+C,IAAA,CAAK;QACzB,EAAE;MACJ;IACF;IAGA,MAAM;MAAE2J,KAAA;MAAOg1C;IAAK,IAAIh9C,KAAA;IACxB,MAAMykD,WAAA,GAAcrsD,IAAA,CAAKsC,OAAA,IAAW,EAAC;IAErC,MAAMgqD,kBAAA,GACJD,WAAA,IAAeA,WAAA,CAAYtoD,KAAA,CAAM6L,KAAA,GAAQ,CAAC,EAAE3S,MAAA,GAAS,KAAK,CAAC2nD,IAAA;IAE7D,MAAM2H,cAAA,GAAiBF,WAAA,CAAYtoD,KAAA,CAAM,GAAG6L,KAAK;IACjD,MAAM48C,cAAA,GAAiBH,WAAA,CAAYtoD,KAAA,CAAM6L,KAAA,GAAQ,CAAC;IAElD,MAAM68C,UAAA,GAAa,CACjB,GAAGF,cAAA,EACH,IAAID,kBAAA,GAAqB,EAAC,GAAI,CAAC;MAAE,GAAGD,WAAA,CAAYz8C,KAAK;MAAGg1C;IAAK,CAAC,IAC9D,GAAG4H,cAAA,CACL;IAEA,MAAME,kBAAA,GACJL,WAAA,CAAYpvD,MAAA,GAASquD,gBAAA,IACrB,CAACmB,UAAA,CAAWn+C,IAAA,CAAMU,MAAA,IAAW,CAACA,MAAA,CAAO41C,IAAA,CAAK3+C,IAAA,CAAK,CAAC;IAElD,IAAIymD,kBAAA,EAAoB;MACtBD,UAAA,CAAWluD,IAAA,CAAK;QAAE4C,EAAA,EAAI+wB,cAAA,CAAe;QAAG0yB,IAAA,EAAM;MAAG,CAAC;IACpD;IAEA,OAAO;MAAEtiD,OAAA,EAASmqD;IAAW;EAC/B;AACF;AA0BO,IAAME,iCAAA,GAAoCA,CAAC;EAChDC,UAAA,EAAYC,gBAAA;EACZpoC,UAAA,EAAYqoC;AACd,IAA+C,CAAC,MAAmC;EACjF,MAAMC,gBAAA,GAAmBA,CAAC;IACxBlqC,KAAA;IACA4B,UAAA,EAAAuoC,WAAA;IACAJ;EACF,MAQM;IACJ,MAAM;MAAEpH,aAAA;MAAeyH;IAAa,IAAIpqC,KAAA;IAExC,IAAIqqC,OAAA;IACJ,IAAI,CAACN,UAAA,IAAcT,0BAAA,CAA2Bc,YAAA,CAAa3qD,OAAO,GAAG;MACnE,MAAMA,OAAA,GAAU,CAAC,GAAGkjD,aAAA,CAAcxlD,IAAA,CAAKsC,OAAO;MAC9C,MAAM6qD,YAAA,GAAe3H,aAAA,CAAcxlD,IAAA,CAAKsC,OAAA,CAAQ2qD,YAAA,CAAa3qD,OAAA,CAAQsN,KAAK;MAC1E,IAAIu9C,YAAA,EAAc;QAChBA,YAAA,CAAavI,IAAA,GAAOqI,YAAA,CAAa3qD,OAAA,CAAQsiD,IAAA;QACzCtiD,OAAA,CAAQslB,MAAA,CAAOqlC,YAAA,CAAa3qD,OAAA,CAAQsN,KAAA,EAAO,GAAGu9C,YAAY;MAC5D;MACAD,OAAA,GAAU;QAAE,GAAGD,YAAA;QAAc3qD;MAAQ;IACvC,WAAW,CAACsqD,UAAA,EAAY;MACtBM,OAAA,GAAUD,YAAA;IACZ,OAAO;MACLC,OAAA,GAAU3pD,MAAA,CAAOqQ,OAAA,CAAQq5C,YAAY,EAAE31B,MAAA,CACrC,CAACC,GAAA,EAAK,CAAC/wB,GAAA,EAAKoB,KAAK,MAAM;QACrB,MAAMwlD,SAAA,GAAYR,UAAA,CAAWpmD,GAAsC;QACnE+wB,GAAA,GAAM;UACJ,GAAGA,GAAA;UACH,IAAI61B,SAAA,GACAA,SAAA,CAAU;YAAEptD,IAAA,EAAMwlD,aAAA,CAAcxlD,IAAA;YAAM4H;UAAM,CAAC,IAC7C;YAAE,CAACpB,GAAG,GAAGoB;UAAM;QACrB;QACA,OAAO2vB,GAAA;MACT,GACA,CAAC,CACH;IACF;IAEA,MAAM81B,SAAA,GAAY9pD,MAAA,CAAO+C,IAAA,CAAK2mD,YAAY,EAAE31B,MAAA,CAAO,CAACC,GAAA,EAAK/wB,GAAA,KAAQ;MAC/D,MAAMke,SAAA,GAAYsoC,WAAA,CAAWxmD,GAAsC;MACnE,IAAIke,SAAA,EAAW;QACb,MAAMnX,KAAA,GAAQmX,SAAA,CAAU;UACtBqnC,YAAA,EAAcvG,aAAA,CAAcoG,MAAA,CAAOplD,GAAsC;UACzExG,IAAA,EAAMwlD,aAAA,CAAcxlD,IAAA;UACpB4H,KAAA,EAAOslD,OAAA,CAAQ1mD,GAAsC;QACvD,CAAC;QACD+wB,GAAA,GAAM;UAAE,GAAGA,GAAA;UAAK,GAAGhqB;QAAM;MAC3B;MACA,OAAOgqB,GAAA;IACT,GAAG,CAAC,CAA4B;IAEhC,OAAO;MAAE21B,OAAA;MAASG;IAAU;EAC9B;EAEA,OAAO;IACLlsD,EAAA,EAAI;IACJkQ,QAAA,EAAU;MACRi8C,iBAAA,EAAmBA,CAAC;QAClBzqC,KAAA;QACA/Z,IAAA;QACAoiD;MACF,MAAuE;QACrE,IAAI,CAACroC,KAAA,CAAMoqC,YAAA,EAAc,OAAO/B,OAAA,CAAQ;QACxC,MAAM;UAAE1F,aAAA;UAAe+H;QAAoB,IAAI1qC,KAAA;QAE/C,MAAM;UAAEqqC,OAAA;UAASG;QAAU,IAAIN,gBAAA,CAAiB;UAC9CH,UAAA,EAAY;YACV,GAAGR,8BAAA;YACH,GAAGS,gBAAA,EAAkBS;UACvB;UACAzqC,KAAA;UACA4B,UAAA,EAAY;YACV,GAAG+mC,yBAAA;YACH,GAAGM,qCAAA;YACH,GAAGgB,gBAAA,EAAkBQ;UACvB;QACF,CAAC;QAED,OAAOxkD,IAAA,CAAK;UACV,GAAG+Z,KAAA;UACH2zB,SAAA,EAAW;YACT,GAAGgP,aAAA;YACHxlD,IAAA,EAAM;cAAE,GAAGwlD,aAAA,CAAcxlD,IAAA;cAAM,GAAGktD;YAAQ;YAC1CtB,MAAA,EAAQ;cAAE,GAAGpG,aAAA,CAAcoG,MAAA;cAAQ,GAAGyB,SAAA;cAAW,GAAGE;YAAoB;UAC1E;QACF,CAAC;MACH;MACAC,eAAA,EAAiBA,CAAC;QAChB3qC,KAAA;QACA/Z,IAAA;QACAoiD;MACF,MAAuE;QACrE,IAAI,CAACroC,KAAA,CAAMoqC,YAAA,EAAc,OAAO/B,OAAA,CAAQ;QAExC,MAAM;UAAE1F;QAAc,IAAI3iC,KAAA;QAC1B,MAAM;UAAEqqC,OAAA;UAASG;QAAU,IAAIN,gBAAA,CAAiB;UAC9CH,UAAA,EAAYC,gBAAA,EAAkBW,eAAA;UAC9B3qC,KAAA;UACA4B,UAAA,EAAY;YACV,GAAG+mC,yBAAA;YACH,GAAGQ,mCAAA;YACH,GAAGc,gBAAA,EAAkBU;UACvB;QACF,CAAC;QAED,OAAO1kD,IAAA,CAAK;UACV,GAAG+Z,KAAA;UACH2zB,SAAA,EAAW;YACT,GAAGgP,aAAA;YACHxlD,IAAA,EAAM;cAAE,GAAGwlD,aAAA,CAAcxlD,IAAA;cAAM,GAAGktD;YAAQ;YAC1CtB,MAAA,EAAQ;cACN,GAAGpG,aAAA,CAAcoG,MAAA;cACjB,GAAGyB,SAAA;cACH,GAAGxqC,KAAA,CAAM0qC;YACX;UACF;QACF,CAAC;MACH;IACF;EACF;AACF;;;ACzSO,IAAME,yCAAA,GACXje,QAAA,KACyC;EACzCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACRzC,OAAA;MACAC;IACF,MAA4E;MAC1E,IAAI1b,QAAA,CAASme,YAAA,CAAaC,aAAA,EAAe,OAAO1C,OAAA,CAAQ;MACxD,OAAOD,OAAA,CAAQ;IACjB;EACF;AACF;;;ACTO,IAAM4C,yCAAA,GAAN,cAAwDpE,kBAAA,CAG7D;EACAxoD,YAAY;IAAEuuC;EAAS,GAA0C;IAC/D,MAAM;IACN,KAAKl+B,GAAA,CAAI,CAACm8C,yCAAA,CAA0Cje,QAAQ,CAAC,CAAC;EAChE;AACF;AAEO,IAAMse,mCAAA,GAAN,cAAkDrE,kBAAA,CAGvD;EACAxoD,YAAA,EAAc;IACZ,MAAM;IACN,KAAKqQ,GAAA,CAAI,CAACq7C,iCAAA,CAAkC,CAAC,CAAC;EAChD;AACF;;;ACynGO,IAAMoB,iBAAA,GAAN,cAAmCzwD,KAAA,CAAM;EAM9C2D,YACEyL,OAAA,EACA;IACE5P,IAAA;IACAsQ,MAAA;IACAP;EACF,GAKA;IACA,MAAMH,OAAO;IAdf,KAAO5K,IAAA,GAAO;IAeZ,KAAKhF,IAAA,GAAOA,IAAA;IACZ,KAAK+P,QAAA,GAAWA,QAAA;IAChB,KAAKO,MAAA,GAASA,MAAA;EAChB;EAAA;EAAA;EAIAL,OAAA,EAAS;IACP,MAAMihD,KAAA,GAAQ,CACZ,CAAC,UAAU,KAAK5gD,MAAM,GACtB,CAAC,QAAQ,KAAKtQ,IAAI,EACpB;IAEA,MAAMmxD,QAAA,GAAW,EAAC;IAElB,WAAW,CAACznD,GAAA,EAAKoB,KAAK,KAAKomD,KAAA,EAAO;MAChC,IAAI,OAAOpmD,KAAA,KAAU,eAAeA,KAAA,KAAU,MAAM;QAClDqmD,QAAA,CAAS1vD,IAAA,CAAK,GAAGiI,GAAG,KAAKoB,KAAK,EAAE;MAClC;IACF;IAEA,OAAO;MACL8E,OAAA,EAAS,IAAIuhD,QAAA,CAASzvD,IAAA,CAAK,IAAI,CAAC,OAAO,KAAKkO,OAAO;MACnDZ,KAAA,EAAO,KAAKA,KAAA;MACZhK,IAAA,EAAM,KAAKA,IAAA;MACXhF,IAAA,EAAM,KAAKA,IAAA;MACXsQ,MAAA,EAAQ,KAAKA;IACf;EACF;AACF;AA+CO,IAAK8gD,gBAAA,GAAL,gBAAKC,iBAAA,IAAL;EACLA,iBAAA,gBAAY;EACZA,iBAAA,aAAS;EAFC,OAAAA,iBAAA;AAAA,GAAAD,gBAAA;;;ACpuGL,IAAME,YAAA,GAAN,MAAmB;EAMxBntD,YAAY;IAAEuuC;EAAS,GAAwB;IAgF/C,KAAAH,SAAA,GAAY,MAAM;MAChB,KAAKxsB,KAAA,CAAM/Z,IAAA,CAAK,KAAKsiD,YAAY;IACnC;IAQA;AAAA;AAAA;AAAA;AAAA;IAAA;IAAA,KAAAiD,YAAA,GAAe,OACbruD,IAAA,EACAutD,mBAAA,KACG;MACH,MAAM;QAAE1qC,KAAA;QAAOzV;MAAO,IAAI,MAAM,KAAKkhD,uBAAA,CAAwBzD,OAAA,CAAQ;QACnEF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZpU,SAAA,EAAW;YAAE,GAAG,KAAK3zB,KAAA,CAAMqnB,cAAA,CAAe;UAAE;UAC5Csb,aAAA,EAAe;YAAE,GAAG,KAAK3iC,KAAA,CAAMqnB,cAAA,CAAe;UAAE;UAChD+iB,YAAA,EAAcjtD,IAAA;UACdutD;QACF;MACF,CAAC;MAED,IAAIngD,MAAA,KAAW,WAAW;MAC1B,KAAKyV,KAAA,CAAM/Z,IAAA,CAAK+Z,KAAA,CAAM2zB,SAAS;IACjC;IAEA,KAAAgX,eAAA,GAAkB,MAAO57B,KAAA,IAA2C;MAClE,MAAM1vB,MAAA,GAAS,MAAM,KAAKosD,uBAAA,CAAwBzD,OAAA,CAAQ;QACxDF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZpU,SAAA,EAAW;YAAE,GAAG,KAAK3zB,KAAA,CAAMqnB,cAAA,CAAe;UAAE;UAC5Csb,aAAA,EAAe;YAAE,GAAG,KAAK3iC,KAAA,CAAMqnB,cAAA,CAAe;UAAE;UAChD+iB,YAAA,EAAc;YAAE,CAACr7B,KAAK,GAAG,KAAK/O,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK4xB,KAAK;UAAE;QACnE;MACF,CAAC;MAED,IAAI1vB,MAAA,CAAOkL,MAAA,KAAW,WAAW;MACjC,KAAKyV,KAAA,CAAM/Z,IAAA,CAAK5G,MAAA,CAAO2gB,KAAA,CAAM2zB,SAAS;IACxC;IAEA,KAAAkX,OAAA,GAAU,YAAY;MACpB,MAAM;QAAE1tD,IAAA;QAAM4rD;MAAO,IAAI,KAAK/oC,KAAA,CAAMqnB,cAAA,CAAe;MACnD,MAAMhoC,MAAA,GAAS,MAAM,KAAKqsD,6BAAA,CAA8B1D,OAAA,CAAQ;QAC9DF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZ5qD,IAAA,EAAM;YACJ,GAAGA,IAAA;YACH0rD,iBAAA,EAAmB1rD,IAAA,CAAK0rD,iBAAA,GACpBzN,QAAA,CAASj+C,IAAA,CAAK0rD,iBAAiB,IAC/B;YACJppD,OAAA,EAAStC,IAAA,CAAKsC,OAAA,EACVkM,MAAA,CAAQ2wC,CAAA,IAAMA,CAAA,CAAEyF,IAAA,CAAK3+C,IAAA,CAAK,CAAC,EAC5BxG,GAAA,CAAK0/C,CAAA,KAAO;cAAEyF,IAAA,EAAMzF,CAAA,CAAEyF;YAAK,EAAE;UAClC;UACAgH;QACF;MACF,CAAC;MACD,IAAI1pD,MAAA,CAAOkL,MAAA,KAAW,WAAW;MAEjC,OAAOlL,MAAA,CAAO2gB,KAAA;IAChB;IA7IE,KAAK2sB,QAAA,GAAWA,QAAA;IAChB,KAAK3sB,KAAA,GAAQ,IAAIgmB,UAAA,CAA8B,KAAKuiB,YAAY;IAChE,KAAKmD,6BAAA,GAAgC,IAAIV,yCAAA,CAA0C;MACjFre;IACF,CAAC;IACD,KAAK8e,uBAAA,GAA0B,IAAIR,mCAAA,CAAoC;EACzE;EAEA,IAAI1C,aAAA,EAAkC;IACpC,OAAO;MACLprD,IAAA,EAAM;QACJwuD,aAAA,EAAe;QACfC,4BAAA,EAA8B;QAC9B5sD,WAAA,EAAa;QACb4pD,mBAAA,EAAqB;QACrBtqD,EAAA,EAAI+wB,cAAA,CAAe;QACnBw5B,iBAAA,EAAmB;QACnB5pD,IAAA,EAAM;QACNQ,OAAA,EAAS,CAAC;UAAEnB,EAAA,EAAI+wB,cAAA,CAAe;UAAG0yB,IAAA,EAAM;QAAG,CAAC;QAC5C7iB,OAAA,EAAS,KAAKyN,QAAA,CAAStuC,MAAA,CAAOiuB,IAAA,EAAMhuB,EAAA;QACpCutD,iBAAA;MACF;MACA9C,MAAA,EAAQ,CAAC;IACX;EACF;EAEA,IAAI4C,cAAA,EAAgB;IAClB,OAAO,KAAK3rC,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAKwuD,aAAA;EAC1C;EACA,IAAIC,6BAAA,EAA+B;IACjC,OAAO,KAAK5rC,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAKyuD,4BAAA;EAC1C;EACA,IAAI5sD,YAAA,EAAc;IAChB,OAAO,KAAKghB,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK6B,WAAA;EAC1C;EACA,IAAI4pD,oBAAA,EAAsB;IACxB,OAAO,KAAK5oC,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAKyrD,mBAAA;EAC1C;EACA,IAAItqD,GAAA,EAAK;IACP,OAAO,KAAK0hB,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAKmB,EAAA;EAC1C;EACA,IAAIuqD,kBAAA,EAAoB;IACtB,OAAO,KAAK7oC,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK0rD,iBAAA;EAC1C;EACA,IAAI5pD,KAAA,EAAO;IACT,OAAO,KAAK+gB,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK8B,IAAA;EAC1C;EACA,IAAIQ,QAAA,EAAU;IACZ,OAAO,KAAKugB,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAKsC,OAAA;EAC1C;EACA,IAAIy/B,QAAA,EAAU;IACZ,OAAO,KAAKlf,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK+hC,OAAA;EAC1C;EACA,IAAI2sB,kBAAA,EAAoB;IACtB,OAAO,KAAK7rC,KAAA,CAAMqnB,cAAA,CAAe,EAAElqC,IAAA,CAAK0uD,iBAAA;EAC1C;EAEA,IAAId,cAAA,EAAgB;IAClB,MAAM;MAAE5tD,IAAA;MAAM4rD;IAAO,IAAI,KAAK/oC,KAAA,CAAMqnB,cAAA,CAAe;IACnD,MAAMykB,2BAAA,GACJ3uD,IAAA,CAAKsC,OAAA,CAAQkM,MAAA,CAAQ2wC,CAAA,IAAM,CAAC,CAACA,CAAA,CAAEyF,IAAA,CAAK3+C,IAAA,CAAK,CAAC,EAAEhJ,MAAA,GAAS;IACvD,MAAM2xD,OAAA,GAAU,CAAC,CAAC5uD,IAAA,CAAK8B,IAAA;IACvB,MAAM+sD,qBAAA,GAAwB5Q,QAAA,CAC5Bj+C,IAAA,CAAK0rD,iBAAA,EAAmBt7C,KAAA,CAAMi7C,2BAA2B,IAAI,CAAC,KAAK,EACrE;IAEA,MAAMyD,oBAAA,GACJ9uD,IAAA,CAAK0rD,iBAAA,KAAsB,MAC1B,CAAC,CAACmD,qBAAA,KACA,KAAKA,qBAAA,IAAyBA,qBAAA,IAAyB;IAE5D,OACEF,2BAAA,IACAC,OAAA,IACAE,oBAAA,IACAvrD,MAAA,CAAOsxC,MAAA,CAAO+W,MAAM,EAAEp9C,MAAA,CAAQugD,SAAA,IAAc,CAAC,CAACA,SAAS,EAAE9xD,MAAA,KAAW;EAExE;AAiEF;;;AC7JA,IAAM+xD,2BAAA,GAA+B5e,eAAA,IAAqC;EAExE,MAAM;IAAEnK,aAAA;IAAe,GAAGJ;EAAW,IAAIuK,eAAA;EACzC,OAAOvK,UAAA;AACT;AAEO,IAAMopB,sCAAA,GACXzf,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAmiD,OAAA;MACAC;IACF,MAA+D;MAC7D,MAAM;QAAEgE;MAAkB,IAAI1f,QAAA;MAC9B,IAAI,CAAC0f,iBAAA,EAAmB,OAAOhE,OAAA,CAAQ;MAEvC,IAAIgE,iBAAA,CAAkBza,sBAAA,GAAyB,GAAG;QAChDjF,QAAA,CAAStuC,MAAA,CAAOsxC,aAAA,CAAc2c,UAAA,CAAW;UACvCziD,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YACNC,OAAA,EAAS;YACT5rC,OAAA,EAAS;cAAEyoC;YAAS;UACtB;QACF,CAAC;QACD,OAAOyb,OAAA,CAAQ;MACjB;MAEA,MAAM7nB,WAAA,IAAevgB,KAAA,CAAMnW,OAAA,CAAQ02B,WAAA,IAAe,EAAC,EAAGl1B,MAAA,CACpDghD,iBAAA,CAAkB5a,iBAAA,CAAkB70C,GAAA,CAAIuvD,2BAA2B,CACrE;MAGA,IAAI,CAAC5rB,WAAA,CAAYnmC,MAAA,EAAQ,OAAOiuD,OAAA,CAAQ;MAExC,OAAOpiD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACTkP;QACF;QACA12B,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACT02B;QACF;MACF,CAAC;IACH;EACF;AACF;AAEO,IAAMgsB,2CAAA,GACX5f,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAAyE;MACvE,MAAM;QAAEgE;MAAkB,IAAI1f,QAAA;MAC9B,IAAI,CAAC0f,iBAAA,EAAmB,OAAOhE,OAAA,CAAQ;MAEvC,MAAM5W,iBAAA,GAAoB4a,iBAAA,CAAkB5a,iBAAA;MAC5C,MAAMlR,WAAA,GAAckR,iBAAA,CAAkBr3C,MAAA,IACjC4lB,KAAA,CAAMwsC,KAAA,CAAMjsB,WAAA,IAAe,EAAC,EAAGl1B,MAAA,CAC9BomC,iBAAA,CAAkB70C,GAAA,CAAIuvD,2BAA2B,CACnD,IACA;MAEJ,OAAOlmD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACTjsB;QACF;MACF,CAAC;IACH;EACF;AACF;;;ACrFO,IAAMksB,sCAAA,GACX9f,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z;IACF,MAA+D;MAC7D,MAAM+M,MAAA,GAAS;QACb3R,IAAA,EAAMsrC,QAAA,CAAS+f,aAAA,EAAerrD,IAAA,IAAQ;MACxC;MAEA,MAAMsrD,4BAAA,GAA+BhgB,QAAA,CAAS+f,aAAA,GAC1Cn7B,uBAAA,CAAwBob,QAAA,CAAS+f,aAAa,IAC9C;MAEJ,OAAOzmD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAcV,aAAA,CAAc;UAC1B,GAAGgc,QAAA,CAAS+f,aAAA;UACZ,GAAG1sC,KAAA,CAAMqR,YAAA;UACT,GAAGre;QACL,CAAC;QACDnJ,OAAA,EAAS;UACP,GAAG8iD,4BAAA;UACH,GAAG3sC,KAAA,CAAMnW,OAAA;UACT,GAAGmJ;QACL;QACA45C,WAAA,EACEjgB,QAAA,CAAS+f,aAAA,IAAiB1sC,KAAA,CAAM4sC,WAAA,EAAaC,eAAA,GACzC;UAAEA,eAAA,EAAiB7sC,KAAA,CAAM4sC,WAAA,EAAaC;QAAgB,IACtD7sC,KAAA,CAAM4sC;MACd,CAAC;IACH;EACF;AACF;;;ACnCO,IAAME,qCAAA,GACXngB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAA+D;MAC7D,MAAMlrD,IAAA,GAAOwvC,QAAA,CAASogB,iBAAA,CAAkBnK,iBAAA;MACxC,IAAI,CAACzlD,IAAA,EAAM,OAAOkrD,OAAA,CAAQ;MAE1B,OAAOpiD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACT,GAAGl0B;QACL;QACA0M,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACT,GAAG1M;QACL;MACF,CAAC;IACH;EACF;AACF;AAEO,IAAM6vD,0CAAA,GACXrgB,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAAyE;MACvE,MAAMlrD,IAAA,GAAOwvC,QAAA,CAASogB,iBAAA,CAAkBnK,iBAAA;MACxC,IAAI,CAACzlD,IAAA,EAAM,OAAOkrD,OAAA,CAAQ;MAE1B,OAAOpiD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACT,GAAGrvD;QACL;MACF,CAAC;IACH;EACF;AACF;;;ACjDO,IAAM8vD,qCAAA,GACXtgB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAAS,MAAAA,CAAO;MACd7qC,KAAA;MACAooC,OAAA;MACAC;IACF,MAA+D;MAC7D,MAAM;QAAE6E;MAAgB,IAAIvgB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,IAAQ,CAAC;MACrD,MAAMoL,SAAA,GAAYntC,KAAA,CAAMnW,OAAA,CAAQk4C,IAAA,IAAQ;MACxC,MAAMqL,cAAA,GACJC,WAAA,CAAYF,SAAS,KACrB,CAACntC,KAAA,CAAMnW,OAAA,CAAQ02B,WAAA,EAAanmC,MAAA,IAC5B,CAAC4lB,KAAA,CAAMnW,OAAA,CAAQyjD,OAAA;MAEjB,MAAMC,oBAAA,GACJ,OAAOL,eAAA,KAAoB,YAAYC,SAAA,CAAU/yD,MAAA,GAAS8yD,eAAA;MAE5D,MAAMM,wBAAA,GACJ7gB,QAAA,CAAS+f,aAAA,IAAiB,CAAC/f,QAAA,CAAS8gB,uBAAA;MAEtC,IAAIL,cAAA,IAAkBI,wBAAA,IAA4BD,oBAAA,EAAsB;QACtE,OAAO,MAAMnF,OAAA,CAAQ;MACvB;MAEA,OAAO,MAAMC,OAAA,CAAQ;IACvB;EACF;AACF;AAEO,IAAMqF,0CAAA,GACX/gB,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAAS,MAAAA,CAAO;MACd7qC,KAAA;MACAooC,OAAA;MACAC;IACF,MAAyE;MACvE,MAAMsF,OAAA,GACJ,CAACN,WAAA,CAAYrtC,KAAA,CAAMwsC,KAAA,CAAMzK,IAAA,IAAQ,EAAE,KACnC/hC,KAAA,CAAMwsC,KAAA,CAAMjsB,WAAA,EAAanmC,MAAA,IACzB4lB,KAAA,CAAMwsC,KAAA,CAAMc,OAAA,IACZttC,KAAA,CAAMwsC,KAAA,CAAMlsB,iBAAA;MAEd,MAAMstB,iBAAA,GAAoBjhB,QAAA,CAAS8gB,uBAAA,IAA2BE,OAAA;MAE9D,IAAI,CAACC,iBAAA,EAAmB;QACtB,OAAO,MAAMxF,OAAA,CAAQ;MACvB;MAEA,OAAO,MAAMC,OAAA,CAAQ;IACvB;EACF;AACF;;;ACxDO,IAAMwF,uCAAA,GACXlhB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAA+D;MAC7D,MAAM;QAAEyF;MAAoB,IAAInhB,QAAA;MAChC,IAAI,CAACmhB,mBAAA,EAAqB,OAAOzF,OAAA,CAAQ;MAEzCyF,mBAAA,CAAoB3J,mBAAA,CAAoB;MACxC,MAAM4J,uBAAA,GAA0BD,mBAAA,CAAoB/I,eAAA,CAAgB3qD,MAAA,GAAS;MAC7E,MAAM4zD,yBAAA,GAA4BF,mBAAA,CAAoB3I,iBAAA,CAAkB/qD,MAAA,GAAS;MACjF,MAAMkoD,YAAA,GACJwL,mBAAA,CAAoB/I,eAAA,CAAgB3qD,MAAA,GAAS,IACzC,EAAC,GACD0zD,mBAAA,CAAoB7I,cAAA,CAAeroD,GAAA,CAAK4nD,OAAA,IACtCmB,mBAAA,CAAoBD,cAAA,CAAelB,OAAO,CAC5C;MAEN,MAAMjkB,WAAA,IAA6BvgB,KAAA,CAAMnW,OAAA,CAAQ02B,WAAA,IAAe,EAAC,EAAGl1B,MAAA,CAClEi3C,YACF;MAGA,IAAI,CAAC/hB,WAAA,CAAYnmC,MAAA,EAAQ,OAAOiuD,OAAA,CAAQ;MAExC,MAAMuE,WAAA,GAAc;QAAE,GAAG5sC,KAAA,CAAM4sC;MAAY;MAC3C,MAAMC,eAAA,GACH,CAACkB,uBAAA,IAA2BzL,YAAA,CAAaloD,MAAA,GAAS,KACnD4zD,yBAAA;MACF,IAAInB,eAAA,EAAiB;QACnBD,WAAA,CAAYC,eAAA,GAAkB;MAChC;MAEA,OAAO5mD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHnW,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACT02B;QACF;QACAlP,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACTkP;QACF;QACAqsB;MACF,CAAC;IACH;EACF;AACF;AAEO,IAAMqB,4CAAA,GACXthB,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAAyE;MACvE,MAAM;QAAEyF;MAAoB,IAAInhB,QAAA;MAChC,IAAI,CAACmhB,mBAAA,EAAqB,OAAOzF,OAAA,CAAQ;MAEzCyF,mBAAA,CAAoB3J,mBAAA,CAAoB;MACxC,MAAM7B,YAAA,GAAewL,mBAAA,CAAoB7I,cAAA,CAAeroD,GAAA,CAAK4nD,OAAA,IAC3DmB,mBAAA,CAAoBD,cAAA,CAAelB,OAAO,CAC5C;MAEA,IAAI,CAAClC,YAAA,CAAaloD,MAAA,EAAQ,OAAOiuD,OAAA,CAAQ;MAEzC,OAAOpiD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACTjsB,WAAA,GAAcvgB,KAAA,CAAMwsC,KAAA,CAAMjsB,WAAA,IAAe,EAAC,EAAGl1B,MAAA,CAAOi3C,YAAY;QAClE;MACF,CAAC;IACH;EACF;AACF;;;ACrFO,IAAM4L,uCAAA,GACXvhB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAA+D;MAC7D,IAAI,CAAC1b,QAAA,CAASwhB,YAAA,EAAc,OAAO9F,OAAA,CAAQ;MAC3C,MAAM;QAAE+F,cAAA;QAAgBrM;MAAK,IAAIpV,QAAA,CAASwhB,YAAA;MAI1C,MAAMtiC,eAAA,GAAkB7xB,KAAA,CAAMyQ,IAAA,CAC5B,IAAIsqB,GAAA,CACFq5B,cAAA,CAAeziD,MAAA,CACb,CAAC;QAAErN,EAAA;QAAIW;MAAK,MAAM8iD,IAAA,CAAKpc,QAAA,CAAS,IAAIrnC,EAAE,EAAE,KAAKyjD,IAAA,CAAKpc,QAAA,CAAS,IAAI1mC,IAAI,EAAE,CACvE,CACF,CACF;MAGA,IAAI,CAAC8iD,IAAA,IAAQl2B,eAAA,CAAgBzxB,MAAA,KAAW,GAAG,OAAOiuD,OAAA,CAAQ;MAE1D,OAAOpiD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACTxF,eAAA;UACAk2B;QACF;QACAl4C,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACTgiB,eAAA,EAAiBA,eAAA,CAAgBjvB,GAAA,CAAKyxD,CAAA,IAAMA,CAAA,CAAE/vD,EAAE;UAChDyjD;QACF;MACF,CAAC;IACH;EACF;AACF;AAEO,IAAMuM,4CAAA,GACX3hB,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAAyE;MACvE,IAAI,CAAC1b,QAAA,CAASwhB,YAAA,EAAc,OAAO9F,OAAA,CAAQ;MAC3C,MAAM;QAAE6E;MAAgB,IAAIvgB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,IAAQ,CAAC;MACrD,MAAM;QAAEqM,cAAA;QAAgBrM,IAAA,EAAMoL;MAAU,IAAIxgB,QAAA,CAASwhB,YAAA;MAIrD,MAAMtiC,eAAA,GAAkBuiC,cAAA,CAAeh0D,MAAA,GACnCJ,KAAA,CAAMyQ,IAAA,CACJ,IAAIsqB,GAAA,CACFq5B,cAAA,CAAeziD,MAAA,CACb,CAAC;QAAErN,EAAA;QAAIW;MAAK,MACVkuD,SAAA,CAAUxnB,QAAA,CAAS,IAAIrnC,EAAE,EAAE,KAAK6uD,SAAA,CAAUxnB,QAAA,CAAS,IAAI1mC,IAAI,EAAE,CACjE,CACF,CACF,IACA;MAEJ,MAAM8iD,IAAA,GACJ,OAAOmL,eAAA,KAAoB,YAAYC,SAAA,CAAU/yD,MAAA,GAAS8yD,eAAA,GACtDC,SAAA,CAAUjsD,KAAA,CAAM,GAAGgsD,eAAe,IAClCC,SAAA;MAEN,OAAOlnD,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACT3gC,eAAA,EAAiBA,eAAA,EAAiBjvB,GAAA,CAAKyxD,CAAA,IAAMA,CAAA,CAAE/vD,EAAE;UACjDyjD;QACF;MACF,CAAC;IACH;EACF;AACF;;;ACpFO,IAAMwM,+CAAA,GACX5hB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z;IACF,MAA+D;MAC7D,MAAMkf,OAAA,GAGF,CAAC;MACL,IAAIwnB,QAAA,CAAS6hB,aAAA,EAAe;QAC1BrpC,OAAA,CAAQmb,iBAAA,GAAoBqM,QAAA,CAAS6hB,aAAA,CAAclwD,EAAA;MACrD;MACA,IAAIquC,QAAA,CAAS8hB,MAAA,EAAQ;QACnBtpC,OAAA,CAAQmoC,OAAA,GAAU3gB,QAAA,CAAS8hB,MAAA;MAC7B;MAEA,IAAI9hB,QAAA,CAAS+hB,kBAAA,EAAoB;QAC/BvpC,OAAA,CAAQ0Y,eAAA,GAAkB;MAC5B;MAEA,OAAO53B,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACT,GAAGlM,OAAA;UACH2G,cAAA,EAAiB6gB,QAAA,CAAS6hB,aAAA,IAAsC;QAClE;QACA3kD,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACT,GAAGsb;QACL;MACF,CAAC;IACH;EACF;AACF;AAEO,IAAMwpC,oDAAA,GACXhiB,QAAA,KACuC;EACvCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z;IACF,MAAyE;MACvE,MAAMkf,OAAA,GAGF,CAAC;MACL,IAAIwnB,QAAA,CAAS6hB,aAAA,EAAe;QAC1BrpC,OAAA,CAAQmb,iBAAA,GAAoBqM,QAAA,CAAS6hB,aAAA,CAAclwD,EAAA;MACrD;MACA,IAAIquC,QAAA,CAAS8hB,MAAA,EAAQ;QACnBtpC,OAAA,CAAQmoC,OAAA,GAAU3gB,QAAA,CAAS8hB,MAAA;MAC7B;MAEA,IAAI9hB,QAAA,CAAS+hB,kBAAA,EAAoB;QAC/BvpC,OAAA,CAAQ0Y,eAAA,GAAkB;MAC5B;MAEA,OAAO53B,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACT,GAAGrnC;QACL;MACF,CAAC;IACH;EACF;AACF;;;AC3EO,IAAMypC,iCAAA,GACXjiB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACA/Z,IAAA;MACAoiD;IACF,MAA+D;MAC7D,IAAI,CAAC1b,QAAA,CAAStuC,MAAA,CAAOiuB,IAAA,EAAM;QACzB,OAAO+7B,OAAA,CAAQ;MACjB;MAUA,MAAM;QAAEv6B,aAAA;QAAeC,OAAA;QAASC,KAAA;QAAO,GAAG6gC;MAAY,IAAIliB,QAAA,CAAStuC,MAAA,CAChEiuB,IAAA;MACH,OAAOrmB,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACT/E,IAAA,EAAMuiC,WAAA;UACN3vB,OAAA,EAAS2vB,WAAA,CAAYvwD;QACvB;MACF,CAAC;IACH;EACF;AACF;;;AClCA,IAAMwwD,+BAAA,GAGF;EACFvuB,WAAA,EAAa,EAAC;EACd1U,eAAA,EAAiB,EAAC;EAClBoQ,SAAA,EAAW;EACXnQ,cAAA,EAAgB;EAChBi2B,IAAA,EAAM;AACR;AAEO,IAAMgN,mCAAA,GACXpiB,QAAA,KACkC;EAClCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACR7qC,KAAA;MACAmoC,QAAA;MACAE;IACF,MAA+D;MAC7D,MAAMoG,MAAA,GAAS9hB,QAAA,CAAS8hB,MAAA;MACxB,MAAMO,gBAAA,GAAmB,CAAC,CAACriB,QAAA,CAAS+f,aAAA;MACpC,MAAMuC,sBAAA,GAAyB,CAAC,CAACtiB,QAAA,CAASuiB,QAAA;MAC1C,IAAI,CAACT,MAAA,IAAUQ,sBAAA,IAA0BD,gBAAA,EAAkB,OAAO3G,OAAA,CAAQ;MAE1E,OAAOF,QAAA,CAAS;QACd,GAAGnoC,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACT,GAAGy9B,+BAAA;UACHxB,OAAA,EAASmB;QACX;QACA5kD,OAAA,EAAS;UACPvL,EAAA,EAAI0hB,KAAA,CAAMqR,YAAA,CAAa/yB,EAAA;UACvBgvD,OAAA,EAASmB;QACX;MACF,CAAC;IACH;EACF;AACF;;;ACbO,IAAMU,iCAAA,GAAN,cAAgDvI,kBAAA,CAGrD;EACAxoD,YAAY;IAAEuuC;EAAS,GAA6C;IAClE,MAAM;IAGN,KAAKl+B,GAAA,CAAI,CACPmgD,iCAAA,CAAkCjiB,QAAQ,GAC1CoiB,mCAAA,CAAoCpiB,QAAQ,GAC5CuhB,uCAAA,CAAwCvhB,QAAQ,GAChDyf,sCAAA,CAAuCzf,QAAQ,GAC/CkhB,uCAAA,CAAwClhB,QAAQ,GAChD4hB,+CAAA,CAAgD5hB,QAAQ,GACxDmgB,qCAAA,CAAsCngB,QAAQ,GAC9CsgB,qCAAA,CAAsCtgB,QAAQ,GAC9C8f,sCAAA,CAAuC9f,QAAQ,EAChD;EACH;AACF;AAEO,IAAMyiB,sCAAA,GAAN,cAAqDxI,kBAAA,CAG1D;EACAxoD,YAAY;IAAEuuC;EAAS,GAAkD;IACvE,MAAM;IAGN,KAAKl+B,GAAA,CAAI,CACP6/C,4CAAA,CAA6C3hB,QAAQ,GACrD4f,2CAAA,CAA4C5f,QAAQ,GACpDshB,4CAAA,CAA6CthB,QAAQ,GACrDgiB,oDAAA,CAAqDhiB,QAAQ,GAC7DqgB,0CAAA,CAA2CrgB,QAAQ,GACnD+gB,0CAAA,CAA2C/gB,QAAQ,EACpD;EACH;AACF;;;ACjEO,IAAM0iB,gCAAA,GACX1iB,QAAA,KACkC;EAClCn+B,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACRxC,OAAA;MACApiD,IAAA;MACA+Z;IACF,MAA+D;MAC7D,MAAM4L,OAAA,GAAU+gB,QAAA,CAASwhB,YAAA,CAAaviC,OAAA;MACtC,IAAI,CAACA,OAAA,EAAS;QACZ,OAAOy8B,OAAA,CAAQ;MACjB;MACA,MAAM;QAAEtG;MAAK,IAAI/hC,KAAA,CAAMqR,YAAA;MAEvB,MAAMi+B,SAAA,GAAY,IAAI1jC,OAAA,EAAS3sB,IAAI;MACnC,MAAMswD,YAAA,GAAe,GAAGD,SAAS,IAAIvN,IAAI;MAEzC,OAAO97C,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHqR,YAAA,EAAc;UACZ,GAAGrR,KAAA,CAAMqR,YAAA;UACT0wB,IAAA,EAAMwN;QACR;QACA1lD,OAAA,EAAS;UACP,GAAGmW,KAAA,CAAMnW,OAAA;UACTk4C,IAAA,EAAMwN;QACR;MACF,CAAC;IACH;EACF;EACAjxD,EAAA,EAAI;AACN;AAEO,IAAMkxD,qCAAA,GACX7iB,QAAA,KACuC;EACvCn+B,QAAA,EAAU;IACRq8C,OAAA,EAASA,CAAC;MACRxC,OAAA;MACApiD,IAAA;MACA+Z;IACF,MAAyE;MACvE,MAAM4L,OAAA,GAAU+gB,QAAA,CAASwhB,YAAA,CAAaviC,OAAA;MACtC,IAAI,CAACA,OAAA,EAAS;QACZ,OAAOy8B,OAAA,CAAQ;MACjB;MACA,MAAM;QAAEtG;MAAK,IAAI/hC,KAAA,CAAMwsC,KAAA;MAEvB,MAAM8C,SAAA,GAAY,IAAI1jC,OAAA,EAAS3sB,IAAI;MACnC,MAAMswD,YAAA,GAAe,GAAGD,SAAS,IAAIvN,IAAI;MAEzC,OAAO97C,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACHwsC,KAAA,EAAO;UACL,GAAGxsC,KAAA,CAAMwsC,KAAA;UACTzK,IAAA,EAAMwN;QACR;MACF,CAAC;IACH;EACF;EACAjxD,EAAA,EAAI;AACN;;;AC/DO,IAAMmxD,kCAAA,GAAqCA,CAAA,MAA6B;EAC7EjhD,QAAA,EAAU;IACRkhD,QAAA,EAAUA,CAAC;MAAEvH,QAAA;MAAUE,OAAA;MAASroC;IAAM,MAAM;MAC1C,IAAIA,KAAA,CAAM4L,OAAA,EAAS;QACjB,OAAOu8B,QAAA,CAASnoC,KAAK;MACvB;MACA,OAAOqoC,OAAA,CAAQ;IACjB;IACAsH,sBAAA,EAAwBA,CAAC;MAAEtH;IAAQ,MAAMA,OAAA,CAAQ;EACnD;EACA/pD,EAAA,EAAI;AACN;;;ACmCA,IAAMsxD,6BAAA,GAA+D;EACnEC,UAAA,EAAY;EACZC,QAAA,EAAU;AACZ;AAEA,IAAeC,oBAAA,GAAf,MAAmE;EAKvD3xD,YAAYqB,OAAA,EAA+B;IAuDrD,KAAAuwD,QAAA,GAAW,MAAM;MACf,IAAI,KAAKC,QAAA,EAAU;MACnB,KAAKjwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE+pB,QAAA,EAAU;MAAK,CAAC;IAC3C;IAEA,KAAAC,UAAA,GAAa,MAAM;MACjB,IAAI,CAAC,KAAKD,QAAA,EAAU;MACpB,KAAKjwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE+pB,QAAA,EAAU;MAAM,CAAC;IAC5C;IAEA,KAAAE,eAAA,GAAmBC,eAAA,IAA6B;MAC9C,MAAMC,iBAAA,GAAoB,OAAOD,eAAA,KAAoB;MACrD,MAAM3qD,YAAA,GAAe2qD,eAAA,IAAmB,KAAKE,WAAA;MAC7C,OAAO,CAAC,EACN,KAAKL,QAAA,IACL,CAAC,KAAKM,SAAA,KACL,KAAKrlC,OAAA,IAAWmlC,iBAAA,KACjB5qD,YAAA;IAEJ;IAzEE,MAAM;MAAEqqD;IAAS,IAAI;MAAE,GAAGF,6BAAA;MAA+B,GAAGnwD;IAAQ;IACpE,KAAKqwD,QAAA,GAAWA,QAAA;IAChB,KAAK9vC,KAAA,GAAQ,IAAIgmB,UAAA,CAAiC,KAAKuiB,YAAY;EACrE;EAEA,IAAIiI,eAAA,EAAiB;IACnB,OAAO,KAAKxwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEmpB,cAAA;EACrC;EAEA,IAAItlC,QAAA,EAAU;IACZ,OAAO,KAAKlL,KAAA,CAAMqnB,cAAA,CAAe,EAAEnc,OAAA;EACrC;EAEA,IAAIulC,WAAA,EAAa;IACf,OAAOz2D,KAAA,CAAMuH,OAAA,CAAQ,KAAKye,KAAA,CAAMqnB,cAAA,CAAe,EAAEqpB,KAAK;EACxD;EAEA,IAAIT,SAAA,EAAW;IACb,OAAO,KAAKjwC,KAAA,CAAMqnB,cAAA,CAAe,EAAE4oB,QAAA;EACrC;EAEA,IAAIM,UAAA,EAAY;IACd,OAAO,KAAKvwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEkpB,SAAA;EACrC;EAEA,IAAIhI,aAAA,EAAe;IACjB,OAAO;MACLr9B,OAAA,EAAS;MACT+kC,QAAA,EAAU;MACVM,SAAA,EAAW;MACXG,KAAA,EAAO;MACPF,cAAA,EAAgB;MAChBvqD,IAAA,EAAM;MACN2xB,MAAA,EAAQ;MACR04B,WAAA,EAAa;IACf;EACF;EAEA,IAAII,MAAA,EAAQ;IACV,OAAO,KAAK1wC,KAAA,CAAMqnB,cAAA,CAAe,EAAEqpB,KAAA;EACrC;EAEA,IAAIzqD,KAAA,EAAO;IACT,OAAO,KAAK+Z,KAAA,CAAMqnB,cAAA,CAAe,EAAEphC,IAAA;EACrC;EAEA,IAAI2xB,OAAA,EAAS;IACX,OAAO,KAAK5X,KAAA,CAAMqnB,cAAA,CAAe,EAAEzP,MAAA;EACrC;EAEA,IAAI04B,YAAA,EAAc;IAChB,OAAO,KAAKtwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEipB,WAAA;EACrC;EAuBUK,yBAAyBP,eAAA,EAA+C;IAChF,OAAO;MACL,GAAG,KAAK7H,YAAA;MACR0H,QAAA,EAAU,KAAKA,QAAA;MACfM,SAAA,EAAW;MACXD,WAAA,EAAaF;IACf;EACF;EAEUQ,mBACRC,WAAA,EACAC,WAAA,EACsB;IACtB,MAAM1qB,OAAA,GAAU,KAAKpmB,KAAA,CAAMqnB,cAAA,CAAe;IAC1C,OAAO;MACL,GAAGjB,OAAA;MACHoqB,cAAA,EAAgB;MAAA;MAChB,GAAGK,WAAA;MACHN,SAAA,EAAW;MACXG,KAAA,EAAOI,WAAA,GACHD,WAAA,CAAYH,KAAA,GACZ,CAAC,IAAI,KAAKA,KAAA,IAAS,EAAC,GAAI,IAAIG,WAAA,CAAYH,KAAA,IAAS,EAAG;IAC1D;EACF;EAEUK,qBAAqBX,eAAA,EAA0B;IACvD,MAAMC,iBAAA,GAAoB,OAAOD,eAAA,KAAoB;IACrD,MAAM3qD,YAAA,GAAe2qD,eAAA,IAAmB,KAAKE,WAAA;IAE7C,IAAID,iBAAA,EAAmB;MACrB,KAAKrwC,KAAA,CAAM/Z,IAAA,CAAK,KAAK0qD,wBAAA,CAAyBP,eAAA,IAAmB,EAAE,CAAC;IACtE,OAAO;MACL,KAAKpwC,KAAA,CAAMkmB,WAAA,CAAY;QAAEqqB,SAAA,EAAW;MAAK,CAAC;IAC5C;IAEA,OAAO;MAAE9qD,YAAA;MAAc4qD;IAAkB;EAC3C;EAEUW,+BAA+B3xD,MAAA,EAA6B;IACpE,MAAM;MAAEqxD,KAAA;MAAOzqD;IAAK,IAAI5G,MAAA;IAExB,MAAMwxD,WAAA,GAA6C,CAAC;IACpD,IAAI5qD,IAAA,IAAQA,IAAA,KAAS,MAAM;MACzB4qD,WAAA,CAAY5qD,IAAA,GAAOA,IAAA;MACnB4qD,WAAA,CAAY3lC,OAAA,GAAU,CAAC,CAACjlB,IAAA;IAC1B,OAAO;MACL4qD,WAAA,CAAYj5B,MAAA,IAAU,KAAKA,MAAA,IAAU,KAAK84B,KAAA,CAAMt2D,MAAA;MAChDy2D,WAAA,CAAY3lC,OAAA,GAAUwlC,KAAA,CAAMt2D,MAAA,KAAW,KAAK01D,QAAA;IAC9C;IAEA,OAAOe,WAAA;EACT;EAEAI,WAAA,EAAa;IACX,KAAKjxC,KAAA,CAAM/Z,IAAA,CAAK,KAAKsiD,YAAY;EACnC;EAEA2I,sBAAA,EAAwB;IACtB,KAAKD,UAAA,CAAW;IAChB,KAAKjB,QAAA,CAAS;EAChB;AACF;AAEO,IAAemB,gBAAA,GAAf,cACGpB,oBAAA,CAEV;EAGE3xD,YAAYqB,OAAA,EAA+B;IACzC,MAAM;MAAEowD;IAAW,IAAI;MAAE,GAAGD,6BAAA;MAA+B,GAAGnwD;IAAQ;IACtE,MAAMA,OAAO;IAQf,KAAA2xD,kBAAA,GAAqB,CAAC;MAAEvB;IAAW,MAAuB;MACxD,KAAKwB,eAAA,GAAkBz9B,QAAA,CAAS,KAAK09B,YAAA,CAAanxD,IAAA,CAAK,IAAI,GAAG0vD,UAAU;IAC1E;IAuBA,KAAAv2C,MAAA,GAAUg3C,WAAA,IAAyB,KAAKe,eAAA,CAAgBf,WAAW;IAhCjE,KAAKc,kBAAA,CAAmB;MAAEvB;IAAW,CAAC;EACxC;EAUA,MAAMyB,aAAalB,eAAA,EAA0B;IAC3C,IAAI,CAAC,KAAKD,eAAA,CAAgBC,eAAe,GAAG;IAE5C,MAAM;MAAEC,iBAAA;MAAmB5qD;IAAa,IACtC,KAAKsrD,oBAAA,CAAqBX,eAAe;IAE3C,IAAIS,WAAA,GAA6C,CAAC;IAClD,IAAI;MACF,MAAMU,OAAA,GAAU,MAAM,KAAKrvB,KAAA,CAAMz8B,YAAY;MAC7C,IAAI,CAAC8rD,OAAA,EAAS;MAEd,MAAM;QAAEb;MAAM,IAAIa,OAAA;MAClBV,WAAA,GAAc,KAAKG,8BAAA,CAA+BO,OAAO;MACzDV,WAAA,CAAYH,KAAA,GAAQ,MAAM,KAAKc,kBAAA,CAAmBd,KAAK;IACzD,SAASnzD,CAAA,EAAG;MACVszD,WAAA,CAAYL,cAAA,GAAiBjzD,CAAA;IAC/B,UAAE;MACA,KAAKyiB,KAAA,CAAM/Z,IAAA,CAAK,KAAK2qD,kBAAA,CAAmBC,WAAA,EAAaR,iBAAiB,CAAC;IACzE;EACF;EAIAoB,qBAAA,EAAuB;IACrB,KAAKJ,eAAA,CAAgBtyC,MAAA,CAAO;EAC9B;AACF;AAEO,IAAe2yC,oBAAA,GAAf,cACG3B,oBAAA,CAEV;EAGE3xD,YAAYqB,OAAA,EAA+B;IACzC,MAAM;MAAEowD;IAAW,IAAI;MAAE,GAAGD,6BAAA;MAA+B,GAAGnwD;IAAQ;IACtE,MAAMA,OAAO;IAQf,KAAA2xD,kBAAA,GAAqB,CAAC;MAAEvB;IAAW,MAAuB;MACxD,KAAKwB,eAAA,GAAkBz9B,QAAA,CAAS,KAAK09B,YAAA,CAAanxD,IAAA,CAAK,IAAI,GAAG0vD,UAAU;IAC1E;IAuBA,KAAAv2C,MAAA,GAAUg3C,WAAA,IAAyB,KAAKe,eAAA,CAAgBf,WAAW;IAhCjE,KAAKc,kBAAA,CAAmB;MAAEvB;IAAW,CAAC;EACxC;EAUAyB,aAAalB,eAAA,EAA0B;IACrC,IAAI,CAAC,KAAKD,eAAA,CAAgBC,eAAe,GAAG;IAE5C,MAAM;MAAEC,iBAAA;MAAmB5qD;IAAa,IACtC,KAAKsrD,oBAAA,CAAqBX,eAAe;IAE3C,IAAIS,WAAA,GAA6C,CAAC;IAClD,IAAI;MACF,MAAMU,OAAA,GAAU,KAAKrvB,KAAA,CAAMz8B,YAAY;MACvC,IAAI,CAAC8rD,OAAA,EAAS;MAEd,MAAM;QAAEb;MAAM,IAAIa,OAAA;MAClBV,WAAA,GAAc,KAAKG,8BAAA,CAA+BO,OAAO;MACzDV,WAAA,CAAYH,KAAA,GAAQ,KAAKc,kBAAA,CAAmBd,KAAK;IACnD,SAASnzD,CAAA,EAAG;MACVszD,WAAA,CAAYL,cAAA,GAAiBjzD,CAAA;IAC/B,UAAE;MACA,KAAKyiB,KAAA,CAAM/Z,IAAA,CAAK,KAAK2qD,kBAAA,CAAmBC,WAAA,EAAaR,iBAAiB,CAAC;IACzE;EACF;EAIAoB,qBAAA,EAAuB;IACrB,KAAKJ,eAAA,CAAgBtyC,MAAA,CAAO;EAC9B;AACF;;;AC/QO,IAAM4yC,gBAAA,GAAN,MAAuB;EAS5BvzD,YAAY;IAAE0L,MAAA;IAAQ+4B;EAAQ,IAA6B,CAAC,GAAG;IAiC/D,KAAA+uB,SAAA,GAAazoD,MAAA,IAAyB;MACpC,KAAK6W,KAAA,CAAMkmB,WAAA,CAAY;QACrBrD,OAAA,EAAS,CAAC,GAAG,KAAKA,OAAA,EAAS15B,MAAM;MACnC,CAAC;IACH;IAEA,KAAA0oD,SAAA,GAAaC,UAAA,IACX,KAAKjvB,OAAA,CAAQ7L,IAAA,CAAM15B,CAAA,IAAMA,CAAA,CAAE+D,IAAA,KAASywD,UAAU;IAEhD,KAAAC,YAAA,GAAgBD,UAAA,IAAqC;MACnD,MAAME,UAAA,GAAa,KAAKnvB,OAAA,CAAQl3B,MAAA,CAAQrO,CAAA,IAAMA,CAAA,CAAE+D,IAAA,KAASywD,UAAU;MACnE,IAAIE,UAAA,CAAW53D,MAAA,KAAW,KAAKyoC,OAAA,CAAQzoC,MAAA,EAAQ;MAC/C,KAAK4lB,KAAA,CAAMkmB,WAAA,CAAY;QAAErD,OAAA,EAASmvB;MAAW,CAAC;IAChD;IAEA,KAAAC,cAAA,GAAkBH,UAAA,IAAqC;MACrD,MAAM3oD,MAAA,GAAS,KAAK0oD,SAAA,CAAUC,UAAU;MACxC,IAAI,CAAC3oD,MAAA,IAAUA,MAAA,CAAO8mD,QAAA,EAAU;MAChC,IAAI,KAAKnmD,MAAA,CAAOooD,sBAAA,EAAwB;QACtC,KAAKrvB,OAAA,CAAQv/B,OAAA,CAAShG,CAAA,IAAM;UAC1B,IAAIA,CAAA,CAAE+D,IAAA,KAASywD,UAAA,EAAY;YACzBx0D,CAAA,CAAE4yD,UAAA,CAAW;UACf;QACF,CAAC;MACH;MACA/mD,MAAA,CAAO6mD,QAAA,CAAS;MAChB,KAAKhwC,KAAA,CAAMkmB,WAAA,CAAY;QAAErD,OAAA,EAAS,CAAC,GAAG,KAAKA,OAAO;MAAE,CAAC;IACvD;IAEA,KAAAsvB,gBAAA,GAAoBL,UAAA,IAAqC;MACvD,MAAM3oD,MAAA,GAAS,KAAK0oD,SAAA,CAAUC,UAAU;MACxC,IAAI,CAAC3oD,MAAA,EAAQ8mD,QAAA,EAAU;MACvB,IAAI,KAAKmC,aAAA,CAAch4D,MAAA,KAAW,GAAG;MACrC+O,MAAA,CAAO+mD,UAAA,CAAW;MAClB,KAAKlwC,KAAA,CAAMkmB,WAAA,CAAY;QAAErD,OAAA,EAAS,CAAC,GAAG,KAAKA,OAAO;MAAE,CAAC;IACvD;IAEA,KAAAmtB,QAAA,GAAW,MAAM;MACf,IAAI,CAAC,KAAKoC,aAAA,CAAch4D,MAAA,EAAQ;QAC9B,MAAMi4D,iBAAA,GAAoB,KAAKvoD,MAAA,CAAOooD,sBAAA,GAClC,KAAKrvB,OAAA,CAAQ3hC,KAAA,CAAM,GAAG,CAAC,IACvB,KAAK2hC,OAAA;QACTwvB,iBAAA,CAAkB/uD,OAAA,CAAShG,CAAA,IAAMA,CAAA,CAAE0yD,QAAA,CAAS,CAAC;MAC/C;MACA,IAAI,KAAKC,QAAA,EAAU;MACnB,KAAKjwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE+pB,QAAA,EAAU;MAAK,CAAC;IAC3C;IAEA,KAAA32C,MAAA,GAAS,MAAOg3C,WAAA,IAAyB;MACvC,MAAMgC,eAAA,GAAkB,KAAKF,aAAA;MAC7B,KAAKpyC,KAAA,CAAMkmB,WAAA,CAAY;QACrBoqB;MACF,CAAC;MACD,MAAMv0C,OAAA,CAAQ2N,GAAA,CAAI4oC,eAAA,CAAgB11D,GAAA,CAAKuM,MAAA,IAAWA,MAAA,CAAOmQ,MAAA,CAAOg3C,WAAW,CAAC,CAAC;IAC/E;IAEA,KAAAiC,mBAAA,GAAsB,MAAM;MAC1B,KAAKH,aAAA,CAAc9uD,OAAA,CAAShG,CAAA,IAAMA,CAAA,CAAEm0D,oBAAA,CAAqB,CAAC;IAC5D;IAEA,KAAA1iD,KAAA,GAAQ,MAAM;MACZ,KAAKwjD,mBAAA,CAAoB;MACzB,KAAK1vB,OAAA,CAAQv/B,OAAA,CAAS6F,MAAA,IACpBA,MAAA,CAAO6W,KAAA,CAAM/Z,IAAA,CAAK;QAAE,GAAGkD,MAAA,CAAOo/C,YAAA;QAAc0H,QAAA,EAAU9mD,MAAA,CAAO8mD;MAAS,CAAC,CACzE;MACA,KAAKjwC,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;QAC5B,GAAGA,OAAA;QACH6pB,QAAA,EAAU;QACVuC,iBAAA,EAAmB,EAAC;QACpBlC,WAAA,EAAa;MACf,EAAE;IACJ;IAEA,KAAAmC,IAAA,GAAO,MAAM;MACX,KAAKF,mBAAA,CAAoB;MACzB,KAAK1vB,OAAA,CAAQv/B,OAAA,CAAS6F,MAAA,IACpBA,MAAA,CAAO6W,KAAA,CAAM/Z,IAAA,CAAK;QAAE,GAAGkD,MAAA,CAAOo/C,YAAA;QAAc0H,QAAA,EAAU9mD,MAAA,CAAO8mD;MAAS,CAAC,CACzE;MACA,KAAKjwC,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;QAC5B,GAAGA,OAAA;QACH6pB,QAAA,EAAU;QACVuC,iBAAA,EAAmB,EAAC;QACpBlC,WAAA,EAAa;MACf,EAAE;IACJ;IApHE,KAAKtwC,KAAA,GAAQ,IAAIgmB,UAAA,CAAkC;MACjDiqB,QAAA,EAAU;MACVK,WAAA,EAAa;MACbztB,OAAA,EAASA,OAAA,IAAW;IACtB,CAAC;IACD,KAAK6vB,cAAA,GAAiB,IAAI1sB,UAAA,CAA0C,CAAC,CAAC;IACtE,KAAKl8B,MAAA,GAAS;MAAEooD,sBAAA,EAAwB;MAAM,GAAGpoD;IAAO;EAC1D;EACA,IAAIohB,QAAA,EAAU;IACZ,OAAO,KAAK2X,OAAA,CAAQp3B,IAAA,CAAMtC,MAAA,IAAWA,MAAA,CAAO+hB,OAAO;EACrD;EAEA,IAAI2X,QAAA,EAAU;IACZ,OAAO,KAAK7iB,KAAA,CAAMqnB,cAAA,CAAe,EAAExE,OAAA;EACrC;EAEA,IAAIuvB,cAAA,EAAgB;IAClB,OAAO,KAAKpyC,KAAA,CAAMqnB,cAAA,CAAe,EAAExE,OAAA,CAAQl3B,MAAA,CAAQrO,CAAA,IAAMA,CAAA,CAAE2yD,QAAQ;EACrE;EAEA,IAAIA,SAAA,EAAW;IACb,OAAO,KAAKjwC,KAAA,CAAMqnB,cAAA,CAAe,EAAE4oB,QAAA;EACrC;EAEA,IAAIK,YAAA,EAAc;IAChB,OAAO,KAAKtwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEipB,WAAA;EACrC;EAEA,IAAIqC,kBAAA,EAAiD;IACnD,OAAO,KAAK9vB,OAAA,CAAQjmC,GAAA,CAAKU,CAAA,IAAMA,CAAA,CAAE+D,IAAI;EACvC;AAuFF;;;ACpJO,IAAMuxD,gBAAA,GAAN,cAA+BzB,gBAAA,CAA+B;EAOnE/yD,YAAYC,MAAA,EAAoBoB,OAAA,EAA+B;IAC7D,MAAMA,OAAO;IAPf,KAAS4B,IAAA,GAAO;IAQd,KAAKhD,MAAA,GAASA,MAAA;EAChB;EAEA,MAAgB6jC,MAAMouB,WAAA,EAAqB;IACzC,MAAMl3B,OAAA,GAAU;MACdy5B,GAAA,EAAK,CACH;QAAEv0D,EAAA,EAAI;UAAEw0D,aAAA,EAAexC;QAAY;MAAE,GACrC;QAAErxD,IAAA,EAAM;UAAE6zD,aAAA,EAAexC;QAAY;MAAE,EACzC;MACA,GAAG,KAAKl3B;IACV;IACA,MAAMzK,IAAA,GAAO;MAAErwB,EAAA,EAAI;MAAG,GAAG,KAAKqwB;IAAK;IACnC,MAAMlvB,OAAA,GAAU;MAAE,GAAG,KAAKszD,aAAA;MAAelxB,KAAA,EAAO,KAAKiuB,QAAA;MAAUl4B,MAAA,EAAQ,KAAKA;IAAO;IACnF,MAAM;MAAEo7B;IAAM,IAAI,MAAM,KAAK30D,MAAA,CAAO40D,UAAA,CAAW75B,OAAA,EAASzK,IAAA,EAAMlvB,OAAO;IACrE,OAAO;MAAEixD,KAAA,EAAOsC;IAAM;EACxB;EAEUxB,mBAAmBd,KAAA,EAAuB;IAClD,OAAOA,KAAA,CAAM/kD,MAAA,CAAQ0iD,CAAA,IAAMA,CAAA,CAAE/vD,EAAA,KAAO,KAAKD,MAAA,CAAOiuB,IAAA,EAAMhuB,EAAE;EAC1D;AACF;;;AC5BO,IAAM40D,mBAAA,GAAN,cAAkC/B,gBAAA,CAA0B;EAOjE/yD,YAAYC,MAAA,EAAoBoB,OAAA,EAA+B;IAC7D,MAAMA,OAAO;IAPf,KAAS4B,IAAA,GAAO;IAQd,KAAKhD,MAAA,GAASA,MAAA;EAChB;EAEA,MAAgB6jC,MAAMouB,WAAA,EAAqB;IACzC,MAAMl3B,OAAA,GAAU;MACdf,OAAA,EAAS;QAAE86B,GAAA,EAAK,CAAC,KAAK90D,MAAA,CAAO4gC,MAAM;MAAE;MACrChgC,IAAA,EAAM;QAAE6zD,aAAA,EAAexC;MAAY;MACnC,GAAG,KAAKl3B;IACV;IACA,MAAMzK,IAAA,GAAO,KAAKA,IAAA,IAAQ,CAAC;IAC3B,MAAMlvB,OAAA,GAAU;MAAE,GAAG,KAAKszD,aAAA;MAAelxB,KAAA,EAAO,KAAKiuB,QAAA;MAAUl4B,MAAA,EAAQ,KAAKA;IAAO;IACnF,MAAM84B,KAAA,GAAQ,MAAM,KAAKryD,MAAA,CAAO+0D,aAAA,CAAch6B,OAAA,EAASzK,IAAA,EAAMlvB,OAAO;IACpE,OAAO;MAAEixD;IAAM;EACjB;EAEUc,mBAAmBd,KAAA,EAAkB;IAC7C,OAAOA,KAAA;EACT;AACF;;;ACpBO,IAAM2C,mBAAA,GAAN,cAAkClC,gBAAA,CAAkC;EAUzE/yD,YAAYC,MAAA,EAAoBoB,OAAA,EAA+B;IAC7D,MAAMA,OAAO;IAVf,KAAS4B,IAAA,GAAO;IAWd,KAAKhD,MAAA,GAASA,MAAA;EAChB;EAEA,MAAgB6jC,MAAMouB,WAAA,EAAqB;IACzC,IAAI,CAAC,KAAKjyD,MAAA,CAAO4gC,MAAA,EAAQ,OAAO;MAAEyxB,KAAA,EAAO;IAAG;IAE5C,MAAM4C,cAAA,GAAiC;MACrCj7B,OAAA,EAAS;QAAE86B,GAAA,EAAK,CAAC,KAAK90D,MAAA,CAAO4gC,MAAM;MAAE;MACrC,GAAG,KAAKs0B;IACV;IAEA,MAAMC,cAAA,GAAiC;MACrCzR,IAAA,EAAMuO,WAAA;MACNjvD,IAAA,EAAM;MAAA;MACN,GAAG,KAAKoyD;IACV;IAEA,MAAM9kC,IAAA,GAA0B;MAC9BnD,UAAA,EAAY;MACZ,GAAG,KAAKkoC;IACV;IAEA,MAAMj0D,OAAA,GAAU;MACdoiC,KAAA,EAAO,KAAKiuB,QAAA;MACZ7pD,IAAA,EAAM,KAAKA,IAAA;MACX0oB;IACF;IAEA,MAAM;MAAE1oB,IAAA;MAAMsrD;IAAQ,IAAI,MAAM,KAAKlzD,MAAA,CAAOib,MAAA,CAC1Cg6C,cAAA,EACAE,cAAA,EACA/zD,OACF;IACA,MAAMixD,KAAA,GAAQa,OAAA,CAAQ30D,GAAA,CAAI,CAAC;MAAEiN;IAAQ,MAAMA,OAAO;IAElD,MAAM8pD,IAAA,GAAO35D,KAAA,CAAMyQ,IAAA,CACjBimD,KAAA,CAAMj8B,MAAA,CAAO,CAACC,GAAA,EAAK7qB,OAAA,KAAY;MAC7B,IAAIA,OAAA,CAAQ2uB,GAAA,IAAO,CAAC,KAAKn6B,MAAA,CAAOu1D,cAAA,CAAe/pD,OAAA,CAAQ2uB,GAAG,GAAG9D,GAAA,CAAIM,GAAA,CAAInrB,OAAA,CAAQ2uB,GAAG;MAChF,OAAO9D,GAAA;IACT,GAAG,mBAAIK,GAAA,CAAY,CAAC;IAAA;IACtB;IACA,MAAM8+B,wBAAA,GAA2BF,IAAA,CAAKv5D,MAAA,KAAW;IACjD,IAAI,CAACy5D,wBAAA,EAA0B;MAC7B,MAAM,KAAKx1D,MAAA,CAAO+0D,aAAA,CAChB;QACE56B,GAAA,EAAK;UAAE26B,GAAA,EAAKQ;QAAK;QACjB,GAAG,KAAKG;MACV,GACA;QACEn3B,eAAA,EAAiB;QACjB,GAAG,KAAKo3B;MACV,GACA,KAAKC,mBACP;IACF;IAEA,OAAO;MAAEtD,KAAA;MAAOzqD;IAAK;EACvB;EAEUurD,mBAAmBd,KAAA,EAA0B;IACrD,OAAOA,KAAA;EACT;AACF;;;AChFO,IAAMuD,uBAAA,GAA0BA,CAAC;EACtCC,OAAA;EACAnS,IAAA;EACAoS,SAAA,GAAY;EACZC,oBAAA,GAAuB;AACzB,MAKM;EACJ,MAAMC,oBAAA,GAAuB,QAAQH,OAAO;EAE5C,MAAM3mD,KAAA,GAAQw0C,IAAA,CAAKx0C,KAAA,CACjB,IAAIwK,MAAA,CACFo8C,SAAA,GACI,KAAKD,OAAO,IAAIG,oBAAoB,MACpCD,oBAAA,GACE,cAAcF,OAAO,IAAIG,oBAAoB,OAAOA,oBAAoB,MACxE,cAAcH,OAAO,IAAIG,oBAAoB,KACnD,GACF,CACF;EAEA,OAAO9mD,KAAA,IAASA,KAAA,CAAMA,KAAA,CAAMnT,MAAA,GAAS,CAAC,EAAEgJ,IAAA,CAAK;AAC/C;AAEO,IAAMkxD,0BAAA,GAA8BvS,IAAA,IAAiB;EAG1D,MAAMx0C,KAAA,GAAQw0C,IAAA,CAAKx0C,KAAA,CAAM,eAAe;EACxC,MAAMgnD,WAAA,GAAchnD,KAAA,IAASA,KAAA,CAAM,CAAC;EACpC,OAAOgnD,WAAA;AACT;AAEO,IAAMC,qBAAA,GAAwBA,CAAC;EACpCC,UAAA;EACAC,SAAA;EACA3S,IAAA;EACAmS;AACF,MAKM;EACJ,MAAMS,YAAA,GAAe5S,IAAA,CAAK7gD,KAAA,CAAM,GAAGwzD,SAAA,CAAUl5D,GAAG;EAChD,MAAMo5D,WAAA,GAAc7S,IAAA,CAAK7gD,KAAA,CAAMwzD,SAAA,CAAUl5D,GAAG;EAG5C,MAAMmK,SAAA,GAAYgvD,YAAA,CAAaE,WAAA,CAAYX,OAAO;EAClD,MAAMY,OAAA,GAAUH,YAAA,CAAazzD,KAAA,CAAM,GAAGyE,SAAS,IAAI8uD,UAAA,GAAaG,WAAA;EAChE,OAAO;IACL7S,IAAA,EAAM+S,OAAA;IACNJ,SAAA,EAAW;MACTn5D,KAAA,EAAOoK,SAAA,GAAY8uD,UAAA,CAAWr6D,MAAA;MAC9BoB,GAAA,EAAKmK,SAAA,GAAY8uD,UAAA,CAAWr6D;IAC9B;EACF;AACF;AAEO,IAAM26D,qBAAA,GAAwB,MAAAA,CAAO;EAC1CC,aAAA;EACAC,eAAA;EACAlT;AACF,MAIuB;EACrB,MAAMmT,aAAA,GAAgB;EACtB,MAAM3nD,KAAA,GAAQ2nD,aAAA,CAAc3uD,IAAA,CAAKw7C,IAAA,CAAK7gD,KAAA,CAAM,GAAG8zD,aAAa,CAAC;EAC7D,IAAI,CAACznD,KAAA,EAAO,OAAOw0C,IAAA;EAEnB,MAAMoT,QAAA,GAAW5nD,KAAA,CAAM,CAAC;EACxB,IAAI,CAAC4nD,QAAA,EAAU,OAAOpT,IAAA;EAEtB,MAAMqT,MAAA,GAAS7nD,KAAA,CAAM,CAAC;EAEtB,MAAM8nD,OAAA,GAAU,MAAMJ,eAAA,CAAgBE,QAAQ;EAC9C,IAAIE,OAAA,IAAW,MAAM,OAAOtT,IAAA;EAE5B,MAAMuT,cAAA,GAAiBvT,IAAA,CAAK7gD,KAAA,CAAM,GAAG8zD,aAAA,GAAgBznD,KAAA,CAAM,CAAC,EAAEnT,MAAM;EACpE,MAAMm7D,cAAA,GAAiBxT,IAAA,CAAK7gD,KAAA,CAAM8zD,aAAA,EAAe,EAAE;EACnD,OAAOM,cAAA,GAAiBD,OAAA,GAAUD,MAAA,GAASG,cAAA;AAC7C;AAkCO,SAASC,aAAazT,IAAA,EAAc;EACzC,OAAOA,IAAA,CAAK1+C,OAAA,CAAQ,2BAA2B,MAAM;AACvD;AAMO,IAAMoyD,iCAAA,GAAoCA,CAAC;EAChDC,WAAA;EACAC;AACF,OAG4B;EAC1BC,oBAAA,EAAsB;IACpBrqD,KAAA,EAAOoqD,WAAA;IACP95D,KAAA,EAAO85D,WAAA,GACHD,WAAA,CACG1tD,KAAA,CAAM,IAAI+P,MAAA,CAAO,IAAIy9C,YAAA,CAAaG,WAAW,CAAC,KAAK,IAAI,CAAC,EACxDhqD,MAAA,CAAOi8C,OAAO,IACjB,CAAC8N,WAAW;EAClB;AACF;;;ACvIO,IAAMG,mBAAA,GAAN,cAAkCnE,oBAAA,CAAwC;EAI/EtzD,YAAYg6B,OAAA,EAAkB34B,OAAA,EAA+B;IAC3D,MAAMA,OAAO;IAJf,KAAS4B,IAAA,GAAO;IAQhB,KAAA8uD,eAAA,GAAmBC,eAAA,IAA6B;MAC9C,MAAMC,iBAAA,GAAoB,OAAOD,eAAA,KAAoB;MACrD,OAAO,KAAKH,QAAA,IAAY,CAAC,KAAKM,SAAA,KAAc,KAAKrlC,OAAA,IAAWmlC,iBAAA;IAC9D;IANE,KAAKj4B,OAAA,GAAUA,OAAA;EACjB;EAOAu4B,yBAAyBP,eAAA,EAAyB;IAChD,MAAM0F,QAAA,GAAW,MAAMnF,wBAAA,CAAyBP,eAAe;IAC/D,MAAM;MAAEM;IAAM,IAAI,KAAK1wC,KAAA,CAAMqnB,cAAA,CAAe;IAC5C,OAAO;MACL,GAAGyuB,QAAA;MACHpF;MAAA;IACF;EACF;EAEAxuB,MAAMouB,WAAA,EAAqB;IACzB,MAAMyF,aAAA,GAAgB,KAAK39B,OAAA,CAAQotB,SAAA,CAAU;IAC7C,MAAMwQ,QAAA,GAAWD,aAAA,EAAeC,QAAA,IAAY,EAAC;IAC7C,MAAMC,gBAAA,GAA2DD,QAAA,CAASrqD,MAAA,CACvEigB,OAAA,IACC,CAAC,EACCA,OAAA,CAAQ3sB,IAAA,IACR2sB,OAAA,CAAQ3sB,IAAA,CAAKkC,WAAA,CAAY,EAAExG,OAAA,CAAQ21D,WAAA,CAAYnvD,WAAA,CAAY,CAAC,MAAM,GAExE;IAGA80D,gBAAA,CAAiBtnC,IAAA,CAAK,CAAC3wB,CAAA,EAAGJ,CAAA,KAAM;MAC9B,IAAIs4D,KAAA,GAAQl4D,CAAA,CAAEiB,IAAA,EAAMkC,WAAA,CAAY;MAChC,IAAIg1D,KAAA,GAAQv4D,CAAA,CAAEqB,IAAA,EAAMkC,WAAA,CAAY;MAChC,IAAI+0D,KAAA,EAAOv7D,OAAA,CAAQ21D,WAAW,MAAM,GAAG;QACrC4F,KAAA,GAAQ,IAAIA,KAAK;MACnB;MACA,IAAIC,KAAA,EAAOx7D,OAAA,CAAQ21D,WAAW,MAAM,GAAG;QACrC6F,KAAA,GAAQ,IAAIA,KAAK;MACnB;MAEA,IAAID,KAAA,IAAS,QAAQC,KAAA,IAAS,MAAM;QAClC,IAAID,KAAA,GAAQC,KAAA,EAAO;UACjB,OAAO;QACT;QACA,IAAID,KAAA,GAAQC,KAAA,EAAO;UACjB,OAAO;QACT;MACF;MAEA,OAAO;IACT,CAAC;IAED,OAAO;MACLzF,KAAA,EAAOuF,gBAAA,CAAiBr5D,GAAA,CAAKiB,CAAA,KAAO;QAAE,GAAGA,CAAA;QAAGS,EAAA,EAAIT,CAAA,CAAEoB;MAAK,EAAE;MACzDgH,IAAA,EAAM;IACR;EACF;EAEUurD,mBAAmBd,KAAA,EAA4B;IACvD,OAAOA,KAAA;EACT;AACF;AAeA,IAAM0F,eAAA,GAAiD;EAAEC,QAAA,EAAU;EAAGnC,OAAA,EAAS;AAAI;AAO5E,IAAMoC,wBAAA,GAA2BA,CACtCl+B,OAAA,EACA34B,OAAA,KAGuB;EACvB,MAAM82D,YAAA,GAAejqB,SAAA,CAAU8pB,eAAA,EAAiB32D,OAAA,IAAW,CAAC,CAAC;EAC7D,IAAI+2D,YAAA,GAAe,IAAIX,mBAAA,CAAoBz9B,OAAO;EAClD,IAAI34B,OAAA,EAAS+2D,YAAA,EAAc;IACzBA,YAAA,GAAe/2D,OAAA,CAAQ+2D,YAAA;IACvBA,YAAA,CAAavF,UAAA,CAAW;EAC1B;EACAuF,YAAA,CAAaxG,QAAA,CAAS;EAEtB,OAAO;IACL1xD,EAAA,EAAI;IACJkQ,QAAA,EAAU;MACRkhD,QAAA,EAAUA,CAAC;QAAE1vC,KAAA;QAAO/Z,IAAA;QAAMkiD,QAAA;QAAUE;MAAQ,MAAM;QAChD,IAAI,CAACroC,KAAA,CAAM00C,SAAA,EAAW,OAAOrM,OAAA,CAAQ;QACrC,MAAMoO,SAAA,GAAYz2C,KAAA,CAAM+hC,IAAA,CAAK7gD,KAAA,CAAM,GAAG8e,KAAA,CAAM00C,SAAA,CAAUl5D,GAAG;QACzD,MAAM+4D,WAAA,GAAcD,0BAAA,CAA2BmC,SAAS;QACxD,IAAIlC,WAAA,EAAa;UACf,MAAM3oC,OAAA,GAAU4qC,YAAA,EAAct0B,KAAA,CAAMqyB,WAAW,EAAE7D,KAAA,CAAM,CAAC;UACxD,IAAI9kC,OAAA,EAAS;YACX,OAAO3lB,IAAA,CAAK;cACV,GAAG+Z,KAAA;cACH4L,OAAA;cACA8qC,WAAA,EAAa;YACf,CAAC;UACH;QACF;QAEA,MAAMC,gBAAA,GAAmB1C,uBAAA,CAAwB;UAC/CC,OAAA,EAASqC,YAAA,CAAarC,OAAA;UACtBnS,IAAA,EAAM0U,SAAA;UACNrC,oBAAA,EAAsB;UACtBD,SAAA,EAAW;QACb,CAAC;QAED,MAAMyC,mBAAA,GACJD,gBAAA,IAAoBA,gBAAA,CAAiBv8D,MAAA,KAAWm8D,YAAA,CAAaF,QAAA;QAE/D,IAAIO,mBAAA,EAAqB;UACvBJ,YAAA,CAAatF,qBAAA,CAAsB;QACrC;QAEA,MAAM2F,iBAAA,GACJ,CAACF,gBAAA,IAAoBA,gBAAA,CAAiBv8D,MAAA,GAASm8D,YAAA,CAAaF,QAAA;QAE9D,IAAIQ,iBAAA,EAAmB;UACrB,MAAMC,mBAAA,GAAsB92C,KAAA,CAAM02C,WAAA,EAAaxC,OAAA,KAAYqC,YAAA,CAAarC,OAAA;UACxE,MAAM4B,QAAA,GAAW;YAAE,GAAG91C;UAAM;UAC5B,IAAI82C,mBAAA,EAAqB;YACvB,OAAOhB,QAAA,CAASY,WAAA;UAClB;UACA,OAAOzwD,IAAA,CAAK6vD,QAAQ;QACtB;QAEA,OAAO3N,QAAA,CAAS;UACd,GAAGnoC,KAAA;UACH4L,OAAA,EAAS;UACT8qC,WAAA,EAAa;YACXx0B,KAAA,EAAOy0B,gBAAA,CAAiBz1D,KAAA,CAAM,CAAC;YAC/Bs1D,YAAA;YACAtC,OAAA,EAASqC,YAAA,CAAarC;UACxB;QACF,CAAC;MACH;MACAvE,sBAAA,EAAwBA,CAAC;QAAE3vC,KAAA;QAAO/Z,IAAA;QAAMoiD;MAAQ,MAAM;QACpD,MAAM;UAAE0O;QAAmB,IAAI/2C,KAAA,CAAMg3C,MAAA,IAAU,CAAC;QAChD,IAAI,CAACD,kBAAA,IAAsB/2C,KAAA,CAAM02C,WAAA,EAAaxC,OAAA,KAAYqC,YAAA,CAAarC,OAAA,EACrE,OAAO7L,OAAA,CAAQ;QAEjBmO,YAAA,CAAatF,qBAAA,CAAsB;QACnC,OAAOjrD,IAAA,CAAK;UACV,GAAG+Z,KAAA;UACH,GAAGw0C,qBAAA,CAAsB;YACvBC,UAAA,EAAY,IAAIsC,kBAAA,CAAmB93D,IAAI;YACvCy1D,SAAA,EAAW10C,KAAA,CAAM00C,SAAA;YACjB3S,IAAA,EAAM/hC,KAAA,CAAM+hC,IAAA;YACZmS,OAAA,EAASqC,YAAA,CAAarC;UACxB,CAAC;UACDtoC,OAAA,EAASmrC,kBAAA;UACTL,WAAA,EAAa;QACf,CAAC;MACH;IACF;EACF;AACF;;;ACpLA,IAAMO,oBAAA,GAAuBA,CAAClV,IAAA,EAAcwS,WAAA,KAC1CxS,IAAA,CAAK1+C,OAAA,CAAQ,IAAI0U,MAAA,CAAO,IAAIy9C,YAAA,CAAa,IAAIjB,WAAW,EAAE,CAAC,MAAM,GAAG,EAAE;AAEjE,IAAM2C,uCAAA,GACXA,CAAA,MAA0C;EACxC1oD,QAAA,EAAU;IACRkhD,QAAA,EAAUA,CAAC;MAAEvH,QAAA;MAAUE,OAAA;MAASroC;IAAM,MAAM;MAC1C,MAAM;QAAE4L;MAAQ,IAAI5L,KAAA;MAEpB,IAAI,CAAC4L,OAAA,EAAS3sB,IAAA,EAAM;QAClB,OAAOopD,OAAA,CAAQ;MACjB;MAEA,MAAMyM,OAAA,GAAUmC,oBAAA,CAAqBj3C,KAAA,CAAM+hC,IAAA,EAAMn2B,OAAA,CAAQ3sB,IAAI;MAE7D,OAAOkpD,QAAA,CAAS;QACd,GAAGnoC,KAAA;QACH00C,SAAA,EAAW;UACTl5D,GAAA,EAAKs5D,OAAA,CAAQ16D,MAAA;UACbmB,KAAA,EAAOu5D,OAAA,CAAQ16D;QACjB;QACA2nD,IAAA,EAAM+S;MACR,CAAC;IACH;IACAnF,sBAAA,EAAwBA,CAAC;MAAE1pD,IAAA;MAAMoiD,OAAA;MAASroC;IAAM,MAAM;MACpD,MAAM;QAAE4L;MAAQ,IAAI5L,KAAA;MAEpB,IAAI,CAAC4L,OAAA,EAAS;QACZ,OAAOy8B,OAAA,CAAQ;MACjB;MAEA,MAAM8O,kBAAA,GAAqB,IAAIvrC,OAAA,EAAS3sB,IAAI;MAE5C,MAAM61D,OAAA,GAAU90C,KAAA,CAAM+hC,IAAA,CAAK7gD,KAAA,CAAMi2D,kBAAA,CAAmB/8D,MAAM;MAC1D,OAAO6L,IAAA,CAAK;QACV,GAAG+Z,KAAA;QACH00C,SAAA,EAAW;UACTl5D,GAAA,EAAKs5D,OAAA,CAAQ16D,MAAA;UACbmB,KAAA,EAAOu5D,OAAA,CAAQ16D;QACjB;QACA2nD,IAAA,EAAM+S;MACR,CAAC;IACH;EACF;EACAx2D,EAAA,EAAI;AACN;;;AChCK,IAAM84D,UAAA,GAAwC;EACnDp5D,CAAA,EAAG;EACHH,CAAA,EAAG;EACHN,CAAA,EAAG;EACHrD,CAAA,EAAG;EACHm9D,CAAA,EAAG;EACH/a,CAAA,EAAG;EACH+R,CAAA,EAAG;AACL;AAEO,IAAMiJ,gBAAA,GAAoBvV,IAAA,IAAkB;EACjD,IAAI,CAACA,IAAA,EAAM,OAAO;EAClB,OAAOrhD,MAAA,CAAO+C,IAAA,CAAK2zD,UAAU,EAAE3iC,MAAA,CAC7B,CAACC,GAAA,EAAK0R,OAAA,KAAY1R,GAAA,CAAIrxB,OAAA,CAAQ,IAAI0U,MAAA,CAAOq/C,UAAA,CAAWhxB,OAAO,GAAG,GAAG,GAAGA,OAAO,GAC3E2b,IACF;AACF;AAEO,IAAMwV,oBAAA,GAAuBA,CAACr1B,KAAA,EAAejjC,IAAA,KAAiB;EACnE,IAAIijC,KAAA,CAAM9nC,MAAA,KAAW,GAAG,OAAO6E,IAAA,CAAK7E,MAAA;EACpC,IAAI6E,IAAA,CAAK7E,MAAA,KAAW,GAAG,OAAO8nC,KAAA,CAAM9nC,MAAA;EAEpC,MAAMo9D,MAAA,GAAS,EAAC;EAEhB,IAAIt9D,CAAA;EACJ,KAAKA,CAAA,GAAI,GAAGA,CAAA,IAAK+E,IAAA,CAAK7E,MAAA,EAAQF,CAAA,IAAK;IACjCs9D,MAAA,CAAOt9D,CAAC,IAAI,CAACA,CAAC;EAChB;EAEA,IAAIm5C,CAAA;EACJ,KAAKA,CAAA,GAAI,GAAGA,CAAA,IAAKnR,KAAA,CAAM9nC,MAAA,EAAQi5C,CAAA,IAAK;IAClCmkB,MAAA,CAAO,CAAC,EAAEnkB,CAAC,IAAIA,CAAA;EACjB;EAEA,KAAKn5C,CAAA,GAAI,GAAGA,CAAA,IAAK+E,IAAA,CAAK7E,MAAA,EAAQF,CAAA,IAAK;IACjC,KAAKm5C,CAAA,GAAI,GAAGA,CAAA,IAAKnR,KAAA,CAAM9nC,MAAA,EAAQi5C,CAAA,IAAK;MAClC,IAAIp0C,IAAA,CAAKlC,MAAA,CAAO7C,CAAA,GAAI,CAAC,MAAMgoC,KAAA,CAAMnlC,MAAA,CAAOs2C,CAAA,GAAI,CAAC,GAAG;QAC9CmkB,MAAA,CAAOt9D,CAAC,EAAEm5C,CAAC,IAAImkB,MAAA,CAAOt9D,CAAA,GAAI,CAAC,EAAEm5C,CAAA,GAAI,CAAC;MACpC,OAAO;QACLmkB,MAAA,CAAOt9D,CAAC,EAAEm5C,CAAC,IAAIxqC,IAAA,CAAKqR,GAAA,CAClBs9C,MAAA,CAAOt9D,CAAA,GAAI,CAAC,EAAEm5C,CAAA,GAAI,CAAC,IAAI;QAAA;QACvBxqC,IAAA,CAAKqR,GAAA,CACHs9C,MAAA,CAAOt9D,CAAC,EAAEm5C,CAAA,GAAI,CAAC,IAAI;QAAA;QACnBmkB,MAAA,CAAOt9D,CAAA,GAAI,CAAC,EAAEm5C,CAAC,IAAI,CACrB,CACF;MACF;IACF;EACF;EAEA,OAAOmkB,MAAA,CAAOv4D,IAAA,CAAK7E,MAAM,EAAE8nC,KAAA,CAAM9nC,MAAM;AACzC;AAUO,IAAMq9D,oBAAA,GAAN,cAAmCtG,gBAAA,CAAiC;EAWzE/yD,YAAYg6B,OAAA,EAAkB34B,OAAA,EAAuC;IACnE,MAAM;MAAEi4D,kBAAA;MAAoBC,gBAAA;MAAkBC,aAAA;MAAe,GAAGC;IAAY,IAC1Ep4D,OAAA,IAAW,CAAC;IACd,MAAMo4D,WAAW;IAbnB,KAASx2D,IAAA,GAAO;IAqChB,KAAA8uD,eAAA,GAAmBC,eAAA,IAA6B;MAC9C,MAAMC,iBAAA,GAAoB,OAAOD,eAAA,KAAoB;MACrD,OAAO,KAAKH,QAAA,IAAY,CAAC,KAAKM,SAAA,KAAcF,iBAAA,IAAqB,KAAKnlC,OAAA;IACxE;IAEA,KAAA0sC,aAAA,GAAiB7V,IAAA,IAAiBA,IAAA;IAElC,KAAA+V,qBAAA,GAAwB,MAAM;MAC5B,MAAMC,WAAA,GAAcr3D,MAAA,CAAOsxC,MAAA,CAAO,KAAK5Z,OAAA,CAAQpY,KAAA,CAAMqY,OAAA,IAAW,CAAC,CAAC,EAAEz7B,GAAA,CAClE,CAAC;QAAE0vB;MAAK,MAAMA,IAChB;MACA,MAAM0rC,YAAA,GAAet3D,MAAA,CAAOsxC,MAAA,CAAO,KAAK5Z,OAAA,CAAQpY,KAAA,CAAMyc,QAAA,IAAY,CAAC,CAAC;MACpE,MAAMu2B,KAAA,GAAQ,CAAC,GAAG+E,WAAA,EAAa,GAAGC,YAAY;MAE9C,MAAMC,WAAA,GAAc,CAAC;MAErBjF,KAAA,CAAM1vD,OAAA,CAASgpB,IAAA,IAAS;QACtB,IAAIA,IAAA,IAAQ,CAAC2rC,WAAA,CAAY3rC,IAAA,CAAKhuB,EAAE,GAAG;UACjC25D,WAAA,CAAY3rC,IAAA,CAAKhuB,EAAE,IAAIguB,IAAA;QACzB;MACF,CAAC;MAED,OAAO5rB,MAAA,CAAOsxC,MAAA,CAAOimB,WAAW;IAClC;IAEA,KAAAC,oBAAA,GAAwB5H,WAAA,IAAwB;MAC9C,MAAM;QAAEqH;MAAiB,IAAI,KAAK7tD,MAAA;MAClC,IAAI,CAAC6tD,gBAAA,EAAkB,OAAO,EAAC;MAE/B,OAAO,KAAKG,qBAAA,CAAsB,EAC/BnsD,MAAA,CAAQ2gB,IAAA,IAAS;QAChB,IAAIA,IAAA,CAAKhuB,EAAA,KAAO,KAAKD,MAAA,CAAO4gC,MAAA,EAAQ,OAAO;QAC3C,IAAI,CAACqxB,WAAA,EAAa,OAAO;QAEzB,MAAM6H,SAAA,GAAY,KAAKP,aAAA,CAAcN,gBAAA,CAAiBhrC,IAAA,CAAKhuB,EAAE,CAAC,EAAE6C,WAAA,CAAY;QAC5E,MAAMi3D,WAAA,GAAc,KAAKR,aAAA,CAAcN,gBAAA,CAAiBhrC,IAAA,CAAKrtB,IAAI,CAAC,EAAEkC,WAAA,CAAY;QAChF,MAAMk3D,YAAA,GAAe,KAAKT,aAAA,CACxBN,gBAAA,CAAiBhH,WAAW,CAC9B,EAAEnvD,WAAA,CAAY;QAEd,MAAMm3D,WAAA,GAAc;QACpB,MAAMC,UAAA,GAAaZ,gBAAA,CAAiBz2D,KAAA,CAAM,EAAEo3D,WAAA,GAAc,EAAE,EAAE3yB,QAAA,CAAS,GAAG;QAE1E,IAAIyyB,WAAA,EAAa;UACf,MAAMI,YAAA,GAAcjB,oBAAA,CAAqBc,YAAA,EAAcD,WAAW;UAClE,IACEA,WAAA,CAAYzyB,QAAA,CAAS0yB,YAAY,KAChCG,YAAA,IAAeF,WAAA,IAAeC,UAAA,EAC/B;YACA,OAAO;UACT;QACF;QAEA,MAAME,WAAA,GAAclB,oBAAA,CAAqBc,YAAA,EAAcF,SAAS;QAEhE,OACEA,SAAA,CAAUxyB,QAAA,CAAS0yB,YAAY,KAAMI,WAAA,IAAeH,WAAA,IAAeC,UAAA;MAEvE,CAAC,EACA5pC,IAAA,CAAK,CAAC3wB,CAAA,EAAGJ,CAAA,KAAM;QACd,IAAI,CAAC,KAAK86D,UAAA,EAAY,QAAQ16D,CAAA,CAAEiB,IAAA,IAAQ,IAAI05D,aAAA,CAAc/6D,CAAA,CAAEqB,IAAA,IAAQ,EAAE;QAGtE,WAAW,CAAC8vB,KAAA,EAAOC,SAAS,KAAKtuB,MAAA,CAAOqQ,OAAA,CAAQ,KAAK2nD,UAAU,GAAG;UAChE,MAAME,MAAA,GAAS56D,CAAA,CAAE+wB,KAA2B;UAC5C,MAAM8pC,MAAA,GAASj7D,CAAA,CAAEmxB,KAA2B;UAE5C,IAAI6pC,MAAA,KAAWC,MAAA,EAAQ;UACvB,OAAO7pC,SAAA,KAAc,IACjBvxB,MAAA,CAAOm7D,MAAA,IAAU,EAAE,EAAED,aAAA,CAAcl7D,MAAA,CAAOo7D,MAAA,IAAU,EAAE,CAAC,IACvDp7D,MAAA,CAAOo7D,MAAA,IAAU,EAAE,EAAEF,aAAA,CAAcl7D,MAAA,CAAOm7D,MAAA,IAAU,EAAE,CAAC;QAC7D;QACA,OAAO;MACT,CAAC;IACL;IAEA,KAAAE,uBAAA,GAA2BxI,WAAA,KAAyB;MAClDl3B,OAAA,EAAS;QACPy5B,GAAA,EAAK,CACH;UAAEv0D,EAAA,EAAI;YAAEw0D,aAAA,EAAexC;UAAY;QAAE,GACrC;UAAErxD,IAAA,EAAM;YAAE6zD,aAAA,EAAexC;UAAY;QAAE,EACzC;QACA,GAAG,KAAKyI;MACV;MACApqC,IAAA,EAAM,KAAKqqC,QAAA,IAAa,CAAC;QAAE/5D,IAAA,EAAM;MAAE,GAAG;QAAEX,EAAA,EAAI;MAAE,CAAC;MAAA;MAC/CmB,OAAA,EAAS;QAAE,GAAG,KAAKszD,aAAA;QAAelxB,KAAA,EAAO,KAAKiuB,QAAA;QAAUl4B,MAAA,EAAQ,KAAKA;MAAO;IAC9E;IAEA,KAAAqhC,yBAAA,GAA6B3I,WAAA,IAAwB;MAEnD,MAAM4I,kBAAA,GAAqB;MAC3B,IAAIvqC,IAAA,GAAmB,CAAC;QAAEuQ,OAAA,EAAS;MAAE,CAAC;MACtC,IAAI,CAAC,KAAKw5B,UAAA,EAAY;QACpB/pC,IAAA,GAAO,CAAC;UAAEuQ,OAAA,EAAS;QAAE,CAAC;MACxB,WAAWllC,KAAA,CAAMuH,OAAA,CAAQ,KAAKm3D,UAAU,GAAG;QACzC/pC,IAAA,GAAO,KAAK+pC,UAAA,CAAW,CAAC;MAC1B,WAAWh4D,MAAA,CAAO+C,IAAA,CAAK,KAAKi1D,UAAU,EAAEt+D,MAAA,KAAW8+D,kBAAA,EAAoB;QACrEvqC,IAAA,GAAO,KAAK+pC,UAAA;MACd;MACA,OAAO;QAAA;QAELt/B,OAAA,EACE,KAAK+/B,aAAA,IAAkB;UAAEl6D,IAAA,EAAM;YAAE6zD,aAAA,EAAexC;UAAY;QAAE;QAAA;QAChE3hC,IAAA;QACAlvB,OAAA,EAAS;UAAE,GAAG,KAAKszD,aAAA;UAAelxB,KAAA,EAAO,KAAKiuB,QAAA;UAAUl4B,MAAA,EAAQ,KAAKA;QAAO;MAC9E;IACF;IAEA,KAAAq7B,UAAA,GAAa,MAAO3C,WAAA,IAAwB;MAC1C,MAAM;QAAEl3B,OAAA;QAASzK,IAAA;QAAMlvB;MAAQ,IAAI,KAAKq5D,uBAAA,CAAwBxI,WAAW;MAC3E,MAAM;QAAE0C;MAAM,IAAI,MAAM,KAAK30D,MAAA,CAAO40D,UAAA,CAAW75B,OAAA,EAASzK,IAAA,EAAMlvB,OAAO;MACrE,OAAOuzD,KAAA;IACT;IAEA,KAAAoG,YAAA,GAAe,MAAO9I,WAAA,IAAwB;MAC5C,MAAM;QAAEl3B,OAAA;QAASzK,IAAA;QAAMlvB;MAAQ,IAAI,KAAKw5D,yBAAA,CAA0B3I,WAAW;MAC7E,MAAMtmD,QAAA,GAAW,MAAM,KAAKouB,OAAA,CAAQghC,YAAA,CAAahgC,OAAA,EAASzK,IAAA,EAAMlvB,OAAO;MAEvE,OAAOuK,QAAA,CAASquB,OAAA,CAAQz7B,GAAA,CAAKm8B,MAAA,IAAWA,MAAA,CAAOzM,IAAI;IACrD;IA6BA,KAAA+sC,WAAA,GAAel8D,IAAA,IAA2B;MACxC,MAAM;QAAEw6D;MAAiB,IAAI,KAAK7tD,MAAA;MAClC,IAAI,CAAC6tD,gBAAA,EAAkB,OAAO,EAAC;MAE/B,MAAM;QAAEn7B;MAAW,IAAI,KAAKn+B,MAAA;MAC5B,IAAIs5D,gBAAA,CAAiBhyB,QAAA,CAAS,SAAS,KAAK,CAACnJ,UAAA,CAAWpiC,MAAA,EAAQ;QAC9D,OAAO,EAAC;MACV;MACA,IAAI,CAACoiC,UAAA,CAAWpiC,MAAA,EAAQ,OAAO+C,IAAA;MAE/B,IAAIw6D,gBAAA,CAAiBhyB,QAAA,CAAS,SAAS,GAAG;QACxC,OAAOxoC,IAAA,CAAKwO,MAAA,CAAQ2tD,UAAA,IAClB98B,UAAA,CAAW/wB,IAAA,CAAM8tD,IAAA,IAASA,IAAA,CAAKnwD,MAAA,CAAO9K,EAAA,KAAOg7D,UAAA,CAAWh7D,EAAE,CAC5D;MACF;MACA,OAAOnB,IAAA,CAAKwO,MAAA,CAAQ2tD,UAAA,IAClB98B,UAAA,CAAWg9B,KAAA,CAAOD,IAAA,IAASA,IAAA,CAAKnwD,MAAA,CAAO9K,EAAA,KAAOg7D,UAAA,CAAWh7D,EAAE,CAC7D;IACF;IA7LE,KAAKD,MAAA,GAAS+5B,OAAA,CAAQsF,SAAA,CAAU;IAChC,KAAKtF,OAAA,GAAUA,OAAA;IACf,KAAKtuB,MAAA,GAAS;MAAE4tD,kBAAA;MAAoBC;IAAiB;IAErD,IAAIC,aAAA,EAAe;MACjB,KAAKA,aAAA,GAAgBA,aAAA;IACvB;EACF;EAEA,IAAI6B,wCAAA,EAA0C;IAC5C,MAAMC,kBAAA,GAAqBh5D,MAAA,CAAO+C,IAAA,CAAK,KAAK20B,OAAA,CAAQpY,KAAA,CAAMqY,OAAA,IAAW,CAAC,CAAC,EAAEj+B,MAAA;IACzE,OAAOs/D,kBAAA,GAAqBpuC,yCAAA;EAC9B;EAEAqlC,yBAAyBP,eAAA,EAAyB;IAChD,MAAM0F,QAAA,GAAW,MAAMnF,wBAAA,CAAyBP,eAAe;IAC/D,MAAM;MAAEM;IAAM,IAAI,KAAK1wC,KAAA,CAAMqnB,cAAA,CAAe;IAC5C,OAAO;MACL,GAAGyuB,QAAA;MACHpF;MAAA;IACF;EACF;EA2HA,MAAMxuB,MAAMouB,WAAA,EAAqB;IAC/B,IAAI0C,KAAA;IACJ,MAAM2G,mBAAA,GACJ,KAAKF,uCAAA,IAA2C,CAACnJ,WAAA;IAEnD,IAAI,KAAKxmD,MAAA,CAAO4tD,kBAAA,EAAoB;MAClC1E,KAAA,GAAQ,MAAM,KAAKC,UAAA,CAAW3C,WAAW;IAC3C,WAAWqJ,mBAAA,EAAqB;MAC9B3G,KAAA,GAAQ,KAAKkF,oBAAA,CAAqB5H,WAAW;IAC/C,OAAO;MACL0C,KAAA,GAAQ,MAAM,KAAKoG,YAAA,CAAa9I,WAAW;IAC7C;IAEA,OAAO;MACLI,KAAA,EAAOsC,KAAA,CAAMp2D,GAAA,CACV0vB,IAAA,KACE;QACC,GAAGA,IAAA;QACH,GAAGmpC,iCAAA,CAAkC;UACnCC,WAAA,EAAappC,IAAA,CAAKrtB,IAAA,IAAQqtB,IAAA,CAAKhuB,EAAA;UAC/Bq3D,WAAA,EAAa,KAAKrF;QACpB,CAAC;MACH,EACJ;IACF;EACF;EAsBAkB,mBAAmBd,KAAA,EAAyB;IAC1C,OAAO,KAAK2I,WAAA,CAAY3I,KAAK;EAC/B;AACF;AAEA,IAAMkJ,gBAAA,GAAiD;EAAEvD,QAAA,EAAU;EAAGnC,OAAA,EAAS;AAAI;AAEnF,IAAM2F,4BAAA,GAAgCP,UAAA,IAA6C;EAEjF,MAAM;IAAE1D,oBAAA;IAAsB,GAAGkE;EAAa,IAAIR,UAAA;EAClD,OAAOQ,YAAA;AACT;AA0BO,IAAMC,wBAAA,GAA2BA,CACtC3hC,OAAA,EACA34B,OAAA,KAGuB;EACvB,MAAM82D,YAAA,GAAejqB,SAAA,CAAUstB,gBAAA,EAAiBn6D,OAAA,IAAW,CAAC,CAAC;EAC7D,IAAI+2D,YAAA;EACJ,IAAI/2D,OAAA,EAAS+2D,YAAA,EAAc;IACzBA,YAAA,GAAe/2D,OAAA,CAAQ+2D,YAAA;IACvBA,YAAA,CAAavF,UAAA,CAAW;EAC1B,OAAO;IACLuF,YAAA,GAAe,IAAIiB,oBAAA,CAAqBr/B,OAAO;EACjD;EACAo+B,YAAA,CAAaxG,QAAA,CAAS;EACtB,OAAO;IACL1xD,EAAA,EAAI;IACJkQ,QAAA,EAAU;MACRkhD,QAAA,EAAUA,CAAC;QAAE1vC,KAAA;QAAO/Z,IAAA;QAAMkiD,QAAA;QAAUE;MAAQ,MAAM;QAChD,IAAI,CAACroC,KAAA,CAAM00C,SAAA,EAAW,OAAOrM,OAAA,CAAQ;QAErC,MAAMsO,gBAAA,GAAmB1C,uBAAA,CAAwB;UAC/CC,OAAA,EAASqC,YAAA,CAAarC,OAAA;UACtBnS,IAAA,EAAM/hC,KAAA,CAAM+hC,IAAA,CAAK7gD,KAAA,CAAM,GAAG8e,KAAA,CAAM00C,SAAA,CAAUl5D,GAAG;QAC/C,CAAC;QAED,MAAMw+D,kBAAA,GACJrD,gBAAA,IAAoBA,gBAAA,CAAiBv8D,MAAA,KAAWm8D,YAAA,CAAaF,QAAA;QAE/D,IAAI2D,kBAAA,EAAoB;UACtBxD,YAAA,CAAatF,qBAAA,CAAsB;QACrC;QAEA,MAAM2F,iBAAA,GACJ,CAACF,gBAAA,IAAoBA,gBAAA,CAAiBv8D,MAAA,GAASm8D,YAAA,CAAaF,QAAA;QAE9D,IAAIQ,iBAAA,EAAmB;UACrB,MAAMC,mBAAA,GAAsB92C,KAAA,CAAM02C,WAAA,EAAaxC,OAAA,KAAYqC,YAAA,CAAarC,OAAA;UACxE,MAAM4B,QAAA,GAAW;YAAE,GAAG91C;UAAM;UAC5B,IAAI82C,mBAAA,EAAqB;YACvB,OAAOhB,QAAA,CAASY,WAAA;UAClB;UACA,OAAOzwD,IAAA,CAAK6vD,QAAQ;QACtB;QAEAU,YAAA,CAAa1sD,MAAA,CAAO6tD,gBAAA,GAAmB33C,KAAA,CAAM+hC,IAAA;QAE7C,OAAOoG,QAAA,CAAS;UACd,GAAGnoC,KAAA;UACH02C,WAAA,EAAa;YACXx0B,KAAA,EAAOy0B,gBAAA,CAAiBz1D,KAAA,CAAM,CAAC;YAC/Bs1D,YAAA;YACAtC,OAAA,EAASqC,YAAA,CAAarC;UACxB;QACF,CAAC;MACH;MACAvE,sBAAA,EAAwBA,CAAC;QAAE3vC,KAAA;QAAOmoC,QAAA;QAAUE;MAAQ,MAAM;QACxD,MAAM;UAAE0O;QAAmB,IAAI/2C,KAAA,CAAMg3C,MAAA,IAAU,CAAC;QAChD,IAAI,CAACD,kBAAA,IAAsB/2C,KAAA,CAAM02C,WAAA,EAAaxC,OAAA,KAAYqC,YAAA,CAAarC,OAAA,EACrE,OAAO7L,OAAA,CAAQ;QAEjBmO,YAAA,CAAatF,qBAAA,CAAsB;QACnC,OAAO/I,QAAA,CAAS;UACd,GAAGnoC,KAAA;UACH,GAAGw0C,qBAAA,CAAsB;YACvBC,UAAA,EAAY,IAAIsC,kBAAA,CAAmB93D,IAAA,IAAQ83D,kBAAA,CAAmBz4D,EAAE;YAChEo2D,SAAA,EAAW10C,KAAA,CAAM00C,SAAA;YACjB3S,IAAA,EAAM/hC,KAAA,CAAM+hC,IAAA;YACZmS,OAAA,EAASqC,YAAA,CAAarC;UACxB,CAAC;UACD9F,cAAA,EAAgBpuC,KAAA,CAAMouC,cAAA,CAAe/iD,MAAA,CACnCwuD,4BAAA,CAA6B9C,kBAAkB,CACjD;UACAL,WAAA,EAAa;QACf,CAAC;MACH;IACF;EACF;AACF;;;AC3YO,IAAMuD,yCAAA,GACXttB,QAAA,KACyC;EACzCruC,EAAA,EAAI;EACJkQ,QAAA,EAAU;IACRkhD,QAAA,EAAUA,CAAC;MAAE1vC,KAAA;MAAO/Z,IAAA;MAAMoiD;IAAQ,MAAM;MACtC,MAAM;QAAE6R;MAAgB,IAAIvtB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,IAAQ,CAAC;MACrD,IAAI,OAAOmY,eAAA,KAAoB,YAAYl6C,KAAA,CAAM+hC,IAAA,CAAK3nD,MAAA,GAAS8/D,eAAA,EAAiB;QAC9El6C,KAAA,CAAM+hC,IAAA,GAAO/hC,KAAA,CAAM+hC,IAAA,CAAK7gD,KAAA,CAAM,GAAGg5D,eAAe;QAChD,OAAOj0D,IAAA,CAAK;UACV,GAAG+Z,KAAA;UACH+hC,IAAA,EAAM/hC,KAAA,CAAM+hC;QACd,CAAC;MACH;MACA,OAAOsG,OAAA,CAAQ;IACjB;IACAsH,sBAAA,EAAwBA,CAAC;MAAEtH;IAAQ,MAAMA,OAAA,CAAQ;EACnD;AACF;;;ACMO,IAAM8R,8BAAA,GAAN,cAEGvT,kBAAA,CAGR;EACAxoD,YAAY;IAAEuuC;EAAS,GAA0C;IAC/D,MAAM;IACN,KAAKl+B,GAAA,CAAI,CACPwrD,yCAAA,CAA0CttB,QAAQ,GAClDotB,wBAAA,CAAyBptB,QAAA,CAASvU,OAAO,GACzCk+B,wBAAA,CAAyB3pB,QAAA,CAASvU,OAAO,EAC1C;EACH;EAEA,MAAM4vB,QAAQ;IACZF,SAAA;IACAC,YAAA,EAAcQ;EAChB,GAEE;IACA,MAAMlpD,MAAA,GAAS,MAAM,KAAKwoD,sBAAA,CAAuB;MAC/CC,SAAA;MACAC,YAAA,EAAcQ;IAChB,CAAC;IAED,MAAM;MAAErmB,KAAA;MAAOs0B;IAAa,IAAIn3D,MAAA,CAAO2gB,KAAA,CAAM02C,WAAA,IAAgB,CAAC;IAO9DF,YAAA,EAAcl9C,MAAA,CAAO4oB,KAAK,GAAGz4B,KAAA,CAAM4Y,OAAA,CAAQ3X,KAAK;IAEhD,OAAOrL,MAAA;EACT;AACF;;;ACxDO,IAAMguD,WAAA,GAAetL,IAAA,IAAiB;EAC3C,MAAMqY,WAAA,GAAcrY,IAAA,CAAK3+C,IAAA,CAAK;EAC9B,OACEg3D,WAAA,KAAgB,MAChBA,WAAA,KAAgB,OAChBA,WAAA,KAAgB,YAChBA,WAAA,KAAgB,QAChBA,WAAA,KAAgB,QAChBA,WAAA,KAAgB,UAChBA,WAAA,KAAgB,QAChBA,WAAA,KAAgB;AAEpB;AAEA,IAAMC,UAAA,GAAY7tB,CAAC;EACjBG,QAAA;EACA9iC;AACF,MAGyB;EACvB,IAAI,CAACA,OAAA,EAAS;IACZ,MAAMywD,KAAA,GAAO3tB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAK55C,YAAA,IAAgB;IAClD,OAAO;MACLyjB,OAAA,EAAS;MACTwiC,cAAA,EAAgB,EAAC;MACjBrM,IAAA,EAAAuY,KAAA;MACA5F,SAAA,EAAW;QAAEn5D,KAAA,EAAO++D,KAAA,CAAKlgE,MAAA;QAAQoB,GAAA,EAAK8+D,KAAA,CAAKlgE;MAAO;IACpD;EACF;EACA,MAAM2nD,IAAA,GAAOl4C,OAAA,CAAQk4C,IAAA,IAAQ;EAC7B,OAAO;IACLqM,cAAA,GAAiBvkD,OAAA,CAAQgiB,eAAA,IAAmB,EAAC,EAAGjvB,GAAA,CAAKkyB,IAAA,IACnD,OAAOA,IAAA,KAAS,WAAY;MAAExwB,EAAA,EAAIwwB;IAAK,IAAqBA,IAC9D;IACAizB,IAAA;IACA2S,SAAA,EAAW;MAAEn5D,KAAA,EAAOwmD,IAAA,CAAK3nD,MAAA;MAAQoB,GAAA,EAAKumD,IAAA,CAAK3nD;IAAO;EACpD;AACF;AAEO,IAAMmgE,YAAA,GAAN,MAAmB;EAKxBn8D,YAAY;IAAEuuC,QAAA;IAAU9iC;EAAQ,GAAwB;IAqFxD,KAAA2iC,SAAA,GAAY,CAAC;MAAE3iC;IAAQ,IAA+C,CAAC,MAAM;MAC3E,KAAKmW,KAAA,CAAM/Z,IAAA,CAAKo0D,UAAA,CAAU;QAAE1tB,QAAA,EAAU,KAAKA,QAAA;QAAU9iC;MAAQ,CAAC,CAAC;IACjE;IAUA,KAAA2wD,mBAAA,GAAuBluC,IAAA,IAAuB;MAC5C,MAAM8hC,cAAA,GAAiB,CAAC,GAAG,KAAKA,cAAc;MAC9C,MAAMqM,iBAAA,GAAoBrM,cAAA,CAAel0B,SAAA,CAAWm0B,CAAA,IAAMA,CAAA,CAAE/vD,EAAA,KAAOguB,IAAA,CAAKhuB,EAAE;MAC1E,IAAIm8D,iBAAA,IAAqB,GAAG;QAC1BrM,cAAA,CAAerpC,MAAA,CAAO01C,iBAAA,EAAmB,GAAGnuC,IAAI;QAChD,KAAKtM,KAAA,CAAMkmB,WAAA,CAAY;UAAEkoB;QAAe,CAAC;MAC3C,OAAO;QACLA,cAAA,CAAe1yD,IAAA,CAAK4wB,IAAI;QACxB,KAAKtM,KAAA,CAAMkmB,WAAA,CAAY;UAAEkoB;QAAe,CAAC;MAC3C;IACF;IAEA,KAAAsM,gBAAA,GAAoB/6B,MAAA,IAClB,KAAK3f,KAAA,CAAMqnB,cAAA,CAAe,EAAE+mB,cAAA,CAAep3B,IAAA,CAAMq3B,CAAA,IAAoBA,CAAA,CAAE/vD,EAAA,KAAOqhC,MAAM;IAEtF,KAAAg7B,mBAAA,GAAuBh7B,MAAA,IAAmB;MACxC,MAAM86B,iBAAA,GAAoB,KAAKrM,cAAA,CAAel0B,SAAA,CAAWm0B,CAAA,IAAMA,CAAA,CAAE/vD,EAAA,KAAOqhC,MAAM;MAC9E,IAAI86B,iBAAA,KAAsB,IAAI;MAC9B,MAAMrM,cAAA,GAAiB,CAAC,GAAG,KAAKA,cAAc;MAC9CA,cAAA,CAAerpC,MAAA,CAAO01C,iBAAA,EAAmB,CAAC;MAC1C,KAAKz6C,KAAA,CAAMkmB,WAAA,CAAY;QAAEkoB;MAAe,CAAC;IAC3C;IAEA,KAAAwM,UAAA,GAAchvC,OAAA,IAAoC;MAChD,IAAIA,OAAA,EAAS3sB,IAAA,KAAS,KAAK2sB,OAAA,EAAS3sB,IAAA,EAAM;MAC1C,KAAK+gB,KAAA,CAAMkmB,WAAA,CAAY;QAAEta;MAAQ,CAAC;IACpC;IAEA,KAAAivC,OAAA,GAAW9Y,IAAA,IAAiB;MAC1B,IAAI,CAAC,KAAKF,OAAA,IAAWE,IAAA,KAAS,KAAKA,IAAA,EAAM;MACzC,KAAK/hC,KAAA,CAAMkmB,WAAA,CAAY;QAAE6b;MAAK,CAAC;IACjC;IAEA,KAAA+Y,YAAA,GAAgBpG,SAAA,IAA6B;MAC3C,MAAMqG,gBAAA,GACJrG,SAAA,CAAUn5D,KAAA,KAAU,KAAKm5D,SAAA,CAAUn5D,KAAA,IAASm5D,SAAA,CAAUl5D,GAAA,KAAQ,KAAKk5D,SAAA,CAAUl5D,GAAA;MAC/E,IAAI,CAAC,KAAKqmD,OAAA,IAAW,CAACkZ,gBAAA,EAAkB;MACxC,KAAK/6C,KAAA,CAAMkmB,WAAA,CAAY;QAAEwuB;MAAU,CAAC;IACtC;IAEA,KAAAD,UAAA,GAAa,OAAO;MAClB1S,IAAA;MACA2S;IACF,MAGM;MACJ,IAAI,CAAC,KAAK7S,OAAA,EAAS;MAEnB,MAAMmZ,cAAA,GAAgCtG,SAAA,IAAa,KAAKA,SAAA;MACxD,MAAM;QAAEwF;MAAgB,IAAI,KAAKvtB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,IAAQ,CAAC;MAC1D,MAAMkZ,WAAA,GAAc,KAAKlZ,IAAA;MACzB,MAAMmZ,cAAA,GAAiB,CACrBD,WAAA,CAAY/5D,KAAA,CAAM,GAAG85D,cAAA,CAAez/D,KAAK,GACzCwmD,IAAA,EACAkZ,WAAA,CAAY/5D,KAAA,CAAM85D,cAAA,CAAex/D,GAAG,EACtC,CAAEG,IAAA,CAAK,EAAE;MACT,MAAM86D,SAAA,GAAYyE,cAAA,CAAeh6D,KAAA,CAC/B,GACA,OAAOg5D,eAAA,KAAoB,WAAWA,eAAA,GAAkBgB,cAAA,CAAe9gE,MACzE;MACA,MAAM+gE,sBAAA,GACJF,WAAA,CAAY/5D,KAAA,CAAM,GAAG85D,cAAA,CAAez/D,KAAK,EAAEnB,MAAA,GAAS2nD,IAAA,CAAK3nD,MAAA;MAC3D,MAAMghE,cAAA,GACJD,sBAAA,IAA0B1E,SAAA,CAAUr8D,MAAA,GAChCq8D,SAAA,CAAUr8D,MAAA,GACV6gE,WAAA,CAAY/5D,KAAA,CAAM,GAAGi6D,sBAAsB,EAAE/gE,MAAA;MAEnD,MAAM,KAAKihE,YAAA,CAAa;QACtBtZ,IAAA,EAAM0U,SAAA;QACN/B,SAAA,EAAW;UACTn5D,KAAA,EAAO6/D,cAAA;UACP5/D,GAAA,EAAK4/D;QACP;MACF,CAAC;IACH;IAEA,KAAAE,aAAA,GAAgB,CAAC;MACfjhD,IAAA,GAAO;MACPq6C,SAAA;MACAp6C,IAAA,GAAO;IACT,MAIM;MACJ,IAAI,CAAC,KAAKunC,OAAA,EAAS;MACnB,MAAM0Z,gBAAA,GAAkC7G,SAAA,IAAa,KAAKA,SAAA;MAC1D,MAAM8G,aAAA,GAAgB,KAAKzZ,IAAA,CAAK7gD,KAAA,CAAM,GAAGq6D,gBAAA,CAAiBhgE,KAAK;MAC/D,MAAMkgE,YAAA,GAAe,KAAK1Z,IAAA,CAAK7gD,KAAA,CAAMq6D,gBAAA,CAAiBhgE,KAAA,EAAOggE,gBAAA,CAAiB//D,GAAG;MACjF,MAAMkgE,YAAA,GAAe,KAAK3Z,IAAA,CAAK7gD,KAAA,CAAMq6D,gBAAA,CAAiB//D,GAAG;MACzD,MAAMw/D,cAAA,GAAiB;QACrBz/D,KAAA,EAAOigE,aAAA,CAAcphE,MAAA,GAASigB,IAAA,CAAKjgB,MAAA;QACnCoB,GAAA,EAAKggE,aAAA,CAAcphE,MAAA,GAASigB,IAAA,CAAKjgB,MAAA,GAASqhE,YAAA,CAAarhE;MACzD;MACA,KAAK4lB,KAAA,CAAMkmB,WAAA,CAAY;QACrB6b,IAAA,EAAM,CAACyZ,aAAA,EAAenhD,IAAA,EAAMohD,YAAA,EAAcnhD,IAAA,EAAMohD,YAAY,EAAE//D,IAAA,CAAK,EAAE;QACrE+4D,SAAA,EAAWsG;MACb,CAAC;IACH;IAEA,KAAAW,cAAA,GAAkBjF,WAAA,IAA6B;MAC7C,KAAK12C,KAAA,CAAMkmB,WAAA,CAAY;QAAEwwB;MAAY,CAAC;IACxC;IAEA,KAAAkF,gBAAA,GAAmB,MAAM;MACvB,MAAM;QAAElF;MAAY,IAAI,KAAK12C,KAAA,CAAMqnB,cAAA,CAAe;MAClD,IAAI,CAACqvB,WAAA,EAAa;MAClB,KAAK12C,KAAA,CAAMkmB,WAAA,CAAY;QAAEwwB,WAAA,EAAa;MAAU,CAAC;IACnD;IAKA;IAAA;IAAA,KAAA2E,YAAA,GAAe,OAAO;MACpBtZ,IAAA;MACA2S;IACF,MAGM;MACJ,IAAI,CAAC,KAAK7S,OAAA,EAAS;MACnB,MAAMpmD,MAAA,GAAS,MAAM,KAAKogE,kBAAA,CAAmB7T,OAAA,CAAQ;QACnDF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZ,GAAG,KAAK/nC,KAAA,CAAMqnB,cAAA,CAAe;UAC7B0a,IAAA;UACA2S;QACF;MACF,CAAC;MACD,IAAIj5D,MAAA,CAAO8O,MAAA,KAAW,WAAW;MACjC,KAAKyV,KAAA,CAAM/Z,IAAA,CAAKxK,MAAA,CAAOukB,KAAK;MAE5B,IAAI,KAAKlW,MAAA,CAAOq4C,mBAAA,IAAuBJ,IAAA,EAAM;QAC3Cr1B,uBAAA,CACE,KAAK0L,OAAA,CAAQ0jC,SAAA,CAAU,KAAKnvB,QAAA,CAASuiB,QAAA,IAAY,MAAS,GAC1D,oBACF;MACF;IACF;IAGA;IAAA,KAAA6M,YAAA,GAAe,MAAO3yD,MAAA,IAA4C;MAChE,IAAI,CAAC,KAAKy4C,OAAA,EAAS;MACnB,MAAMpmD,MAAA,GAAS,MAAM,KAAKogE,kBAAA,CAAmB7T,OAAA,CAAQ;QACnDF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZ,GAAG,KAAK/nC,KAAA,CAAMqnB,cAAA,CAAe;UAC7B2vB,MAAA,EAAQ;YACND,kBAAA,EAAoB3tD;UACtB;QACF;MACF,CAAC;MACD,IAAI3N,MAAA,EAAQ8O,MAAA,KAAW,WAAW;MAClC,KAAKyV,KAAA,CAAM/Z,IAAA,CAAKxK,MAAA,CAAOukB,KAAK;IAC9B;IA3PE,KAAK2sB,QAAA,GAAWA,QAAA;IAChB,KAAK3sB,KAAA,GAAQ,IAAIgmB,UAAA,CAA8Bq0B,UAAA,CAAU;MAAE1tB,QAAA;MAAU9iC;IAAQ,CAAC,CAAC;IAC/E,KAAKgyD,kBAAA,GAAqB,IAAI1B,8BAAA,CAA+B;MAAExtB;IAAS,CAAC;EAC3E;EAEA,IAAIvU,QAAA,EAAU;IACZ,OAAO,KAAKuU,QAAA,CAASvU,OAAA;EACvB;EAEA,IAAItuB,OAAA,EAAS;IACX,OAAO,KAAK6iC,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA;EAC9B;EAEA,IAAIF,QAAA,EAAU;IACZ,OAAO,KAAKlV,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAKF,OAAA;EACnC;EAEA,IAAIA,QAAQA,OAAA,EAAkB;IAC5B,IAAIA,OAAA,KAAY,KAAKA,OAAA,EAAS;IAC9B,KAAKlV,QAAA,CAASG,YAAA,CAAa;MAAEiV,IAAA,EAAM;QAAEF;MAAQ;IAAE,CAAC;EAClD;EAEA,IAAI15C,aAAA,EAAe;IACjB,OAAO,KAAKwkC,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAK55C,YAAA;EACnC;EAEA,IAAIA,aAAaA,YAAA,EAAkC;IACjD,IAAIA,YAAA,KAAiB,KAAKA,YAAA,EAAc;IACxC,KAAKwkC,QAAA,CAASG,YAAA,CAAa;MAAEiV,IAAA,EAAM;QAAE55C;MAAa;IAAE,CAAC;EACvD;EAEA,IAAI+xD,gBAAA,EAAkB;IACpB,OAAO,KAAKvtB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAKmY,eAAA;EACnC;EAEA,IAAIA,gBAAgBA,eAAA,EAAqC;IACvD,IAAIA,eAAA,KAAoB,KAAKA,eAAA,EAAiB;IAC9C,KAAKvtB,QAAA,CAASG,YAAA,CAAa;MAAEiV,IAAA,EAAM;QAAEmY;MAAgB;IAAE,CAAC;EAC1D;EAEA,IAAIhN,gBAAA,EAAkB;IACpB,OAAO,KAAKvgB,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAKmL,eAAA;EACnC;EAEA,IAAIA,gBAAgBA,eAAA,EAAqC;IACvD,IAAIA,eAAA,KAAoB,KAAKA,eAAA,EAAiB;IAC9C,KAAKvgB,QAAA,CAASG,YAAA,CAAa;MAAEiV,IAAA,EAAM;QAAEmL;MAAgB;IAAE,CAAC;EAC1D;EAEA,IAAI/K,oBAAA,EAAsB;IACxB,OAAO,KAAKxV,QAAA,CAAS7iC,MAAA,CAAOi4C,IAAA,CAAKI,mBAAA;EACnC;EAEA,IAAIA,oBAAoBA,mBAAA,EAA8B;IACpD,IAAIA,mBAAA,KAAwB,KAAKA,mBAAA,EAAqB;IACtD,KAAKxV,QAAA,CAASG,YAAA,CAAa;MAAEiV,IAAA,EAAM;QAAEI;MAAoB;IAAE,CAAC;EAC9D;EAAA;EAIA,IAAIv2B,QAAA,EAAU;IACZ,OAAO,KAAK5L,KAAA,CAAMqnB,cAAA,CAAe,EAAEzb,OAAA;EACrC;EAEA,IAAIwiC,eAAA,EAAiB;IACnB,OAAO,KAAKpuC,KAAA,CAAMqnB,cAAA,CAAe,EAAE+mB,cAAA;EACrC;EAEA,IAAIsG,UAAA,EAAY;IACd,OAAO,KAAK10C,KAAA,CAAMqnB,cAAA,CAAe,EAAEqtB,SAAA;EACrC;EAEA,IAAIgC,YAAA,EAAc;IAChB,OAAO,KAAK12C,KAAA,CAAMqnB,cAAA,CAAe,EAAEqvB,WAAA;EACrC;EAEA,IAAI3U,KAAA,EAAO;IACT,OAAO,KAAK/hC,KAAA,CAAMqnB,cAAA,CAAe,EAAE0a,IAAA;EACrC;EAEA,IAAIsL,YAAA,EAAc;IAChB,OAAOA,WAAA,CAAY,KAAKtL,IAAI;EAC9B;EAMAia,kBAAkBhJ,KAAA,EAAuB;IACvC,KAAKhzC,KAAA,CAAMkmB,WAAA,CAAY;MAAEkoB,cAAA,EAAgB4E;IAAM,CAAC;EAClD;EAEAiJ,aAAA,EAAe;IACb,KAAKj8C,KAAA,CAAMkmB,WAAA,CAAY;MAAEta,OAAA,EAAS;IAAK,CAAC;EAC1C;EAAA;AA+JF;;;ACpTO,IAAeswC,kBAAA,GAAf,MAAeA,kBAAA,CAAkB;EAAjC99D,YAAA;IACL,KAAQwpC,oBAAA,GAAyC,mBAAI7S,GAAA,CAAI;IAOzD,KAAQonC,QAAA,GAAW;EAAA;EAAA;AAAA;AAAA;AAAA;EAQnB,IAAWC,iBAAA,EAAmB;IAC5B,OAAO,KAAKx0B,oBAAA,CAAqBj/B,IAAA,GAAO;EAC1C;EAEU0zD,uBAAuBC,mBAAA,EAAkC;IACjE,KAAK10B,oBAAA,CAAqB5S,GAAA,CAAIsnC,mBAAmB;EACnD;EAAA;AAAA;AAAA;EAKUC,kBAAA,EAAoB;IAC5B,OAAO,EAAE,KAAKJ,QAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiBOK,wBAAA,EAA2D;IAChE,IAAI,KAAKL,QAAA,GAAW,GAAG;MACrB,KAAKA,QAAA;MACL,OAAOD,kBAAA,CAAkBO,MAAA;IAC3B;IAEA,KAAK70B,oBAAA,CAAqBtkC,OAAA,CAAS+Y,WAAA,IAAgBA,WAAA,CAAY,CAAC;IAChE,KAAKurB,oBAAA,CAAqB74B,KAAA,CAAM;IAChC,KAAKotD,QAAA,GAAW;IAEhB,OAAOD,kBAAA,CAAkBO,MAAA;EAC3B;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AA1DsBP,kBAAA,CAOHO,MAAA,GAASl6D,MAAA,CAAO25D,kBAAA,CAAkBj9D,IAAI;AAPlD,IAAey9D,iBAAA,GAAfR,kBAAA;;;AC+DP,IAAMS,kBAAA,GAAqB;AAC3B,IAAMC,YAAA,GAA0C,CAAC;EAAEpxC,UAAA,EAAY;AAAG,CAAC;AACnE,IAAMqxC,6BAAA,GAAgC;AAE/B,IAAMC,6BAAA,GAAoE;EAC/EC,wBAAA,EAA0B;EAC1B3kC,OAAA,EAAS;EACT4kC,WAAA,EAAa;EACbxxC,UAAA,EAAY;EACZyxC,UAAA,EAAY;EACZC,kBAAA,EAAoB;EACpBzxC,UAAA,EAAY;EACZ+gC,KAAA,EAAO;EACP7vB,eAAA,EAAiB;EACjBwgC,cAAA,EAAgB;EAChBC,cAAA,EAAgB;EAChBC,iBAAA,EAAmB;EACnBC,iBAAA,EAAmB;EACnBxlD,IAAA,EAAM;EACNoU,WAAA,EAAa;EACbgQ,mBAAA,EAAqB;EACrBqhC,KAAA,EAAO;EACP5xC,UAAA,EAAY;AACd;AAGA,IAAM6xC,yBAAA,GAAuDC,UAAA,IAAkB;EAC7E,MAAMjb,MAAA,GAA2B,CAAC;EAElC,WAAW7+C,GAAA,IAAO85D,UAAA,EAAY;IAC5B,IAAIX,6BAAA,CAA8Bn5D,GAA2B,GAAG;MAC9D;IACF;IAEA,MAAM+5D,SAAA,GAAY/5D,GAAA;IAElB6+C,MAAA,CAAOkb,SAAS,IAAID,UAAA,CAAWC,SAAS;EAC1C;EAEA,OAAOlb,MAAA;AACT;AAEO,IAAMmb,MAAA,GAAN,cAAqBjB,iBAAA,CAAkB;EAQ5Ct+D,YAAY;IACVC,MAAA;IACAo/D;EACF,GAGG;IACD,MAAM;IATR,KAAQG,gBAAA,GAA8C,mBAAIza,GAAA,CAAI;IA+E9D,KAAO6M,QAAA,GAAW,MAAM;MACtB,KAAKhwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE23B,MAAA,EAAQ;MAAK,CAAC;IACzC;IAEA,KAAO3N,UAAA,GAAa,MAAM;MACxB,KAAKlwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE23B,MAAA,EAAQ;MAAM,CAAC;IAC1C;IAEA,KAAOC,MAAA,GAAS,YAAY;MAC1B,IAAI,KAAK99C,KAAA,CAAMqnB,cAAA,CAAe,EAAEkpB,SAAA,EAAW;QACzC;MACF;MAEA,KAAKvwC,KAAA,CAAMkmB,WAAA,CAAY;QAAEqqB,SAAA,EAAW;MAAK,CAAC;MAE1C,IAAI;QACF,MAAMxyB,MAAA,GAAS,MAAM,KAAK1/B,MAAA,CAAO0/D,SAAA,CAAU,KAAKz/D,EAAA,EAAI;UAAEq6B,KAAA,EAAO;QAAK,CAAC;QACnE,KAAKqlC,YAAA,CAAajgC,MAAM;MAC1B,UAAE;QACA,KAAK/d,KAAA,CAAMkmB,WAAA,CAAY;UAAEqqB,SAAA,EAAW;QAAM,CAAC;MAC7C;IACF;IAEA,KAAOyN,YAAA,GAAgBjgC,MAAA,IAAmB;MACxC,IAAIA,MAAA,KAAW,MAAM;QAEnB;MACF;MAEA,IAAIA,MAAA,CAAOz/B,EAAA,KAAO,KAAKA,EAAA,EAAI;QACzB,MAAM,IAAI7D,KAAA,CACR,oEACF;MACF;MAEA,MAAM;QACJwjE,SAAA;QACAzb,MAAA;QACA+a,KAAA;QACAW,SAAA;QACAC,aAAA;QACAC,YAAA;QACAtmD,IAAA;QACAumD,UAAA;QACAC,OAAA;QACAC;MACF,IAAIxgC,MAAA,CAAO/d,KAAA,CAAMqnB,cAAA,CAAe;MAGhC,MAAMm3B,cAAA,GAAiBxkE,KAAA,CAAMyQ,IAAA,CAAK,KAAKmzD,gBAAA,CAAiB5rB,MAAA,CAAO,CAAC;MAEhE,KAAKhyB,KAAA,CAAMkmB,WAAA,CAAY;QACrBq3B,KAAA;QACAU,SAAA;QACAzb,MAAA;QACA0b,SAAA;QACAC,aAAA;QACAC,YAAA;QACAtmD,IAAA;QACAumD,UAAA;QACAC,OAAA,EAASE,cAAA,CAAepkE,MAAA,GAASkkE,OAAA,CAAQjzD,MAAA,CAAOmzD,cAAc,IAAIF,OAAA;QAClEC,SAAA;QACAE,YAAA,EAAc;MAChB,CAAC;IACH;IAEA,KAAOC,qBAAA,GAAwB,MAAM;MACnC,IAAI,KAAKtC,gBAAA,EAAkB;QAEzB;MACF;MAEA,KAAKC,sBAAA,CAAuB,KAAKsC,sBAAA,CAAuB,CAAC;MACzD,KAAKtC,sBAAA,CAAuB,KAAKuC,6BAAA,CAA8B,CAAC;MAChE,KAAKvC,sBAAA,CAAuB,KAAKwC,gCAAA,CAAiC,CAAC;MACnE,KAAKxC,sBAAA,CAAuB,KAAKyC,wBAAA,CAAyB,CAAC;MAC3D,KAAKzC,sBAAA,CAAuB,KAAK0C,mBAAA,CAAoB,CAAC;MACtD,KAAK1C,sBAAA,CAAuB,KAAK2C,oBAAA,CAAqB,CAAC;MACvD,KAAK3C,sBAAA,CAAuB,KAAK4C,uBAAA,CAAwB,CAAC;MAC1D,KAAK5C,sBAAA,CAAuB,KAAK6C,uBAAA,CAAwB,CAAC;IAC5D;IAEA,KAAQP,sBAAA,GAAyB,MAC/B,KAAKtgE,MAAA,CAAO8gE,EAAA,CAAG,kBAAmBxjD,KAAA,IAAU;MAC1C,IAAI,CAACA,KAAA,CAAMoiB,MAAA,IAAUpiB,KAAA,CAAMoiB,MAAA,CAAOs/B,iBAAA,KAAsB,KAAK/+D,EAAA,EAAI;QAC/D;MACF;MAEA,MAAMm/D,UAAA,GAAa9hD,KAAA,CAAMoiB,MAAA;MAEzB,KAAK/d,KAAA,CAAMkmB,WAAA,CAAY;QACrBq3B,KAAA,EAAOE,UAAA,CAAWF,KAAA;QAClBgB,SAAA,EAAW,IAAI3mD,IAAA,CAAK6lD,UAAA,CAAW9xC,UAAU;QACzCuyC,SAAA,EAAWT,UAAA,CAAWhyC,UAAA,GAAa,IAAI7T,IAAA,CAAK6lD,UAAA,CAAWhyC,UAAU,IAAI;QAAA;QAErE+2B,MAAA,EAAQgb,yBAAA,CAA0BC,UAAU;MAC9C,CAAC;IACH,CAAC,EAAEphD,WAAA;IAEL,KAAQuiD,6BAAA,GAAgC,MACtC,KAAK5+C,KAAA,CAAMqmB,qBAAA,CACRK,SAAA,KAAe;MACdm3B,MAAA,EAAQn3B,SAAA,CAAUm3B,MAAA;MAClBuB,kBAAA,EAAoBC,sBAAA,CAAuB,KAAKhhE,MAAA,CAAO4gC,MAAM,EAAEyH,SAAS;IAC1E,IACA,CAAC;MAAEm3B,MAAA;MAAQuB;IAAmB,MAAM;MAClC,IAAI,CAACvB,MAAA,IAAU,CAACuB,kBAAA,EAAoB;MACpC,KAAKE,mBAAA,CAAoB;IAC3B,CACF;IAEF,KAAQT,gCAAA,GAAmC,MACzC,KAAK7+C,KAAA,CAAMqmB,qBAAA,CACRK,SAAA,KAAe;MAAEm3B,MAAA,EAAQn3B,SAAA,CAAUm3B,MAAA;MAAQY,YAAA,EAAc/3B,SAAA,CAAU+3B;IAAa,IACjF,CAAC;MAAEZ,MAAA;MAAQY;IAAa,MAAM;MAC5B,IAAIZ,MAAA,IAAUY,YAAA,EAAc;QAC1B,KAAKX,MAAA,CAAO;MACd;IACF,CACF;IAEF,KAAQgB,wBAAA,GAA2B,MACjC,KAAKzgE,MAAA,CAAO8gE,EAAA,CAAG,sBAAuBxjD,KAAA,IAAU;MAC9C,MAAM;QAAEyc;MAAQ,IAAI,KAAKpY,KAAA,CAAMqnB,cAAA,CAAe;MAE9C,IACE,CAAC,KAAKhpC,MAAA,CAAO4gC,MAAA,IACb,KAAK5gC,MAAA,CAAO4gC,MAAA,KAAWtjB,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,IACnCqd,KAAA,CAAMyc,OAAA,EAASI,GAAA,KAAQJ,OAAA,CAAQI,GAAA,EAC/B;QACA;MACF;MAEA,KAAKxY,KAAA,CAAMkmB,WAAA,CAAY;QAAEu4B,YAAA,EAAc;MAAK,CAAC;IAC/C,CAAC,EAAEpiD,WAAA;IAEL,KAAQ0iD,mBAAA,GAAsB,MAC5B,KAAK1gE,MAAA,CAAO8gE,EAAA,CAAG,eAAgBxjD,KAAA,IAAU;MACvC,IAAI,CAAC,KAAKtd,MAAA,CAAO4gC,MAAA,IAAUtjB,KAAA,CAAM9R,OAAA,EAASoyB,SAAA,KAAc,KAAK39B,EAAA,EAAI;QAC/D;MACF;MAEA,MAAMihE,YAAA,GAAe5jD,KAAA,CAAM9R,OAAA,CAAQyiB,IAAA,EAAMhuB,EAAA,KAAO,KAAKD,MAAA,CAAO4gC,MAAA;MAC5D,MAAM;QAAE4+B,MAAA;QAAQ/lD;MAAK,IAAI,KAAKkI,KAAA,CAAMqnB,cAAA,CAAe;MAEnD,KAAKm4B,kBAAA,CAAmB;QACtB31D,OAAA,EAAS8R,KAAA,CAAM9R,OAAA;QAAA;QAAA;QAGf+oB,gBAAA,EAAkB2sC;MACpB,CAAC;MAED,IAAI1B,MAAA,EAAQ;QACV,KAAKyB,mBAAA,CAAoB;MAC3B;MAEA,MAAMG,QAAA,GAA4B,CAAC;MAEnC,WAAW9/B,MAAA,IAAUj/B,MAAA,CAAO+C,IAAA,CAAKqU,IAAI,GAAG;QACtC,MAAM4nD,QAAA,GAAW5nD,IAAA,CAAK6nB,MAAM;QAE5B,IAAI+/B,QAAA,EAAU;UACZ,IAAIC,YAAA,GAAoCD,QAAA;UAExC,IAAI//B,MAAA,KAAWhkB,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;YAG7BqhE,YAAA,GAAe;cACb,GAAGA,YAAA;cACHC,UAAA,EAAYjkD,KAAA,CAAM6P,UAAA,GAAa,IAAI5T,IAAA,CAAK+D,KAAA,CAAM6P,UAAU,IAAI,mBAAI5T,IAAA,CAAK;cACrE0U,IAAA,EAAM3Q,KAAA,CAAM2Q,IAAA;cACZ8yC,kBAAA,EAAoB;YACtB;UACF,WAAWvB,MAAA,IAAUl+B,MAAA,KAAW,KAAKthC,MAAA,CAAO4gC,MAAA,EAAQ,CAEpD,OAAO;YAEL0gC,YAAA,GAAe;cACb,GAAGA,YAAA;cACHP,kBAAA,EAAoBM,QAAA,CAASN,kBAAA,GAAqB;YACpD;UACF;UAEAK,QAAA,CAAS9/B,MAAM,IAAIggC,YAAA;QACrB;MACF;MAEA,KAAK3/C,KAAA,CAAMkmB,WAAA,CAAY;QAAEpuB,IAAA,EAAM2nD;MAAS,CAAC;IAC3C,CAAC,EAAEpjD,WAAA;IAEL,KAAQ2iD,oBAAA,GAAuB,MAC7B,KAAK3gE,MAAA,CAAO8gE,EAAA,CAAG,gBAAiBxjD,KAAA,IAAU;MACxC,IAAI,CAACA,KAAA,CAAM2Q,IAAA,IAAQ,CAAC3Q,KAAA,CAAM6P,UAAA,IAAc,CAAC7P,KAAA,CAAMoiB,MAAA,EAAQ;MACvD,IAAIpiB,KAAA,CAAMoiB,MAAA,CAAOs/B,iBAAA,KAAsB,KAAK/+D,EAAA,EAAI;MAEhD,MAAMqhC,MAAA,GAAShkB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAA;MAC1B,MAAM2/D,SAAA,GAAYtiD,KAAA,CAAM6P,UAAA;MACxB,MAAMc,IAAA,GAAO3Q,KAAA,CAAM2Q,IAAA;MAEnB,KAAKtM,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;QAC5B,GAAGA,OAAA;QACHtuB,IAAA,EAAM;UACJ,GAAGsuB,OAAA,CAAQtuB,IAAA;UACX,CAAC6nB,MAAM,GAAG;YACRigC,UAAA,EAAY,IAAIhoD,IAAA,CAAKqmD,SAAS;YAC9B3xC,IAAA;YACAuzC,iBAAA,EAAmBlkD,KAAA,CAAMmkD,oBAAA;YACzBV,kBAAA,EAAoB;UACtB;QACF;MACF,EAAE;IACJ,CAAC,EAAE/iD,WAAA;IAEL,KAAQ4iD,uBAAA,GAA0B,MAChC,KAAK5gE,MAAA,CAAO8gE,EAAA,CAAG,mBAAoBxjD,KAAA,IAAU;MAC3C,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAAS;MAGpB,IAAI8R,KAAA,CAAM9R,OAAA,CAAQoyB,SAAA,KAAc,KAAK39B,EAAA,EAAI;QACvC,IAAIqd,KAAA,CAAMokD,WAAA,EAAa;UACrB,KAAKC,kBAAA,CAAmB;YAAEn2D,OAAA,EAAS8R,KAAA,CAAM9R;UAAQ,CAAC;QACpD,OAAO;UAEL,KAAK21D,kBAAA,CAAmB;YAAE31D,OAAA,EAAS8R,KAAA,CAAM9R;UAAQ,CAAC;QACpD;MACF;MAGA,IAAI8R,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,KAAO,KAAKA,EAAA,EAAI;QAChC,KAAK2hE,0BAAA,CAA2B;UAAEp2D,OAAA,EAAS8R,KAAA,CAAM9R;QAAQ,CAAC;MAC5D;IACF,CAAC,EAAEwS,WAAA;IAEL,KAAQ6iD,uBAAA,GAA0B,MAAM;MACtC,MAAMgB,UAAA,GAA2B,CAC/B,mBACA,gBACA,oBACA,mBACF;MAEA,MAAMt4B,oBAAA,GAAuBs4B,UAAA,CAAWtjE,GAAA,CACrCujE,SAAA,IACC,KAAK9hE,MAAA,CAAO8gE,EAAA,CAAGgB,SAAA,EAAYxkD,KAAA,IAAU;QACnC,IAAIA,KAAA,CAAM9R,OAAA,EAAS;UACjB,KAAKu2D,iCAAA,CAAkCzkD,KAAA,CAAM9R,OAAO;QACtD;MACF,CAAC,EAAEwS,WACP;MAEA,OAAO,MAAMurB,oBAAA,CAAqBtkC,OAAA,CAAS+Y,WAAA,IAAgBA,WAAA,CAAY,CAAC;IAC1E;IAEA,KAAOmgD,uBAAA,GAA0B,MAAM;MACrC,MAAMC,MAAA,GAAS,MAAMD,uBAAA,CAAwB;MAC7C,KAAKx8C,KAAA,CAAMkmB,WAAA,CAAY;QAAEu4B,YAAA,EAAc;MAAK,CAAC;MAC7C,OAAOhC,MAAA;IACT;IAEA,KAAOuD,kBAAA,GAAqB,CAAC;MAAEn2D;IAAQ,MAAoC;MACzE,MAAM;QAAEy0D;MAAQ,IAAI,KAAKt+C,KAAA,CAAMqnB,cAAA,CAAe;MAE9C,MAAMt6B,KAAA,GAAQ4kB,sBAAA,CAAuB;QACnCC,MAAA,EAAQjB,aAAA,CAAc9mB,OAAO;QAC7BgoB,WAAA,EAAaysC,OAAA;QACbtsC,aAAA,EAAe;QACfD,oBAAA,EAAuBsuC,KAAA,IAAUA,KAAA,CAAM70C,UAAA,CAAW0H,OAAA,CAAQ;QAC1DpB,SAAA,EAAYuuC,KAAA,IAAUA,KAAA,CAAM/hE;MAC9B,CAAC;MAED,IAAIggE,OAAA,CAAQvxD,KAAK,GAAGzO,EAAA,KAAOuL,OAAA,CAAQvL,EAAA,EAAI;QACrC;MACF;MAEA,MAAMgiE,cAAA,GAAiB,CAAC,GAAGhC,OAAO;MAClCgC,cAAA,CAAev7C,MAAA,CAAOhY,KAAA,EAAO,CAAC;MAE9B,KAAKiT,KAAA,CAAMkmB,WAAA,CAAY;QACrBo4B,OAAA,EAASgC;MACX,CAAC;IACH;IAEA,KAAOd,kBAAA,GAAqB,CAAC;MAC3B31D,OAAA;MACA+oB,gBAAA,GAAmB;IACrB,MAGM;MACJ,IAAI/oB,OAAA,CAAQoyB,SAAA,KAAc,KAAK39B,EAAA,EAAI;QACjC,MAAM,IAAI7D,KAAA,CAAM,sCAAsC;MACxD;MAEA,MAAM8lE,gBAAA,GAAmB5vC,aAAA,CAAc9mB,OAAO;MAE9C,IAAIA,OAAA,CAAQU,MAAA,KAAW,UAAU;QAE/B,KAAKqzD,gBAAA,CAAiBh2D,GAAA,CAAI24D,gBAAA,CAAiBjiE,EAAA,EAAIiiE,gBAAgB;MACjE,WAAW,KAAK3C,gBAAA,CAAiBvoD,GAAA,CAAIxL,OAAA,CAAQvL,EAAE,GAAG;QAChD,KAAKs/D,gBAAA,CAAiB/9D,MAAA,CAAOgK,OAAA,CAAQvL,EAAE;MACzC;MAEA,KAAK0hB,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;QAC5B,GAAGA,OAAA;QACHk4B,OAAA,EAAS7rC,gBAAA,CAAiB2T,OAAA,CAAQk4B,OAAA,EAASiC,gBAAA,EAAkB3tC,gBAAgB;MAC/E,EAAE;IACJ;IAEA,KAAOqtC,0BAAA,GAA6B,CAAC;MAAEp2D;IAAQ,MAAoC;MACjF,IAAIA,OAAA,CAAQvL,EAAA,KAAO,KAAKA,EAAA,EAAI;QAC1B,MAAM,IAAI7D,KAAA,CAAM,wCAAwC;MAC1D;MAEA,KAAKulB,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,IAAY;QAC3B,MAAMm6B,gBAAA,GAAmB5vC,aAAA,CAAc9mB,OAAO;QAE9C,OAAO;UACL,GAAGu8B,OAAA;UACH83B,SAAA,EAAWqC,gBAAA,CAAiB90C,UAAA;UAC5B0yC,aAAA,EAAeoC,gBAAA;UACflC,UAAA,EAAYx0D,OAAA,CAAQqiB,WAAA,IAAeka,OAAA,CAAQi4B;QAC7C;MACF,CAAC;IACH;IAEA,KAAO+B,iCAAA,GAAqCv2D,OAAA,IAA6B;MACvE,IAAIA,OAAA,CAAQoyB,SAAA,KAAc,KAAK39B,EAAA,EAAI;QACjC,KAAKkhE,kBAAA,CAAmB;UAAE31D;QAAQ,CAAC;MACrC;MAEA,IAAI,CAACA,OAAA,CAAQoyB,SAAA,IAAapyB,OAAA,CAAQvL,EAAA,KAAO,KAAKA,EAAA,EAAI;QAChD,KAAK2hE,0BAAA,CAA2B;UAAEp2D;QAAQ,CAAC;MAC7C;IACF;IAEA,KAAO22D,UAAA,GAAa,OAAO;MAAEC,KAAA,GAAQ;IAAM,IAAyB,CAAC,MAAM;MACzE,IAAI,KAAKC,cAAA,KAAmB,KAAK,CAACD,KAAA,EAAO;QACvC,OAAO;MACT;MAEA,OAAO,MAAM,KAAKroC,OAAA,CAAQuoC,QAAA,CAAS;QAAEC,SAAA,EAAW,KAAKtiE;MAAG,CAAC;IAC3D;IAEA,KAAQghE,mBAAA,GAAsB/qC,QAAA,CAC5B,MAAM,KAAKisC,UAAA,CAAW,GACtB3D,6BAAA,EACA;MAAE/oC,QAAA,EAAU;IAAK,CACnB;IAEA,KAAO+sC,YAAA,GAAe,CAAC;MACrBh/B,KAAA,GAAQ86B,kBAAA;MACRhuC,IAAA,GAAOiuC,YAAA;MACP,GAAGkE;IACL,IAAyB,CAAC,MACxB,KAAK1oC,OAAA,CAAQ+J,UAAA,CAAW,KAAK7jC,EAAA,EAAI;MAAEujC,KAAA;MAAO,GAAGi/B;IAAa,GAAGnyC,IAAI;IAEnE,KAAOoyC,YAAA,GAAe,CAAC;MAAEl/B,KAAA,GAAQ86B;IAAmB,IAAwB,CAAC,MAC3E,KAAKqE,QAAA,CAASn/B,KAAK;IAErB,KAAOo/B,YAAA,GAAe,CAAC;MAAEp/B,KAAA,GAAQ86B;IAAmB,IAAwB,CAAC,MAC3E,KAAKqE,QAAA,CAAS,CAACn/B,KAAK;IAEtB,KAAQm/B,QAAA,GAAW,MAAOttC,KAAA,IAAkB;MAC1C,MAAM;QAAEkC;MAAW,IAAI,KAAK5V,KAAA,CAAMqnB,cAAA,CAAe;MACjD,MAAM,CAAC65B,UAAA,EAAYC,SAAA,EAAWC,kBAAkB,IAC9C1tC,KAAA,GAAQ,IACH,CAAC,iBAAiB,cAAc,MAAM,IACtC,CAAC,iBAAiB,cAAc,SAAS;MAEhD,IAAIkC,UAAA,CAAWsrC,UAAU,KAAKtrC,UAAA,CAAWurC,SAAS,MAAM,MAAM;MAE9D,MAAME,YAAA,GAAe;QAAE,CAAC3tC,KAAA,GAAQ,IAAI,UAAU,OAAO,GAAGkC,UAAA,CAAWurC,SAAS;MAAE;MAC9E,MAAMt/B,KAAA,GAAQh5B,IAAA,CAAK6wB,GAAA,CAAIhG,KAAK;MAE5B,KAAK1T,KAAA,CAAMkmB,WAAA,CAAY;QAAEtQ,UAAA,EAAY;UAAE,GAAGA,UAAA;UAAY,CAACsrC,UAAU,GAAG;QAAK;MAAE,CAAC;MAE5E,IAAI;QACF,MAAM/jE,IAAA,GAAO,MAAM,KAAK0jE,YAAA,CAAa;UAAE,GAAGQ,YAAA;UAAcx/B;QAAM,CAAC;QAC/D,MAAMy8B,OAAA,GAAUnhE,IAAA,CAAKu1B,QAAA,CAAS91B,GAAA,CAAI+zB,aAAa;QAC/C,MAAM2wC,eAAA,GAAkBhD,OAAA,CAAQlrC,EAAA,CAAGM,KAAA,GAAQ,IAAI,KAAK,CAAC,GAAGp1B,EAAA,IAAM;QAE9D,KAAK0hB,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,IAAY;UAC3B,IAAIm7B,WAAA,GAAcn7B,OAAA,CAAQk4B,OAAA;UAG1B,IAAIA,OAAA,CAAQlkE,MAAA,GAAS,GAAG;YACtBmnE,WAAA,GAAc,CAAC,GAAGn7B,OAAA,CAAQk4B,OAAO;YACjCiD,WAAA,CAAYH,kBAAkB,EAAE,GAAG9C,OAAO;UAC5C;UAEA,OAAO;YACL,GAAGl4B,OAAA;YACHk4B,OAAA,EAASiD,WAAA;YACT3rC,UAAA,EAAY;cACV,GAAGwQ,OAAA,CAAQxQ,UAAA;cACX,CAACurC,SAAS,GAAGhkE,IAAA,CAAKu1B,QAAA,CAASt4B,MAAA,GAASynC,KAAA,GAAQ,OAAOy/B,eAAA;cACnD,CAACJ,UAAU,GAAG;YAChB;UACF;QACF,CAAC;MACH,SAASx2D,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAUvtB,KAAA,CAAgBb,OAAO;QACpD,KAAKmW,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHxQ,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACX,CAACsrC,UAAU,GAAG;UAChB;QACF,EAAE;MACJ;IACF;IA9dE,MAAM9oC,OAAA,GAAU/5B,MAAA,CAAO+5B,OAAA,CAAQqlC,UAAA,CAAWrlC,OAAA,CAAQ/2B,IAAA,EAAMo8D,UAAA,CAAWrlC,OAAA,CAAQ95B,EAAA,EAAI;MAAA;MAE7EW,IAAA,EAAMw+D,UAAA,CAAWrlC,OAAA,CAAQn5B;IAC3B,CAAC;IACDm5B,OAAA,CAAQopC,eAAA,CAAgB;MACtBnpC,OAAA,EAASolC,UAAA,CAAWrlC,OAAA,CAAQC,OAAA,IAAW,EAAC;MACxCopC,oBAAA,EAAsB;IACxB,CAAC;IAID,MAAMC,uBAAA,GAA0CrjE,MAAA,CAAO4gC,MAAA,GACnD,CACE;MACE3S,IAAA,EAAM;QAAEhuB,EAAA,EAAID,MAAA,CAAO4gC;MAAO;MAC1B0iC,eAAA,EAAiB;MACjBC,SAAA,GAAW,mBAAIhqD,IAAA,CAAK,GAAElL,WAAA,CAAY;IACpC,EACF,GACA,EAAC;IAEL,KAAKsT,KAAA,GAAQ,IAAIgmB,UAAA,CAAwB;MAAA;MAEvC63B,MAAA,EAAQ;MACRtN,SAAA,EAAW;MACXkO,YAAA,EAAc;MAAA;MAEdrmC,OAAA;MACA6lC,SAAA,EAAW,IAAIrmD,IAAA,CAAK6lD,UAAA,CAAWjyC,UAAU;MAAA;MAEzC0yC,SAAA,EAAWT,UAAA,CAAWhyC,UAAA,GAAa,IAAI7T,IAAA,CAAK6lD,UAAA,CAAWhyC,UAAU,IAAI;MACrEmK,UAAA,EAAYisC,kCAAA,CAAmCpE,UAAU;MACzDU,aAAA,EAAextC,aAAA,CAAc8sC,UAAA,CAAWL,cAAc;MACtDgB,YAAA,EAAcX,UAAA,CAAWvhC,mBAAA;MACzBpkB,IAAA,EAAMgqD,eAAA,CACJ,CAACrE,UAAA,CAAW3lD,IAAA,IAAQ2lD,UAAA,CAAW3lD,IAAA,CAAK1d,MAAA,KAAW,IAC3CsnE,uBAAA,GACAjE,UAAA,CAAW3lD,IACjB;MACAwmD,OAAA,EAASb,UAAA,CAAWN,cAAA,CAAevgE,GAAA,CAAI+zB,aAAa;MACpD0tC,UAAA,EAAYZ,UAAA,CAAWvxC,WAAA,IAAe;MACtCqyC,SAAA,EAAWd,UAAA,CAAW9xC,UAAA,GAAa,IAAI/T,IAAA,CAAK6lD,UAAA,CAAW9xC,UAAU,IAAI;MACrE4xC,KAAA,EAAOE,UAAA,CAAWF,KAAA;MAClB/a,MAAA,EAAQgb,yBAAA,CAA0BC,UAAU;IAC9C,CAAC;IAED,KAAKn/D,EAAA,GAAKm/D,UAAA,CAAWJ,iBAAA;IACrB,KAAKh/D,MAAA,GAASA,MAAA;IAEd,KAAK0jE,eAAA,GAAkB,IAAIC,eAAA,CAAgB;MACzC3jE,MAAA;MACA4jE,WAAA,EAAaxE,UAAA,CAAWjR,KAAA;MACxB0V,kBAAA,EAAoB;IACtB,CAAC;EACH;EAEA,IAAI9pC,QAAA,EAAU;IACZ,OAAO,KAAKpY,KAAA,CAAMqnB,cAAA,CAAe,EAAEjP,OAAA;EACrC;EAEA,IAAI+pC,cAAA,EAAgB;IAClB,OAAO,KAAKniD,KAAA,CAAMqnB,cAAA,CAAe,EAAEo3B,YAAA;EACrC;EAEA,IAAIiC,eAAA,EAAiB;IACnB,OAAOrB,sBAAA,CAAuB,KAAKhhE,MAAA,CAAO4gC,MAAM,EAAE,KAAKjf,KAAA,CAAMqnB,cAAA,CAAe,CAAC;EAC/E;AA6ZF;AAEA,IAAMy6B,eAAA,GAAmBhqD,IAAA,IACvBA,IAAA,CAAK2c,MAAA,CAAwB,CAACzU,KAAA,EAAO0/C,QAAA,KAAa;EAChD1/C,KAAA,CAAM0/C,QAAA,CAASpzC,IAAA,CAAKhuB,EAAE,IAAI;IACxBguB,IAAA,EAAMozC,QAAA,CAASpzC,IAAA;IACfuzC,iBAAA,EAAmBH,QAAA,CAASI,oBAAA;IAC5BV,kBAAA,EAAoBM,QAAA,CAASiC,eAAA,IAAmB;IAChD/B,UAAA,EAAY,IAAIhoD,IAAA,CAAK8nD,QAAA,CAASkC,SAAS;EACzC;EACA,OAAO5hD,KAAA;AACT,GAAG,CAAC,CAAC;AAEP,IAAM6hD,kCAAA,GACJ9jC,MAAA,IAC4B;EAC5B,MAAMqkC,+BAAA,GACJrkC,MAAA,CAAOo/B,cAAA,CAAe/iE,MAAA,KAAW2jC,MAAA,CAAO7R,WAAA;EAE1C,OAAO;IACLm2C,UAAA,EAAY;IACZC,UAAA,EAAYF,+BAAA,GACR,OACCrkC,MAAA,CAAOo/B,cAAA,CAAe/pC,EAAA,CAAG,CAAC,GAAG90B,EAAA,IAAM;IACxCikE,aAAA,EAAe;IACfC,aAAA,EAAe;EACjB;AACF;AAEA,IAAMnD,sBAAA,GACHoD,aAAA,IAAuCziD,KAAA,IACrCyiD,aAAA,IAAiBziD,KAAA,CAAMlI,IAAA,CAAK2qD,aAAa,GAAGrD,kBAAA,IAAuB;;;AClkBxE,IAAMsD,0BAAA,GAA8BT,WAAA,IAClC,CAAC,CAAEA,WAAA,EAA4Cp4D,OAAA;AAEjD,IAAM84D,qBAAA,GACJV,WAAA,IACsB;EACtB,IAAIW,WAAA,GAAc;EAClB,IAAI/R,WAAA,IAAc,mBAAIj5C,IAAA,CAAK,GAAEsb,OAAA,CAAQ;EACrC,IAAIwvC,0BAAA,CAA2BT,WAAW,GAAG;IAC3CpR,WAAA,GAAc+R,WAAA,GAAc,IAAIhrD,IAAA,CAAKqqD,WAAA,CAAYz2C,UAAU,EAAE0H,OAAA,CAAQ;EACvE,WAAW+uC,WAAA,IAAexnC,cAAA,CAAewnC,WAAW,GAAG;IACrDpR,WAAA,GAAc,IAAIj5C,IAAA,CAAKqqD,WAAA,CAAYt2C,UAAU,EAAEuH,OAAA,CAAQ;EACzD;EACA,OAAO;IACL2vC,UAAA,EAAY;MACVD,WAAA;MACA/R;IACF;EACF;AACF;AAEA,IAAMiS,UAAA,GACJb,WAAA,IACyB;EACzB,IAAI,CAACA,WAAA,EAAa;IAChB,OAAO;MACLc,OAAA,EAAS;MACTzkE,EAAA,EAAI0jE,eAAA,CAAgBgB,UAAA,CAAW;MAC/BvU,MAAA,EAAQ;MACRD,aAAA,EAAe;MACfE,kBAAA,EAAoB;IACtB;EACF;EAEA,MAAMF,aAAA,GAAgByT,WAAA,CAAYn2C,cAAA;EAClC,IAAIjiB,OAAA;EACJ,IAAIk5D,OAAA,GAAU;EACd,IAAIzkE,EAAA,GAAK0jE,eAAA,CAAgBgB,UAAA,CAAW;EACpC,IAAIN,0BAAA,CAA2BT,WAAW,GAAG;IAC3Cp4D,OAAA,GAAUo4D,WAAA,CAAYp4D,OAAA;IACtBk5D,OAAA,GAAUd,WAAA,CAAYp4D,OAAA,CAAQvL,EAAA;EAChC,OAAO;IACLuL,OAAA,GAAUo4D,WAAA;IACV3jE,EAAA,GAAK2jE,WAAA,CAAY3jE,EAAA;EACnB;EAEA,OAAO;IACLykE,OAAA;IACAzkE,EAAA;IACAmwD,MAAA,EAAQ5kD,OAAA,CAAQyjD,OAAA,IAAW;IAC3BkB,aAAA,EAAeA,aAAA,GACX79B,aAAA,CAAc69B,aAAoC,IAClD;IACJE,kBAAA,EAAoB;EACtB;AACF;AAEO,IAAMuU,gBAAA,GAAN,MAAMA,gBAAA,SAAwBvG,iBAAA,CAAkB;EAAA;EAiBrDt+D,YAAY;IACV6jE,WAAA;IACAn4D,MAAA;IACAo4D,kBAAA;IACA7jE;EACF,GAA2B;IACzB,MAAM;IAsLR,KAAAmuC,SAAA,GAAY,CAAC;MACXy1B;IACF,IAAsE,CAAC,MAAM;MAC3E,KAAKiB,iBAAA,CAAkBh9B,WAAA,CAAY,KAAKy8B,qBAAA,CAAsBV,WAAW,CAAC;MAE1E,MAAMp4D,OAAA,GACJ,OAAOo4D,WAAA,KAAgB,cACnBA,WAAA,GACAS,0BAAA,CAA2BT,WAAW,IACpCA,WAAA,CAAYp4D,OAAA,GACZ8mB,aAAA,CAAcsxC,WAAW;MACjC,KAAK5V,iBAAA,CAAkB7f,SAAA,CAAU;QAAE3iC;MAAQ,CAAC;MAC5C,KAAKikD,mBAAA,CAAoBthB,SAAA,CAAU;QAAE3iC;MAAQ,CAAC;MAC9C,KAAKskD,YAAA,CAAa3hB,SAAA,CAAU;QAAE3iC;MAAQ,CAAC;MACvC,KAAKihD,YAAA,CAAate,SAAA,CAAU;MAC5B,KAAKugB,iBAAA,CAAkBvgB,SAAA,CAAU;QAAE3iC;MAAQ,CAAC;MAC5C,KAAKmW,KAAA,CAAM/Z,IAAA,CAAK68D,UAAA,CAAUb,WAAW,CAAC;MACtC,IACEA,WAAA,IACA,CAACS,0BAAA,CAA2BT,WAAW,KACvCp4D,OAAA,IACA4wB,cAAA,CAAe5wB,OAAO,GACtB;QACA,KAAK6iD,aAAA,GAAgB7iD,OAAA;MACvB;IACF;IAEA,KAAAs5D,4BAAA,GAAgCC,kBAAA,IAA2C;MACzE,IAAI,KAAKhrC,OAAA,CAAQI,GAAA,KAAQ4qC,kBAAA,CAAmBhrC,OAAA,CAAQI,GAAA,EAAK;QACvD;MACF;MACA,IAAI4qC,kBAAA,CAAmB5W,KAAA,EAAO;QAC5B,KAAKhgB,SAAA,CAAU;UAAEy1B,WAAA,EAAamB,kBAAA,CAAmB5W;QAAM,CAAC;MAC1D,WAAW,KAAKxsC,KAAA,CAAMqnB,cAAA,CAAe,EAAE07B,OAAA,EAAS;QAC9C,KAAKh0D,KAAA,CAAM;QACX,KAAK1Q,MAAA,CAAOglE,SAAA,EAAWC,kBAAA,CACpBC,EAAA,IACCA,EAAA,CAAGC,WAAA,CAAY;UACbhrC,GAAA,EAAK,KAAKJ,OAAA,CAAQI,GAAA;UAClByD,SAAA,EAAW;UAAA;QACb,CAAC,GACH;UAAEhpB,MAAA,EAAQ;QAAc,CAC1B;MACF;IACF;IAEA,KAAA0vD,qBAAA,GACEV,WAAA,IACGU,qBAAA,CAAsBV,WAAW;IAgBtC,KAAOwB,+BAAA,GAAkC,MAAM;MAC7C,MAAMC,uBAAA,GAA0B,KAAKC,qBAAA,CAAsB;MAC3D,MAAMC,uBAAA,GAA0B,KAAKC,qBAAA,CAAsB;MAE3D,OAAO,MAAM;QACXH,uBAAA,CAAwB;QACxBE,uBAAA,CAAwB;MAC1B;IACF;IAEA,KAAOlF,qBAAA,GAAwB,MAA+B;MAC5D,IAAI,CAAC,KAAKtC,gBAAA,EAAkB;QAC1B,KAAKC,sBAAA,CAAuB,KAAKyH,wCAAA,CAAyC,CAAC;QAC3E,KAAKzH,sBAAA,CAAuB,KAAK6C,uBAAA,CAAwB,CAAC;QAC1D,KAAK7C,sBAAA,CAAuB,KAAK4C,uBAAA,CAAwB,CAAC;QAE1D,KAAK5C,sBAAA,CAAuB,KAAK0H,iCAAA,CAAkC,CAAC;QACpE,KAAK1H,sBAAA,CAAuB,KAAK2H,sCAAA,CAAuC,CAAC;QACzE,KAAK3H,sBAAA,CAAuB,KAAK4H,wCAAA,CAAyC,CAAC;QAC3E,KAAK5H,sBAAA,CAAuB,KAAK6H,iCAAA,CAAkC,CAAC;QACpE,KAAK7H,sBAAA,CAAuB,KAAK8H,sCAAA,CAAuC,CAAC;QACzE,KAAK9H,sBAAA,CAAuB,KAAK+H,oCAAA,CAAqC,CAAC;QACvE,KAAK/H,sBAAA,CAAuB,KAAKgI,0CAAA,CAA2C,CAAC;MAC/E;MAEA,KAAK9H,iBAAA,CAAkB;MAEvB,OAAO,MAAM,KAAKC,uBAAA,CAAwB;IAC5C;IAEA,KAAQ0C,uBAAA,GAA0B,MAAM;MAEtC,MAAMgB,UAAA,GAA2B,CAC/B,mBACA,gBACA;MAAA;MACA;MAAA;MAAA,CACF;MAEA,MAAMt4B,oBAAA,GAAuBs4B,UAAA,CAAWtjE,GAAA,CACrCujE,SAAA,IACC,KAAK9hE,MAAA,CAAO8gE,EAAA,CAAGgB,SAAA,EAAYxkD,KAAA,IAAU;QACnC,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAAS;QACpB,IAAI8R,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,KAAO,KAAKA,EAAA,EAAI;UAChC,KAAKkuC,SAAA,CAAU;YAAEy1B,WAAA,EAAatmD,KAAA,CAAM9R;UAAQ,CAAC;QAC/C;QACA,IAAI,KAAK2kD,aAAA,EAAelwD,EAAA,IAAMqd,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,KAAO,KAAKkwD,aAAA,CAAclwD,EAAA,EAAI;UACxE,KAAKgmE,gBAAA,CAAiB3zC,aAAA,CAAchV,KAAA,CAAM9R,OAAO,CAAC;QACpD;MACF,CAAC,EAAEwS,WACP;MAEA,OAAO,MAAMurB,oBAAA,CAAqBtkC,OAAA,CAAS+Y,WAAA,IAAgBA,WAAA,CAAY,CAAC;IAC1E;IAEA,KAAQynD,wCAAA,GAA2C,MAAM;MACvD,IAAIS,QAAA,GAAgC;MACpC,MAAMloD,WAAA,GAAc,KAAKhe,MAAA,CAAOmmE,0BAAA,CAA2Bn+B,qBAAA,CACzD,CAAC;QAAEo+B,aAAA,EAAeC;MAAM,OAAO;QAC7BA;MACF,IACA,CAAC;QAAEA;MAAM,MAAM;QACbH,QAAA,GAAW;QACXA,QAAA,GAAWG,KAAA,GAAQ;UAAE/3B,QAAA,EAAU;QAAK,CAAC,KAAK;MAC5C,CACF;MAEA,OAAO,MAAM;QACX43B,QAAA,GAAW;QACXloD,WAAA,CAAY;MACd;IACF;IAEA,KAAQ4iD,uBAAA,GAA0B,MAChC,KAAK5gE,MAAA,CAAO8gE,EAAA,CAAG,mBAAoBxjD,KAAA,IAAU;MAC3C,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAAS;MACpB,IAAI8R,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,KAAO,KAAKA,EAAA,EAAI;QAChC,KAAKyQ,KAAA,CAAM;MACb,WAAW,KAAKy/C,aAAA,IAAiB7yC,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,KAAO,KAAKkwD,aAAA,CAAclwD,EAAA,EAAI;QAC3E,KAAKgmE,gBAAA,CAAiB,IAAI;MAC5B;IACF,CAAC,EAAEjoD,WAAA;IAEL,KAAQsnD,qBAAA,GAAwB,MAC9B,KAAKtlE,MAAA,CAAO8gE,EAAA,CAAG,iBAAkBxjD,KAAA,IAAU;MACzC,MAAM6wC,KAAA,GAAQ7wC,KAAA,CAAM6wC,KAAA;MACpB,IACE,CAACA,KAAA,KACAA,KAAA,CAAMvwB,SAAA,IAAa,WAAW,KAAKizB,QAAA,IAAY,SAChD1C,KAAA,CAAMwQ,WAAA,KAAgB,KAAK5kC,OAAA,CAAQI,GAAA,EAEnC;MACF,KAAKgU,SAAA,CAAU;QAAEy1B,WAAA,EAAazV;MAAM,CAAC;IACvC,CAAC,EAAEnwC,WAAA;IAEL,KAAQwnD,qBAAA,GAAwB,MAC9B,KAAKxlE,MAAA,CAAO8gE,EAAA,CAAG,iBAAkBxjD,KAAA,IAAU;MACzC,MAAM6wC,KAAA,GAAQ7wC,KAAA,CAAM6wC,KAAA;MACpB,IACE,CAACA,KAAA,KACAA,KAAA,CAAMvwB,SAAA,IAAa,WAAW,KAAKizB,QAAA,IAAY,SAChD1C,KAAA,CAAMwQ,WAAA,KAAgB,KAAK5kC,OAAA,CAAQI,GAAA,EACnC;QACA;MACF;MAEA,KAAKmsC,uBAAA,CAAwB;MAE7B,IAAI,KAAKC,kBAAA,EAAoB;QAC3B;MACF;MAEA,KAAK71D,KAAA,CAAM;IACb,CAAC,EAAEsN,WAAA;IAEL,KAAQ0nD,iCAAA,GAAoC,MAC1C,KAAK5V,YAAA,CAAanuC,KAAA,CAAMqmB,qBAAA,CACtB,CAAC;MAAE0b;IAAK,MAAM,CAACA,IAAI,GACnB,CAAC,CAACkZ,WAAW,GAAG4J,iBAAA,KAAsB;MAEpC,IAAI,OAAOA,iBAAA,KAAsB,aAAa;MAE9C,KAAKC,uBAAA,CAAwB;MAE7B,IAAI,KAAKF,kBAAA,EAAoB;QAC3B,KAAKpB,WAAA,CAAY;QACjB;MACF;MAEA,IAAI,CAAC,KAAK1V,mBAAA,CAAoBjM,OAAA,EAAS;MAEvC,IAAI,CAACoZ,WAAA,EAAa;QAChB,KAAKnN,mBAAA,CAAoBzJ,aAAA,CAAc;MACzC,OAAO;QACL,KAAKyJ,mBAAA,CAAoB1J,iBAAA,CAAkB6W,WAAW;MACxD;IACF,CACF;IAEF,KAAQ+I,sCAAA,GAAyC,MAC/C,KAAK3X,iBAAA,CAAkBrsC,KAAA,CAAMf,SAAA,CAAU,CAACiR,CAAA,EAAG60C,aAAA,KAAkB;MAC3D,IAAI,OAAOA,aAAA,KAAkB,aAAa;MAE1C,KAAKD,uBAAA,CAAwB;MAE7B,IAAI,KAAKF,kBAAA,EAAoB;QAC3B,KAAKpB,WAAA,CAAY;QACjB;MACF;IACF,CAAC;IAEH,KAAQS,wCAAA,GAA2C,MACjD,KAAKnW,mBAAA,CAAoB9tC,KAAA,CAAMf,SAAA,CAAU,CAACiR,CAAA,EAAG60C,aAAA,KAAkB;MAC7D,IAAI,OAAOA,aAAA,KAAkB,aAAa;MAE1C,KAAKD,uBAAA,CAAwB;MAE7B,IAAI,KAAKF,kBAAA,EAAoB;QAC3B,KAAKpB,WAAA,CAAY;QACjB;MACF;IACF,CAAC;IAEH,KAAQU,iCAAA,GAAoC,MAC1C,KAAKpZ,YAAA,CAAa9qC,KAAA,CAAMf,SAAA,CAAU,CAACiR,CAAA,EAAG60C,aAAA,KAAkB;MACtD,IAAI,OAAOA,aAAA,KAAkB,aAAa;MAE1C,KAAKD,uBAAA,CAAwB;MAE7B,IAAI,KAAKF,kBAAA,EAAoB;QAC3B,KAAKpB,WAAA,CAAY;QACjB;MACF;IACF,CAAC;IAEH,KAAQW,sCAAA,GAAyC,MAC/C,KAAKpX,iBAAA,CAAkB/sC,KAAA,CAAMf,SAAA,CAAU,CAACynB,SAAA,EAAWq+B,aAAA,KAAkB;MACnE,IACE,OAAOA,aAAA,KAAkB;MAAA;MAEzB,CAAC,KAAKhY,iBAAA,CAAkBrK,kBAAA,CAAmBhc,SAAA,EAAWq+B,aAAa,GACnE;QACA,KAAKD,uBAAA,CAAwB;MAC/B;IACF,CAAC;IAEH,KAAQV,oCAAA,GAAuC,MAC7C,KAAKpkD,KAAA,CAAMf,SAAA,CAAU,CAACiR,CAAA,EAAG60C,aAAA,KAAkB;MACzC,IAAI,OAAOA,aAAA,KAAkB,aAAa;MAE1C,KAAKD,uBAAA,CAAwB;MAE7B,IAAI,KAAKF,kBAAA,EAAoB;QAC3B,KAAKpB,WAAA,CAAY;MACnB;IACF,CAAC;IAEH,KAAQa,0CAAA,GAA6C,MAAM;MACzD,IAAIW,wBAAA;MAEJ,MAAM3oD,WAAA,GAAc,KAAK4oD,WAAA,CAAY5+B,qBAAA,CAClCyB,YAAA,KAAkB;QACjBo9B,gBAAA,EAAkBp9B,YAAA,CAAaia,IAAA,CAAK55C,YAAA;QACpCg9D,aAAA,EAAer9B,YAAA,CAAaua,MAAA,CAAOR;MACrC,IACA,CAAC;QAAEqjB,gBAAA;QAAkBC;MAAc,MAAM;QACvC,IAAI,KAAKhX,YAAA,CAAapM,IAAA,KAAS,MAAMmjB,gBAAA,EAAkB;UACrD,KAAK/W,YAAA,CAAasG,UAAA,CAAW;YAC3B1S,IAAA,EAAMmjB,gBAAA;YACNxQ,SAAA,EAAW;cAAEn5D,KAAA,EAAO;cAAGC,GAAA,EAAK;YAAE;UAChC,CAAC;QACH;QAEA,IAAI2pE,aAAA,IAAiB,CAACH,wBAAA,EAA0B;UAC9CA,wBAAA,GAA2B,KAAKvB,+BAAA,CAAgC;QAClE,WAAW,CAAC0B,aAAA,IAAiBH,wBAAA,EAA0B;UACrDA,wBAAA,CAAyB;UACzBA,wBAAA,GAA2B;QAC7B;MACF,CACF;MAEA,OAAO,MAAM;QACXA,wBAAA,GAA2B;QAC3B3oD,WAAA,CAAY;MACd;IACF;IAEA,KAAAioD,gBAAA,GAAoB9V,aAAA,IAAuC;MACzD,KAAKxuC,KAAA,CAAMkmB,WAAA,CAAY;QAAEsoB;MAAc,CAAC;IAC1C;IAEA,KAAA4W,wBAAA,GAA2B,MAAM;MAC/B,KAAKplD,KAAA,CAAMkmB,WAAA,CAAY;QAAEwoB,kBAAA,EAAoB,CAAC,KAAKA;MAAmB,CAAC;IACzE;IAEA,KAAA3/C,KAAA,GAAQ,MAAM;MACZ,KAAKy9B,SAAA,CAAU;IACjB;IAEA,KAAA64B,OAAA,GAAU,MAAM;MACd,MAAM;QAAE3Y;MAAc,IAAI;MAC1B,IAAIA,aAAA,EAAe;QACjB,KAAKlgB,SAAA,CAAU;UAAEy1B,WAAA,EAAavV;QAAc,CAAC;QAC7C;MACF;MACA,KAAK39C,KAAA,CAAM;IACb;IAEA,KAAA87C,OAAA,GAAU,YAA0E;MAClF,MAAMr/B,UAAA,GAAa,KAAKkhC,aAAA,EAAelhC,UAAA,IAAc,mBAAI5T,IAAA,CAAK;MAE9D,MAAMmqC,IAAA,GAAO;MACb,MAAM1iD,MAAA,GAAS,MAAM,KAAKqsD,6BAAA,CAA8B1D,OAAA,CAAQ;QAC9DF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZl+C,OAAA,EAAS;YACPvL,EAAA,EAAI,KAAKA,EAAA;YACT29B,SAAA,EAAW,KAAKizB,QAAA,IAAY;YAC5B7tD,IAAA,EAAM;UACR;UACAgwB,YAAA,EAAc;YACZkP,WAAA,EAAa,EAAC;YACd/U,UAAA;YAAA;YACAC,UAAA,EAAY;YACZ/gB,KAAA,EAAO;YACPpM,EAAA,EAAI,KAAKA,EAAA;YACTutB,eAAA,EAAiB,EAAC;YAClBoQ,SAAA,EAAW,KAAKizB,QAAA,IAAY;YAC5BxjC,SAAA,EAAW;YACXoF,eAAA,EAAiB;YACjBvmB,MAAA,EAAQ,KAAKmiD,aAAA,GAAgB,KAAKA,aAAA,CAAcniD,MAAA,GAAS;YACzDw3C,IAAA;YACA1gD,IAAA,EAAM;YACNsqB,UAAA,EAAYH;UACd;UACAohC,WAAA,EAAa,CAAC;QAChB;MACF,CAAC;MAED,IAAIvtD,MAAA,CAAOkL,MAAA,KAAW,WAAW;MAEjC,OAAOlL,MAAA,CAAO2gB,KAAA;IAChB;IAEA,KAAAslD,YAAA,GAAe,YAAY;MACzB,MAAM;QAAEtlD,KAAA;QAAOzV;MAAO,IAAI,MAAM,KAAKg7D,kCAAA,CAAmCvd,OAAA,CAAQ;QAC9EF,SAAA,EAAW;QACXC,YAAA,EAAc;UACZyE,KAAA,EAAO;YAAEluD,EAAA,EAAI,KAAKA,EAAA;YAAI29B,SAAA,EAAW,KAAKizB,QAAA,IAAY;YAAWnN,IAAA,EAAM;UAAG;QACxE;MACF,CAAC;MACD,IAAIx3C,MAAA,KAAW,WAAW;MAE1B,OAAOyV,KAAA;IACT;IAEA,KAAAwlD,WAAA,GAAc,YAAY;MAGxB,IAAI,KAAK9Y,aAAA,IAAiB,CAAC,KAAK5iD,MAAA,CAAOu4C,MAAA,CAAOR,OAAA,EAAS;MACvD,MAAMogB,WAAA,GAAc,MAAM,KAAKqD,YAAA,CAAa;MAC5C,IAAI,CAACrD,WAAA,EAAa;MAClB,MAAM;QAAEzV;MAAM,IAAIyV,WAAA;MAClB,KAAKjiD,KAAA,CAAMkmB,WAAA,CAAY;QAAE68B,OAAA,EAASvW,KAAA,CAAMluD;MAAG,CAAC;MAC5C,IAAI,KAAKD,MAAA,CAAOglE,SAAA,EAAW;QACzB,IAAI;UACF,MAAMoC,uBAAA,GAA0B;YAC9BzI,WAAA,EAAa,KAAK5kC,OAAA,CAAQI,GAAA;YAC1BhN,UAAA,GAAY,mBAAI5T,IAAA,CAAK,GAAElL,WAAA,CAAY;YACnC7C,OAAA,EAAS2iD,KAAA;YACTvwB,SAAA,EAAWuwB,KAAA,CAAMvwB,SAAA;YACjBnQ,cAAA,EAAgB,KAAK0iC,aAAA,GACjBv9B,eAAA,CAAgB,KAAKu9B,aAAa,IAClC;UACN;UACA,MAAM,KAAKnwD,MAAA,CAAOglE,SAAA,CAAUqC,WAAA,CAAY;YAAElZ,KAAA,EAAOiZ;UAAwB,CAAC;QAC5E,SAAS/6D,KAAA,EAAO;UACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAS,yBAAyB;YACnD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;YAC7Bj7D;UACF,CAAC;QACH;MACF;MACA,KAAKi6D,uBAAA,CAAwB;MAC7B,MAAM,KAAKvsC,OAAA,CAAQotC,WAAA,CAAYhZ,KAAK;IACtC;IAEA,KAAAgX,WAAA,GAAc,YAAY;MACxB,IAAI,KAAK9W,aAAA,IAAiB,CAAC,KAAK5iD,MAAA,CAAOu4C,MAAA,CAAOR,OAAA,IAAW,CAAC,KAAKkhB,OAAA,EAAS;MACxE,KAAK/iD,KAAA,CAAMkmB,WAAA,CAAY;QAAE68B,OAAA,EAAS;MAAK,CAAC;MACxC,MAAMrnC,QAAA,GAAW,KAAKwzB,QAAA,IAAY;MAClC,IAAI,KAAK7wD,MAAA,CAAOglE,SAAA,EAAW;QACzB,IAAI;UACF,MAAM,KAAKhlE,MAAA,CAAOglE,SAAA,CAAUG,WAAA,CAAY;YACtChrC,GAAA,EAAK,KAAKJ,OAAA,CAAQI,GAAA;YAClByD,SAAA,EAAWP;UACb,CAAC;QACH,SAAShxB,KAAA,EAAO;UACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAS,yBAAyB;YACnD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;YAC7Bj7D;UACF,CAAC;QACH;MACF;MACA,KAAKi6D,uBAAA,CAAwB;MAC7B,MAAM,KAAKvsC,OAAA,CAAQorC,WAAA,CAAY;QAAEvnC,SAAA,EAAWP;MAAS,CAAC;IACxD;IAEA,KAAAkqC,QAAA,GAAW,YAAY;MACrB,IAAI,KAAKlZ,aAAA,IAAiB,CAAC,KAAK5iD,MAAA,CAAOu4C,MAAA,CAAOR,OAAA,IAAW,CAAC,KAAKxjD,MAAA,CAAO4gC,MAAA,EAAQ;MAE9E,MAAM4mC,kBAAA,GAAqB,MAAM,KAAKxnE,MAAA,CAAOglE,SAAA,EAAWuC,QAAA,CAAS;QAC/DptC,GAAA,EAAK,KAAKJ,OAAA,CAAQI,GAAA;QAClBmH,MAAA,EAAQ,KAAKthC,MAAA,CAAO4gC,MAAA;QACpBhD,SAAA,EAAW,KAAKizB,QAAA,IAAY;MAC9B,CAAC;MAED,IAAI2W,kBAAA,EAAoB;QACtB,KAAKr5B,SAAA,CAAU;UAAEy1B,WAAA,EAAa4D;QAAmB,CAAC;MACpD;MAEA,IAAI;QACF,MAAM77D,QAAA,GAAW,MAAM,KAAKouB,OAAA,CAAQwtC,QAAA,CAAS;UAC3C3pC,SAAA,EAAW,KAAKizB,QAAA,IAAY;QAC9B,CAAC;QAED,MAAM;UAAE1C;QAAM,IAAIxiD,QAAA;QAElB,IAAI,CAACwiD,KAAA,EAAO;QAEZ,KAAKnuD,MAAA,CAAOglE,SAAA,EAAWC,kBAAA,CACpBC,EAAA,IACCA,EAAA,CAAGmC,WAAA,CAAY;UACblZ;QACF,CAAC,GACH;UAAEv5C,MAAA,EAAQ;QAAc,CAC1B;QAEA,KAAKu5B,SAAA,CAAU;UAAEy1B,WAAA,EAAazV;QAAM,CAAC;MACvC,SAAS9hD,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAOsxC,aAAA,CAAc3a,GAAA,CAAI;UAC5BnrB,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YACNC,OAAA,EAAS;YACT5rC,OAAA,EAAS;cAAEyoC,QAAA,EAAU;YAAK;UAC5B;QACF,CAAC;MACH;IACF;IAEA,KAAAm5B,UAAA,GAAa,YAAY;MACvB,MAAM7D,WAAA,GAAc,MAAM,KAAKnX,YAAA,CAAaD,OAAA,CAAQ;MACpD,IAAI,CAACoX,WAAA,IAAe,CAACA,WAAA,CAAY9kE,IAAA,CAAKmB,EAAA,EAAI;MAC1C,IAAI;QACF,MAAMynE,IAAA,GAAO,MAAM,KAAK1nE,MAAA,CAAO2nE,KAAA,CAAMF,UAAA,CAAW7D,WAAA,CAAY9kE,IAAI;QAChE,KAAK6iB,KAAA,CAAMkmB,WAAA,CAAY;UAAEuoB,MAAA,EAAQsX,IAAA,EAAMznE;QAAG,CAAC;MAC7C,SAASoM,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAOsxC,aAAA,CAAcC,QAAA,CAAS;UACjC/lC,OAAA,EAAS;UACTgmC,MAAA,EAAQ;YACNC,OAAA,EAAS;YACT5rC,OAAA,EAAS;cAAEyoC,QAAA,EAAU;YAAK;UAC5B;UACAltC,OAAA,EAAS;YACP4B,IAAA,EAAM;YACNkvC,QAAA,EAAU;cACR/wB,MAAA,EAAS9U,KAAA,CAAgBb;YAC3B;YACA4mC,aAAA,EAAe/lC,KAAA,YAAiBjQ,KAAA,GAAQiQ,KAAA,GAAQ;UAClD;QACF,CAAC;QACD,MAAMA,KAAA;MACR;IACF;IAlpBE,KAAKw3D,kBAAA,GAAqBA,kBAAA;IAE1B,KAAK+C,WAAA,GAAc,IAAIj/B,UAAA,CACrBsG,SAAA,CAAU8V,uBAAA,EAAyBt4C,MAAA,IAAU,CAAC,CAAC,CACjD;IAGA,IAAIo4D,kBAAA,YAA8B+D,OAAA,EAAS;MACzC,KAAK7tC,OAAA,GAAU8pC,kBAAA;IACjB,WAAWA,kBAAA,YAA8BvE,MAAA,EAAQ;MAC/C,KAAKvlC,OAAA,GAAU8pC,kBAAA,CAAmB9pC,OAAA;IACpC,WAAW8pC,kBAAA,CAAmB1pC,GAAA,EAAK;MACjC,MAAM,CAACn3B,IAAA,EAAM/C,EAAE,IAAI4jE,kBAAA,CAAmB1pC,GAAA,CAAIxwB,KAAA,CAAM,GAAG;MACnD,KAAKowB,OAAA,GAAU/5B,MAAA,CAAO+5B,OAAA,CAAQ/2B,IAAA,EAAM/C,EAAE;IACxC,OAAO;MACL,MAAM,IAAI7D,KAAA,CACR,2FACF;IACF;IAEA,IAAIoP,OAAA,GAAmD;IACvD,IAAI64D,0BAAA,CAA2BT,WAAW,GAAG;MAC3Cp4D,OAAA,GAAUo4D,WAAA,CAAYp4D,OAAA;IACxB,WAAWo4D,WAAA,EAAa;MACtBp4D,OAAA,GAAU8mB,aAAA,CAAcsxC,WAAW;MACnC,KAAKvV,aAAA,GAAgB7iD,OAAA;IACvB;IAEA,KAAKwiD,iBAAA,GAAoB,IAAI3f,iBAAA,CAAkB;MAAEC,QAAA,EAAU;MAAM9iC;IAAQ,CAAC;IAC1E,KAAKikD,mBAAA,GAAsB,IAAInI,mBAAA,CAAoB;MAAEhZ,QAAA,EAAU;MAAM9iC;IAAQ,CAAC;IAC9E,KAAKskD,YAAA,GAAe,IAAIoM,YAAA,CAAa;MAAE5tB,QAAA,EAAU;MAAM9iC;IAAQ,CAAC;IAChE,KAAKihD,YAAA,GAAe,IAAIS,YAAA,CAAa;MAAE5e,QAAA,EAAU;IAAK,CAAC;IACvD,KAAKogB,iBAAA,GAAoB,IAAItK,iBAAA,CAAkB;MAAE9V,QAAA,EAAU;MAAM9iC;IAAQ,CAAC;IAE1E,KAAKq5D,iBAAA,GAAoB,IAAIl9B,UAAA,CAC3B,KAAK28B,qBAAA,CAAsBV,WAAW,CACxC;IACA,KAAKjiD,KAAA,GAAQ,IAAIgmB,UAAA,CAAiC88B,UAAA,CAAUb,WAAW,CAAC;IAExE,KAAKvW,6BAAA,GAAgC,IAAIyD,iCAAA,CAAkC;MACzExiB,QAAA,EAAU;IACZ,CAAC;IACD,KAAK44B,kCAAA,GAAqC,IAAInW,sCAAA,CAAuC;MACnFziB,QAAA,EAAU;IACZ,CAAC;EACH;EAEA,OAAOu5B,oBAAoBhE,kBAAA,EAAwC;IACjE,IAAIA,kBAAA,YAA8B+D,OAAA,EAAS;MACzC,OAAO;IACT;IAEA,IAAI/D,kBAAA,YAA8BvE,MAAA,EAAQ;MACxC,OAAO;IACT;IAEA,IAAI,OAAOuE,kBAAA,CAAmBiE,cAAA,KAAmB,UAAU;MACzD,OAAO;IACT;IAEA,OAAO;EACT;EAEA,OAAOC,aACLlE,kBAAA,EACuE;IACvE,OAAO,GAAG,KAAKgE,mBAAA,CAAoBhE,kBAAkB,CAAC,IAAIA,kBAAA,CAAmB5jE,EAAE;EACjF;EAEA,IAAIwL,OAAA,EAAgC;IAClC,OAAO,KAAKm7D,WAAA,CAAY59B,cAAA,CAAe;EACzC;EAEAyF,aAAahjC,MAAA,EAA4C;IACvD,KAAKm7D,WAAA,CAAY/+B,WAAA,CAAYoG,SAAA,CAAU,KAAKxiC,MAAA,EAAQA,MAAM,CAAC;EAC7D;EAEA,IAAIu8D,YAAA,EAAc;IAChB,OAAOpD,gBAAA,CAAgBiD,mBAAA,CAAoB,KAAKhE,kBAAkB;EACpE;EAEA,IAAI9b,IAAA,EAAM;IACR,OAAO6c,gBAAA,CAAgBmD,YAAA,CAAa,KAAKlE,kBAAkB;EAC7D;EAEA,IAAIhT,SAAA,EAAW;IAOb,IAAI,KAAKgT,kBAAA,YAA8B+D,OAAA,EAAS;MAC9C,OAAO;IACT;IAEA,IAAI,KAAK/D,kBAAA,YAA8BvE,MAAA,EAAQ;MAC7C,OAAO,KAAKuE,kBAAA,CAAmB5jE,EAAA;IACjC;IAEA,IAAI,OAAO,KAAK4jE,kBAAA,CAAmBiE,cAAA,KAAmB,UAAU;MAC9D,OAAO,KAAKjE,kBAAA,CAAmBiE,cAAA;IACjC;IAGA,IAAI,OAAO,KAAKjE,kBAAA,CAAmBjmC,SAAA,KAAc,UAAU;MACzD,OAAO,KAAKimC,kBAAA,CAAmBjmC,SAAA;IACjC;IAEA,OAAO;EACT;EAEA,IAAI59B,OAAA,EAAS;IACX,OAAO,KAAK+5B,OAAA,CAAQsF,SAAA,CAAU;EAChC;EAEA,IAAIp/B,GAAA,EAAK;IACP,OAAO,KAAK0hB,KAAA,CAAMqnB,cAAA,CAAe,EAAE/oC,EAAA;EACrC;EAEA,IAAIykE,QAAA,EAAU;IACZ,OAAO,KAAK/iD,KAAA,CAAMqnB,cAAA,CAAe,EAAE07B,OAAA;EACrC;EAEA,IAAIF,WAAA,EAAa;IACf,OAAO,KAAKK,iBAAA,CAAkB77B,cAAA,CAAe,EAAEw7B,UAAA;EACjD;EAEA,IAAIrU,cAAA,EAAgB;IAClB,OAAO,KAAKxuC,KAAA,CAAMqnB,cAAA,CAAe,EAAEmnB,aAAA;EACrC;EAEA,IAAIC,OAAA,EAAS;IACX,OAAO,KAAKzuC,KAAA,CAAMqnB,cAAA,CAAe,EAAEonB,MAAA;EACrC;EAEA,IAAIC,mBAAA,EAAqB;IACvB,OAAO,KAAK1uC,KAAA,CAAMqnB,cAAA,CAAe,EAAEqnB,kBAAA;EACrC;EAEA,IAAI4X,gBAAA,EAAkB;IAEpB,IAAI,KAAKjoE,MAAA,CAAOglE,SAAA,EAAW;MACzB,OAAO,CAAC,KAAKuB,kBAAA;IACf;IACA,OAAO,CAAC,EACL,CAAC,KAAKvY,iBAAA,CAAkBza,sBAAA,KACtB,CAAC,KAAKuc,YAAA,CAAad,WAAA,IAClB,KAAKhB,iBAAA,CAAkB1a,sBAAA,GAAyB,MACpD,KAAK8c,MAAA;EAET;EAEA,IAAImW,mBAAA,EAAqB;IACvB,OACE,CAAC,KAAKpW,aAAA,IACN,KAAKL,YAAA,CAAad,WAAA,IAClB,CAAC,KAAKhB,iBAAA,CAAkB9rB,WAAA,CAAYnmC,MAAA,IACpC,CAAC,KAAKq0D,MAAA;EAEV;EAEA,IAAIhB,wBAAA,EAA0B;IAC5B,MAAM8Y,qBAAA,GAAwB,KAAK1D,UAAA,CAAWD,WAAA,KAAgB;IAC9D,MAAM4D,2BAAA,GAA8BD,qBAAA,IAAyB,CAAC,KAAK7Z,aAAA;IAGnE,MAAM+Z,uBAAA,GACJ,CAAC,CAAC,KAAK/Z,aAAA,EAAe/gC,UAAA,IACtB,IAAI/T,IAAA,CAAK,KAAK80C,aAAA,CAAc/gC,UAAU,EAAEuH,OAAA,CAAQ,IAAI,KAAK2vC,UAAA,CAAWhS,WAAA;IAEtE,MAAM6V,eAAA,GACJ,CAAC,CAAC,KAAK7D,UAAA,CAAWD,WAAA,IAClB,KAAKC,UAAA,CAAWD,WAAA,GAAc,KAAKC,UAAA,CAAWhS,WAAA;IAEhD,OAAO4V,uBAAA,IAA2BC,eAAA,IAAmBF,2BAAA;EACvD;EAsDQ1B,wBAAA,EAA0B;IAChC,KAAK5B,iBAAA,CAAkBh9B,WAAA,CAAY;MACjC28B,UAAA,EAAY;QAAE,GAAG,KAAKA,UAAA;QAAYhS,WAAA,GAAa,mBAAIj5C,IAAA,CAAK,GAAEsb,OAAA,CAAQ;MAAE;IACtE,CAAC;EACH;EAEQyxC,wBAAA,EAA0B;IAChC,IAAI,CAAC,KAAK76D,MAAA,CAAOu4C,MAAA,CAAOR,OAAA,EAAS;IACjC,MAAM8kB,SAAA,IAAY,mBAAI/uD,IAAA,CAAK,GAAEsb,OAAA,CAAQ;IACrC,KAAKgwC,iBAAA,CAAkBh9B,WAAA,CAAY;MACjC28B,UAAA,EAAY;QAAED,WAAA,EAAa+D,SAAA;QAAW9V,WAAA,EAAa8V;MAAU;IAC/D,CAAC;EACH;AAiaF;AA5qBa1D,gBAAA,CA2MJD,UAAA,GAAa3zC,cAAA;AA3Mf,IAAM2yC,eAAA,GAANiB,gBAAA;;;ACxCA,IAAMgD,OAAA,GAAN,MAAc;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA0CnB7nE,YACEC,MAAA,EACAgD,IAAA,EACA/C,EAAA,EACAnB,IAAA,EACA;IAsuCF;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAoB,MAAA,GAAS,MAAOkB,OAAA,IAAkC;MAChD,MAAMmnE,cAAA,GAAiB;QACrB,GAAGnnE,OAAA;QACHk5B,KAAA,EAAO;QACP3Y,KAAA,EAAO;QACP6mD,QAAA,EAAU;MACZ;MACA,OAAO,MAAM,KAAK3kC,KAAA,CAAM0kC,cAAA,EAAgB,QAAQ;IAClD;IA0sBA,KAAAE,qBAAA,GAAyBnrD,KAAA,IAAiB;MAExC,MAAMyc,OAAA,GAAU;MAEhB,MAAM2uC,SAAA,GAAY,EAAC;MACnB,IAAI3uC,OAAA,CAAQ2uC,SAAA,CAAUr9C,GAAA,EAAK;QACzBq9C,SAAA,CAAUrrE,IAAA,CAAK,GAAG08B,OAAA,CAAQ2uC,SAAA,CAAUr9C,GAAG;MACzC;MACA,IAAI0O,OAAA,CAAQ2uC,SAAA,CAAUprD,KAAA,CAAMta,IAAI,GAAG;QACjC0lE,SAAA,CAAUrrE,IAAA,CAAK,GAAG08B,OAAA,CAAQ2uC,SAAA,CAAUprD,KAAA,CAAMta,IAAI,CAAC;MACjD;MAGA,WAAW0Z,QAAA,IAAYgsD,SAAA,EAAW;QAChC,IAAI,OAAOhsD,QAAA,KAAa,UAAU;UAChCA,QAAA,CAASY,KAAK;QAChB;MACF;IACF;IAOA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAqrD,WAAA,GAAc,MAAM;MAClB,IAAI,CAAC,KAAK1oE,EAAA,EAAI;QACZ,MAAM,IAAI7D,KAAA,CAAM,2BAA2B;MAC7C;MACA,OAAO,GAAG,KAAKijC,SAAA,CAAU,EAAEplB,OAAO,aAAahL,kBAAA,CAC7C,KAAKjM,IACP,CAAC,IAAIiM,kBAAA,CAAmB,KAAKhP,EAAE,CAAC;IAClC;IAv9DE,MAAM2oE,WAAA,GAAc;IACpB,MAAMC,SAAA,GAAY;IAElB,IAAI,CAACD,WAAA,CAAYr7D,IAAA,CAAKvK,IAAI,GAAG;MAC3B,MAAM,IAAI5G,KAAA,CAAM,qBAAqB4G,IAAI,yCAAyC;IACpF;IACA,IAAI,OAAO/C,EAAA,KAAO,YAAY,CAAC4oE,SAAA,CAAUt7D,IAAA,CAAKtN,EAAE,GAAG;MACjD,MAAM,IAAI7D,KAAA,CAAM,mBAAmB6D,EAAE,0CAA0C;IACjF;IAEA,KAAK6oE,OAAA,GAAU9oE,MAAA;IACf,KAAKgD,IAAA,GAAOA,IAAA;IACZ,KAAK/C,EAAA,GAAKA,EAAA;IAEV,KAAKnB,IAAA,GAAOA,IAAA;IAEZ,KAAKiqE,KAAA,GAAQ;MAAE,GAAGjqE;IAAK;IACvB,KAAKq7B,GAAA,GAAM,GAAGn3B,IAAI,IAAI/C,EAAE;IACxB,KAAKyoE,SAAA,GAAY,CAAC;IAElB,KAAK/mD,KAAA,GAAQ,IAAIgb,YAAA,CAAa,IAAI;IAClC,KAAKsmB,WAAA,GAAc;IACnB,KAAK+lB,WAAA,GAAc;IACnB,KAAKC,eAAA,GAAkB;IACvB,KAAKC,QAAA,GAAW;IAChB,KAAKC,YAAA,GAAe;IAEpB,KAAKzF,eAAA,GAAkB,IAAIC,eAAA,CAAgB;MACzC3jE,MAAA,EAAQ,KAAK8oE,OAAA;MACbjF,kBAAA,EAAoB;IACtB,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAxkC,UAAA,EAAwB;IACtB,IAAI,KAAK8pC,YAAA,KAAiB,MAAM;MAC9B,MAAM/sE,KAAA,CAAM,8DAA8D;IAC5E;IACA,OAAO,KAAK0sE,OAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA3hB,UAAA,EAAY;IACV,MAAMnnD,MAAA,GAAS,KAAKq/B,SAAA,CAAU;IAC9B,OAAOr/B,MAAA,CAAOopE,OAAA,CAAQ,KAAKjvC,GAAG;EAChC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAMkvC,aAAa79D,OAAA,EAAkBpK,OAAA,EAA8B;IACjE,OAAO,MAAM,KAAKi+B,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKX,WAAA,CAAY,IAAI,YACrB;MACEn9D,OAAA;MACA,GAAGpK;IACL,CACF;EACF;EAEA,MAAMmoE,YAAY/9D,OAAA,EAAkBpK,OAAA,EAA8B;IAChE,IAAI;MACF,MAAM4jE,SAAA,GAAY,KAAK3lC,SAAA,CAAU,EAAE2lC,SAAA;MACnC,IAAIA,SAAA,EAAW;QACb,MAAM1hC,SAAA,GAAY93B,OAAA,CAAQvL,EAAA;QAC1B,IAAIqjC,SAAA,EAAW;UACb,OAAO,MAAM0hC,SAAA,CAAUwE,SAAA,CAAkC;YACvDC,IAAA,EAAM;cACJC,SAAA,EAAW,KAAKzpE,EAAA;cAChBs6B,WAAA,EAAa,KAAKv3B,IAAA;cAClBsgC,SAAA;cACAxc,OAAA,EAAS,CAACtb,OAAA,EAASpK,OAAO;cAC1B4B,IAAA,EAAM;YACR;UACF,CAAC;QACH;MACF;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKy8D,OAAA,CAAQlvC,MAAA,CAAO,SAAS,0BAA0B;QACrD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IACA,OAAO,MAAM,KAAKg9D,YAAA,CAAa79D,OAAA,EAASpK,OAAO;EACjD;EAEAuoE,SACE16C,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IAAA,EACA;IACA,OAAO,KAAKoR,SAAA,CAAU,EAAEsqC,QAAA,CACtB,GAAG,KAAKhB,WAAA,CAAY,CAAC,SACrB15C,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IACF;EACF;EAEA27C,UACE36C,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IAAA,EACA;IACA,OAAO,KAAKoR,SAAA,CAAU,EAAEsqC,QAAA,CACtB,GAAG,KAAKhB,WAAA,CAAY,CAAC,UACrB15C,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IACF;EACF;EAEA47C,WAAWh6D,GAAA,EAAa;IACtB,OAAO,KAAKwvB,SAAA,CAAU,EAAE79B,MAAA,CAAoB,GAAG,KAAKmnE,WAAA,CAAY,CAAC,SAAS;MAAE94D;IAAI,CAAC;EACnF;EAEAi6D,YAAYj6D,GAAA,EAAa;IACvB,OAAO,KAAKwvB,SAAA,CAAU,EAAE79B,MAAA,CAAoB,GAAG,KAAKmnE,WAAA,CAAY,CAAC,UAAU;MAAE94D;IAAI,CAAC;EACpF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMk6D,UAAUzsD,KAAA,EAAc;IAC5B,KAAK0sD,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEiqC,IAAA,CAAuB,KAAKX,WAAA,CAAY,IAAI,UAAU;MAClFrrD;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMrC,OACJ4oB,KAAA,EACAziC,OAAA,GAMI,CAAC,GACL;IACA,IAAIA,OAAA,CAAQm4B,MAAA,IAAUn4B,OAAA,CAAQwG,IAAA,EAAM;MAClC,MAAMxL,KAAA,CAAM,iCAAiC;IAC/C;IAEA,MAAM0qB,OAAA,GAAyB;MAC7BmjD,iBAAA,EAAmB;QAAE9vC,GAAA,EAAK,KAAKA;MAAI;MACnC,GAAG/4B,OAAA;MACHkvB,IAAA,EAAMlvB,OAAA,CAAQkvB,IAAA,GACVD,kBAAA,CAA0CjvB,OAAA,CAAQkvB,IAAI,IACtD;IACN;IACA,IAAI,OAAOuT,KAAA,KAAU,UAAU;MAC7B/c,OAAA,CAAQ+c,KAAA,GAAQA,KAAA;IAClB,WAAW,OAAOA,KAAA,KAAU,UAAU;MACpC/c,OAAA,CAAQojD,yBAAA,GAA4BrmC,KAAA;IACtC,OAAO;MACL,MAAMznC,KAAA,CAAM,gBAAgB,OAAOynC,KAAK,sBAAsB;IAChE;IAEA,MAAM,KAAKxE,SAAA,CAAU,EAAE8qC,SAAA;IAEvB,OAAO,MAAM,KAAK9qC,SAAA,CAAU,EAAEz9B,GAAA,CAC5B,KAAKy9B,SAAA,CAAU,EAAEplB,OAAA,GAAU,WAC3B;MACE6M;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAMi0C,aACJqP,gBAAA,EACA95C,IAAA,GAAmB,EAAC,EACpBlvB,OAAA,GAA+B,CAAC,GAChC;IACA,IAAInB,EAAA;IACJ,MAAM+C,IAAA,GAAO,KAAKA,IAAA;IAClB,IAAIg3B,OAAA;IACJ,IAAI,KAAK/5B,EAAA,EAAI;MACXA,EAAA,GAAK,KAAKA,EAAA;IACZ,WAAW,KAAKnB,IAAA,EAAMk7B,OAAA,IAAWr+B,KAAA,CAAMuH,OAAA,CAAQ,KAAKpE,IAAA,CAAKk7B,OAAO,GAAG;MACjEA,OAAA,GAAU,KAAKl7B,IAAA,CAAKk7B,OAAA;IACtB;IAEA,OAAO,MAAM,KAAKqF,SAAA,CAAU,EAAEz9B,GAAA,CAC5B,KAAKy9B,SAAA,CAAU,EAAEplB,OAAA,GAAU,YAC3B;MACE6M,OAAA,EAAS;QACP9jB,IAAA;QACA/C,EAAA;QACA+5B,OAAA;QACA1J,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;QAC7B25C,iBAAA,EAAmBG,gBAAA;QACnB,GAAGhpE;MACL;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMipE,oBAAoBC,OAAA,EAA8BlpE,OAAA,EAA+B;IACrF,MAAMyO,GAAA,GAAM,IAAIihC,GAAA,CAAI,GAAG,KAAK63B,WAAA,CAAY,CAAC,SAAS;IAElD,IAAIvnE,OAAA,EAASkgC,MAAA,EAAQ;MACnBzxB,GAAA,CAAI06D,YAAA,CAAa1lE,MAAA,CAAO,WAAWzD,OAAA,CAAQkgC,MAAM;IACnD;IAEA,OAAO,MAAM,KAAKjC,SAAA,CAAU,EAAEmrC,KAAA,CAC5B36D,GAAA,CAAIzN,QAAA,CAAS,GACbkoE,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMG,oBAAoB5pC,OAAA,EAAiBypC,OAAA,EAA8B;IACvE,IAAI,CAACzpC,OAAA,EAAS;MACZ,MAAMzkC,KAAA,CAAM,4BAA4B;IAC1C;IAEA,OAAO,MAAM,KAAKijC,SAAA,CAAU,EAAEmrC,KAAA,CAC5B,KAAK7B,WAAA,CAAY,IAAI,WAAW15D,kBAAA,CAAmB4xB,OAAO,CAAC,IAC3DypC,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAaA,MAAMI,aACJC,SAAA,EACA1qC,QAAA,EACA7+B,OAAA,EACA;IACA,IAAI,CAACupE,SAAA,EAAW;MACd,MAAMvuE,KAAA,CAAM,uBAAuB;IACrC;IACA,IAAI,CAAC6jC,QAAA,IAAY59B,MAAA,CAAO+C,IAAA,CAAK66B,QAAQ,EAAElkC,MAAA,KAAW,GAAG;MACnD,MAAMK,KAAA,CAAM,4BAA4B;IAC1C;IAEA,IAAI;MACF,MAAM4oE,SAAA,GAAY,KAAK3lC,SAAA,CAAU,EAAE2lC,SAAA;MACnC,IAAIA,SAAA,EAAW;QACb,OAAO,MAAMA,SAAA,CAAUwE,SAAA,CAA+B;UACpDC,IAAA,EAAM;YACJC,SAAA,EAAW,KAAKzpE,EAAA;YAChBs6B,WAAA,EAAa,KAAKv3B,IAAA;YAClBsgC,SAAA,EAAWqnC,SAAA;YACX7jD,OAAA,EAAS,CAAC6jD,SAAA,EAAW1qC,QAAA,EAAU7+B,OAAO;YACtC4B,IAAA,EAAM;UACR;QACF,CAAC;MACH;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKy8D,OAAA,CAAQlvC,MAAA,CAAO,SAAS,2BAA2B;QACtD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IAEA,OAAO,KAAKu+D,aAAA,CAAcD,SAAA,EAAW1qC,QAAA,EAAU7+B,OAAO;EACxD;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMwpE,cACJD,SAAA,EACA1qC,QAAA,EACA7+B,OAAA,EACA;IACA,IAAI,CAACupE,SAAA,EAAW;MACd,MAAMvuE,KAAA,CAAM,uBAAuB;IACrC;IACA,IAAI,CAAC6jC,QAAA,IAAY59B,MAAA,CAAO+C,IAAA,CAAK66B,QAAQ,EAAElkC,MAAA,KAAW,GAAG;MACnD,MAAMK,KAAA,CAAM,4BAA4B;IAC1C;IAEA,OAAO,MAAM,KAAKijC,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKjqC,SAAA,CAAU,EAAEplB,OAAA,GAAU,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,aACrE;MACE1qC,QAAA;MACA,GAAG7+B;IACL,CACF;EACF;EAEA,MAAMypE,eAAeF,SAAA,EAAmBG,YAAA,EAAsBjqC,OAAA,EAAkB;IAC9E,KAAKmpC,iBAAA,CAAkB;IACvB,IAAI,CAACc,YAAA,IAAgB,CAACH,SAAA,EAAW;MAC/B,MAAMvuE,KAAA,CACJ,4EACF;IACF;IAEA,IAAI;MACF,MAAM4oE,SAAA,GAAY,KAAK3lC,SAAA,CAAU,EAAE2lC,SAAA;MACnC,IAAIA,SAAA,EAAW;QACb,MAAMx5D,OAAA,GAAU,KAAKmW,KAAA,CAAM0S,QAAA,CAASsE,IAAA,CAAK,CAAC;UAAE14B;QAAG,MAAMA,EAAA,KAAO0qE,SAAS;QACrE,MAAM1qC,QAAA,GAAW;UACf9S,UAAA,EAAY;UACZG,UAAA,EAAY;UACZgT,UAAA,EAAYqqC,SAAA;UACZ3nE,IAAA,EAAM8nE,YAAA;UACNjqC,OAAA,EAAU,KAAKxB,SAAA,CAAU,EAAEuB,MAAA,IAAqBC;QAClD;QAEA,IAAIr1B,OAAA,EAAS;UACX,MAAMw5D,SAAA,CAAU6F,cAAA,CAAe;YAC7Br/D,OAAA;YACAy0B;UACF,CAAC;QACH;QAEA,OAAO,MAAM+kC,SAAA,CAAUwE,SAAA,CAA+B;UACpDC,IAAA,EAAM;YACJC,SAAA,EAAW,KAAKzpE,EAAA;YAChBs6B,WAAA,EAAa,KAAKv3B,IAAA;YAClBsgC,SAAA,EAAWqnC,SAAA;YACX7jD,OAAA,EAAS,CAAC6jD,SAAA,EAAWG,YAAY;YACjC9nE,IAAA,EAAM;UACR;QACF,CAAC;MACH;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKy8D,OAAA,CAAQlvC,MAAA,CAAO,SAAS,6BAA6B;QACxD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IAEA,OAAO,MAAM,KAAK0+D,eAAA,CAAgBJ,SAAA,EAAWG,YAAA,EAAcjqC,OAAO;EACpE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMkqC,gBAAgBJ,SAAA,EAAmBG,YAAA,EAAsBjqC,OAAA,EAAkB;IAC/E,KAAKmpC,iBAAA,CAAkB;IACvB,IAAI,CAACc,YAAA,IAAgB,CAACH,SAAA,EAAW;MAC/B,MAAMvuE,KAAA,CACJ,4EACF;IACF;IAEA,MAAMyT,GAAA,GACJ,KAAKwvB,SAAA,CAAU,EAAEplB,OAAA,GACjB,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,aAAa17D,kBAAA,CACrD67D,YACF,CAAC;IAEH,IAAIjqC,OAAA,EAAS;MACX,OAAO,MAAM,KAAKxB,SAAA,CAAU,EAAE79B,MAAA,CAA4BqO,GAAA,EAAK;QAAEgxB;MAAQ,CAAC;IAC5E;IAEA,OAAO,MAAM,KAAKxB,SAAA,CAAU,EAAE79B,MAAA,CAA4BqO,GAAA,EAAK,CAAC,CAAC;EACnE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMvO,OACJ0pE,WAAA,GAAsD,CAAC,GACvDC,aAAA,EACA7pE,OAAA,EACA;IAGA,MAAM8pE,QAAA,GAGA,CACJ,UACA,OACA,cACA,MACA,gBACA,QACA,cACA,cACA,mBACA,mBACF;IAEAA,QAAA,CAASjmE,OAAA,CAASK,GAAA,IAAQ;MACxB,OAAO0lE,WAAA,CAAY1lE,GAAG;IACxB,CAAC;IAED,OAAO,MAAM,KAAK6lE,OAAA,CAAQ;MACxB3/D,OAAA,EAASy/D,aAAA;MACTnsE,IAAA,EAAMksE,WAAA;MACN,GAAG5pE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMgqE,cAAc9pE,MAAA,EAA8B;IAChD,MAAMxC,IAAA,GAAO,MAAM,KAAKugC,SAAA,CAAU,EAAEmrC,KAAA,CAClC,KAAK7B,WAAA,CAAY,GACjBrnE,MACF;IAEA,MAAM+pE,sBAAA,GACJ,CAAC,IAAIvsE,IAAA,CAAKi7B,OAAA,CAAQoZ,gBAAA,IAAoB,EAAG,GAAE7iB,IAAA,CAAK,EAAEhzB,IAAA,CAAK,MACvD,CACE,IAAI3B,KAAA,CAAMuH,OAAA,CAAQ,KAAKpE,IAAA,EAAMq0C,gBAAgB,IACxC,KAAKr0C,IAAA,EAAMq0C,gBAAA,GACZ,EAAC,EACP,CACG7iB,IAAA,CAAK,EACLhzB,IAAA,CAAK;IACV,KAAKwB,IAAA,GAAOA,IAAA,CAAKi7B,OAAA;IAEjB,IAAIsxC,sBAAA,EAAwB;MAC1B,KAAKhsC,SAAA,CAAU,EAAE8D,aAAA,CAAc;QAC7BngC,IAAA,EAAM;QACNm3B,GAAA,EAAK,KAAKA,GAAA;QACVgZ,gBAAA,EAAkBr0C,IAAA,CAAKi7B,OAAA,CAAQoZ;MACjC,CAAC;IACH;IACA,OAAOr0C,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMwsE,eAAeC,gBAAA,EAA0B;IAC7C,MAAMzsE,IAAA,GAAO,MAAM,KAAKugC,SAAA,CAAU,EAAEiqC,IAAA,CAClC,KAAKX,WAAA,CAAY,GACjB;MACE6C,QAAA,EAAUD;IACZ,CACF;IACA,KAAKzsE,IAAA,GAAOA,IAAA,CAAKi7B,OAAA;IACjB,OAAOj7B,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM2sE,gBAAA,EAAkB;IACtB,MAAM3sE,IAAA,GAAO,MAAM,KAAKugC,SAAA,CAAU,EAAEiqC,IAAA,CAClC,KAAKX,WAAA,CAAY,GACjB;MACE6C,QAAA,EAAU;IACZ,CACF;IACA,KAAK1sE,IAAA,GAAOA,IAAA,CAAKi7B,OAAA;IACjB,OAAOj7B,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM0C,OAAOJ,OAAA,GAAqC,CAAC,GAAG;IACpD,OAAO,MAAM,KAAKi+B,SAAA,CAAU,EAAE79B,MAAA,CAAiC,KAAKmnE,WAAA,CAAY,GAAG;MACjF,GAAGvnE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAMq8C,SAASr8C,OAAA,GAA2B,CAAC,GAAG;IAC5C,OAAO,MAAM,KAAKi+B,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKX,WAAA,CAAY,IAAI,aACrBvnE,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMsqE,aAAatqE,OAAA,GAAgC,CAAC,GAAG;IACrD,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEQ,aAAA,EAAe;MAAM,GAAGvqE;IAAQ,CAAC;EAC/D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMwqE,aAAaxqE,OAAA,GAAgC,CAAC,GAAG;IACrD,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEU,aAAA,EAAe;MAAM,GAAGzqE;IAAQ,CAAC;EAC/D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM0qE,WACJ9xC,OAAA,EACAxuB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEY,WAAA,EAAa/xC,OAAA;MAASxuB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EACzE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM4qE,cACJhyC,OAAA,EACAxuB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEc,cAAA,EAAgBjyC,OAAA;MAASxuB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EAC5E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM8qE,YACJj8C,KAAA,EACAzkB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEgB,YAAA,EAAcl8C,KAAA;MAAOzkB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EACxE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMgrE,cACJpyC,OAAA,EACAxuB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEkB,OAAA,EAASryC,OAAA;MAASxuB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EACrE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMkrE,cACJtyC,OAAA,EACAxuB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEoB,cAAA,EAAgBvyC,OAAA;MAASxuB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EAC5E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMorE,iBACJxyC,OAAA,EACAxuB,OAAA,EACApK,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAK+pE,OAAA,CAAQ;MAAEsB,iBAAA,EAAmBzyC,OAAA;MAASxuB,OAAA;MAAS,GAAGpK;IAAQ,CAAC;EAC/E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM+pE,QAAQrkD,OAAA,EAAiB;IAC7B,MAAMhoB,IAAA,GAAO,MAAM,KAAKugC,SAAA,CAAU,EAAEiqC,IAAA,CAClC,KAAKX,WAAA,CAAY,GACjB7hD,OACF;IACA,KAAKhoB,IAAA,GAAOA,IAAA,CAAKi7B,OAAA;IACjB,OAAOj7B,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMo8D,KAAKp3C,IAAA,GAAkD,CAAC,GAAG;IAC/D,OAAO,MAAM,KAAKub,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKjqC,SAAA,CAAU,EAAEplB,OAAA,GAAU,4BAC3B;MACE0kD,WAAA,EAAa,KAAKxkC,GAAA;MAClB,GAAGrW;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM4oD,OAAO5oD,IAAA,GAA6B,CAAC,GAAG;IAC5C,OAAO,MAAM,KAAKub,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKjqC,SAAA,CAAU,EAAEplB,OAAA,GAAU,8BAC3B;MACE0kD,WAAA,EAAa,KAAKxkC,GAAA;MAClB,GAAGrW;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAM6oD,QAAQ7oD,IAAA,GAA6B,CAAC,GAAG;IAC7C,MAAM8oD,GAAA,GAAM,KAAKvtC,SAAA,CAAU;IAC3B,MAAMwtC,GAAA,GAAM/oD,IAAA,CAAK+c,OAAA,IAAW+rC,GAAA,CAAIhsC,MAAA;IAChC,IAAI,CAACisC,GAAA,EAAK;MACR,MAAMzwE,KAAA,CAAM,+CAA+C;IAC7D;IACA,MAAM0wE,IAAA,GAAO,MAAM,KAAKrC,mBAAA,CAAoBoC,GAAA,EAAK;MAAEtjE,GAAA,EAAK;QAAEyxB,QAAA,EAAU;MAAK;IAAE,CAAC;IAC5E,OAAO8xC,IAAA,CAAKC,cAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMC,UAAUlpD,IAAA,GAA6B,CAAC,GAAG;IAC/C,MAAM8oD,GAAA,GAAM,KAAKvtC,SAAA,CAAU;IAC3B,MAAMwtC,GAAA,GAAM/oD,IAAA,CAAK+c,OAAA,IAAW+rC,GAAA,CAAIhsC,MAAA;IAChC,IAAI,CAACisC,GAAA,EAAK;MACR,MAAMzwE,KAAA,CAAM,iDAAiD;IAC/D;IACA,MAAM0wE,IAAA,GAAO,MAAM,KAAKrC,mBAAA,CAAoBoC,GAAA,EAAK;MAAEtjE,GAAA,EAAK;QAAEyxB,QAAA,EAAU;MAAM;IAAE,CAAC;IAC7E,OAAO8xC,IAAA,CAAKC,cAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAME,IAAInpD,IAAA,GAA6B,CAAC,GAAG;IACzC,MAAM8oD,GAAA,GAAM,KAAKvtC,SAAA,CAAU;IAC3B,MAAMwtC,GAAA,GAAM/oD,IAAA,CAAK+c,OAAA,IAAW+rC,GAAA,CAAIhsC,MAAA;IAChC,IAAI,CAACisC,GAAA,EAAK;MACR,MAAM,IAAIzwE,KAAA,CAAM,6CAA6C;IAC/D;IACA,MAAM0wE,IAAA,GAAO,MAAM,KAAKrC,mBAAA,CAAoBoC,GAAA,EAAK;MAAEtjE,GAAA,EAAK;QAAE8pB,MAAA,EAAQ;MAAK;IAAE,CAAC;IAC1E,OAAOy5C,IAAA,CAAKC,cAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMG,MAAMppD,IAAA,GAA6B,CAAC,GAAG;IAC3C,MAAM8oD,GAAA,GAAM,KAAKvtC,SAAA,CAAU;IAC3B,MAAMwtC,GAAA,GAAM/oD,IAAA,CAAK+c,OAAA,IAAW+rC,GAAA,CAAIhsC,MAAA;IAChC,IAAI,CAACisC,GAAA,EAAK;MACR,MAAM,IAAIzwE,KAAA,CAAM,+CAA+C;IACjE;IACA,MAAM0wE,IAAA,GAAO,MAAM,KAAKrC,mBAAA,CAAoBoC,GAAA,EAAK;MAAEtjE,GAAA,EAAK;QAAE8pB,MAAA,EAAQ;MAAM;IAAE,CAAC;IAC3E,OAAOy5C,IAAA,CAAKC,cAAA;EACd;EAAA;AAAA;AAAA;AAAA;EAMAI,WAAA,EAIE;IACA,KAAKnD,iBAAA,CAAkB;IACvB,OAAO,KAAK3qC,SAAA,CAAU,EAAE+tC,WAAA,CAAY,KAAKjzC,GAAG;EAC9C;EAEAkzC,WAAW1C,SAAA,EAAmBl9D,QAAA,EAAkC;IAC9D,KAAKu8D,iBAAA,CAAkB;IACvB,IAAI,CAACW,SAAA,EAAW;MACd,MAAMvuE,KAAA,CAAM,uBAAuB;IACrC;IACA,OAAO,KAAKijC,SAAA,CAAU,EAAEiqC,IAAA,CACtB,KAAKjqC,SAAA,CAAU,EAAEplB,OAAA,GAAU,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,WACrE;MACErqC,UAAA,EAAYqqC,SAAA;MACZ2C,SAAA,EAAW7/D,QAAA;MACXxN,EAAA,EAAI,KAAKA,EAAA;MACT+C,IAAA,EAAM,KAAKA;IACb,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMy6D,UAAU7/B,SAAA,EAAoBx8B,OAAA,EAA+B;IACjE,IAAI,CAAC,KAAKmsE,0BAAA,CAA2B,GAAG;MACtC;IACF;IACA,MAAM1zD,GAAA,GAAM,mBAAIN,IAAA,CAAK;IACrB,MAAMq0B,IAAA,GAAO,KAAKq7B,eAAA,IAAmBpvD,GAAA,CAAIgb,OAAA,CAAQ,IAAI,KAAKo0C,eAAA,CAAgBp0C,OAAA,CAAQ;IAClF,KAAK24C,aAAA,GAAgB3zD,GAAA;IACrB,KAAKqvD,QAAA,GAAW;IAEhB,IAAIt7B,IAAA,KAAS,QAAQA,IAAA,GAAO,KAAM;MAChC,KAAKq7B,eAAA,GAAkB,mBAAI1vD,IAAA,CAAK;MAChC,MAAM,KAAKwwD,SAAA,CAAU;QACnB/mE,IAAA,EAAM;QACN46B,SAAA;QACA,IAAIx8B,OAAA,IAAW,CAAC;MAClB,CAAU;IACZ;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMqsE,cACJnqC,SAAA,EACA3hB,KAAA,EACAvgB,OAAA,GAAmC,CAAC,GACpC;IACA,MAAM,KAAK2oE,SAAA,CAAU;MACnB,GAAG3oE,OAAA;MACH4B,IAAA,EAAM;MACNs9B,UAAA,EAAYgD,SAAA;MACZoqC,QAAA,EAAU/rD;IACZ,CAAU;EACZ;EAAA;AAAA;AAAA;AAAA;EAMA,MAAMgsD,iBAAA,EAAmB;IACvB,MAAM,KAAK5D,SAAA,CAAU;MACnB/mE,IAAA,EAAM;IACR,CAAU;EACZ;EAAA;AAAA;AAAA;AAAA;EAMA,MAAM4qE,eAAA,EAAiB;IACrB,MAAM,KAAK7D,SAAA,CAAU;MACnB/mE,IAAA,EAAM;IACR,CAAU;EACZ;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM6qE,WAAWjwC,SAAA,EAAoBx8B,OAAA,EAA+B;IAClE,IAAI,CAAC,KAAKmsE,0BAAA,CAA2B,GAAG;MACtC;IACF;IACA,KAAKtE,eAAA,GAAkB;IACvB,KAAKC,QAAA,GAAW;IAChB,MAAM,KAAKa,SAAA,CAAU;MACnB/mE,IAAA,EAAM;MACN46B,SAAA;MACA,IAAIx8B,OAAA,IAAW,CAAC;IAClB,CAAU;EACZ;EAEAmsE,2BAAA,EAAsC;IACpC,IAAI,CAAC,KAAKpmB,SAAA,CAAU,GAAG2mB,aAAA,IAAiB,CAAC,KAAKzuC,SAAA,CAAU,EAAE0uC,YAAA,EAAcC,SAAA,EAAW;MACjF,OAAO;IACT;IACA,OAAO,KAAK3uC,SAAA,CAAU,EAAEpR,IAAA,EAAM+B,gBAAA,EAAkBi+C,iBAAA,EAAmBzqB,OAAA,IAAW;EAChF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA0qB,YAAA,EAAwC;IAGtC,IAAIryD,GAAA,GAAM,KAAK8F,KAAA,CAAM6c,cAAA,CAAeziC,MAAA,GAAS;IAC7C,IAAI8f,GAAA,GAAM,GAAG;MACXA,GAAA,GAAM;IACR;IACA,MAAMiV,GAAA,GAAM,KAAKnP,KAAA,CAAM6c,cAAA,CAAeziC,MAAA,GAAS;IAC/C,MAAMoyE,YAAA,GAAe,KAAKxsD,KAAA,CAAM6c,cAAA,CAAe37B,KAAA,CAAMgZ,GAAA,EAAKiV,GAAG;IAG7Dq9C,YAAA,CAAa79C,IAAA,CAAK,CAAC3wB,CAAA,EAAGJ,CAAA,KAAMA,CAAA,CAAE4tB,UAAA,CAAW0H,OAAA,CAAQ,IAAIl1B,CAAA,CAAEwtB,UAAA,CAAW0H,OAAA,CAAQ,CAAC;IAE3E,OAAOs5C,YAAA,CAAa,CAAC;EACvB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM7L,SAASxjE,IAAA,GAAwB,CAAC,GAAG;IACzC,KAAKkrE,iBAAA,CAAkB;IAEvB,IAAI,CAAC,KAAK7iB,SAAA,CAAU,GAAGinB,WAAA,IAAe,CAAC,KAAK/uC,SAAA,CAAU,EAAEgvC,kBAAA,CAAmB,GAAG;MAC5E,OAAO3wD,OAAA,CAAQ/E,OAAA,CAAQ,IAAI;IAC7B;IAEA,OAAO,MAAM,KAAK0mB,SAAA,CAAU,EAAEiqC,IAAA,CAAuB,KAAKX,WAAA,CAAY,IAAI,SAAS;MACjF,GAAG7pE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMwvE,WAAWxvE,IAAA,EAAyB;IACxC,KAAKkrE,iBAAA,CAAkB;IAEvB,IAAI,CAAC,KAAK7iB,SAAA,CAAU,GAAGinB,WAAA,IAAe,CAAC,KAAK/uC,SAAA,CAAU,EAAEgvC,kBAAA,CAAmB,GAAG;MAC5E,OAAO3wD,OAAA,CAAQ/E,OAAA,CAAQ,IAAI;IAC7B;IAEA,OAAO,MAAM,KAAK0mB,SAAA,CAAU,EAAEiqC,IAAA,CAAkB,KAAKX,WAAA,CAAY,IAAI,WAAW;MAC9E,GAAG7pE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;EAKAikC,MAAA,EAAQ;IACN,IAAI,KAAKyqC,aAAA,EAAe;MACtB,MAAM3zD,GAAA,GAAM,mBAAIN,IAAA,CAAK;MACrB,MAAMq0B,IAAA,GAAO/zB,GAAA,CAAIgb,OAAA,CAAQ,IAAI,KAAK24C,aAAA,CAAc34C,OAAA,CAAQ;MACxD,IAAI+Y,IAAA,GAAO,OAAQ,KAAKs7B,QAAA,EAAU;QAChC76C,uBAAA,CAAwB,KAAKw/C,UAAA,CAAW,GAAG,mBAAmB;MAChE;IACF;IAEA,KAAKlsD,KAAA,CAAMohB,KAAA,CAAM;EACnB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMzI,MAAMl5B,OAAA,EAA+B;IACzC,MAAMmnE,cAAA,GAAiB;MACrB5mD,KAAA,EAAO;MACP2Y,KAAA,EAAO;MACPkuC,QAAA,EAAU;IACZ;IAGA,MAAM,KAAKnpC,SAAA,CAAU,EAAE8qC,SAAA;IAEvB,IAAI,CAAC,KAAK9qC,SAAA,CAAU,EAAEkvC,gBAAA,CAAiB,GAAG;MACxChG,cAAA,CAAejuC,KAAA,GAAQ;IACzB;IAEA,MAAMk0C,QAAA,GAAW;MAAE,GAAGjG,cAAA;MAAgB,GAAGnnE;IAAQ;IACjD,MAAMugB,KAAA,GAAQ,MAAM,KAAKkiB,KAAA,CAAM2qC,QAAA,EAAU,QAAQ;IACjD,KAAKvrB,WAAA,GAAc;IACnB,KAAKnkD,IAAA,GAAO6iB,KAAA,CAAMoY,OAAA;IAElB,KAAK+uC,OAAA,CAAQlvC,MAAA,CACX,QACA,8CAA8C,KAAKO,GAAG,IACtD;MACEmtC,IAAA,EAAM,CAAC,SAAS;MAChBvtC,OAAA,EAAS;IACX,CACF;IACA,OAAOpY,KAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM8sD,aAAA,EAAe;IACnB,MAAM9iE,QAAA,GAAW,MAAM,KAAK0zB,SAAA,CAAU,EAAEiqC,IAAA,CACtC,KAAKX,WAAA,CAAY,IAAI,kBACrB,CAAC,CACH;IAEA,KAAKG,OAAA,CAAQlvC,MAAA,CACX,QACA,8CAA8C,KAAKO,GAAG,IACtD;MACEmtC,IAAA,EAAM,CAAC,SAAS;MAChBvtC,OAAA,EAAS;IACX,CACF;IAEA,OAAOpuB,QAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAMm4B,WACJlG,SAAA,EACAx8B,OAAA,EACAkvB,IAAA,EACA;IACA,MAAMo+C,cAAA,GAAiBp+C,IAAA,GAAOD,kBAAA,CAAmBC,IAAI,IAAI;IACzD,MAAMxxB,IAAA,GAAO,MAAM,KAAKugC,SAAA,CAAU,EAAEz9B,GAAA,CAClC,KAAKy9B,SAAA,CAAU,EAAEplB,OAAA,GAAU,aAAahL,kBAAA,CAAmB2uB,SAAS,CAAC,YACrE;MACEtN,IAAA,EAAMo+C,cAAA;MACN,GAAGttE;IACL,CACF;IAGA,IAAItC,IAAA,CAAKu1B,QAAA,EAAU;MACjB,KAAK1S,KAAA,CAAMkd,iBAAA,CAAkB//B,IAAA,CAAKu1B,QAAQ;IAC5C;IAEA,OAAOv1B,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM6vE,kBACJvtE,OAAA,EACAkvB,IAAA,GAA2B,EAAC,EAC5B;IACA,OAAO,MAAM,KAAK+O,SAAA,CAAU,EAAEz9B,GAAA,CAC5B,KAAK+mE,WAAA,CAAY,IAAI,oBACrB;MACE7hD,OAAA,EAAS;QACP,GAAG1lB,OAAA;QACHkvB,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC/B;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAs+C,aAAatuC,UAAA,EAAoBl/B,OAAA,EAA8C;IAC7E,OAAO,KAAKi+B,SAAA,CAAU,EAAEz9B,GAAA,CACtB,KAAKy9B,SAAA,CAAU,EAAEplB,OAAA,GAAU,aAAahL,kBAAA,CAAmBqxB,UAAU,CAAC,cACtE;MACE,GAAGl/B;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAytE,gBAAgBC,UAAA,EAAsB;IACpC,OAAO,KAAKzvC,SAAA,CAAU,EAAEz9B,GAAA,CACtB,KAAK+mE,WAAA,CAAY,IAAI,aACrB;MACEoG,GAAA,EAAKD,UAAA,CAAWxxE,IAAA,CAAK,GAAG;IAC1B,CACF;EACF;EAAA;AAAA;AAAA;AAAA;EAMA0xE,SAAA,EAAW;IACT,MAAM;MAAEpuC;IAAO,IAAI,KAAKvB,SAAA,CAAU;IAClC,IAAIuB,MAAA,EAAQ;MACV,OAAO,KAAKjf,KAAA,CAAMlI,IAAA,CAAKmnB,MAAM,IAAI,KAAKjf,KAAA,CAAMlI,IAAA,CAAKmnB,MAAM,EAAE2iC,SAAA,GAAY;IACvE;EACF;EAEA0L,sBAAsBzjE,OAAA,EAAyC;IAC7D,IAAIA,OAAA,CAAQ2zB,QAAA,EAAU,OAAO;IAC7B,IAAI3zB,OAAA,CAAQ0jE,MAAA,EAAQ,OAAO;IAC3B,IAAI1jE,OAAA,CAAQoyB,SAAA,IAAa,CAACpyB,OAAA,CAAQg0B,eAAA,EAAiB,OAAO;IAC1D,IAAIh0B,OAAA,CAAQyiB,IAAA,EAAMhuB,EAAA,KAAO,KAAKo/B,SAAA,CAAU,EAAEuB,MAAA,EAAQ,OAAO;IACzD,IAAIp1B,OAAA,CAAQyiB,IAAA,EAAMhuB,EAAA,IAAM,KAAKo/B,SAAA,CAAU,EAAE8vC,cAAA,CAAe3jE,OAAA,CAAQyiB,IAAA,CAAKhuB,EAAE,GACrE,OAAO;IAGT,IACEtE,KAAA,CAAMuH,OAAA,CAAQ,KAAKpE,IAAA,EAAMq0C,gBAAgB,KACzC,CAAC,KAAKr0C,IAAA,EAAMq0C,gBAAA,CAAiB7L,QAAA,CAAS,aAAa,GACnD;MACA,OAAO;IACT;IAGA,IAAI,KAAK6lC,UAAA,CAAW,EAAEiC,KAAA,EAAO,OAAO;IAEpC,OAAO;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAC,YAAYL,QAAA,EAAwB;IAClC,IAAI,CAACA,QAAA,EAAU,OAAO,KAAKrtD,KAAA,CAAM0c,WAAA;IAEjC,IAAIhJ,KAAA,GAAQ;IACZ,SAASx5B,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAK8lB,KAAA,CAAM6c,cAAA,CAAeziC,MAAA,EAAQF,CAAA,IAAK,GAAG;MAC5D,MAAM2P,OAAA,GAAU,KAAKmW,KAAA,CAAM6c,cAAA,CAAe3iC,CAAC;MAC3C,IAAI2P,OAAA,CAAQ2hB,UAAA,GAAa6hD,QAAA,IAAY,KAAKC,qBAAA,CAAsBzjE,OAAO,GAAG;QACxE6pB,KAAA;MACF;IACF;IACA,OAAOA,KAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAi6C,oBAAA,EAAsB;IACpB,MAAMN,QAAA,GAAW,KAAKA,QAAA,CAAS;IAC/B,MAAMpuC,MAAA,GAAS,KAAKvB,SAAA,CAAU,EAAEuB,MAAA;IAEhC,IAAIvL,KAAA,GAAQ;IACZ,SAASx5B,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAK8lB,KAAA,CAAM6c,cAAA,CAAeziC,MAAA,EAAQF,CAAA,IAAK,GAAG;MAC5D,MAAM2P,OAAA,GAAU,KAAKmW,KAAA,CAAM6c,cAAA,CAAe3iC,CAAC;MAC3C,IACE,KAAKozE,qBAAA,CAAsBzjE,OAAO,MACjC,CAACwjE,QAAA,IAAYxjE,OAAA,CAAQ2hB,UAAA,GAAa6hD,QAAA,KACnCxjE,OAAA,CAAQgiB,eAAA,EAAiBpgB,IAAA,CAAM6gB,IAAA,IAASA,IAAA,CAAKhuB,EAAA,KAAO2gC,MAAM,GAC1D;QACAvL,KAAA;MACF;IACF;IACA,OAAOA,KAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA0BA,MAAMwO,MACJziC,OAAA,GAA+B,CAAC,GAChCw9B,+BAAA,GAAkD,WAClD;IAEA,MAAM,KAAKS,SAAA,CAAU,EAAE8qC,SAAA;IAEvB,MAAMoF,WAAA,GACJnuE,OAAA,CAAQw9D,UAAA,EAAY3+D,EAAA,IACpBmB,OAAA,CAAQouE,aAAA,IACR,KAAKzG,KAAA,EAAOnK,UAAA,EAAY3+D,EAAA,IACxB,KAAK8oE,KAAA,EAAOyG,aAAA;IAEd,IAAI,KAAKnwC,SAAA,CAAU,EAAEgvC,kBAAA,CAAmB,KAAK,OAAOkB,WAAA,KAAgB,UAAU;MAC5E,KAAKlwC,SAAA,CAAU,EAAEzF,MAAA,CACf,QACA,2HACF;IACF;IAEA,IAAI61C,QAAA,GAAW,GAAG,KAAKpwC,SAAA,CAAU,EAAEplB,OAAO,aAAahL,kBAAA,CACrD,KAAKjM,IACP,CAAC;IACD,IAAI,KAAK/C,EAAA,EAAI;MACXwvE,QAAA,IAAY,IAAIxgE,kBAAA,CAAmB,KAAKhP,EAAE,CAAC;IAC7C;IAEA,MAAM0hB,KAAA,GAAQ,MAAM,KAAK0d,SAAA,CAAU,EAAEiqC,IAAA,CACnCmG,QAAA,GAAW,UACX;MACE3wE,IAAA,EAAM,KAAKiqE,KAAA;MACXpnD,KAAA,EAAO;MACP,GAAGvgB;IACL,CACF;IAGA,IAAI,CAAC,KAAKnB,EAAA,EAAI;MACZ,KAAKA,EAAA,GAAK0hB,KAAA,CAAMoY,OAAA,CAAQ95B,EAAA;MACxB,KAAKk6B,GAAA,GAAMxY,KAAA,CAAMoY,OAAA,CAAQI,GAAA;MAGzB,MAAMu1C,cAAA,GAAiBt1C,sBAAA,CACrB,KAAKp3B,IAAA,EACL2e,KAAA,CAAMqY,OAAA,CAAQz7B,GAAA,CAAKm8B,MAAA,IAAWA,MAAA,CAAOmG,OAAA,IAAWnG,MAAA,CAAOzM,IAAA,EAAMhuB,EAAA,IAAM,EAAE,CACvE;MAEA,IAAIyvE,cAAA,IAAkBA,cAAA,IAAkB,KAAKrwC,SAAA,CAAU,EAAEk2B,cAAA,EAAgB;QAGvE,OAAO,KAAKl2B,SAAA,CAAU,EAAEk2B,cAAA,CAAema,cAAc;MACvD;MAEA,IACE,EAAE,KAAKv1C,GAAA,IAAO,KAAKkF,SAAA,CAAU,EAAEk2B,cAAA,KAC/B,KAAKl2B,SAAA,CAAU,EAAEswC,aAAA,CAAc,GAC/B;QACA,KAAKtwC,SAAA,CAAU,EAAEk2B,cAAA,CAAe,KAAKp7B,GAAG,IAAI;MAC9C;IACF;IAEA,KAAKkF,SAAA,CAAU,EAAEuwC,iBAAA,CAAkBjuD,KAAA,CAAMoY,OAAO;IAGhD,MAAM;MAAE4F;IAAW,IAAI,KAAKkwC,gBAAA,CAAiBluD,KAAA,EAAOid,+BAA+B;IACnFe,UAAA,CAAWpI,UAAA,GAAa;MACtB,GAAGoI,UAAA,CAAWpI,UAAA;MACd,GAAGoC,oBAAA,CAAqB;QACtBzC,SAAA,EAAWyI,UAAA;QACXtI,wBAAA,EAA0Bj2B,OAAA,EAASizB,QAAA;QACnC8C,iBAAA,EACE/1B,OAAA,EAASizB,QAAA,EAAUmP,KAAA,IAAS7W,4CAAA;QAC9ByK,YAAA,EAAczV,KAAA,CAAM0S,QAAA;QACpBuF,MAAA,EAAQ,KAAKyF,SAAA,CAAU,EAAEzF;MAC3B,CAAC;IACH;IAEA,KAAKyF,SAAA,CAAU,EAAEsoC,KAAA,CAAMmI,gBAAA,CAAiBnuD,KAAA,CAAM0S,QAAA,EAAU,IAAI;IAC5D,KAAKgL,SAAA,CAAU,EAAE0wC,SAAA,CAAUpQ,YAAA,CAAah+C,KAAA,CAAM0S,QAAQ;IAEtD,KAAKqvC,eAAA,CAAgBoB,4BAAA,CAA6BnjD,KAAK;IAEvD,MAAM0pD,sBAAA,GACJ,CAAC,IAAI1pD,KAAA,CAAMoY,OAAA,CAAQoZ,gBAAA,IAAoB,EAAG,GAAE7iB,IAAA,CAAK,EAAEhzB,IAAA,CAAK,MACxD,CACE,IAAI,KAAKwB,IAAA,IAAQnD,KAAA,CAAMuH,OAAA,CAAQ,KAAKpE,IAAA,EAAMq0C,gBAAgB,IACtD,KAAKr0C,IAAA,CAAKq0C,gBAAA,GACV,EAAC,EACP,CACG7iB,IAAA,CAAK,EACLhzB,IAAA,CAAK;IACV,KAAKwB,IAAA,GAAO6iB,KAAA,CAAMoY,OAAA;IAClB,KAAKivC,WAAA,GAAc;IAEnB,IAAIqC,sBAAA,EAAwB;MAC1B,KAAKhsC,SAAA,CAAU,EAAE8D,aAAA,CAAc;QAC7BngC,IAAA,EAAM;QACNm3B,GAAA,EAAK,KAAKA,GAAA;QACVgZ,gBAAA,EAAkBxxB,KAAA,CAAMoY,OAAA,CAAQoZ;MAClC,CAAC;IACH;IAEA,KAAK9T,SAAA,CAAU,EAAE8D,aAAA,CAAc;MAC7BngC,IAAA,EAAM;MACNgtE,eAAA,EAAiB;QACfz0C,QAAA,EAAU,CAAC5Z,KAAK;QAChBsuD,kBAAA,EAAoBtwC,UAAA,CAAWlB;MACjC;IACF,CAAC;IACD,KAAKY,SAAA,CAAU,EAAE2lC,SAAA,EAAWC,kBAAA,CACzBC,EAAA,IACCA,EAAA,CAAGgL,cAAA,GAAiB;MAClB30C,QAAA,EAAU,CAAC5Z,KAAK;MAChBwuD,mBAAA,EAAqBxwC,UAAA,CAAWlB;IAClC,CAAC,GACH;MAAE7pB,MAAA,EAAQ;IAAiB,CAC7B;IAEA,OAAO+M,KAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMyuD,QAAQC,YAAA,EAAsBjvE,OAAA,EAAyB;IAC3D,KAAK4oE,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAE+wC,OAAA,CAAQC,YAAA,EAAc;MAClD,GAAGjvE,OAAA;MACH4B,IAAA,EAAM,KAAKA,IAAA;MACX/C,EAAA,EAAI,KAAKA;IACX,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMqwE,KAAKhvC,MAAA,GAAwB,MAAMivC,YAAA,GAAe,OAAO;IAC7D,KAAKvG,iBAAA,CAAkB;IAEvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEiqC,IAAA,CAAkB,GAAG,KAAKX,WAAA,CAAY,CAAC,SAAS;MAC5E9nC,OAAA,EAASS,MAAA;MACTkvC,aAAA,EAAeD;IACjB,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAME,KAAKnvC,MAAA,GAAwB,MAAM;IACvC,KAAK0oC,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEiqC,IAAA,CAAkB,GAAG,KAAKX,WAAA,CAAY,CAAC,SAAS;MAC5E9nC,OAAA,EAASS;IACX,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMovC,UAAUL,YAAA,EAAsB;IACpC,KAAKrG,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEqxC,SAAA,CAAUL,YAAA,EAAc;MACpDrtE,IAAA,EAAM,KAAKA,IAAA;MACX/C,EAAA,EAAI,KAAKA;IACX,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM0wE,UAAUN,YAAA,EAAsBjvE,OAAA,EAAyB;IAC7D,KAAK4oE,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEsxC,SAAA,CAAUN,YAAA,EAAc;MACpD,GAAGjvE,OAAA;MACH4B,IAAA,EAAM,KAAKA,IAAA;MACX/C,EAAA,EAAI,KAAKA;IACX,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM2wE,gBAAgBP,YAAA,EAAsB;IAC1C,KAAKrG,iBAAA,CAAkB;IACvB,OAAO,MAAM,KAAK3qC,SAAA,CAAU,EAAEuxC,eAAA,CAAgBP,YAAA,EAAc;MAC1DrtE,IAAA,EAAM,KAAKA,IAAA;MACX/C,EAAA,EAAI,KAAKA;IACX,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM4wE,KAAKvtC,SAAA,EAAmB8sB,MAAA,EAAgBygB,IAAA,EAAoB;IAChE,OAAO,MAAM,KAAKxxC,SAAA,CAAU,EAAEyxC,YAAA,CAAaxtC,SAAA,EAAW8sB,MAAA,EAAQygB,IAAI;EACpE;EAEA,MAAME,WAAWztC,SAAA,EAAmB8sB,MAAA,EAAgB4gB,MAAA,EAAgB;IAClE,OAAO,MAAM,KAAK3xC,SAAA,CAAU,EAAE4xC,cAAA,CAAe3tC,SAAA,EAAW8sB,MAAA,EAAQ4gB,MAAM;EACxE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAME,aAAa1lE,OAAA,EAA8B;IAC/C,OAAO,MAAM,KAAK6zB,SAAA,CAAU,EAAEiqC,IAAA,CAC5B,KAAKX,WAAA,CAAY,IAAI,UACrB;MACEn9D;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAM27D,YAAY37D,OAAA,EAA8B;IAC9C,IAAI;MACF,MAAMw5D,SAAA,GAAY,KAAK3lC,SAAA,CAAU,EAAE2lC,SAAA;MACnC,IAAIA,SAAA,EAAW;QACb,OAAO,MAAMA,SAAA,CAAUwE,SAAA,CAA+B;UACpDC,IAAA,EAAM;YACJC,SAAA,EAAW,KAAKzpE,EAAA;YAChBs6B,WAAA,EAAa,KAAKv3B,IAAA;YAClB6tD,QAAA,EAAUrlD,OAAA,CAAQoyB,SAAA;YAClB9W,OAAA,EAAS,CAACtb,OAAO;YACjBxI,IAAA,EAAM;UACR;QACF,CAAC;MACH;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKy8D,OAAA,CAAQlvC,MAAA,CAAO,SAAS,0BAA0B;QACrD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IAEA,OAAO,KAAK6kE,YAAA,CAAa1lE,OAAO;EAClC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM2lE,aAAa;IAAEvzC;EAAU,IAA4B,CAAC,GAAG;IAC7D,OAAO,MAAM,KAAKyB,SAAA,CAAU,EAAE79B,MAAA,CAAoB,KAAKmnE,WAAA,CAAY,IAAI,UAAU;MAC/E/qC;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAMunC,YAAY/jE,OAAA,GAAkC,CAAC,GAAG;IACtD,MAAM;MAAEw8B;IAAU,IAAIx8B,OAAA;IACtB,IAAI;MACF,MAAM4jE,SAAA,GAAY,KAAK3lC,SAAA,CAAU,EAAE2lC,SAAA;MACnC,IAAIA,SAAA,EAAW;QACb,OAAO,MAAMA,SAAA,CAAUwE,SAAA,CAAuB;UAC5CC,IAAA,EAAM;YACJC,SAAA,EAAW,KAAKzpE,EAAA;YAChBs6B,WAAA,EAAa,KAAKv3B,IAAA;YAClB6tD,QAAA,EAAUjzB,SAAA;YACV9W,OAAA,EAAS,CAAC1lB,OAAO;YACjB4B,IAAA,EAAM;UACR;QACF,CAAC;MACH;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKy8D,OAAA,CAAQlvC,MAAA,CAAO,SAAS,0BAA0B;QACrD0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IAEA,OAAO,KAAK8kE,YAAA,CAAa/vE,OAAO;EAClC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMmmE,SAAS;IAAE3pC;EAAU,IAA4B,CAAC,GAAG;IACzD,OAAO,MAAM,KAAKyB,SAAA,CAAU,EAAEz9B,GAAA,CAAsB,KAAK+mE,WAAA,CAAY,IAAI,UAAU;MACjF/qC;IACF,CAAC;EACH;EAcAkjC,GACEsQ,gBAAA,EACAC,iBAAA,EAC6B;IAC7B,MAAM/rE,GAAA,GAAM+rE,iBAAA,GAAqBD,gBAAA,GAA8B;IAC/D,MAAM9yE,QAAA,GAAW+yE,iBAAA,GAAoBA,iBAAA,GAAoBD,gBAAA;IACzD,IAAI,EAAE9rE,GAAA,IAAO,KAAKojE,SAAA,GAAY;MAC5B,KAAKA,SAAA,CAAUpjE,GAAG,IAAI,EAAC;IACzB;IACA,KAAKwjE,OAAA,CAAQlvC,MAAA,CACX,QACA,0BAA0Bt0B,GAAG,qBAAqB,KAAK60B,GAAG,IAC1D;MACEmtC,IAAA,EAAM,CAAC,SAAS,SAAS;MACzBvtC,OAAA,EAAS;IACX,CACF;IAEA,KAAK2uC,SAAA,CAAUpjE,GAAG,EAAEjI,IAAA,CAAKiB,QAAQ;IAEjC,OAAO;MACL0f,WAAA,EAAaA,CAAA,KAAM;QACjB,KAAK8qD,OAAA,CAAQlvC,MAAA,CACX,QACA,yBAAyBt0B,GAAG,uBAAuB,KAAK60B,GAAG,IAC3D;UACEmtC,IAAA,EAAM,CAAC,SAAS,SAAS;UACzBvtC,OAAA,EAAS;QACX,CACF;QAEA,KAAK2uC,SAAA,CAAUpjE,GAAG,IAAI,KAAKojE,SAAA,CAAUpjE,GAAG,EAAEgI,MAAA,CAAQmB,EAAA,IAAOA,EAAA,KAAOnQ,QAAQ;MAC1E;IACF;EACF;EAQAgzE,IACEF,gBAAA,EACAC,iBAAA,EACM;IACN,MAAM/rE,GAAA,GAAM+rE,iBAAA,GAAqBD,gBAAA,GAA8B;IAC/D,MAAM9yE,QAAA,GAAW+yE,iBAAA,GAAoBA,iBAAA,GAAoBD,gBAAA;IACzD,IAAI,EAAE9rE,GAAA,IAAO,KAAKojE,SAAA,GAAY;MAC5B,KAAKA,SAAA,CAAUpjE,GAAG,IAAI,EAAC;IACzB;IAEA,KAAKwjE,OAAA,CAAQlvC,MAAA,CACX,QACA,yBAAyBt0B,GAAG,uBAAuB,KAAK60B,GAAG,IAC3D;MACEmtC,IAAA,EAAM,CAAC,SAAS,SAAS;MACzBvtC,OAAA,EAAS;IACX,CACF;IACA,KAAK2uC,SAAA,CAAUpjE,GAAG,IAAI,KAAKojE,SAAA,CAAUpjE,GAAG,EAAEgI,MAAA,CAAQ5G,KAAA,IAAUA,KAAA,KAAUpI,QAAQ;EAChF;EAEAizE,oBAAoBj0D,KAAA,EAAc;IAEhC,MAAMyc,OAAA,GAAU;IAChB,KAAK+uC,OAAA,CAAQlvC,MAAA,CACX,QACA,0DAA0Dtc,KAAA,CAAMta,IAAI,SAAS,KAAKm3B,GAAG,IACrF;MACEmtC,IAAA,EAAM,CAAC,SAAS,SAAS;MACzBvtC,OAAA,EAAS;IACX,CACF;IAEA,MAAMy3C,YAAA,GAAez3C,OAAA,CAAQpY,KAAA;IAC7B,QAAQrE,KAAA,CAAMta,IAAA;MACZ,KAAK;QACH,IAAIsa,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;UAClBuxE,YAAA,CAAaxzC,MAAA,CAAO1gB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAIqd,KAAA;QACvC;QACA;MACF,KAAK;QACH,IAAIA,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;UAClB,OAAOuxE,YAAA,CAAaxzC,MAAA,CAAO1gB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE;QAC1C;QACA;MACF,KAAK;QACH,IAAIqd,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,IAAMqd,KAAA,CAAM6P,UAAA,EAAY;UACtCqkD,YAAA,CAAa/3D,IAAA,CAAK6D,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAI;YACjCsjE,SAAA,EAAW,IAAIhqD,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;YACpCs0C,oBAAA,EAAsBnkD,KAAA,CAAMmkD,oBAAA;YAC5BxzC,IAAA,EAAM3Q,KAAA,CAAM2Q,IAAA;YACZq1C,eAAA,EAAiB;UACnB;UAEA,IAAIhmD,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,KAAO,KAAKo/B,SAAA,CAAU,EAAEpR,IAAA,EAAMhuB,EAAA,EAAI;YAChDuxE,YAAA,CAAanzC,WAAA,GAAc;UAC7B;QACF;QACA;MACF,KAAK;MACL,KAAK;QACH,IAAI/gB,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;UAClBuxE,YAAA,CAAapzC,QAAA,CAAS9gB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAIqd,KAAA,CAAM2Q,IAAA;QAC/C;QACA;MACF,KAAK;QACH,IAAI3Q,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;UAClB,OAAOuxE,YAAA,CAAapzC,QAAA,CAAS9gB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE;QAC5C;QACA;MACF,KAAK;QACH,IAAIqd,KAAA,CAAM9R,OAAA,EAAS;UACjB,KAAKimE,4BAAA,CAA6Bn0D,KAAK;UACvC,IAAIA,KAAA,CAAMokD,WAAA,EAAa8P,YAAA,CAAa/uC,aAAA,CAAcnlB,KAAA,CAAM9R,OAAO,OAC1DgmE,YAAA,CAAa7yC,gBAAA,CAAiBrhB,KAAA,CAAM9R,OAAA,EAAS,OAAO,KAAK;UAE9DgmE,YAAA,CAAarvC,6BAAA,CAA8B7kB,KAAA,CAAM9R,OAAO;UAExD,IAAI8R,KAAA,CAAM9R,OAAA,CAAQ6nB,MAAA,EAAQ;YACxBm+C,YAAA,CAAazxC,mBAAA,CAAoBziB,KAAA,CAAM9R,OAAO;UAChD;QACF;QACA;MACF,KAAK;QACH,IAAI8R,KAAA,CAAM9R,OAAA,EAAS;UAEjB,MAAMkmE,UAAA,GAAap0D,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,KAAO,KAAKo/B,SAAA,CAAU,EAAEpR,IAAA,EAAMhuB,EAAA;UAC7D,MAAM0xE,eAAA,GACJr0D,KAAA,CAAM9R,OAAA,CAAQoyB,SAAA,IAAa,CAACtgB,KAAA,CAAM9R,OAAA,CAAQg0B,eAAA;UAE5C,IAAI,KAAK7d,KAAA,CAAMmb,UAAA,IAAc60C,eAAA,EAAiB;YAC5CH,YAAA,CAAa7yC,gBAAA,CAAiBrhB,KAAA,CAAM9R,OAAA,EAASkmE,UAAU;UACzD;UAEA,IAAIp0D,KAAA,CAAM9R,OAAA,CAAQ6nB,MAAA,EAAQ;YACxBm+C,YAAA,CAAa3xC,gBAAA,CAAiBviB,KAAA,CAAM9R,OAAO;UAC7C;UAKA,MAAMomE,wBAAA,GAA2BF,UAAA,IAAcC,eAAA;UAC/C,IAAIC,wBAAA,EAA0B;UAE9B,IAAIt0D,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;YAClB,WAAWqhC,MAAA,IAAUkwC,YAAA,CAAa/3D,IAAA,EAAM;cACtC,IAAI6nB,MAAA,KAAWhkB,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAA,EAAI;gBAC5BuxE,YAAA,CAAa/3D,IAAA,CAAK6D,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAI;kBACjCsjE,SAAA,EAAW,IAAIhqD,IAAA,CAAK+D,KAAA,CAAM6P,UAAoB;kBAC9Cc,IAAA,EAAM3Q,KAAA,CAAM2Q,IAAA;kBACZq1C,eAAA,EAAiB;gBACnB;cACF,OAAO;gBACLkO,YAAA,CAAa/3D,IAAA,CAAK6nB,MAAM,EAAEgiC,eAAA,IAAmB;cAC/C;YACF;UACF;UAEA,IAAI,KAAK2L,qBAAA,CAAsB3xD,KAAA,CAAM9R,OAAO,GAAG;YAC7CgmE,YAAA,CAAanzC,WAAA,GAAcmzC,YAAA,CAAanzC,WAAA,GAAc;UACxD;QACF;QACA;MACF,KAAK;MACL,KAAK;QACH,IAAI/gB,KAAA,CAAM9R,OAAA,EAAS;UACjB,KAAKimE,4BAAA,CAA6Bn0D,KAAK;UACvCk0D,YAAA,CAAa7yC,gBAAA,CAAiBrhB,KAAA,CAAM9R,OAAA,EAAS,OAAO,KAAK;UACzDgmE,YAAA,CAAa1vC,8BAAA,CAA+B;YAAEt2B,OAAA,EAAS8R,KAAA,CAAM9R;UAAQ,CAAC;UACtE,IAAI8R,KAAA,CAAM9R,OAAA,CAAQ6nB,MAAA,EAAQ;YACxBm+C,YAAA,CAAa3xC,gBAAA,CAAiBviB,KAAA,CAAM9R,OAAO;UAC7C,OAAO;YACLgmE,YAAA,CAAazxC,mBAAA,CAAoBziB,KAAA,CAAM9R,OAAO;UAChD;QACF;QACA;MACF,KAAK;QACH,IAAI8R,KAAA,CAAMyc,OAAA,EAAS83C,YAAA,EAAc;UAC/B,MAAMC,WAAA,GAAc,CAAC,IAAIv4D,IAAA,CAAK+D,KAAA,CAAMyc,OAAA,CAAQ83C,YAAY;UAExDL,YAAA,CAAa50C,WAAA,CAAY33B,OAAA,CAAQ,CAAC06B,UAAA,EAAY2C,eAAA,KAAoB;YAChE3C,UAAA,CAAWtL,QAAA,CAASpvB,OAAA,CAAQ,CAAC;cAAEkoB,UAAA,EAAYyyC,SAAA;cAAW3/D;YAAG,MAAM;cAC7D,IAAI6xE,WAAA,GAAc,CAAClS,SAAA,EACjB4R,YAAA,CAAa/uC,aAAA,CAAc;gBAAExiC,EAAA;gBAAIqiC;cAAgB,CAAC;YACtD,CAAC;UACH,CAAC;UAEDkvC,YAAA,CAAaj0C,cAAA,CAAet4B,OAAA,CAAQ,CAAC;YAAEhF,EAAA;YAAIktB,UAAA,EAAYyyC;UAAU,MAAM;YACrE,IAAIkS,WAAA,GAAc,CAAClS,SAAA,EACjB4R,YAAA,CAAazxC,mBAAA,CAAoB;cAAE9/B;YAAG,CAAoB;UAC9D,CAAC;UACDuxE,YAAA,CAAanzC,WAAA,GAAc,KAAKgxC,WAAA,CAC9B,IAAI91D,IAAA,CAAK+D,KAAA,CAAMyc,OAAA,CAAQ83C,YAAY,CACrC;QACF,OAAO;UACLL,YAAA,CAAapuC,aAAA,CAAc;UAC3BouC,YAAA,CAAanzC,WAAA,GAAc;QAC7B;QAGA,IAAI/gB,KAAA,CAAM9R,OAAA,EAAS;UACjBgmE,YAAA,CAAa7yC,gBAAA,CAAiBrhB,KAAA,CAAM9R,OAAO;UAC3C,IAAI8R,KAAA,CAAM9R,OAAA,CAAQ6nB,MAAA,EAAQ;YACxBm+C,YAAA,CAAa3xC,gBAAA,CAAiBviB,KAAA,CAAM9R,OAAO;UAC7C;QACF;QAEA;MACF,KAAK;MACL,KAAK;QAAkB;UACrB,MAAMumE,UAAA,GAAoC;YACxC,GAAGz0D,KAAA,CAAMod;UACX;UAEA,IAAIq3C,UAAA,CAAW1kD,SAAA,KAAc,MAAM;YACjC,OAAO0kD,UAAA,CAAW1kD,SAAA;UACpB;UAEA,IAAI0kD,UAAA,CAAWl3C,WAAA,KAAgB,MAAM;YACnC,OAAOk3C,UAAA,CAAWl3C,WAAA;UACpB;UAEA,IAAIk3C,UAAA,EAAY9jD,IAAA,EAAM;YACpBujD,YAAA,CAAax3C,OAAA,GAAU;cACrB,GAAGw3C,YAAA,CAAax3C,OAAA;cAChB,CAAC+3C,UAAA,CAAW9jD,IAAA,CAAKhuB,EAAE,GAAG8xE;YACxB;YACA,IAAIh4C,OAAA,CAAQj7B,IAAA,EAAMkzE,YAAA,IAAgB10D,KAAA,CAAMta,IAAA,KAAS,gBAAgB;cAC/D+2B,OAAA,CAAQj7B,IAAA,CAAKkzE,YAAA,IAAgB;YAC/B;UACF;UAEA,MAAM5N,aAAA,GAAgB,KAAK/kC,SAAA,CAAU,EAAEuB,MAAA;UACvC,IACE,OAAOwjC,aAAA,KAAkB,YACzB,OAAO2N,UAAA,EAAY9jD,IAAA,EAAMhuB,EAAA,KAAO,YAChC8xE,UAAA,CAAW9jD,IAAA,CAAKhuB,EAAA,KAAOmkE,aAAA,EACvB;YACAoN,YAAA,CAAa72C,UAAA,GAAao3C,UAAA;UAC5B;UACA;QACF;MACA,KAAK;QACH,IAAIz0D,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;UAClB,MAAMgyE,UAAA,GAAa;YACjB,GAAGT,YAAA,CAAax3C;UAClB;UAEA,OAAOi4C,UAAA,CAAW30D,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE;UAE/BuxE,YAAA,CAAax3C,OAAA,GAAUi4C,UAAA;UAEvB,IAAIl4C,OAAA,CAAQj7B,IAAA,EAAMkzE,YAAA,EAAc;YAC9Bj4C,OAAA,CAAQj7B,IAAA,CAAKkzE,YAAA,GAAexnE,IAAA,CAAKsmB,GAAA,CAAIiJ,OAAA,CAAQj7B,IAAA,CAAKkzE,YAAA,GAAe,GAAG,CAAC;UACvE;QAGF;QACA;MACF,KAAK;QAA4B;UAC/B,MAAMN,UAAA,GAAap0D,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,KAAO,KAAKo/B,SAAA,CAAU,EAAEpR,IAAA,EAAMhuB,EAAA;UAC7D,IAAI,EAAEyxE,UAAA,IAAcp0D,KAAA,CAAM2Q,IAAA,GAAO;UAEjC,MAAMoQ,WAAA,GAAc/gB,KAAA,CAAMgmD,eAAA,IAAmB;UAE7CkO,YAAA,CAAa/3D,IAAA,CAAK6D,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAI;YACjCiyE,uBAAA,EAAyB50D,KAAA,CAAM40D,uBAAA;YAC/B3O,SAAA,EAAW,IAAIhqD,IAAA,CAAK+D,KAAA,CAAM60D,YAAsB;YAChD1Q,oBAAA,EAAsBnkD,KAAA,CAAMmkD,oBAAA;YAC5BxzC,IAAA,EAAM3Q,KAAA,CAAM2Q,IAAA;YACZq1C,eAAA,EAAiBjlC;UACnB;UAEAmzC,YAAA,CAAanzC,WAAA,GAAcA,WAAA;UAC3B;QACF;MACA,KAAK;QACH,IAAI/gB,KAAA,CAAMyc,OAAA,EAAS;UACjB,MAAMq4C,eAAA,GACJ90D,KAAA,CAAMyc,OAAA,EAASs4C,MAAA,KAAW,UAC1B/0D,KAAA,CAAMyc,OAAA,CAAQs4C,MAAA,KAAWt4C,OAAA,CAAQj7B,IAAA,EAAMuzE,MAAA;UACzC,IAAID,eAAA,EAAiB;YACnB,KAAKvuC,KAAA,CAAM;cAAEliB,KAAA,EAAO;cAAO0S,QAAA,EAAU;gBAAEmP,KAAA,EAAO;cAAE;cAAGpF,QAAA,EAAU;gBAAEoF,KAAA,EAAO;cAAE;YAAE,CAAC;UAC7E;UACA,MAAM8uC,cAAA,GAAiB;YACrB,GAAGh1D,KAAA,CAAMyc,OAAA;YACTw4C,MAAA,EAAQj1D,KAAA,CAAMyc,OAAA,EAASw4C,MAAA,IAAUx4C,OAAA,CAAQj7B,IAAA,EAAMyzE,MAAA;YAC/Cp/B,gBAAA,EACE71B,KAAA,CAAMyc,OAAA,EAASoZ,gBAAA,IAAoBpZ,OAAA,CAAQj7B,IAAA,EAAMq0C;UACrD;UACApZ,OAAA,CAAQj7B,IAAA,GAAOwzE,cAAA;QACjB;QACA;MACF,KAAK;QACH,IAAIh1D,KAAA,CAAM9R,OAAA,IAAW8R,KAAA,CAAM2iB,QAAA,EAAU;UACnC,MAAM;YAAEz0B,OAAA;YAASy0B;UAAS,IAAI3iB,KAAA;UAC9BA,KAAA,CAAM9R,OAAA,GAAUgmE,YAAA,CAAaxxC,WAAA,CAAYC,QAAA,EAAUz0B,OAAO;QAC5D;QACA;MACF,KAAK;QACH,IAAI8R,KAAA,CAAM9R,OAAA,IAAW8R,KAAA,CAAM2iB,QAAA,EAAU;UACnC,MAAM;YAAEz0B,OAAA;YAASy0B;UAAS,IAAI3iB,KAAA;UAC9BA,KAAA,CAAM9R,OAAA,GAAUgmE,YAAA,CAAa/vC,cAAA,CAAexB,QAAA,EAAUz0B,OAAO;QAC/D;QACA;MACF,KAAK;QACH,IAAI8R,KAAA,CAAM9R,OAAA,IAAW8R,KAAA,CAAM2iB,QAAA,EAAU;UACnC,MAAM;YAAEz0B,OAAA;YAASy0B;UAAS,IAAI3iB,KAAA;UAE9BA,KAAA,CAAM9R,OAAA,GAAUgmE,YAAA,CAAaxxC,WAAA,CAC3BC,QAAA,EACAz0B,OAAA,EACA,IACF;QACF;QACA;MACF,KAAK;QACHuuB,OAAA,CAAQj7B,IAAA,GAAO;UAAE,GAAGi7B,OAAA,CAAQj7B,IAAA;UAAMyzE,MAAA,EAAQ;QAAK;QAC/C,IAAIj1D,KAAA,CAAMkzD,aAAA,EAAe;UACvBgB,YAAA,CAAapuC,aAAA,CAAc;QAC7B;QACA;MACF,KAAK;QACHrJ,OAAA,CAAQj7B,IAAA,GAAO;UAAE,GAAGi7B,OAAA,CAAQj7B,IAAA;UAAMyzE,MAAA,EAAQ;QAAM;QAChD,KAAKlzC,SAAA,CAAU,EAAE2lC,SAAA,EAAWwN,4BAAA,CAA6B;UAAEl1D;QAAM,CAAC;QAClE;MACF,KAAK;QACH,IAAI,CAACA,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;QACrBuxE,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAI;UACpC,IAAIuxE,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,KAAK,CAAC;UAC5CwyE,aAAA,EAAe,CAAC,CAACn1D,KAAA,CAAMo1D,MAAA;UACvBC,MAAA,EAAQ,CAACr1D,KAAA,CAAMo1D,MAAA;UACfzkD,IAAA,EAAM;YAAE,IAAIujD,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,GAAGguB,IAAA,IAAQ,CAAC;YAAI,GAAG3Q,KAAA,CAAM2Q;UAAK;QAC9E;QACA;MACF,KAAK;QACH,IAAI,CAAC3Q,KAAA,CAAM2Q,IAAA,EAAMhuB,EAAA,EAAI;QACrBuxE,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,IAAI;UACpC,IAAIuxE,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,KAAK,CAAC;UAC5CwyE,aAAA,EAAe;UACfE,MAAA,EAAQ;UACR1kD,IAAA,EAAM;YAAE,IAAIujD,YAAA,CAAax3C,OAAA,CAAQ1c,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAE,GAAGguB,IAAA,IAAQ,CAAC;YAAI,GAAG3Q,KAAA,CAAM2Q;UAAK;QAC9E;QACA;MACF;IACF;IAGA,IAAI3Q,KAAA,CAAMygB,aAAA,KAAkB,QAAW;MACrChE,OAAA,CAAQpY,KAAA,CAAMoc,aAAA,GAAgBzgB,KAAA,CAAMygB,aAAA;IACtC;EACF;EAoCAisC,kBAAA,EAAoB;IAClB,IACE,CAAC,KAAK/mB,WAAA,IACN,CAAC,KAAK+lB,WAAA,IACN,CAAC,KAAK3pC,SAAA,CAAU,EAAEgvC,kBAAA,CAAmB,GACrC;MACA,MAAMjyE,KAAA,CACJ,WAAW,KAAK+9B,GAAG,qFACrB;IACF;EACF;EAEA01C,iBACEluD,KAAA,EACAid,+BAAA,GAAkD,UAClD;IACA,MAAM;MAAEjd,KAAA,EAAOixD,WAAA;MAAa3kD,IAAA;MAAM2S;IAAO,IAAI,KAAKvB,SAAA,CAAU;IAG5D,IAAI1d,KAAA,CAAMqY,OAAA,EAAS;MACjB,KAAKmpC,eAAA,CAAgB;QAAEnpC,OAAA,EAASrY,KAAA,CAAMqY;MAAQ,CAAC;MAE/C,WAAWU,MAAA,IAAU/Y,KAAA,CAAMqY,OAAA,EAAS;QAClC,IAAIU,MAAA,CAAOzM,IAAA,EAAM;UACf2kD,WAAA,CAAYtzC,mBAAA,CAAoB5E,MAAA,CAAOzM,IAAA,EAAM,KAAKkM,GAAG;QACvD;MACF;IACF;IAEA,KAAKxY,KAAA,CAAMgZ,UAAA,GAAahZ,KAAA,CAAMgZ,UAAA,IAAc,CAAC;IAE7C,MAAMtG,QAAA,GAAW1S,KAAA,CAAM0S,QAAA,IAAY,EAAC;IACpC,IAAI,CAAC,KAAK1S,KAAA,CAAM0S,QAAA,EAAU;MACxB,KAAK1S,KAAA,CAAMsc,YAAA,CAAa;IAC1B;IACA,MAAM;MAAE0B;IAAW,IAAI,KAAKhe,KAAA,CAAMkd,iBAAA,CAChCxK,QAAA,EACA,OACA,MACA,MACAuK,+BACF;IAEA,IAAI,CAAC,KAAKjd,KAAA,CAAM4b,cAAA,EAAgB;MAC9B,KAAK5b,KAAA,CAAM4b,cAAA,GAAiB,EAAC;IAC/B;IACA,KAAK5b,KAAA,CAAMie,iBAAA,CAAkBje,KAAA,CAAMkxD,eAAA,IAAmB,EAAE;IACxD,IAAIlxD,KAAA,CAAMuc,gBAAA,EAAkB;MAC1B,KAAKvc,KAAA,CAAMuc,gBAAA,GAAmBvc,KAAA,CAAMuc,gBAAA;IACtC;IACA,IAAIvc,KAAA,CAAMoc,aAAA,KAAkB,QAAW;MACrC,KAAKpc,KAAA,CAAMoc,aAAA,GAAgBpc,KAAA,CAAMoc,aAAA;IACnC;IAEA,IAAIpc,KAAA,CAAMyc,QAAA,EAAU;MAClB,WAAW00C,OAAA,IAAWnxD,KAAA,CAAMyc,QAAA,EAAU;QACpC,IAAI00C,OAAA,EAAS;UACXF,WAAA,CAAYtzC,mBAAA,CAAoBwzC,OAAA,EAAS,KAAK34C,GAAG;UACjD,KAAKxY,KAAA,CAAMyc,QAAA,CAAS00C,OAAA,CAAQ7yE,EAAE,IAAI6yE,OAAA;QACpC;MACF;IACF;IAKA,IAAIlyC,MAAA,IAAU,MAAM;MAClB,MAAM2iC,SAAA,GAAY,KAAK5hD,KAAA,CAAM2c,eAAA,IAAmB,mBAAI/kB,IAAA,CAAK;MACzD,IAAI0U,IAAA,EAAM;QACR,KAAKtM,KAAA,CAAMlI,IAAA,CAAKwU,IAAA,CAAKhuB,EAAE,IAAI;UACzBguB,IAAA;UACAs1C,SAAA;UACAD,eAAA,EAAiB;QACnB;MACF;IACF;IAGA,IAAI3hD,KAAA,CAAMlI,IAAA,EAAM;MACd,WAAWA,IAAA,IAAQkI,KAAA,CAAMlI,IAAA,EAAM;QAC7B,KAAKkI,KAAA,CAAMlI,IAAA,CAAKA,IAAA,CAAKwU,IAAA,CAAKhuB,EAAE,IAAI;UAC9BsjE,SAAA,EAAW,IAAIhqD,IAAA,CAAKE,IAAA,CAAK8pD,SAAS;UAClC9B,oBAAA,EAAsBhoD,IAAA,CAAKgoD,oBAAA;UAC3B6B,eAAA,EAAiB7pD,IAAA,CAAK6pD,eAAA,IAAmB;UACzCr1C,IAAA,EAAMxU,IAAA,CAAKwU;QACb;QAEA,IAAIxU,IAAA,CAAKwU,IAAA,CAAKhuB,EAAA,KAAOguB,IAAA,EAAMhuB,EAAA,EAAI;UAC7B,KAAK0hB,KAAA,CAAM0c,WAAA,GAAc,KAAK1c,KAAA,CAAMlI,IAAA,CAAKA,IAAA,CAAKwU,IAAA,CAAKhuB,EAAE,EAAEqjE,eAAA;QACzD;MACF;IACF;IAEA,OAAO;MACL3jC;IACF;EACF;EAEA8xC,6BAA6Bn0D,KAAA,EAAc;IACzC,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAAS;MAClB;IACF;IACA,MAAMA,OAAA,GAAU,KAAKmW,KAAA,CAAM0e,WAAA,CAAY/iB,KAAA,CAAM9R,OAAA,CAAQvL,EAAA,EAAIqd,KAAA,CAAM9R,OAAA,CAAQoyB,SAAS;IAChF,IAAIpyB,OAAA,EAAS;MACX8R,KAAA,CAAM9R,OAAA,CAAQmiB,aAAA,GAAgBniB,OAAA,CAAQmiB,aAAA;IACxC;EACF;EAEAw1C,gBAAgB;IACdnpC,OAAA;IACAopC,oBAAA,GAAuB;EACzB,GASG;IACD,MAAM2P,cAAA,GAAiB/4C,OAAA,CAAQ5D,MAAA,CAC7B,CAAC48C,WAAA,EAAat4C,MAAA,KAAW;MACvB,IAAIA,MAAA,CAAOzM,IAAA,EAAM;QACf+kD,WAAA,CAAYt4C,MAAA,CAAOzM,IAAA,CAAKhuB,EAAE,IAAIy6B,MAAA;MAChC;MACA,OAAOs4C,WAAA;IACT,GACA,CAAC,CACH;IAEA,IAAI5P,oBAAA,EAAsB;MACxB,KAAKzhD,KAAA,CAAMqY,OAAA,GAAU+4C,cAAA;IACvB,WAAW,CAAC3P,oBAAA,IAAwBppC,OAAA,CAAQj+B,MAAA,EAAQ;MAClD,KAAK4lB,KAAA,CAAMqY,OAAA,GAAU;QACnB,GAAG,KAAKrY,KAAA,CAAMqY,OAAA;QACd,GAAG+4C;MACL;IACF;EACF;EAEAE,YAAA,EAAc;IACZ,KAAKnK,OAAA,CAAQlvC,MAAA,CACX,QACA,oDAAoD,KAAKO,GAAG,IAC5D;MACEmtC,IAAA,EAAM,CAAC,cAAc,SAAS;MAC9BvtC,OAAA,EAAS;IACX,CACF;IAEA,KAAKovC,YAAA,GAAe;IACpB,KAAKxnD,KAAA,CAAMkb,aAAA,CAAc,KAAK;EAChC;AACF;;;AC1uEO,IAAMq2C,WAAA,GAAN,MAAkB;EAMvBnzE,YAAY;IAAEC;EAAO,GAA2B;IAG9C,KAAKA,MAAA,GAASA,MAAA;IACd,KAAK20D,KAAA,GAAQ,CAAC;IAEd,KAAKwe,qBAAA,GAAwB,CAAC;EAChC;EAEAC,YAAYze,KAAA,EAAuB;IACjC,WAAW1mC,IAAA,IAAQ0mC,KAAA,EAAO;MACxB,KAAK0e,UAAA,CAAWplD,IAAI;IACtB;EACF;EAEAolD,WAAWplD,IAAA,EAAqB;IAC9B,IAAIA,IAAA,IAAQ,QAAQ,KAAKjuB,MAAA,CAAO2vE,aAAA,CAAc,GAAG;MAC/C,KAAKhb,KAAA,CAAM1mC,IAAA,CAAKhuB,EAAE,IAAIguB,IAAA;IACxB;EACF;EAEAqR,oBAAoBrR,IAAA,EAAoBqlD,SAAA,EAAmB;IACzD,IAAIrlD,IAAA,IAAQ,QAAQ,CAAC,KAAKjuB,MAAA,CAAO2vE,aAAA,CAAc,GAAG;MAChD;IACF;IACA,KAAK0D,UAAA,CAAWplD,IAAI;IACpB,IAAI,CAAC,KAAKklD,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,GAAG;MACxC,KAAKkzE,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,IAAI,CAAC;IACzC;IACA,KAAKkzE,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,EAAEqzE,SAAS,IAAI;EACnD;EAEAC,0BAA0BD,SAAA,EAAmB;IAC3C,WAAW1yC,MAAA,IAAU,KAAKuyC,qBAAA,EAAuB;MAC/C,OAAO,KAAKA,qBAAA,CAAsBvyC,MAAM,EAAE0yC,SAAS;IACrD;EACF;AACF;;;AC/CA,IAAIE,EAAA,GAAK;AAET,IAAI,OAAOC,SAAA,KAAc,aAAa;EACpCD,EAAA,GAAKC,SAAA;AACP,WAAW,OAAOC,YAAA,KAAiB,aAAa;EAC9CF,EAAA,GAAKE,YAAA;AACP,WAAW,OAAO/tE,MAAA,KAAW,aAAa;EACxC6tE,EAAA,GAAK7tE,MAAA,CAAO8tE,SAAA,IAAa9tE,MAAA,CAAO+tE,YAAA;AAClC,WAAW,OAAO11E,MAAA,KAAW,aAAa;EACxCw1E,EAAA,GAAKx1E,MAAA,CAAOy1E,SAAA,IAAaz1E,MAAA,CAAO01E,YAAA;AAClC,WAAW,OAAO51E,IAAA,KAAS,aAAa;EACtC01E,EAAA,GAAK11E,IAAA,CAAK21E,SAAA,IAAa31E,IAAA,CAAK41E,YAAA;AAC9B;AAEA,IAAOC,gBAAA,GAAQH,EAAA;;;ACXR,IAAMI,cAAA,GAAN,MAAqB;EAM1B7zE,YAAA,EAAc;IACZ,KAAK8zE,wBAAA,GAA2B;IAChC,KAAKC,eAAA,GAAkB;IACvB,KAAKC,qBAAA,GAAwB;IAC7B,KAAKC,gBAAA,GAAmBjjD,QAAA,CAAS;EACnC;AACF;AASO,IAAMkjD,YAAA,GAAe,MAAAA,CAC1BC,WAAA,EACAC,QAAA,KACG;EACH,MAAMC,WAAA,GAAc;EACpB,SAASv4E,CAAA,GAAI,GAAGA,CAAA,GAAIu4E,WAAA,EAAav4E,CAAA,IAAK;IACpC,IAAI;MACF,MAAM4vB,aAAA,CAAM69C,IAAA,CACV,+CAA+C4K,WAAW,IAC1DC,QACF;IACF,SAASj1E,CAAA,EAAG;MACV,MAAMovB,KAAA,EAAOzyB,CAAA,GAAI,KAAK,GAAI;MAC1B;IACF;IACA;EACF;AACF;AAEO,SAASw4E,oBACdC,UAAA,EACAh3D,KAAA,EACA;EACA,OAAO;IACL,GAAGA,KAAA;IACH,GAAGi3D,kBAAA,CAAmBD,UAAU;EAClC;AACF;AAEA,SAASC,mBAAmBD,UAAA,EAAgC;EAC1D,MAAM;IAAEt0E;EAAO,IAAIs0E,UAAA;EACnB,OAAO;IACLE,WAAA,EAAaF,UAAA,CAAWd,EAAA,EAAIl0D,UAAA;IAC5BzP,GAAA,EAAKykE,UAAA,CAAWG,SAAA,CAAU;IAC1BC,OAAA,EAAS10E,MAAA,CAAOsF,GAAA;IAChBqvE,QAAA,EAAU30E,MAAA,CAAO40E,cAAA,CAAef,wBAAA;IAChCgB,MAAA,GAAQ,mBAAIt7D,IAAA,CAAK,GAAEsb,OAAA,CAAQ;IAC3BigD,SAAA,EAAW90E,MAAA,CAAO+0E,WAAA,CAAY;IAC9B7nE,KAAA,EAAOlN,MAAA,CAAOg1E,YAAA,CAAa9nE,KAAA;IAC3B2zB,OAAA,EAAS7gC,MAAA,CAAO4gC,MAAA;IAChBq0C,YAAA,EAAcj1E,MAAA,CAAOk1E,KAAA;IACrBC,MAAA,EAAQn1E,MAAA,CAAOoB,OAAA,CAAQ+zE,MAAA;IACvBC,SAAA,EAAWd,UAAA,CAAWe,YAAA;IACtBC,UAAA,EAAYhB,UAAA,CAAWd,EAAA;IACvB+B,uBAAA,EAAyBv1E,MAAA,CAAO40E,cAAA,CAAeb,qBAAA;IAC/CyB,iBAAA,EAAmBx1E,MAAA,CAAO40E,cAAA,CAAed,eAAA;IACzC2B,UAAA,EAAYnB,UAAA,CAAWoB,SAAA;IACvBC,MAAA,EAAQ,OAAOnkE,SAAA,KAAc,cAAcA,SAAA,EAAWwgB,MAAA,GAAS;IAC/D4jD,UAAA,EAAY,OAAOpkE,SAAA,KAAc,cAAcA,SAAA,EAAWgJ,SAAA,GAAY;IACtEq7D,kBAAA,EAAoB71E,MAAA,CAAO40E,cAAA,CAAeZ;EAC5C;AACF;AAEO,SAAS8B,kCAAkCxB,UAAA,EAAgC;EAChF,OAAOC,kBAAA,CAAmBD,UAAU;AACtC;;;AC7DA,IAAMyB,YAAA,GACJv3E,GAAA,IACiCA,GAAA,CAA6B5C,IAAA,KAAS;AAEzE,IAAMo6E,YAAA,GACJx3E,GAAA,IACiCA,GAAA,CAA6B6N,KAAA,KAAU;AAmBnE,IAAM4pE,kBAAA,GAAN,MAAyB;EA8B9Bl2E,YAAY;IAAEC;EAAO,GAA2B;IAiIhD;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAy0E,SAAA,GAAY,MAAM;MAChB,MAAMyB,EAAA,GAAK,KAAKl2E,MAAA,CAAOm2E,eAAA,CAAgB,KAAKT,SAAS;MACrD,MAAMxoE,KAAA,GAAQ,KAAKlN,MAAA,CAAOg1E,YAAA,CAAaoB,QAAA,CAAS;MAChD,MAAMC,WAAA,GAAc,KAAKr2E,MAAA,CAAOoB,OAAA,CAAQi1E,WAAA;MAExC,MAAMjnE,MAAA,GAAS,IAAI+B,eAAA,CAAgBklE,WAAW;MAC9CjnE,MAAA,CAAO7F,GAAA,CAAI,QAAQ2sE,EAAE;MACrB9mE,MAAA,CAAO7F,GAAA,CAAI,WAAW,KAAKvJ,MAAA,CAAOsF,GAAG;MAGrC8J,MAAA,CAAO7F,GAAA,CAAI,iBAAiB,GAAG2D,KAAK,EAAE;MACtCkC,MAAA,CAAO7F,GAAA,CAAI,oBAAoB,KAAKvJ,MAAA,CAAO+0E,WAAA,CAAY,CAAC;MACxD3lE,MAAA,CAAO7F,GAAA,CAAI,mBAAmB,KAAKvJ,MAAA,CAAOs2E,YAAA,CAAa,CAAC;MAExD,OAAO,GAAG,KAAKt2E,MAAA,CAAOu2E,SAAS,YAAYnnE,MAAA,CAAOhN,QAAA,CAAS,CAAC;IAC9D;IAuOA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAo0E,mBAAA,GAAuBl5D,KAAA,IAAiB;MACtC,IAAIA,KAAA,CAAMta,IAAA,KAAS,WAAW;QAE5B,KAAKyzE,IAAA,CAAK,oDAAoD;QAC9D,KAAKC,UAAA,CAAW,KAAK;MACvB,WAAWp5D,KAAA,CAAMta,IAAA,KAAS,UAAU;QAKlC,KAAKyzE,IAAA,CACH,iEAAiE,KAAKzI,SAAS,EACjF;QACA,IAAI,CAAC,KAAKA,SAAA,EAAW;UACnB,KAAK2I,UAAA,CAAW;YAAEC,QAAA,EAAU;UAAG,CAAC;QAClC;MACF;IACF;IAEA,KAAAC,MAAA,GAAUC,IAAA,IAAiB;MACzB,IAAI,KAAKA,IAAA,KAASA,IAAA,EAAM;MAExB,KAAKL,IAAA,CAAK,8BAA8B;QAAEK;MAAK,CAAC;IAClD;IAEA,KAAAC,SAAA,GAAY,CAACD,IAAA,EAAcx5D,KAAA,KAAkC;MAC3D,IAAI,KAAKw5D,IAAA,KAASA,IAAA,EAAM;MAExB,KAAKL,IAAA,CAAK,oCAAoC;QAAEn5D,KAAA;QAAOw5D;MAAK,CAAC;MAC7D,MAAMh4E,IAAA,GAAO,OAAOwe,KAAA,CAAMxe,IAAA,KAAS,WAAWyP,IAAA,CAAKwE,KAAA,CAAMuK,KAAA,CAAMxe,IAAI,IAAI;MAKvE,IAAI,CAAC,KAAKk4E,UAAA,IAAcl4E,IAAA,EAAM;QAC5B,KAAKk4E,UAAA,GAAa;QAClB,IAAIl4E,IAAA,CAAKuN,KAAA,EAAO;UACd,KAAK4qE,aAAA,GAAgB,KAAKC,iBAAA,CAAkBp4E,IAAA,EAAM,KAAK,CAAC;UACxD;QACF;QAEA,KAAKwnB,cAAA,GAAiBxnB,IAAI;QAC1B,KAAK43E,UAAA,CAAW,IAAI;MACtB;MAGA,KAAK1zC,SAAA,GAAY,mBAAIzpB,IAAA,CAAK;MAE1B,IAAIza,IAAA,IAAQA,IAAA,CAAKkE,IAAA,KAAS,gBAAgB;QACxC,KAAKm0E,gBAAA,CAAiB;MACxB;MAEA,KAAKn3E,MAAA,CAAOo3E,WAAA,CAAY95D,KAAK;MAC7B,KAAK+5D,uBAAA,CAAwB;IAC/B;IAEA,KAAAC,OAAA,GAAU,CAACR,IAAA,EAAcx5D,KAAA,KAAgC;MACvD,IAAI,KAAKw5D,IAAA,KAASA,IAAA,EAAM;MAExB,KAAKL,IAAA,CAAK,oCAAoCn5D,KAAA,CAAM1hB,IAAA,EAAM;QAAE0hB,KAAA;QAAOw5D;MAAK,CAAC;MAEzE,IAAIx5D,KAAA,CAAM1hB,IAAA,KAAS6yB,SAAA,CAAUE,iBAAA,EAAmB;QAG9C,MAAMtiB,KAAA,GAAQ,IAAIjQ,KAAA,CAChB,mCAAmCkhB,KAAA,CAAM6D,MAAM,EACjD;QAEA9U,KAAA,CAAM8U,MAAA,GAAS7D,KAAA,CAAM6D,MAAA;QACrB9U,KAAA,CAAMzQ,IAAA,GAAO0hB,KAAA,CAAM1hB,IAAA;QACnByQ,KAAA,CAAMkrE,QAAA,GAAWj6D,KAAA,CAAMi6D,QAAA;QACvBlrE,KAAA,CAAMtB,MAAA,GAASuS,KAAA,CAAMvS,MAAA;QAErB,KAAKksE,aAAA,GAAgB5qE,KAAK;QAC1B,KAAKoqE,IAAA,CAAK,+CAA+Cn5D,KAAA,CAAM6D,MAAM,IAAI;UAAE7D;QAAM,CAAC;MACpF,OAAO;QACL,KAAKk6D,mBAAA,IAAuB;QAC5B,KAAKC,aAAA,IAAiB;QACtB,KAAKf,UAAA,CAAW,KAAK;QACrB,KAAKgB,YAAA,GAAe;QAEpB,KAAKT,aAAA,GAAgB,KAAKC,iBAAA,CAAkB55D,KAAK,CAAC;QAElD,KAAKm5D,IAAA,CAAK,2DAA2D;UAAEn5D;QAAM,CAAC;QAG9E,KAAKq5D,UAAA,CAAW;MAClB;IACF;IAEA,KAAA/2D,OAAA,GAAU,CAACk3D,IAAA,EAAcx5D,KAAA,KAAgC;MACvD,IAAI,KAAKw5D,IAAA,KAASA,IAAA,EAAM;MAExB,KAAKU,mBAAA,IAAuB;MAC5B,KAAKC,aAAA,IAAiB;MACtB,KAAKf,UAAA,CAAW,KAAK;MACrB,KAAKgB,YAAA,GAAe;MAEpB,KAAKT,aAAA,GAAgB,KAAKC,iBAAA,CAAkB55D,KAAK,CAAC;MAClD,KAAKm5D,IAAA,CAAK,iDAAiD;QAAEn5D;MAAM,CAAC;MAEpE,KAAKq5D,UAAA,CAAW;IAClB;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAD,UAAA,GAAciB,OAAA,IAAqB;MACjC,IAAIA,OAAA,KAAY,KAAK3J,SAAA,EAAW;MAEhC,KAAKA,SAAA,GAAY2J,OAAA;MAEjB,IAAI,KAAK3J,SAAA,EAAW;QAClB,KAAKhuE,MAAA,CAAOmjC,aAAA,CAAc;UAAEngC,IAAA,EAAM;UAAsB2yE,MAAA,EAAQ,KAAK3H;QAAU,CAAC;QAChF;MACF;MAGAxuD,UAAA,CAAW,MAAM;QACf,IAAI,KAAKwuD,SAAA,EAAW;QACpB,KAAKhuE,MAAA,CAAOmjC,aAAA,CAAc;UAAEngC,IAAA,EAAM;UAAsB2yE,MAAA,EAAQ,KAAK3H;QAAU,CAAC;MAClF,GAAG,GAAI;IACT;IAMA;AAAA;AAAA;AAAA;IAAA,KAAAkJ,iBAAA,GAAoB,CAClB55D,KAAA,EACAs6D,YAAA,GAAc,SACX;MACH,IAAIh8E,IAAA;MACJ,IAAIi8E,UAAA;MACJ,IAAIrsE,OAAA;MACJ,IAAIuqE,YAAA,CAAaz4D,KAAK,GAAG;QACvB1hB,IAAA,GAAO0hB,KAAA,CAAM1hB,IAAA;QACbi8E,UAAA,GAAa;QACbrsE,OAAA,GAAU8R,KAAA,CAAM6D,MAAA;MAClB;MAEA,IAAI60D,YAAA,CAAa14D,KAAK,GAAG;QACvB1hB,IAAA,GAAO0hB,KAAA,CAAMjR,KAAA,CAAMzQ,IAAA;QACnBi8E,UAAA,GAAav6D,KAAA,CAAMjR,KAAA,CAAMyrE,UAAA;QACzBtsE,OAAA,GAAU8R,KAAA,CAAMjR,KAAA,CAAMb,OAAA;MACxB;MAGA,KAAKirE,IAAA,CAAK,6CAA6C76E,IAAI,IAAI;QAAE0hB;MAAM,GAAG,MAAM;MAEhF,MAAMjR,KAAA,GAAQ,IAAIjQ,KAAA,CAChB,uBAAuBR,IAAI,iBAAiB4P,OAAO,EACrD;MAKAa,KAAA,CAAMzQ,IAAA,GAAOA,IAAA;MAKbyQ,KAAA,CAAMyrE,UAAA,GAAaD,UAAA;MACnBxrE,KAAA,CAAM0rE,WAAA,GAAcH,YAAA;MACpB,OAAOvrE,KAAA;IACT;IAsBA;AAAA;AAAA;IAAA,KAAA2rE,uBAAA,GAA0B,MAAM;MAC9B,KAAKhB,UAAA,GAAa;MAElB,KAAKiB,cAAA,GAAiB,IAAIv6D,OAAA,CAAwB,CAAC/E,OAAA,EAASC,MAAA,KAAW;QACrE,KAAK0N,cAAA,GAAiB3N,OAAA;QACtB,KAAKs+D,aAAA,GAAgBr+D,MAAA;MACvB,CAAC;IACH;IAKA;AAAA;AAAA;IAAA,KAAAu+D,gBAAA,GAAmB,MAAM;MACvB,IAAI,KAAKe,qBAAA,EAAuB;QAC9BniD,YAAA,CAAa,KAAKmiD,qBAAqB;MACzC;MAGA,KAAKA,qBAAA,GAAwB14D,UAAA,CAAW,MAAM;QAE5C,MAAM1gB,IAAA,GAAO,CAAC;UAAEkE,IAAA,EAAM;UAAgBoyE,SAAA,EAAW,KAAKp1E,MAAA,CAAOm4E;QAAS,CAAC;QAEvE,IAAI;UACF,KAAK3E,EAAA,EAAI1yD,IAAA,CAAKvS,IAAA,CAAKC,SAAA,CAAU1P,IAAI,CAAC;QACpC,SAASI,CAAA,EAAG,CAEZ;MACF,GAAG,KAAKk5E,YAAY;IACtB;IAOA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAf,uBAAA,GAA0B,MAAM;MAC9B,IAAI,KAAKgB,yBAAA,EAA2B;QAClCtiD,YAAA,CAAa,KAAKsiD,yBAAyB;MAC7C;MAEA,KAAKA,yBAAA,GAA4B74D,UAAA,CAAW,MAAM;QAChD,MAAM3F,GAAA,GAAM,mBAAIN,IAAA,CAAK;QACrB,IACE,KAAKypB,SAAA,IACLnpB,GAAA,CAAIgb,OAAA,CAAQ,IAAI,KAAKmO,SAAA,CAAUnO,OAAA,CAAQ,IAAI,KAAKyjD,sBAAA,EAChD;UACA,KAAK7B,IAAA,CAAK,8CAA8C;UACxD,KAAKC,UAAA,CAAW,KAAK;UACrB,KAAKC,UAAA,CAAW;QAClB;MACF,GAAG,KAAK2B,sBAAsB;IAChC;IAvmBE,KAAKt4E,MAAA,GAASA,MAAA;IAEd,KAAKw3E,mBAAA,GAAsB;IAE3B,KAAKC,aAAA,GAAgB;IAErB,KAAKC,YAAA,GAAe;IAEpB,KAAKa,cAAA,GAAiB;IAEtB,KAAKvB,UAAA,GAAa;IAElB,KAAKhJ,SAAA,GAAY;IAEjB,KAAK8I,IAAA,GAAO;IAEZ,KAAK9zC,SAAA,GAAY;IAEjB,KAAKo1C,YAAA,GAAe,KAAK;IACzB,KAAKE,sBAAA,GAAyB,KAAKF,YAAA,GAAe,KAAK;IAEvDnmD,2BAAA,CAA4B,KAAKukD,mBAAmB;EACtD;EAEAC,KAAKjkD,GAAA,EAAas6B,KAAA,GAAY,CAAC,GAAG0rB,KAAA,GAAkB,QAAQ;IAC1D,KAAKx4E,MAAA,CAAO45B,MAAA,CAAO4+C,KAAA,EAAO,gBAAgBhmD,GAAA,EAAK;MAAE80C,IAAA,EAAM,CAAC,YAAY;MAAG,GAAGxa;IAAM,CAAC;EACnF;EAEA2rB,UAAUz4E,MAAA,EAAoB;IAC5B,KAAKA,MAAA,GAASA,MAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAM04E,QAAQrkE,OAAA,GAAU,MAAO;IAC7B,IAAI,KAAKqjE,YAAA,EAAc;MACrB,MAAMt7E,KAAA,CACJ,wEACF;IACF;IAEA,KAAKm8E,cAAA,GAAiB;IAEtB,IAAI;MACF,MAAMI,WAAA,GAAc,MAAM,KAAKC,QAAA,CAAS;MACxC,KAAKpB,mBAAA,GAAsB;MAE3B,KAAKf,IAAA,CAAK,2DAA2DkC,WAAW,EAAE;IAEpF,SAAStsE,KAAA,EAAY;MACnB,KAAK2hE,SAAA,GAAY;MACjB,KAAKwJ,mBAAA,IAAuB;MAE5B,MAAMt4E,CAAA,GAAImN,KAAA;MAEV,IAAInN,CAAA,CAAEtD,IAAA,KAAS6yB,SAAA,CAAUC,aAAA,IAAiB,CAAC,KAAK1uB,MAAA,CAAOg1E,YAAA,CAAa6D,QAAA,CAAS,GAAG;QAC9E,KAAKpC,IAAA,CACH,4FACF;QACA,KAAKE,UAAA,CAAW;UAAEmC,YAAA,EAAc;QAAK,CAAC;MACxC,WAAW,CAAC55E,CAAA,CAAE64E,WAAA,EAAa;QAEzB,MAAM,IAAI37E,KAAA,CACRmS,IAAA,CAAKC,SAAA,CAAU;UACb5S,IAAA,EAAMsD,CAAA,CAAEtD,IAAA;UACRk8E,UAAA,EAAY54E,CAAA,CAAE44E,UAAA;UACdtsE,OAAA,EAAStM,CAAA,CAAEsM,OAAA;UACXusE,WAAA,EAAa74E,CAAA,CAAE64E;QACjB,CAAC,CACH;MACF;IACF;IAEA,OAAO,MAAM,KAAKgB,eAAA,CAAgB1kE,OAAO;EAC3C;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA0kE,gBAAgB1kE,OAAA,GAAU,MAAO;IAC/B,OAAOqJ,OAAA,CAAQs7D,IAAA,CAAK,EACjB,YAAY;MACX,MAAMpC,QAAA,GAAW;MACjB,SAAS/6E,CAAA,GAAI,GAAGA,CAAA,IAAKwY,OAAA,EAASxY,CAAA,IAAK+6E,QAAA,EAAU;QAC3C,IAAI;UACF,OAAO,MAAM,KAAKqB,cAAA;QAEpB,SAAS5rE,KAAA,EAAY;UACnB,IAAIxQ,CAAA,KAAMwY,OAAA,EAAS;YACjB,MAAM,IAAIjY,KAAA,CACRmS,IAAA,CAAKC,SAAA,CAAU;cACb5S,IAAA,EAAMyQ,KAAA,CAAMzQ,IAAA;cACZk8E,UAAA,EAAYzrE,KAAA,CAAMyrE,UAAA;cAClBtsE,OAAA,EAASa,KAAA,CAAMb,OAAA;cACfusE,WAAA,EAAa1rE,KAAA,CAAM0rE;YACrB,CAAC,CACH;UACF;UACA,MAAMzpD,KAAA,CAAMsoD,QAAQ;QACtB;MACF;IACF,GAAG,IACF,YAAY;MACX,MAAMtoD,KAAA,CAAMja,OAAO;MACnB,KAAKqjE,YAAA,GAAe;MACpB,MAAM,IAAIt7E,KAAA,CACRmS,IAAA,CAAKC,SAAA,CAAU;QACb5S,IAAA,EAAM;QACNk8E,UAAA,EAAY;QACZtsE,OAAA,EAAS;QACTusE,WAAA,EAAa;MACf,CAAC,CACH;IACF,GAAG,EACJ;EACH;EAAA;AAAA;AAAA;AAAA;EA4BAkB,WAAW5kE,OAAA,EAAkB;IAC3B,KAAKoiE,IAAA,CAAK,4DAA4D,KAAKK,IAAI,EAAE;IAEjF,KAAKA,IAAA,IAAQ;IACb,KAAKY,YAAA,GAAe;IACpB,KAAKa,cAAA,GAAiB;IAGtB,IAAI,KAAKL,qBAAA,EAAuB;MAC9BgB,aAAA,CAAc,KAAKhB,qBAAqB;IAC1C;IACA,IAAI,KAAKG,yBAAA,EAA2B;MAClCa,aAAA,CAAc,KAAKb,yBAAyB;IAC9C;IAEAlmD,8BAAA,CAA+B,KAAKqkD,mBAAmB;IAEvD,KAAKxI,SAAA,GAAY;IAGjB,IAAI,KAAKwF,EAAA,IAAM,KAAKA,EAAA,CAAG2F,kBAAA,EAAoB;MACzC,KAAK3F,EAAA,CAAG2F,kBAAA,CAAmB;IAC7B;IAEA,IAAIC,eAAA;IAIJ,MAAM;MAAE5F,EAAA,EAAA6F;IAAG,IAAI;IACf,IAAIA,GAAA,IAAMA,GAAA,CAAGC,KAAA,IAASD,GAAA,CAAG/5D,UAAA,KAAe+5D,GAAA,CAAGv3B,IAAA,EAAM;MAC/Cs3B,eAAA,GAAkB,IAAI17D,OAAA,CAAS/E,OAAA,IAAY;QACzC,MAAM2+D,OAAA,GAAWh6D,KAAA,IAAgC;UAC/C,KAAKm5D,IAAA,CACH,4CAA4Cn5D,KAAA,GAAQ,SAAS,SAAS,gBACtE;YAAEA;UAAM,CACV;UACA3E,OAAA,CAAQ;QACV;QAEA0gE,GAAA,CAAG/B,OAAA,GAAUA,OAAA;QAGb93D,UAAA,CAAW83D,OAAA,EAASjjE,OAAA,IAAW,OAAOA,OAAA,GAAU,GAAI;MACtD,CAAC;MAED,KAAKoiE,IAAA,CACH,0EACF;MAEA4C,GAAA,CAAGC,KAAA,CACD7qD,SAAA,CAAUE,iBAAA,EACV,2DACF;IACF,OAAO;MACL,KAAK8nD,IAAA,CAAK,qEAAqE;MAC/E2C,eAAA,GAAkB17D,OAAA,CAAQ/E,OAAA,CAAQ;IACpC;IAEA,OAAO,KAAK66D,EAAA;IAEZ,OAAO4F,eAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA,MAAMR,SAAA,EAAW;IACf,IACE,KAAKlB,YAAA,IACJ,KAAKa,cAAA,IAAkB,KAAKv4E,MAAA,CAAOoB,OAAA,CAAQm4E,gBAAA,EAE5C;IACF,KAAK7B,YAAA,GAAe;IACpB,KAAKhC,SAAA,GAAY3kD,QAAA,CAAS;IAC1B,KAAK/wB,MAAA,CAAO40E,cAAA,CAAef,wBAAA,IAA2B,mBAAIt6D,IAAA,CAAK,GAAEsb,OAAA,CAAQ;IACzE,IAAI2kD,YAAA,GAAe;IACnB,IAAI;MACF,KAAK/C,IAAA,CAAK,gCAAgC;MAC1C,MAAM,KAAKz2E,MAAA,CAAOg1E,YAAA,CAAayE,UAAA,CAAW;MAC1CD,YAAA,GAAe;IACjB,SAASt6E,CAAA,EAAG,CAEZ;IAEA,IAAI;MACF,IAAI,CAACs6E,YAAA,EAAc;QACjB,KAAK/C,IAAA,CAAK,6DAA6D;QACvE,MAAM,KAAKz2E,MAAA,CAAOg1E,YAAA,CAAa0E,SAAA,CAAU;MAC3C;MAEA,KAAK1B,uBAAA,CAAwB;MAC7B,MAAM2B,KAAA,GAAQ,KAAKlF,SAAA,CAAU;MAC7B,KAAKgC,IAAA,CAAK,8BAA8BkD,KAAK,IAAI;QAC/CA,KAAA;QACAjE,SAAA,EAAW,KAAKA;MAClB,CAAC;MACD,KAAKlC,EAAA,GAAK,IAAIG,gBAAA,CAAUgG,KAAK;MAC7B,KAAKnG,EAAA,CAAGqD,MAAA,GAAS,KAAKA,MAAA,CAAO/0E,IAAA,CAAK,MAAM,KAAKg1E,IAAI;MACjD,KAAKtD,EAAA,CAAG8D,OAAA,GAAU,KAAKA,OAAA,CAAQx1E,IAAA,CAAK,MAAM,KAAKg1E,IAAI;MACnD,KAAKtD,EAAA,CAAG5zD,OAAA,GAAU,KAAKA,OAAA,CAAQ9d,IAAA,CAAK,MAAM,KAAKg1E,IAAI;MACnD,KAAKtD,EAAA,CAAGuD,SAAA,GAAY,KAAKA,SAAA,CAAUj1E,IAAA,CAAK,MAAM,KAAKg1E,IAAI;MACvD,MAAMnrE,QAAA,GAAW,MAAM,KAAKssE,cAAA;MAC5B,KAAKP,YAAA,GAAe;MAEpB,IAAI/rE,QAAA,EAAU;QACZ,KAAK0pE,YAAA,GAAe1pE,QAAA,CAASiuE,aAAA;QAC7B,IACE,KAAK55E,MAAA,CAAO40E,cAAA,CAAeb,qBAAA,GAAwB,KACnD,KAAK/zE,MAAA,CAAOoB,OAAA,CAAQy4E,cAAA,EACpB;UACA5F,YAAA,CACE,4BACA6B,iCAAA,CAAkC,IAAqC,CACzE;UACA,KAAK91E,MAAA,CAAO40E,cAAA,CAAeb,qBAAA,GAAwB;QACrD;QACA,OAAOpoE,QAAA;MACT;IAEF,SAASU,KAAA,EAAY;MACnB,KAAKqrE,YAAA,GAAe;MACpB,KAAKjB,IAAA,CAAK,yBAAyBpqE,KAAK;MACxC,IAAI,KAAKrM,MAAA,CAAOoB,OAAA,CAAQy4E,cAAA,EAAgB;QACtC,KAAK75E,MAAA,CAAO40E,cAAA,CAAeb,qBAAA;QAC3B,KAAK/zE,MAAA,CAAO40E,cAAA,CAAed,eAAA;QAE3B,MAAMK,QAAA,GAAWE,mBAAA,CACf,MACA3iD,kBAAA,CAAmBrlB,KAAc,CACnC;QACA4nE,YAAA,GAAe,YAAYE,QAAQ;MACrC;MACA,MAAM9nE,KAAA;IACR;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMsqE,WACJv1E,OAAA,GAAyD,CAAC,GAC3C;IACf,KAAKq1E,IAAA,CAAK,yCAAyC;IAGnD,IAAI,KAAKiB,YAAA,IAAgB,KAAK1J,SAAA,EAAW;MACvC,KAAKyI,IAAA,CAAK,8DAA8D;MACxE;IACF;IAIA,IAAIG,QAAA,GAAWx1E,OAAA,CAAQw1E,QAAA;IACvB,IAAI,CAACA,QAAA,EAAU;MACbA,QAAA,GAAWhmD,aAAA,CAAc,KAAK4mD,mBAAmB;IACnD;IAEA,MAAMlpD,KAAA,CAAMsoD,QAAQ;IAIpB,IAAI,KAAKc,YAAA,IAAgB,KAAK1J,SAAA,EAAW;MACvC,KAAKyI,IAAA,CAAK,8DAA8D;MACxE;IACF;IAEA,IAAI,KAAK8B,cAAA,IAAkB,KAAKv4E,MAAA,CAAOoB,OAAA,CAAQm4E,gBAAA,EAAkB;MAC/D,KAAK9C,IAAA,CAAK,uDAAuD;MACjE;IACF;IAEA,KAAKA,IAAA,CAAK,iDAAiD;IAG3D,KAAKqD,2BAAA,CAA4B;IAEjC,IAAI14E,OAAA,CAAQ03E,YAAA,EAAc;MACxB,MAAM,KAAK94E,MAAA,CAAOg1E,YAAA,CAAa0E,SAAA,CAAU;IAC3C;IAEA,IAAI;MACF,MAAM,KAAKd,QAAA,CAAS;MACpB,KAAKnC,IAAA,CAAK,4CAA4C;MACtD,MAAM,KAAKz2E,MAAA,CAAO+5E,YAAA,CAAa;MAC/B,KAAKtD,IAAA,CAAK,yCAAyC;MAEnD,KAAKe,mBAAA,GAAsB;IAE7B,SAASnrE,KAAA,EAAY;MACnB,KAAK2hE,SAAA,GAAY;MACjB,KAAKwJ,mBAAA,IAAuB;MAC5B,IACEnrE,KAAA,CAAMzQ,IAAA,KAAS6yB,SAAA,CAAUC,aAAA,IACzB,CAAC,KAAK1uB,MAAA,CAAOg1E,YAAA,CAAa6D,QAAA,CAAS,GACnC;QACA,KAAKpC,IAAA,CACH,+FACF;QAEA,OAAO,KAAKE,UAAA,CAAW;UAAEmC,YAAA,EAAc;QAAK,CAAC;MAC/C;MAGA,IAAIzsE,KAAA,CAAM0rE,WAAA,EAAa;QACrB,KAAKtB,IAAA,CAAK,yDAAyD;QAEnE,KAAKE,UAAA,CAAW;MAClB;IACF;IACA,KAAKF,IAAA,CAAK,0BAA0B;EACtC;EAAA;AAAA;AAAA;AAAA;EAuLAqD,4BAAA,EAA8B;IAG5B,KAAKhD,IAAA,IAAQ;IAEb,IAAI;MACF,MAAMtD,EAAA,EAAI2F,kBAAA,CAAmB;MAC7B,MAAM3F,EAAA,EAAI8F,KAAA,CAAM;IAClB,SAASp6E,CAAA,EAAG,CAEZ;EACF;AAyDF;;;ACrrBA,IAAA86E,mBAAA,GAAgB97E,OAAA,CAAA+7E,oBAAA;AAChB,IAAAC,aAAA,GAAmBh8E,OAAA,CAAAi8E,cAAA;AAeZ,SAASC,aACdC,SAAA,EACA/4C,MAAA,EACAg5C,SAAA,GAAgB,CAAC,GACjBC,UAAA,GAA8B,CAAC,GAC/B;EACA,IAAI,OAAOj5C,MAAA,KAAW,UAAU;IAC9B,MAAM,IAAI5zB,SAAA,CAAU,2BAA2B;EACjD;EAEA,MAAMoZ,OAAA,GAAoC;IACxC+Z,OAAA,EAASS,MAAA;IACT,GAAGg5C;EACL;EAGA,IAAIN,mBAAA,CAAAxuD,OAAA,IAAO,QAAQwuD,mBAAA,CAAAxuD,OAAA,CAAIgvD,IAAA,IAAQ,MAAM;IACnC,MAAMp+E,KAAA,CACJ,qQACF;EACF;EAEA,MAAM0nB,IAAA,GAAwBzhB,MAAA,CAAOsE,MAAA,CACnC;IAAE8zE,SAAA,EAAW;IAASC,WAAA,EAAa;EAAK,GACxCH,UACF;EAEA,IAAIzzD,OAAA,CAAQ6zD,GAAA,EAAK;IACf72D,IAAA,CAAK42D,WAAA,GAAc;EACrB;EACA,OAAOV,mBAAA,CAAAxuD,OAAA,CAAIgvD,IAAA,CAAK1zD,OAAA,EAASuzD,SAAA,EAAWv2D,IAAI;AAC1C;AAEO,SAAS82D,eAAeP,SAAA,EAAuBE,UAAA,GAA8B,CAAC,GAAG;EACtF,MAAMzzD,OAAA,GAAU;IACd+zD,MAAA,EAAQ;EACV;EAEA,MAAM/2D,IAAA,GAAwBzhB,MAAA,CAAOsE,MAAA,CACnC;IAAE8zE,SAAA,EAAW;IAASC,WAAA,EAAa;EAAK,GACxCH,UACF;EACA,OAAOP,mBAAA,CAAAxuD,OAAA,CAAIgvD,IAAA,CAAK1zD,OAAA,EAASuzD,SAAA,EAAWv2D,IAAI;AAC1C;AAEO,SAASg3D,cAAc5tE,KAAA,EAAe;EAC3C,MAAM6tE,SAAA,GAAY7tE,KAAA,CAAMvD,KAAA,CAAM,GAAG;EACjC,IAAIoxE,SAAA,CAAUh/E,MAAA,KAAW,GAAG;IAC1B,OAAO;EACT;EACA,MAAMi/E,UAAA,GAAaD,SAAA,CAAU,CAAC;EAC9B,MAAMj0D,OAAA,GAAU9nB,YAAA,CAAag8E,UAAU;EACvC,MAAMl8E,IAAA,GAAOyP,IAAA,CAAKwE,KAAA,CAAM+T,OAAO;EAC/B,OAAOhoB,IAAA,CAAK+hC,OAAA;AACd;AAOO,SAASo6C,SAAS35C,MAAA,EAAgB;EACvC,OAAO,CACL;EAAA;EACAziC,YAAA,CAAa0P,IAAA,CAAKC,SAAA,CAAU;IAAEqyB,OAAA,EAASS;EAAO,CAAC,CAAC,GAChD;EAAA;EAAA,CACF,CAAEhkC,IAAA,CAAK,GAAG;AACZ;AASO,SAAS49E,eAAe/6E,IAAA,EAAuBg7E,MAAA,EAAgBC,SAAA,EAAmB;EACvF,MAAM91E,GAAA,GAAMgJ,MAAA,CAAOlC,IAAA,CAAK+uE,MAAA,EAAQ,MAAM;EACtC,MAAMjgE,IAAA,GAAOg/D,aAAA,CAAA1uD,OAAA,CAAO6vD,UAAA,CAAW,UAAU/1E,GAAG,EAAEhE,MAAA,CAAOnB,IAAI,EAAEm7E,MAAA,CAAO,KAAK;EAEvE,IAAI;IACF,OAAOpB,aAAA,CAAA1uD,OAAA,CAAO+vD,eAAA,CAAgBjtE,MAAA,CAAOlC,IAAA,CAAK8O,IAAI,GAAG5M,MAAA,CAAOlC,IAAA,CAAKgvE,SAAS,CAAC;EACzE,QAAQ;IACN,OAAO;EACT;AACF;;;AC1FO,IAAMI,YAAA,GAAN,MAAmB;EAAA;AAAA;AAAA;AAAA;AAAA;EAYxBz7E,YAAYo7E,MAAA,EAAqB;IAoBjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAM,kBAAA,GAAqB,OAAOC,eAAA,EAAkCztD,IAAA,KAAuB;MACnF,KAAK0tD,aAAA,CAAcD,eAAA,EAAiBztD,IAAI;MACxC,KAAKA,IAAA,GAAOA,IAAA;MAEZ,IAAIM,WAAA,CAAWmtD,eAAe,GAAG;QAC/B,KAAKE,aAAA,GAAgBF,eAAA;QACrB,KAAK14E,IAAA,GAAO;MACd;MAEA,IAAI,OAAO04E,eAAA,KAAoB,UAAU;QACvC,KAAKxuE,KAAA,GAAQwuE,eAAA;QACb,KAAK14E,IAAA,GAAO;MACd;MAEA,IAAI,CAAC04E,eAAA,IAAmB,KAAKztD,IAAA,IAAQ,KAAKktD,MAAA,EAAQ;QAChD,KAAKjuE,KAAA,GAAQktE,YAAA,CAAa,KAAKe,MAAA,EAAQltD,IAAA,CAAKhuB,EAAA,EAAI,CAAC,GAAG,CAAC,CAAC;QACtD,KAAK+C,IAAA,GAAO;MACd;MAEA,MAAM,KAAK02E,SAAA,CAAU;IACvB;IAMA;AAAA;AAAA;AAAA;IAAA,KAAAmC,KAAA,GAAQ,MAAM;MACZ,KAAK3uE,KAAA,GAAQ;MACb,KAAK0uE,aAAA,GAAgB;MACrB,KAAK54E,IAAA,GAAO;MACZ,KAAKirB,IAAA,GAAO;MACZ,KAAK6tD,gBAAA,GAAmB;IAC1B;IAGA;IAAA,KAAAH,aAAA,GAAgB,CAACD,eAAA,EAAkCztD,IAAA,KAAuB;MAExE,IAAIA,IAAA,IAAQA,IAAA,CAAK8tD,IAAA,IAAQ,CAACL,eAAA,EAAiB;MAG3C,IAAI,CAAC,KAAKP,MAAA,IAAU,CAACO,eAAA,EAAiB;QACpC,MAAM,IAAIt/E,KAAA,CAAM,6BAA6B;MAC/C;MAEA,IACEs/E,eAAA,IACA,OAAOA,eAAA,KAAoB,YAC3B,CAACntD,WAAA,CAAWmtD,eAAe,GAC3B;QACA,MAAM,IAAIt/E,KAAA,CAAM,oDAAoD;MACtE;MAEA,IAAI,OAAOs/E,eAAA,KAAoB,UAAU;QAEvC,IAAIztD,IAAA,CAAK8tD,IAAA,IAAQL,eAAA,KAAoB,IAAI;QAEzC,MAAMM,WAAA,GAAclB,aAAA,CAAcY,eAAe;QACjD,IACEA,eAAA,IAAmB,SAClBM,WAAA,IAAe,QAAQA,WAAA,KAAgB,MAAMA,WAAA,KAAgB/tD,IAAA,CAAKhuB,EAAA,GACnE;UACA,MAAM,IAAI7D,KAAA,CACR,mEACF;QACF;MACF;IACF;IAIA;IAAA;IAAA,KAAAq9E,UAAA,GAAa,MAAM,KAAKqC,gBAAA;IAIxB;IAAA;IAAA,KAAApC,SAAA,GAAY,MAAM;MAEhB,KAAKoC,gBAAA,GAAmB,IAAIp+D,OAAA,CAAQ,OAAO/E,OAAA,EAASC,MAAA,KAAW;QAC7D,IAAI,KAAK5V,IAAA,KAAS,UAAU;UAC1B,OAAO2V,OAAA,CAAQ,KAAKzL,KAAe;QACrC;QAEA,IAAI,KAAK0uE,aAAA,IAAiB,OAAO,KAAKA,aAAA,KAAkB,UAAU;UAChE,IAAI;YACF,KAAK1uE,KAAA,GAAQ,MAAM,KAAK0uE,aAAA,CAAc;UACxC,SAAS18E,CAAA,EAAG;YACV,OAAO0Z,MAAA,CACL,IAAIxc,KAAA,CAAM,8CAA8C8C,CAAC,IAAI;cAAEsN,KAAA,EAAOtN;YAAE,CAAC,CAC3E;UACF;UACAyZ,OAAA,CAAQ,KAAKzL,KAAK;QACpB;MACF,CAAC;MAED,OAAO,KAAK4uE,gBAAA;IACd;IAGA;IAAA,KAAA1F,QAAA,GAAW,MAAM;MACf,IAAI,KAAKlpE,KAAA,EAAO;QACd,OAAO,KAAKA,KAAA;MACd;MAEA,IAAI,KAAK+gB,IAAA,IAAQ,KAAKA,IAAA,CAAK8tD,IAAA,IAAQ,CAAC,KAAK7uE,KAAA,EAAO;QAC9C,OAAO,KAAKA,KAAA;MACd;MAEA,IAAI,KAAKiuE,MAAA,EAAQ;QACf,OAAOP,cAAA,CAAe,KAAKO,MAAM;MACnC;MAEA,MAAM,IAAI/+E,KAAA,CACR,kHACF;IACF;IAEA,KAAAy8E,QAAA,GAAW,MAAM,KAAK71E,IAAA,KAAS;IAtI7B,KAAK84E,gBAAA,GAAmB;IACxB,IAAIX,MAAA,EAAQ;MACV,KAAKA,MAAA,GAASA,MAAA;IAChB;IAEA,KAAKn4E,IAAA,GAAO;IAEZ,IAAI,KAAKm4E,MAAA,EAAQ;MACf,KAAKjuE,KAAA,GAAQ0tE,cAAA,CAAe,KAAKO,MAAM;IACzC;EACF;AA6HF;;;AC5JO,IAAMc,aAAA,GAAsE;EACjF,MAAM;IAAEr7E,IAAA,EAAM;IAAuBs7E,SAAA,EAAW;EAAK;EACrD,KAAK;IAAEt7E,IAAA,EAAM;IAAkBs7E,SAAA,EAAW;EAAM;EAChD,KAAK;IAAEt7E,IAAA,EAAM;IAA6Bs7E,SAAA,EAAW;EAAK;EAC1D,KAAK;IAAEt7E,IAAA,EAAM;IAAcs7E,SAAA,EAAW;EAAM;EAC5C,KAAK;IAAEt7E,IAAA,EAAM;IAA0Bs7E,SAAA,EAAW;EAAM;EACxD,KAAK;IAAEt7E,IAAA,EAAM;IAAkBs7E,SAAA,EAAW;EAAK;EAC/C,MAAM;IAAEt7E,IAAA,EAAM;IAAqBs7E,SAAA,EAAW;EAAM;EACpD,MAAM;IAAEt7E,IAAA,EAAM;IAAmBs7E,SAAA,EAAW;EAAM;EAClD,MAAM;IAAEt7E,IAAA,EAAM;IAA0Bs7E,SAAA,EAAW;EAAM;EACzD,MAAM;IAAEt7E,IAAA,EAAM;IAAmCs7E,SAAA,EAAW;EAAM;EAClE,MAAM;IAAEt7E,IAAA,EAAM;IAAuBs7E,SAAA,EAAW;EAAM;EACtD,MAAM;IAAEt7E,IAAA,EAAM;IAA6Bs7E,SAAA,EAAW;EAAM;EAC5D,MAAM;IAAEt7E,IAAA,EAAM;IAAsBs7E,SAAA,EAAW;EAAM;EACrD,MAAM;IAAEt7E,IAAA,EAAM;IAAuBs7E,SAAA,EAAW;EAAK;EACrD,MAAM;IAAEt7E,IAAA,EAAM;IAA8Bs7E,SAAA,EAAW;EAAM;EAC7D,MAAM;IAAEt7E,IAAA,EAAM;IAAyBs7E,SAAA,EAAW;EAAM;EACxD,MAAM;IAAEt7E,IAAA,EAAM;IAA6Bs7E,SAAA,EAAW;EAAM;EAC5D,MAAM;IAAEt7E,IAAA,EAAM;IAAoCs7E,SAAA,EAAW;EAAM;EACnE,MAAM;IAAEt7E,IAAA,EAAM;IAAkCs7E,SAAA,EAAW;EAAM;EACjE,MAAM;IAAEt7E,IAAA,EAAM;IAAqCs7E,SAAA,EAAW;EAAM;EACpE,MAAM;IAAEt7E,IAAA,EAAM;IAAkCs7E,SAAA,EAAW;EAAK;EAChE,MAAM;IAAEt7E,IAAA,EAAM;IAA6Bs7E,SAAA,EAAW;EAAM;EAC5D,MAAM;IAAEt7E,IAAA,EAAM;IAAiBs7E,SAAA,EAAW;EAAK;EAC/C,MAAM;IAAEt7E,IAAA,EAAM;IAAkBs7E,SAAA,EAAW;EAAM;EACjD,MAAM;IAAEt7E,IAAA,EAAM;IAA8Bs7E,SAAA,EAAW;EAAM;EAC7D,MAAM;IAAEt7E,IAAA,EAAM;IAAyBs7E,SAAA,EAAW;EAAK;EACvD,MAAM;IAAEt7E,IAAA,EAAM;IAAqBs7E,SAAA,EAAW;EAAM;AACtD;AAQO,SAASC,WAAW9vE,KAAA,EAAiC;EAC1D,OAAQA,KAAA,CAAmBzQ,IAAA,KAAS;AACtC;AAEO,SAASwgF,iBAAiB/vE,KAAA,EAAiB;EAChD,IAAI,CAACA,KAAA,CAAMzQ,IAAA,EAAM,OAAO;EACxB,MAAMujB,GAAA,GAAM88D,aAAA,CAAc,GAAG5vE,KAAA,CAAMzQ,IAAI,EAAE;EACzC,IAAI,CAACujB,GAAA,EAAK,OAAO;EACjB,OAAOA,GAAA,CAAI+8D,SAAA;AACb;AAEO,SAASG,oBAAoBhwE,KAAA,EAAiB;EACnD,OAAOA,KAAA,CAAMzQ,IAAA,KAAS;AACxB;AAEO,SAASm8E,YAAY54D,GAAA,EAAwB;EAClD,IAAI,OAAOA,GAAA,CAAI44D,WAAA,KAAgB,WAAW;IACxC,OAAO54D,GAAA,CAAI44D,WAAA;EACb;EAEA,IAAI;IACF,OAAOxpE,IAAA,CAAKwE,KAAA,CAAMoM,GAAA,CAAI3T,OAAO,EAAEusE,WAAA;EACjC,SAASlmD,CAAA,EAAG;IACV,OAAO;EACT;AACF;AAEO,SAASyqD,gBACd99E,GAAA,EACwC;EACxC,OAAO,CAACA,GAAA,CAAI0N,MAAA,IAAU1N,GAAA,CAAI0N,MAAA,GAAS,OAAO,OAAO1N,GAAA,CAAI0N,MAAA;AACvD;;;AClDO,IAAMqwE,oBAAA,GAAN,MAA2B;EAOhCx8E,YAAY;IAAEC;EAAO,GAA2B;IAkChD;IAAA,KAAAw8E,oBAAA,GAAwBl/D,KAAA,IAA4B;MAClD,KAAKm5D,IAAA,CAAK,4BAA4Bn5D,KAAA,CAAMta,IAAI,EAAE;MAElD,IAAIsa,KAAA,CAAMta,IAAA,KAAS,WAAW;QAC5B,KAAKy5E,SAAA,CAAU,qBAAsB;QACrC,KAAK1+D,WAAA,EAAa2C,MAAA,CAAO,wBAAwB;QACjD,KAAK3C,WAAA,GAAc;QACnB;MACF;MAEA,IAAIT,KAAA,CAAMta,IAAA,KAAS,YAAY,KAAK2e,KAAA,KAAU,uBAAwB;QACpE,KAAK+2D,OAAA,CAAQ,IAAI;MACnB;IACF;IAGA;IAAA,KAAAgE,IAAA,GAAO,OACLttE,MAAA,EACA3D,MAAA,EACAkxE,KAAA,KACe;MACf,IAAI,CAAC,KAAK5+D,WAAA,IAAe,CAAC3O,MAAA,CAAOkqE,KAAA,EAAO;QACtC,KAAKv7D,WAAA,GAAc0N,aAAA,CAAMtF,WAAA,CAAYrb,MAAA,CAAO;MAC9C;MAEA,IAAI;QACF,MAAMtM,GAAA,GAAM,MAAM,KAAKwB,MAAA,CAAO48E,cAAA,CAC5B,OACC,KAAK58E,MAAA,CAAOia,OAAA,CAAmBjV,OAAA,CAAQ,SAAS,OAAO,IAAI;QAAA;QAC5D,QACA;UACEyG,MAAA,EAAQ;YAAE,GAAGA,MAAA;YAAQsS,WAAA,EAAa,KAAKA,WAAA,EAAa7Q;UAAM;UAC1DkC;QACF,CACF;QAEA,KAAKooE,mBAAA,GAAsB;QAC3B,OAAOh5E,GAAA;MAET,SAAS6N,KAAA,EAAY;QACnB,KAAKmrE,mBAAA,IAAuB;QAE5B,IAAImF,KAAA,IAASP,gBAAA,CAAiB/vE,KAAK,GAAG;UACpC,KAAKoqE,IAAA,CAAK,4CAA4C;UACtD,MAAMnoD,KAAA,CAAMsC,aAAA,CAAc,KAAK4mD,mBAAmB,CAAC;UACnD,OAAO,KAAKkF,IAAA,CAAQttE,MAAA,EAAQ3D,MAAA,EAAQkxE,KAAK;QAC3C;QAEA,MAAMtwE,KAAA;MACR;IACF;IAGA;IAAA,KAAAwwE,KAAA,GAAQ,YAAY;MAClB,OAAO,KAAKl7D,KAAA,KAAU,6BAA2B;QAC/C,IAAI;UACF,MAAM7iB,IAAA,GAAO,MAAM,KAAK49E,IAAA,CAErB,CAAC,GAAG;YAAEroE,OAAA,EAAS;UAAM,GAAG,IAAI;UAE/B,IAAIvV,IAAA,CAAKo+C,MAAA,EAAQnhD,MAAA,EAAQ;YACvB,SAASF,CAAA,GAAI,GAAGA,CAAA,GAAIiD,IAAA,CAAKo+C,MAAA,CAAOnhD,MAAA,EAAQF,CAAA,IAAK;cAC3C,KAAKmE,MAAA,CAAOmjC,aAAA,CAAcrkC,IAAA,CAAKo+C,MAAA,CAAOrhD,CAAC,CAAC;YAC1C;UACF;QAEF,SAASwQ,KAAA,EAAY;UACnB,IAAIof,aAAA,CAAMpT,QAAA,CAAShM,KAAK,GAAG;YACzB,KAAKoqE,IAAA,CAAK,kCAAkC;YAC5C;UACF;UAIA,IAAI4F,mBAAA,CAAoBhwE,KAAK,GAAG;YAC9B,KAAKoqE,IAAA,CAAK,wDAAwD;YAClE,KAAKgG,SAAA,CAAU,iCAA4B;YAC3C,KAAK/D,OAAA,CAAQ,IAAI;YACjB;UACF;UAEA,IAAIyD,UAAA,CAAW9vE,KAAK,KAAK,CAAC+vE,gBAAA,CAAiB/vE,KAAK,GAAG;YACjD,KAAKowE,SAAA,CAAU,qBAAsB;YACrC;UACF;UAEA,MAAMnuD,KAAA,CAAMsC,aAAA,CAAc,KAAK4mD,mBAAmB,CAAC;QACrD;MACF;IACF;IAMA;AAAA;AAAA;AAAA;IAAA,KAAAkB,OAAA,GAAU,OAAOoE,SAAA,GAAY,UAAU;MACrC,IAAI,KAAKn7D,KAAA,KAAU,+BAA4B;QAC7C,KAAK80D,IAAA,CAAK,8CAA8C;UAAEqG;QAAU,GAAG,MAAM;QAC7E;MACF;MACA,IAAI,KAAKn7D,KAAA,KAAU,6BAA2B;QAC5C,KAAK80D,IAAA,CAAK,6CAA6C;UAAEqG;QAAU,GAAG,MAAM;QAC5E;MACF;MAEA,KAAKL,SAAA,CAAU,6BAA0B;MACzC,KAAKpH,YAAA,GAAe;MACpB,IAAI;QACF,MAAM;UAAE/3D;QAAM,IAAI,MAAM,KAAKo/D,IAAA,CAC3B;UAAEK,IAAA,EAAM,KAAK/8E,MAAA,CAAOm2E,eAAA,CAAgB;QAAE,GACtC;UAAE9hE,OAAA,EAAS;QAAK;QAAA;QAChByoE,SACF;QAEA,KAAKL,SAAA,CAAU,2BAAyB;QACxC,KAAKpH,YAAA,GAAe/3D,KAAA,CAAMs8D,aAAA;QAE1B,KAAK55E,MAAA,CAAOmjC,aAAA,CAAc7lB,KAAK;QAC/B,KAAKu/D,KAAA,CAAM;QACX,IAAIC,SAAA,EAAW;UACb,KAAK98E,MAAA,CAAO+5E,YAAA,CAAa;QAC3B;QACA,OAAOz8D,KAAA;MACT,SAAS6B,GAAA,EAAK;QACZ,KAAKs9D,SAAA,CAAU,qBAAsB;QACrC,MAAMt9D,GAAA;MACR;IACF;IAKA;AAAA;AAAA;IAAA,KAAA6uD,SAAA,GAAY,MAAM,CAAC,CAAC,KAAKqH,YAAA,IAAgB,KAAK1zD,KAAA,KAAU;IAExD,KAAAs3D,UAAA,GAAa,OAAO5kE,OAAA,GAAU,QAAS;MACrC8d,8BAAA,CAA+B,KAAKqqD,oBAAoB;MAExD,KAAKC,SAAA,CAAU,iCAA4B;MAC3C,KAAK1+D,WAAA,EAAa2C,MAAA,CAAO,wBAAwB;MACjD,KAAK3C,WAAA,GAAc;MAEnB,MAAM67D,aAAA,GAAgB,KAAKvE,YAAA;MAC3B,KAAKA,YAAA,GAAe;MAEpB,IAAI;QACF,MAAM,KAAKqH,IAAA,CAAK;UAAEpD,KAAA,EAAO;UAAMM;QAAc,GAAG;UAAEvlE;QAAQ,GAAG,KAAK;QAClE,KAAKoiE,IAAA,CAAK,oCAAoC;MAChD,SAASt3D,GAAA,EAAK;QACZ,KAAKs3D,IAAA,CAAK,yBAAyB;UAAEt3D;QAAI,GAAG,OAAO;MACrD;IACF;IAvLE,KAAKnf,MAAA,GAASA,MAAA;IACd,KAAK2hB,KAAA,GAAQ;IACb,KAAK61D,mBAAA,GAAsB;IAE3BvlD,2BAAA,CAA4B,KAAKuqD,oBAAoB;EACvD;EAEA/F,KAAKjkD,GAAA,EAAas6B,KAAA,GAAY,CAAC,GAAG0rB,KAAA,GAAkB,QAAQ;IAC1D,KAAKx4E,MAAA,CAAO45B,MAAA,CAAO4+C,KAAA,EAAO,0BAA0BhmD,GAAA,EAAK;MACvD80C,IAAA,EAAM,CAAC,uBAAuB,YAAY;MAC1C,GAAGxa;IACL,CAAC;EACH;EAEA2vB,UAAU96D,KAAA,EAAwB;IAChC,KAAK80D,IAAA,CAAK,iBAAiB90D,KAAK,EAAE;IAGlC,IACE,KAAKA,KAAA,KAAU,iCACfA,KAAA,KAAU,6BACV;MACA,KAAK3hB,MAAA,CAAOmjC,aAAA,CAAc;QAAEngC,IAAA,EAAM;QAAsB2yE,MAAA,EAAQ;MAAK,CAAC;IACxE;IAEA,IAAIh0D,KAAA,KAAU,yBAA0BA,KAAA,KAAU,mCAA8B;MAC9E,KAAK3hB,MAAA,CAAOmjC,aAAA,CAAc;QAAEngC,IAAA,EAAM;QAAsB2yE,MAAA,EAAQ;MAAM,CAAC;IACzE;IAEA,KAAKh0D,KAAA,GAAQA,KAAA;EACf;AA0JF;;;ACpMO,IAAMq7D,OAAA,GAAN,MAAc;EAMnBj9E,YACEC,MAAA,EACAgD,IAAA,EACA/C,EAAA,EACAnB,IAAA,EACA;IACA,KAAKkB,MAAA,GAASA,MAAA;IACd,KAAKgD,IAAA,GAAOA,IAAA;IACZ,KAAK/C,EAAA,GAAKA,EAAA;IACV,KAAKnB,IAAA,GAAOA,IAAA;EACd;EAEAoB,OAAA,EAAS;IACP,MAAMC,IAAA,GAAO;MACXS,IAAA,EAAM,KAAK9B,IAAA,EAAM8B,IAAA;MACjB0M,MAAA,EAAQ,KAAKxO,IAAA,EAAMwO,MAAA;MACnB3M,WAAA,EAAa,KAAK7B,IAAA,EAAM6B,WAAA;MACxBs8E,mBAAA,EAAqB,KAAKn+E,IAAA,EAAMm+E,mBAAA;MAChCC,SAAA,EAAW,KAAKp+E,IAAA,EAAMo+E;IACxB;IAEA,OAAO,KAAKl9E,MAAA,CAAOm9E,aAAA,CAAc,KAAKn6E,IAAA,EAAM,KAAK/C,EAAA,EAAIE,IAAI;EAC3D;EAEAi9E,gBAAA,EAAkB;IAChB,IAAI,CAAC,KAAKn9E,EAAA,EAAI;MACZ,MAAM,IAAI7D,KAAA,CACR,iJACF;IACF;EACF;EAEAwF,IAAA,EAAM;IACJ,KAAKw7E,eAAA,CAAgB;IACrB,OAAO,KAAKp9E,MAAA,CAAOq9E,UAAA,CAAW,KAAKp9E,EAAY;EACjD;EAEAqB,OAAOxC,IAAA,EAAuC;IAC5C,KAAKs+E,eAAA,CAAgB;IAErB,OAAO,KAAKp9E,MAAA,CAAOs9E,aAAA,CAAc,KAAKr9E,EAAA,EAAcnB,IAAI;EAC1D;EAEAy+E,WAAWhmE,OAAA,EAAmB;IAC5B,KAAK6lE,eAAA,CAAgB;IACrB,OAAO,KAAKp9E,MAAA,CAAOw9E,iBAAA,CAAkB,KAAKv9E,EAAA,EAAcsX,OAAO;EACjE;EAEAkmE,cAAclmE,OAAA,EAAmB;IAC/B,KAAK6lE,eAAA,CAAgB;IACrB,OAAO,KAAKp9E,MAAA,CAAO09E,oBAAA,CAAqB,KAAKz9E,EAAA,EAAcsX,OAAO;EACpE;EAEA/V,OAAA,EAAS;IACP,KAAK47E,eAAA,CAAgB;IACrB,OAAO,KAAKp9E,MAAA,CAAO29E,aAAA,CAAc,KAAK19E,EAAY;EACpD;EAEA29E,aAAa30B,QAAA,EAAkB;IAC7B,KAAKm0B,eAAA,CAAgB;IACrB,OAAO,KAAKp9E,MAAA,CAAO69E,mBAAA,CAAoB,KAAK59E,EAAA,EAAcgpD,QAAQ;EACpE;EAEA60B,aACE/2E,OAAA,GAA2C,CAAC,GAC5CupB,IAAA,GAAgC,EAAC,EACjClvB,OAAA,GAAU,CAAC,GACX;IACA,KAAKg8E,eAAA,CAAgB;IAErB,OAAO,KAAKp9E,MAAA,CAAO+9E,mBAAA,CAAoB,KAAK99E,EAAA,EAAc8G,OAAA,EAAQupB,IAAA,EAAMlvB,OAAO;EACjF;AACF;;;ACpEO,IAAM48E,uBAAA,GAA0B;EACrC/vD,IAAA,EAAM;EACNziB,OAAA,EAAS;EACTyyE,WAAA,EAAa;AACf;AAGO,IAAMC,UAAA,GAAN,MAAiB;EAGtBn+E,YAAYC,MAAA,EAAoB;IAC9B,KAAKA,MAAA,GAASA,MAAA;EAChB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAm+E,SAASC,aAAA,EAAuBj9D,MAAA,EAAgB/f,OAAA,GAAiC,CAAC,GAAG;IACnF,OAAO,KAAKi9E,IAAA,CAAKL,uBAAA,CAAwB/vD,IAAA,EAAMmwD,aAAA,EAAe,IAAIj9D,MAAA,EAAQ/f,OAAO;EACnF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAk9E,YAAY3T,SAAA,EAAmBxpD,MAAA,EAAgB/f,OAAA,GAAiC,CAAC,GAAG;IAClF,OAAO,KAAKi9E,IAAA,CAAKL,uBAAA,CAAwBxyE,OAAA,EAASm/D,SAAA,EAAW,IAAIxpD,MAAA,EAAQ/f,OAAO;EAClF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAMi9E,KACJE,UAAA,EACAC,QAAA,EACAC,eAAA,EACAt9D,MAAA,EACA/f,OAAA,GAAiC,CAAC,GAClC;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,2BACtB;MACEykE,WAAA,EAAaH,UAAA;MACbI,SAAA,EAAWH,QAAA;MACXI,iBAAA,EAAmBH,eAAA;MACnBt9D,MAAA;MACA,GAAG/f;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMy9E,SAASC,QAAA,EAAkB19E,OAAA,GAAiC,CAAC,GAAG;IACpE,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,2BACtB;MACE8kE,UAAA,EAAY,CAACD,QAAQ;MACrB,GAAG19E;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM49E,WACJF,QAAA,EACA19E,OAAA,EAGA;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,6BACtB;MACE8kE,UAAA,EAAY,CAACD,QAAQ;MACrB,GAAG19E;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM69E,wBACJr+C,MAAA,EACAx/B,OAAA,GAA0C,CAAC,GAC3C;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAO4B,GAAA,CACvB,KAAK5B,MAAA,CAAOia,OAAA,GAAU,kCACtB;MACE4mB,OAAA,EAASD,MAAA;MACT,GAAGx/B;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM89E,iBACJ9U,gBAAA,GAAuC,CAAC,GACxC95C,IAAA,GAAwB,EAAC,EACzBlvB,OAAA,GAAwC,CAAC,GACzC;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,mCACtB;MACE3M,MAAA,EAAQ88D,gBAAA;MACR95C,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;EAMA,MAAM+9E,aAAa1zE,MAAA,EAA0B;IAC3C,OAAO,MAAM,KAAKzL,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,6BACtBxO,MACF;EACF;EAAA;AAAA;AAAA;AAAA;EAMA,MAAM07C,UAAU7hD,GAAA,EAAaxG,IAAA,EAA0B;IACrD,OAAO,MAAM,KAAKkB,MAAA,CAAO4B,GAAA,CACvB,KAAK5B,MAAA,CAAOia,OAAA,GAAU,+BAA+B3U,GAAA,EACrDxG,IACF;EACF;EAEA,MAAMsgF,aAAa95E,GAAA,EAAaxG,IAAA,EAA0B;IACxD,OAAO,MAAM,KAAKkB,MAAA,CAAOwB,MAAA,CACvB,KAAKxB,MAAA,CAAOia,OAAA,GAAU,+BAA+B3U,GAAA,EACrDxG,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMugF,aACJjV,gBAAA,EACA95C,IAAA,EACAlvB,OAAA,GAAiB,CAAC,GAClB;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,8BACtB;MACE3M,MAAA,EAAQ88D,gBAAA;MACR95C,IAAA;MACA,GAAGlvB;IACL,CACF;EACF;EAEA,MAAMk+E,aACJC,UAAA,EACAC,MAAA,EACAp+E,OAAA,GAA+B,CAAC,GAChC;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CACvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,oCACtB;MACEwlE,WAAA,EAAaF,UAAA;MACbG,OAAA,EAASF,MAAA;MACT,GAAGp+E;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAMi9C,MACJkgC,UAAA,EACAoB,QAAA,EACAlB,eAAA,EACAmB,iBAAA,EAOAC,SAAA,EACAz+E,OAAA,EAIA;IACA,OAAO,MAAM,KAAKpB,MAAA,CAAOspE,IAAA,CAAK,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,4BAA4B;MAC9EykE,WAAA,EAAaH,UAAA;MACbI,SAAA,EAAWgB,QAAA;MACXf,iBAAA,EAAmBH,eAAA;MACnBqB,kBAAA,EAAoBF,iBAAA;MACpBG,UAAA,EAAYF,SAAA;MACZz+E;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EA2BA,MAAM4+E,iBACJ1+C,MAAA,EACA2+C,OAAA,EACA;IACA,IAAI,CAACA,OAAA,CAAQ7hE,QAAA,IAAY,CAAC6hE,OAAA,CAAQC,KAAA,EAAO;MACvC,MAAM,IAAI9jF,KAAA,CAAM,2CAA2C;IAC7D;IAEA,MAAMwjF,iBAAA,GAA6D,CAAC;IACpE,IAAIK,OAAA,CAAQ7hE,QAAA,EAAU;MACpBwhE,iBAAA,CAAkBO,KAAA,GAAQ,CAACF,OAAA,CAAQ7hE,QAAQ;IAC7C;IACA,IAAI6hE,OAAA,CAAQC,KAAA,EAAO;MACjBN,iBAAA,CAAkBQ,MAAA,GAAS,CAACH,OAAA,CAAQC,KAAK;IAC3C;IAEA,OAAO,MAAM,KAAK7hC,KAAA,CAChB2/B,uBAAA,CAAwBC,WAAA,EACxB38C,MAAA,EACAA,MAAA,EACAs+C,iBAAA,EACA,wBACA;MACES,UAAA,EAAY;MACZC,SAAA,EAAW;IACb,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMC,eACJhC,UAAA,EACAoB,QAAA,EACAlB,eAAA,EACAmB,iBAAA,EAKAhrC,KAAA,EACA;IACA,OAAO,MAAM,KAAK50C,MAAA,CAAOspE,IAAA,CAEvB,KAAKtpE,MAAA,CAAOia,OAAA,GAAU,mCAAmC;MACzDykE,WAAA,EAAaH,UAAA;MACbI,SAAA,EAAWgB,QAAA;MACXf,iBAAA,EAAmBH,eAAA;MACnBqB,kBAAA,EAAoBF,iBAAA;MACpBhrC;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM4rC,sBAAsB7V,SAAA,EAAmB/1B,KAAA,EAA0B;IACvE,OAAO,MAAM,KAAK2rC,cAAA,CAChBvC,uBAAA,CAAwBxyE,OAAA,EACxBm/D,SAAA,EACA,IACA,CAAC,GACD/1B,KACF;EACF;AACF;;;AC9XA,IAAM6rC,6CAAA,GAAgD;AACtD,IAAMC,uBAAA,GAA0B;AACzB,IAAMC,4BAAA,GAA+B;EAC1CnhB,MAAA,EAAQ;EACRohB,kBAAA,EAAoB;EACpBtjD,OAAA,EAAS,EAAC;EACVujD,iBAAA,EAAmB;EACnBC,eAAA,EAAiB,EAAC;EAClBC,oBAAA,EAAsB;EACtBxpD,UAAA,EAAY;IACV26B,SAAA,EAAW;IACXgS,aAAA,EAAe;IACfF,UAAA,EAAY;EACd;EACAgd,KAAA,EAAO;AACT;AAuBO,IAAMC,aAAA,GAAN,cAA4B5iB,iBAAA,CAAkB;EAAA;EAAA;EAAA;EAWnDt+D,YAAY;IAAEC;EAAO,GAA2B;IAC9C,MAAM;IA6BR,KAAO4yD,UAAA,GAAa,MAAM;MACxB,KAAKjxC,KAAA,CAAM/Z,IAAA,CAAK+4E,4BAA4B;IAC9C;IAEA,KAAOhvB,QAAA,GAAW,MAAM;MACtB,KAAKhwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE23B,MAAA,EAAQ;MAAK,CAAC;IACzC;IAEA,KAAO3N,UAAA,GAAa,MAAM;MACxB,KAAKlwC,KAAA,CAAMkmB,WAAA,CAAY;QAAE23B,MAAA,EAAQ;MAAM,CAAC;IAC1C;IAEA,KAAOa,qBAAA,GAAwB,MAAM;MACnC,IAAI,KAAKtC,gBAAA,EAAkB;MAE3B,KAAKC,sBAAA,CAAuB,KAAKkjB,iCAAA,CAAkC,CAAC;MACpE,KAAKljB,sBAAA,CAAuB,KAAKmjB,kCAAA,CAAmC,CAAC;MACrE,KAAKnjB,sBAAA,CAAuB,KAAKojB,2BAAA,CAA4B,CAAC;MAC9D,KAAKpjB,sBAAA,CAAuB,KAAK0C,mBAAA,CAAoB,CAAC;MACtD,KAAK1C,sBAAA,CAAuB,KAAKqjB,mCAAA,CAAoC,CAAC;MACtE,KAAKrjB,sBAAA,CAAuB,KAAKsjB,uBAAA,CAAwB,CAAC;IAC5D;IAEA,KAAQJ,iCAAA,GAAoC,MAAM;MAEhD,MAAM;QAAEpxD,cAAA,EAAgB+wD,iBAAA,GAAoB;MAAE,IAC3C,KAAK7gF,MAAA,CAAOiuB,IAAA,IAA4B,CAAC;MAC5C,KAAKtM,KAAA,CAAMkmB,WAAA,CAAY;QAAEg5C;MAAkB,CAAC;MAE5C,MAAMt3C,oBAAA,GAAuB,CAC3B,gBACA,0BACA,mCACA,+BACF,CAAEhrC,GAAA,CACCujE,SAAA,IACC,KAAK9hE,MAAA,CAAO8gE,EAAA,CAAGgB,SAAA,EAAYxkD,KAAA,IAAU;QACnC,MAAM;UAAEwS,cAAA,EAAgByxD;QAAkB,IAAIjkE,KAAA,CAAMkkE,EAAA,IAAMlkE,KAAA;QAC1D,IAAI,OAAOikE,kBAAA,KAAsB,UAAU;UACzC,KAAK5/D,KAAA,CAAMkmB,WAAA,CAAY;YAAEg5C,iBAAA,EAAAU;UAAkB,CAAC;QAC9C;MACF,CAAC,EAAEvjE,WACP;MAEA,OAAO,MAAMurB,oBAAA,CAAqBtkC,OAAA,CAAS+Y,WAAA,IAAgBA,WAAA,CAAY,CAAC;IAC1E;IAEA,KAAQsjE,uBAAA,GAA0B,MAChC,KAAKthF,MAAA,CAAO8gE,EAAA,CAAG,gCAAiCxjD,KAAA,IAAU;MACxD,MAAM;QAAE6c;MAAI,IAAI7c,KAAA;MAChB,MAAM;QAAEggB;MAAQ,IAAI,KAAK3b,KAAA,CAAMqnB,cAAA,CAAe;MAE9C,MAAMy4C,UAAA,GAAankD,OAAA,CAAQhwB,MAAA,CAAQoyB,MAAA,IAAWA,MAAA,CAAO3F,OAAA,CAAQI,GAAA,KAAQA,GAAG;MACxE,KAAKxY,KAAA,CAAMkmB,WAAA,CAAY;QAAEvK,OAAA,EAASmkD;MAAW,CAAC;IAChD,CAAC,EAAEzjE,WAAA;IAEL,KAAQmjE,kCAAA,GAAqC,MAC3C,KAAKx/D,KAAA,CAAMqmB,qBAAA,CACRK,SAAA,KAAe;MAAE/K,OAAA,EAAS+K,SAAA,CAAU/K;IAAQ,IAC7C,CAAC;MAAEA,OAAA,EAASokD;IAAY,GAAGC,IAAA,KAAS;MAClC,MAAM;QAAErkD,OAAA,EAASskD,WAAA,GAAc;MAAG,IAAID,IAAA,IAAQ,CAAC;MAG/C,MAAME,cAAA,GAAiBD,WAAA,CAAYt0E,MAAA,CAChCoyB,MAAA,IAAWA,MAAA,KAAW,KAAKoiD,WAAA,CAAYpiD,MAAA,CAAOz/B,EAAE,CACnD;MAEAyhF,WAAA,CAAYz8E,OAAA,CAASy6B,MAAA,IAAWA,MAAA,CAAO2gC,qBAAA,CAAsB,CAAC;MAC9DwhB,cAAA,CAAe58E,OAAA,CAASy6B,MAAA,IAAWA,MAAA,CAAOy+B,uBAAA,CAAwB,CAAC;IACrE,CACF;IAEF,KAAQijB,2BAAA,GAA8B,MACpC,KAAKz/D,KAAA,CAAMqmB,qBAAA,CACRK,SAAA,KAAe;MAAEm3B,MAAA,EAAQn3B,SAAA,CAAUm3B;IAAO,IAC3C,CAAC;MAAEA;IAAO,MAAM;MACd,IAAIA,MAAA,EAAQ,KAAKC,MAAA,CAAO;IAC1B,CACF;IAEF,KAAQiB,mBAAA,GAAsB,MAC5B,KAAK1gE,MAAA,CAAO8gE,EAAA,CAAG,mCAAoCxjD,KAAA,IAAiB;MAClE,MAAM+f,QAAA,GAAW/f,KAAA,CAAM9R,OAAA,EAASoyB,SAAA;MAChC,IAAI,CAACP,QAAA,EAAU;MAEf,MAAM;QAAEyjD,eAAA;QAAiBE;MAAM,IAAI,KAAKr/D,KAAA,CAAMqnB,cAAA,CAAe;MAC7D,IAAI,CAACg4C,KAAA,EAAO;MAEZ,IAAI,KAAKc,WAAA,CAAYzkD,QAAQ,GAAG;QAC9B,KAAK1b,KAAA,CAAMkmB,WAAA,CAAY;UAAE+4C,kBAAA,EAAoB;QAAK,CAAC;MACrD,WAAW,CAACE,eAAA,CAAgBx5C,QAAA,CAASjK,QAAQ,GAAG;QAC9C,KAAK1b,KAAA,CAAMkmB,WAAA,CAAY;UAAEi5C,eAAA,EAAiBA,eAAA,CAAgB9zE,MAAA,CAAOqwB,QAAQ;QAAE,CAAC;MAC9E;IACF,CAAC,EAAErf,WAAA;IAEL,KAAQqjE,mCAAA,GAAsC,MAAM;MAClD,MAAMU,4BAAA,GAA+B,KAAK/hF,MAAA,CAAO8gE,EAAA,CAAG,sBAAuBxjD,KAAA,IAAU;QACnF,IAAIA,KAAA,CAAMq4D,MAAA,KAAW,OAAO;UAC1B,KAAKh0D,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,IACfA,OAAA,CAAQg5C,oBAAA,GACJh5C,OAAA,GACA;YACE,GAAGA,OAAA;YACHg5C,oBAAA,EAAsB,mBAAIxnE,IAAA,CAAK;UACjC,CACN;QACF;MACF,CAAC,EAAEyE,WAAA;MAEH,MAAMgkE,kCAAA,GAAqC9rD,QAAA,CACzC,MAAM;QACJ,MAAM;UAAE6qD;QAAqB,IAAI,KAAKp/D,KAAA,CAAMqnB,cAAA,CAAe;QAC3D,IAAI,CAAC+3C,oBAAA,EAAsB;QAC3B,KAAKthB,MAAA,CAAO;UAAE2C,KAAA,EAAO;QAAK,CAAC;MAC7B,GACAqe,6CAAA,EACA;QAAEhrD,QAAA,EAAU;MAAK,CACnB;MAEA,MAAMwsD,8BAAA,GAAiC,KAAKjiF,MAAA,CAAO8gE,EAAA,CACjD,wBACAkhB,kCACF,EAAEhkE,WAAA;MAEF,OAAO,MAAM;QACX+jE,4BAAA,CAA6B;QAC7BE,8BAAA,CAA+B;MACjC;IACF;IAEA,KAAO9jB,uBAAA,GAA0B,MAAM;MACrC,KAAKx8C,KAAA,CACFqnB,cAAA,CAAe,EACf1L,OAAA,CAAQr4B,OAAA,CAASy6B,MAAA,IAAWA,MAAA,CAAOy+B,uBAAA,CAAwB,CAAC;MAC/D,OAAO,MAAMA,uBAAA,CAAwB;IACvC;IAEA,KAAOsB,MAAA,GAAS,OAAO;MAAE2C,KAAA,GAAQ;IAAM,IAAI,CAAC,MAAM;MAChD,MAAM;QAAE9kC,OAAA;QAASwjD,eAAA;QAAiBF,kBAAA;QAAoBrpD,UAAA;QAAYypD;MAAM,IACtE,KAAKr/D,KAAA,CAAMqnB,cAAA,CAAe;MAC5B,IAAIzR,UAAA,CAAW26B,SAAA,EAAW;MAC1B,IAAI,CAACkQ,KAAA,IAAS4e,KAAA,IAAS,CAACF,eAAA,CAAgB/kF,MAAA,IAAU,CAAC6kF,kBAAA,EAAoB;MACvE,MAAMp9C,KAAA,GAAQlG,OAAA,CAAQvhC,MAAA,GAAS+kF,eAAA,CAAgB/kF,MAAA;MAE/C,IAAI;QACF,KAAK4lB,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHxQ,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACX26B,SAAA,EAAW;UACb;QACF,EAAE;QAEF,MAAMvmD,QAAA,GAAW,MAAM,KAAKu2E,YAAA,CAAa;UACvC1+C,KAAA,EAAOh5B,IAAA,CAAKqR,GAAA,CAAI2nB,KAAA,EAAOk9C,uBAAuB,KAAKA;QACrD,CAAC;QAED,MAAMgB,WAAA,GAAwB,EAAC;QAE/B,WAAWS,cAAA,IAAkBx2E,QAAA,CAAS2xB,OAAA,EAAS;UAC7C,MAAM8kD,cAAA,GAAiB,KAAKN,WAAA,CAAYK,cAAA,CAAeliF,EAAE;UAEzD,IAAImiF,cAAA,EAAgB;YAElBV,WAAA,CAAYrkF,IAAA,CAAK+kF,cAAc;YAC/B,IAAIA,cAAA,CAAete,aAAA,EAAe;cAChCse,cAAA,CAAeziB,YAAA,CAAawiB,cAAc;YAC5C;UACF,OAAO;YACLT,WAAA,CAAYrkF,IAAA,CAAK8kF,cAAc;UACjC;QACF;QAEA,KAAKxgE,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHzK,OAAA,EAASokD,WAAA;UACTZ,eAAA,EAAiB,EAAC;UAClBF,kBAAA,EAAoB;UACpBrpD,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACX26B,SAAA,EAAW;YACX8R,UAAA,EAAYr4D,QAAA,CAAS/D,IAAA,IAAQ;UAC/B;UACAo5E,KAAA,EAAO;QACT,EAAE;MACJ,SAAS30E,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAUvtB,KAAA,CAAgBb,OAAO;QACpD,KAAKmW,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHxQ,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACX26B,SAAA,EAAW;UACb;QACF,EAAE;MACJ;IACF;IAEA,KAAOgwB,YAAA,GAAe,CAAC9gF,OAAA,GAA+B,CAAC,MACrD,KAAKpB,MAAA,CAAOkiF,YAAA,CAAa;MACvB1+C,KAAA,EAAO;MACP6+C,iBAAA,EAAmB;MACnBC,WAAA,EAAa;MACbhoD,KAAA,EAAO;MACP,GAAGl5B;IACL,CAAC;IAEH,KAAOshE,YAAA,GAAe,OAAOthE,OAAA,GAA6C,CAAC,MAAM;MAC/E,MAAM;QAAEm2B;MAAW,IAAI,KAAK5V,KAAA,CAAMqnB,cAAA,CAAe;MAEjD,IAAIzR,UAAA,CAAW2sC,aAAA,IAAiB,CAAC3sC,UAAA,CAAWysC,UAAA,EAAY;MAExD,IAAI;QACF,KAAKriD,KAAA,CAAMkmB,WAAA,CAAY;UAAEtQ,UAAA,EAAY;YAAE,GAAGA,UAAA;YAAY2sC,aAAA,EAAe;UAAK;QAAE,CAAC;QAE7E,MAAMv4D,QAAA,GAAW,MAAM,KAAKu2E,YAAA,CAAa;UACvC,GAAG9gF,OAAA;UACHwG,IAAA,EAAM2vB,UAAA,CAAWysC;QACnB,CAAC;QAED,KAAKriD,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHzK,OAAA,EAAS3xB,QAAA,CAAS2xB,OAAA,CAAQvhC,MAAA,GACtBgsC,OAAA,CAAQzK,OAAA,CAAQtwB,MAAA,CAAOrB,QAAA,CAAS2xB,OAAO,IACvCyK,OAAA,CAAQzK,OAAA;UACZ/F,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACXysC,UAAA,EAAYr4D,QAAA,CAAS/D,IAAA,IAAQ;YAC7Bs8D,aAAA,EAAe;UACjB;QACF,EAAE;MACJ,SAAS73D,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAUvtB,KAAA,CAAgBb,OAAO;QACpD,KAAKmW,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,KAAa;UAC5B,GAAGA,OAAA;UACHxQ,UAAA,EAAY;YACV,GAAGwQ,OAAA,CAAQxQ,UAAA;YACX2sC,aAAA,EAAe;UACjB;QACF,EAAE;MACJ;IACF;IA3QE,KAAKlkE,MAAA,GAASA,MAAA;IACd,KAAK2hB,KAAA,GAAQ,IAAIgmB,UAAA,CAA+Bg5C,4BAA4B;IAE5E,KAAK4B,sBAAA,GAAyB;MAAEjlD,OAAA,EAAS,EAAC;MAAGwkD,WAAA,EAAa,CAAC;IAAE;EAC/D;EAEA,IAAWA,YAAA,EAAc;IACvB,MAAM;MAAExkD;IAAQ,IAAI,KAAK3b,KAAA,CAAMqnB,cAAA,CAAe;IAE9C,IAAI1L,OAAA,KAAY,KAAKilD,sBAAA,CAAuBjlD,OAAA,EAAS;MACnD,OAAO,KAAKilD,sBAAA,CAAuBT,WAAA;IACrC;IAEA,MAAMA,WAAA,GAAcxkD,OAAA,CAAQlH,MAAA,CAC1B,CAACosD,cAAA,EAAgB9iD,MAAA,KAAW;MAC1B8iD,cAAA,CAAe9iD,MAAA,CAAOz/B,EAAE,IAAIy/B,MAAA;MAC5B,OAAO8iD,cAAA;IACT,GACA,CAAC,CACH;IAEA,KAAKD,sBAAA,CAAuBjlD,OAAA,GAAUA,OAAA;IACtC,KAAKilD,sBAAA,CAAuBT,WAAA,GAAcA,WAAA;IAE1C,OAAOA,WAAA;EACT;AAmPF;;;ACvRA,IAAMW,kBAAA,GAAsBvjF,CAAA,IAAoCA,CAAA,CAAE8D,IAAA,KAAS;AAC3E,IAAM0/E,sBAAA,GAA0BxjF,CAAA,IAC9BA,CAAA,CAAE8D,IAAA,KAAS;AACb,IAAM2/E,qBAAA,GAAyBzjF,CAAA,IAC7BA,CAAA,CAAE8D,IAAA,KAAS;AACb,IAAM4/E,sBAAA,GAA0B1jF,CAAA,IAC9BA,CAAA,CAAE8D,IAAA,KAAS;AACb,IAAM6/E,sBAAA,GAA0B3jF,CAAA,IAC9BA,CAAA,CAAE8D,IAAA,KAAS;AAEN,IAAM8/E,YAAA,GAAgBjS,IAAA,IAC3B,CAAC,CAAEA,IAAA,EAAqBkS,WAAA;AA4BnB,IAAMC,IAAA,GAAN,MAAW;EAKhBjjF,YAAY;IAAEC,MAAA;IAAQ0nE;EAAK,GAAoB;IAO/C,KAAQub,+BAAA,GAAmCvb,IAAA,IAAkC;MAE3E,MAAM;QAAEwb,SAAA;QAAWjjF,EAAA;QAAI,GAAGkjF;MAAqB,IAAIzb,IAAA;MACnD,MAAM;QAAE0b,SAAA;QAAWC;MAAS,IAAIH,SAAA,EAAW9sD,MAAA,CAIzC,CAACC,GAAA,EAAKitD,YAAA,KAAiB;QACrB,IAAIR,YAAA,CAAaQ,YAAY,GAAG;UAC9BjtD,GAAA,CAAI+sD,SAAA,GAAYE,YAAA;QAClB,OAAO;UACLjtD,GAAA,CAAIgtD,QAAA,CAAShmF,IAAA,CAAKimF,YAAY;QAChC;QACA,OAAOjtD,GAAA;MACT,GACA;QAAEgtD,QAAA,EAAU;MAAG,CACjB,KAAK;QAAEA,QAAA,EAAU;MAAG;MAEpB,OAAO;QACL,GAAGF,oBAAA;QACHI,cAAA,EAAgB,mBAAIhqE,IAAA,CAAK;QACzBiqE,iBAAA,EAAmBC,oBAAA,CACjBN,oBAAA,CAAqBO,qBACvB;QACAN,SAAA;QACAO,kBAAA,EAAoBC,qBAAA,CAAsBP,QAAQ;MACpD;IACF;IAEA,KAAQQ,eAAA,GAAkB,MAAM;MAC9B,KAAK7jF,MAAA,CAAOglE,SAAA,EAAWC,kBAAA,CACpBC,EAAA,IAAOA,EAAA,CAAG4e,UAAA,CAAW;QAAEpc,IAAA,EAAMqc,sBAAA,CAAuB,IAAI;MAAE,CAAC,GAC5D;QAAEnvE,MAAA,EAAQ;MAAa,CACzB;IACF;IAEA,KAAOovE,iBAAA,GAAqBtc,IAAA,IAAkC;MAC5D,KAAK/lD,KAAA,CAAMkmB,WAAA,CAAY,KAAKo7C,+BAAA,CAAgCvb,IAAI,CAAC;IACnE;IAMA,KAAOuc,iBAAA,GAAqB3mE,KAAA,IAAiB;MAC3C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,IAAMqd,KAAA,CAAMoqD,IAAA,CAAKznE,EAAA,KAAO,KAAKA,EAAA,EAAI;MACjD,IAAI,CAACwiF,kBAAA,CAAmBnlE,KAAK,GAAG;MAEhC,MAAM;QAAErd,EAAA;QAAI,GAAGikF;MAAS,IAAIC,eAAA,CAAgB7mE,KAAA,CAAMoqD,IAAI;MAEtD,KAAK/lD,KAAA,CAAMkmB,WAAA,CAAY;QAAE,GAAGq8C,QAAA;QAAUX,cAAA,EAAgB,IAAIhqE,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;MAAE,CAAC;MAClF,KAAK02D,eAAA,CAAgB;IACvB;IAEA,KAAOO,gBAAA,GAAoB9mE,KAAA,IAAiB;MAC1C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,IAAMqd,KAAA,CAAMoqD,IAAA,CAAKznE,EAAA,KAAO,KAAKA,EAAA,EAAI;MACjD,IAAI,CAACyiF,sBAAA,CAAuBplE,KAAK,GAAG;MACpC,KAAKqE,KAAA,CAAMkmB,WAAA,CAAY;QACrBw8C,SAAA,EAAW;QACXd,cAAA,EAAgB,IAAIhqE,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;MAC3C,CAAC;MACD,KAAK02D,eAAA,CAAgB;IACvB;IAEA,KAAOS,gBAAA,GAAoBhnE,KAAA,IAAiB;MAC1C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,IAAMqd,KAAA,CAAMoqD,IAAA,CAAKznE,EAAA,KAAO,KAAKA,EAAA,EAAI;MACjD,IAAI,CAAC0iF,qBAAA,CAAsBrlE,KAAK,GAAG;MACnC,MAAMinE,YAAA,GAAe,KAAKzlF,IAAA;MAC1B,MAAM0lF,SAAA,GAAYlnE,KAAA,CAAMmnE,SAAA,CAAU5jD,OAAA,KAAY,KAAK7gC,MAAA,CAAO4gC,MAAA;MAC1D,IAAI8jD,aAAA,GAAgB,CAAC,GAAIH,YAAA,CAAaI,cAA+B;MACrE,IAAIvB,SAAA,GAAYmB,YAAA,CAAanB,SAAA;MAC7B,MAAMO,kBAAA,GAAqBY,YAAA,CAAaZ,kBAAA;MACxC,IAAIH,iBAAA,GAAoBe,YAAA,CAAaf,iBAAA;MAErC,IAAIgB,SAAA,EAAW;QACb,IAAI1B,YAAA,CAAaxlE,KAAA,CAAMmnE,SAAS,GAAG;UACjCrB,SAAA,GAAY9lE,KAAA,CAAMmnE,SAAA;QACpB,WAAWnnE,KAAA,CAAMmnE,SAAA,CAAUG,SAAA,EAAW;UACpCjB,kBAAA,CAAmBrmE,KAAA,CAAMmnE,SAAA,CAAUG,SAAS,IAAItnE,KAAA,CAAMmnE,SAAA;QACxD;MACF;MAEA,IAAI3B,YAAA,CAAaxlE,KAAA,CAAMmnE,SAAS,GAAG;QACjCC,aAAA,GAAgB,CAACpnE,KAAA,CAAMmnE,SAAA,EAAW,GAAGC,aAAa;MACpD,OAAO;QACLlB,iBAAA,GAAoBC,oBAAA,CAAqBnmE,KAAA,CAAMoqD,IAAA,CAAKgc,qBAAqB;MAC3E;MAEA,MAAMmB,cAAA,GAAiBC,uBAAA,CAAwBxnE,KAAA,CAAMoqD,IAAI;MACzD,KAAK/lD,KAAA,CAAMkmB,WAAA,CAAY;QACrB,GAAGg9C,cAAA;QACHF,cAAA,EAAgBD,aAAA;QAChBnB,cAAA,EAAgB,IAAIhqE,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;QACzCi2D,SAAA;QACAO,kBAAA;QACAH;MACF,CAAC;MACD,KAAKK,eAAA,CAAgB;IACvB;IAEA,KAAOkB,iBAAA,GAAqBznE,KAAA,IAAiB;MAE3C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,IAAMqd,KAAA,CAAMoqD,IAAA,CAAKznE,EAAA,KAAO,KAAKA,EAAA,EAAI;MACjD,IAAI,CAAC2iF,sBAAA,CAAuBtlE,KAAK,GAAG;MACpC,MAAMinE,YAAA,GAAe,KAAKzlF,IAAA;MAC1B,MAAM0lF,SAAA,GAAYlnE,KAAA,CAAMmnE,SAAA,CAAU5jD,OAAA,KAAY,KAAK7gC,MAAA,CAAO4gC,MAAA;MAC1D,IAAI8jD,aAAA,GAAgB,CAAC,GAAIH,YAAA,CAAaI,cAA+B;MACrE,IAAIvB,SAAA,GAAYmB,YAAA,CAAanB,SAAA;MAC7B,IAAIO,kBAAA,GAAqBY,YAAA,CAAaZ,kBAAA;MACtC,IAAIH,iBAAA,GAAoBe,YAAA,CAAaf,iBAAA;MAErC,IAAIgB,SAAA,EAAW;QACb,IAAI1B,YAAA,CAAaxlE,KAAA,CAAMmnE,SAAS,GAAG;UACjCC,aAAA,GAAgB,CACdpnE,KAAA,CAAMmnE,SAAA,EACN,GAAGC,aAAA,CAAcp3E,MAAA,CAAQ03E,MAAA,IAAWA,MAAA,CAAO/kF,EAAA,KAAOqd,KAAA,CAAMmnE,SAAA,CAAUxkF,EAAE,EACtE;UACAmjF,SAAA,GAAY9lE,KAAA,CAAMmnE,SAAA;QACpB,WAAWnnE,KAAA,CAAMmnE,SAAA,CAAUG,SAAA,EAAW;UACpC,IAAItnE,KAAA,CAAMoqD,IAAA,CAAKnd,mBAAA,EAAqB;YAClCo5B,kBAAA,GAAqB;cAAE,CAACrmE,KAAA,CAAMmnE,SAAA,CAAUG,SAAS,GAAGtnE,KAAA,CAAMmnE;YAAU;UACtE,OAAO;YACLd,kBAAA,GAAqBthF,MAAA,CAAOqQ,OAAA,CAAQixE,kBAAkB,EAAEvtD,MAAA,CAEtD,CAACC,GAAA,EAAK,CAAC4uD,QAAA,EAAUpU,IAAI,MAAM;cAC3B,IACEoU,QAAA,KAAa3nE,KAAA,CAAMmnE,SAAA,CAAUG,SAAA,IAC7B/T,IAAA,CAAK5wE,EAAA,KAAOqd,KAAA,CAAMmnE,SAAA,CAAUxkF,EAAA,EAC5B;gBACA,OAAOo2B,GAAA;cACT;cACAA,GAAA,CAAI4uD,QAAQ,IAAIpU,IAAA;cAChB,OAAOx6C,GAAA;YACT,GAAG,CAAC,CAAC;YACLstD,kBAAA,CAAmBrmE,KAAA,CAAMmnE,SAAA,CAAUG,SAAS,IAAItnE,KAAA,CAAMmnE,SAAA;UACxD;UAEA,IAAIrB,SAAA,EAAWnjF,EAAA,KAAOqd,KAAA,CAAMmnE,SAAA,CAAUxkF,EAAA,EAAI;YACxCmjF,SAAA,GAAY;UACd;UACAI,iBAAA,GAAoBC,oBAAA,CAAqBnmE,KAAA,CAAMoqD,IAAA,CAAKgc,qBAAqB;QAC3E;MACF,WAAWZ,YAAA,CAAaxlE,KAAA,CAAMmnE,SAAS,GAAG;QACxCC,aAAA,GAAgB,CAACpnE,KAAA,CAAMmnE,SAAA,EAAW,GAAGC,aAAa;MACpD,OAAO;QACLlB,iBAAA,GAAoBC,oBAAA,CAAqBnmE,KAAA,CAAMoqD,IAAA,CAAKgc,qBAAqB;MAC3E;MAEA,MAAMmB,cAAA,GAAiBC,uBAAA,CAAwBxnE,KAAA,CAAMoqD,IAAI;MACzD,KAAK/lD,KAAA,CAAMkmB,WAAA,CAAY;QACrB,GAAGg9C,cAAA;QACHF,cAAA,EAAgBD,aAAA;QAChBnB,cAAA,EAAgB,IAAIhqE,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;QACzCi2D,SAAA;QACAO,kBAAA;QACAH;MACF,CAAC;MACD,KAAKK,eAAA,CAAgB;IACvB;IAEA,KAAOqB,iBAAA,GAAqB5nE,KAAA,IAAiB;MAC3C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,IAAMqd,KAAA,CAAMoqD,IAAA,CAAKznE,EAAA,KAAO,KAAKA,EAAA,EAAI;MACjD,IAAI,CAAC4iF,sBAAA,CAAuBvlE,KAAK,GAAG;MACpC,MAAMinE,YAAA,GAAe,KAAKzlF,IAAA;MAC1B,MAAM0lF,SAAA,GAAYlnE,KAAA,CAAMmnE,SAAA,CAAU5jD,OAAA,KAAY,KAAK7gC,MAAA,CAAO4gC,MAAA;MAC1D,IAAI8jD,aAAA,GAAgB,CAAC,GAAIH,YAAA,CAAaI,cAA+B;MACrE,IAAIvB,SAAA,GAAYmB,YAAA,CAAanB,SAAA;MAC7B,MAAMO,kBAAA,GAAqB;QAAE,GAAGY,YAAA,CAAaZ;MAAmB;MAChE,IAAIH,iBAAA,GAAoBe,YAAA,CAAaf,iBAAA;MAErC,IAAIV,YAAA,CAAaxlE,KAAA,CAAMmnE,SAAS,GAAG;QACjCC,aAAA,GAAgBA,aAAA,CAAcp3E,MAAA,CAAQ03E,MAAA,IAAWA,MAAA,CAAO/kF,EAAA,KAAOqd,KAAA,CAAMmnE,SAAA,CAAUxkF,EAAE;QACjF,IAAIukF,SAAA,EAAW;UACbpB,SAAA,GAAY;QACd;MACF,OAAO;QACLI,iBAAA,GAAoBC,oBAAA,CAAqBnmE,KAAA,CAAMoqD,IAAA,CAAKgc,qBAAqB;QACzE,IAAIc,SAAA,IAAalnE,KAAA,CAAMmnE,SAAA,CAAUG,SAAA,EAAW;UAC1C,OAAOjB,kBAAA,CAAmBrmE,KAAA,CAAMmnE,SAAA,CAAUG,SAAS;QACrD;MACF;MAEA,MAAMC,cAAA,GAAiBC,uBAAA,CAAwBxnE,KAAA,CAAMoqD,IAAI;MACzD,KAAK/lD,KAAA,CAAMkmB,WAAA,CAAY;QACrB,GAAGg9C,cAAA;QACHF,cAAA,EAAgBD,aAAA;QAChBnB,cAAA,EAAgB,IAAIhqE,IAAA,CAAK+D,KAAA,CAAM6P,UAAU;QACzCi2D,SAAA;QACAO,kBAAA;QACAH;MACF,CAAC;MACD,KAAKK,eAAA,CAAgB;IACvB;IAEA,KAAAhgD,KAAA,GAAQ,MAAO5jC,EAAA,IAAe;MAC5B,MAAM;QAAEynE;MAAK,IAAI,MAAM,KAAK1nE,MAAA,CAAOmlF,OAAA,CAAQllF,EAAE;MAC7C,KAAK0hB,KAAA,CAAMkmB,WAAA,CAAY;QAAE,GAAG6/B,IAAA;QAAM6b,cAAA,EAAgB,mBAAIhqE,IAAA,CAAK;MAAE,CAAC;MAC9D,OAAOmuD,IAAA;IACT;IAEA,KAAApmE,MAAA,GAAS,MAAOxC,IAAA,IACd,MAAM,KAAKkB,MAAA,CAAOolF,UAAA,CAAW;MAAE,GAAGtmF,IAAA;MAAMmB,EAAA,EAAI,KAAKA;IAAG,CAAC;IAEvD,KAAAolF,aAAA,GAAgB,MAAOC,iBAAA,IACrB,MAAM,KAAKtlF,MAAA,CAAOulF,iBAAA,CAAkB,KAAKtlF,EAAA,EAAcqlF,iBAAiB;IAE1E,KAAAhM,KAAA,GAAQ,YAAY,MAAM,KAAKt5E,MAAA,CAAOwlF,SAAA,CAAU,KAAKvlF,EAAY;IAEjE,KAAAuB,MAAA,GAAS,YAAY,MAAM,KAAKxB,MAAA,CAAOylF,UAAA,CAAW,KAAKxlF,EAAY;IAEnE,KAAAylF,YAAA,GAAe,MAAO53E,MAAA,IACpB,MAAM,KAAK9N,MAAA,CAAO2lF,gBAAA,CAAiB,KAAK1lF,EAAA,EAAc6N,MAAM;IAE9D,KAAA83E,YAAA,GAAe,MAAO93E,MAAA,IACpB,MAAM,KAAK9N,MAAA,CAAO6lF,gBAAA,CAAiB,KAAK5lF,EAAA,EAAc6N,MAAM;IAE9D,KAAAg4E,YAAA,GAAe,MAAOb,QAAA,IACpB,MAAM,KAAKjlF,MAAA,CAAO+lF,gBAAA,CAAiB,KAAK9lF,EAAA,EAAcglF,QAAQ;IAEhE,KAAAe,QAAA,GAAW,OAAOf,QAAA,EAAkB3hD,SAAA,KAAsB;MACxD,MAAM;QAAEknB,iBAAA;QAAmBm5B;MAAmB,IAAI,KAAK7kF,IAAA;MAEvD,MAAMmnF,gBAAA,GACJz7B,iBAAA,IAAqBA,iBAAA,KAAsBnoD,MAAA,CAAO+C,IAAA,CAAKu+E,kBAAkB,EAAE5nF,MAAA;MAE7E,IAAIkqF,gBAAA,EAAkB;QACpB,IAAIC,UAAA,GAAa7jF,MAAA,CAAOsxC,MAAA,CAAOgwC,kBAAkB,EAAE,CAAC;QACpDthF,MAAA,CAAOsxC,MAAA,CAAOgwC,kBAAkB,EAC7B9gF,KAAA,CAAM,CAAC,EACPoC,OAAA,CAAS4rE,IAAA,IAAS;UACjB,IACE,CAACqV,UAAA,EAAY/4D,UAAA,IACb,IAAI5T,IAAA,CAAKs3D,IAAA,CAAK1jD,UAAU,IAAI,IAAI5T,IAAA,CAAK2sE,UAAA,CAAW/4D,UAAU,GAC1D;YACA+4D,UAAA,GAAarV,IAAA;UACf;QACF,CAAC;QACH,IAAIqV,UAAA,EAAYjmF,EAAA,EAAI;UAClB,MAAM,KAAK8wE,UAAA,CAAWmV,UAAA,CAAWjmF,EAAA,EAAIqjC,SAAS;QAChD;MACF;MACA,OAAO,MAAM,KAAKtjC,MAAA,CAAO8wE,YAAA,CAAaxtC,SAAA,EAAW,KAAKrjC,EAAA,EAAc;QAClE2kF,SAAA,EAAWK;MACb,CAAC;IACH;IAEA,KAAAlU,UAAA,GAAa,OAAOC,MAAA,EAAgB1tC,SAAA,KAClC,MAAM,KAAKtjC,MAAA,CAAOixE,cAAA,CAAe3tC,SAAA,EAAW,KAAKrjC,EAAA,EAAc+wE,MAAM;IAEvE,KAAAmV,SAAA,GAAY,OAAOC,UAAA,EAAoB9iD,SAAA,KACrC,MAAM,KAAKtjC,MAAA,CAAOqmF,aAAA,CAAc/iD,SAAA,EAAW,KAAKrjC,EAAA,EAAcmmF,UAAU;IAE1E,KAAAE,YAAA,GAAe,OAAOC,QAAA,EAAkBjjD,SAAA,KACtC,MAAM,KAAKtjC,MAAA,CAAOixE,cAAA,CAAe3tC,SAAA,EAAW,KAAKrjC,EAAA,EAAcsmF,QAAQ;IAEzE,KAAAC,YAAA,GAAe,MAAOp3E,MAAA,IACpB,MAAM,KAAKpP,MAAA,CAAOymF,gBAAA,CAChB,KAAKxmF,EAAA,EACLmP,MAAA,CAAO9B,MAAA,EACP8B,MAAA,CAAOkhB,IAAA,EACPlhB,MAAA,CAAOhO,OACT;IAEF,KAAAslF,gBAAA,GAAmB,MAAOt3E,MAAA,IACxB,MAAM,KAAKpP,MAAA,CAAO2mF,cAAA,CAChB,KAAK1mF,EAAA,EACLmP,MAAA,CAAO9B,MAAA,EACP8B,MAAA,CAAOkhB,IAAA,EACPlhB,MAAA,CAAOhO,OACT;IAnRA,KAAKpB,MAAA,GAASA,MAAA;IACd,KAAKC,EAAA,GAAKynE,IAAA,CAAKznE,EAAA;IAEf,KAAK0hB,KAAA,GAAQ,IAAIgmB,UAAA,CAAsB,KAAKs7C,+BAAA,CAAgCvb,IAAI,CAAC;EACnF;EA0CA,IAAI5oE,KAAA,EAAkB;IACpB,OAAO,KAAK6iB,KAAA,CAAMqnB,cAAA,CAAe;EACnC;AAoOF;AAEA,SAASy6C,qBAAqBmD,kBAAA,EAA2D;EACvF,IAAIC,QAAA,GAAW;EACf,IAAIC,cAAA,GAA2B,EAAC;EAChC,WAAW,CAAC7mF,EAAA,EAAIo1B,KAAK,KAAKhzB,MAAA,CAAOqQ,OAAA,CAAQk0E,kBAAA,IAAsB,CAAC,CAAC,GAAG;IAClE,IAAIvxD,KAAA,GAAQwxD,QAAA,EAAU;MACpBC,cAAA,GAAiB,CAAC7mF,EAAE;MACpB4mF,QAAA,GAAWxxD,KAAA;IACb,WAAWA,KAAA,KAAUwxD,QAAA,EAAU;MAC7BC,cAAA,CAAezpF,IAAA,CAAK4C,EAAE;IACxB;EACF;EACA,OAAO6mF,cAAA;AACT;AAEA,SAASlD,sBAAsBP,QAAA,EAAsB;EACnD,OAAO,CAACA,QAAA,GACH,CAAC,IACFA,QAAA,CAASjtD,MAAA,CAAmC,CAACC,GAAA,EAAKw6C,IAAA,KAAS;IACzD,IAAIiS,YAAA,CAAajS,IAAI,KAAK,CAACA,IAAA,CAAK+T,SAAA,EAAW,OAAOvuD,GAAA;IAClDA,GAAA,CAAIw6C,IAAA,CAAK+T,SAAS,IAAI/T,IAAA;IACtB,OAAOx6C,GAAA;EACT,GAAG,CAAC,CAAC;AACX;AAEO,SAAS8tD,gBAAgB4C,YAAA,EAAsC;EACpE,OAAO;IACLz5B,aAAA,EAAey5B,YAAA,CAAaz5B,aAAA;IAC5BC,4BAAA,EAA8Bw5B,YAAA,CAAax5B,4BAAA;IAC3C5sD,WAAA,EAAaomF,YAAA,CAAapmF,WAAA;IAC1B4pD,mBAAA,EAAqBw8B,YAAA,CAAax8B,mBAAA;IAClCtqD,EAAA,EAAI8mF,YAAA,CAAa9mF,EAAA;IACjBokF,SAAA,EAAW0C,YAAA,CAAa1C,SAAA;IACxB75B,iBAAA,EAAmBu8B,YAAA,CAAav8B,iBAAA;IAChC5pD,IAAA,EAAMmmF,YAAA,CAAanmF,IAAA;IACnBQ,OAAA,EAAS2lF,YAAA,CAAa3lF,OAAA;IACtBosD,iBAAA,EAAmBu5B,YAAA,CAAav5B;EAClC;AACF;AAEO,SAASu2B,uBAAuBrc,IAAA,EAA0B;EAC/D,MAAM;IAAA;IAEJ6b,cAAA;IAAA;IAEAC,iBAAA;IACAG,kBAAA;IACAP,SAAA;IACA,GAAG4D;EACL,IAAItf,IAAA,CAAK5oE,IAAA;EACT,MAAMukF,QAAA,GAAW,CACf,GAAGhhF,MAAA,CAAOsxC,MAAA,CAAOgwC,kBAAkB,GACnC,IAAIP,SAAA,GAAY,CAACA,SAAS,IAAI,EAAC,EACjC,CAAE9yD,IAAA,CAAK,CAAC3wB,CAAA,EAAGJ,CAAA,KAAMga,IAAA,CAAKxG,KAAA,CAAMpT,CAAA,CAAEwtB,UAAU,IAAI5T,IAAA,CAAKxG,KAAA,CAAMxT,CAAA,CAAE4tB,UAAU,CAAC;EAEpE,OAAO;IACL,GAAG65D,SAAA;IACH9D,SAAA,EAAWG,QAAA;IACXpjF,EAAA,EAAIynE,IAAA,CAAKznE;EACX;AACF;AAEO,SAAS6kF,wBACdiC,YAAA,EACsD;EACtD,OAAO;IACLE,aAAA,EAAeF,YAAA,CAAaE,aAAA;IAC5BC,sBAAA,EAAwBH,YAAA,CAAaG,sBAAA;IACrCC,UAAA,EAAYJ,YAAA,CAAaI,UAAA;IACzBzD,qBAAA,EAAuBqD,YAAA,CAAarD;EACtC;AACF;;;AC5aO,IAAM0D,WAAA,GAAN,cAA0B/oB,iBAAA,CAAkB;EASjDt+D,YAAY;IAAEC;EAAO,GAA2B;IAC9C,MAAM;IAHR;IAAA;IAAA;IAAA;IAAA;IAAA,KAAQqnF,SAAA,GAAY,mBAAIviC,GAAA,CAAkB;IAW1C,KAAOwiC,SAAA,GAAarnF,EAAA,IAAe,KAAKonF,SAAA,CAAUzlF,GAAA,CAAI3B,EAAE;IAExD,KAAOogE,qBAAA,GAAwB,MAAM;MACnC,IAAI,KAAKtC,gBAAA,EAAkB;QAEzB;MACF;MAEA,KAAKC,sBAAA,CAAuB,KAAKupB,mBAAA,CAAoB,CAAC;MACtD,KAAKvpB,sBAAA,CAAuB,KAAKwpB,oBAAA,CAAqB,CAAC;MACvD,KAAKxpB,sBAAA,CAAuB,KAAKypB,mBAAA,CAAoB,CAAC;MACtD,KAAKzpB,sBAAA,CAAuB,KAAK0pB,mBAAA,CAAoB,CAAC;MACtD,KAAK1pB,sBAAA,CAAuB,KAAK2pB,oBAAA,CAAqB,CAAC;MACvD,KAAK3pB,sBAAA,CAAuB,KAAK4pB,oBAAA,CAAqB,CAAC;IACzD;IAEA,KAAOngB,UAAA,GAAa,MAAOC,IAAA,IAAyB;MAClD,MAAM;QAAEA,IAAA,EAAMmgB;MAAY,IAAI,MAAM,KAAK7nF,MAAA,CAAOynE,UAAA,CAAWC,IAAI;MAE/D,IAAI,CAACmgB,WAAA,CAAYnE,qBAAA,EAAuB;QACtCmE,WAAA,CAAYnE,qBAAA,GAAwB,CAAC;MACvC;MAEA,KAAKoE,qBAAA,CAAsBD,WAAW;MAEtC,OAAO,KAAKP,SAAA,CAAUO,WAAA,CAAY5nF,EAAE;IACtC;IAEA,KAAOklF,OAAA,GAAU,MAAOllF,EAAA,IAAe;MACrC,MAAM8nF,UAAA,GAAa,KAAKT,SAAA,CAAUrnF,EAAE;MAGpC,IAAI8nF,UAAA,EAAY;QACd,KAAK/nF,MAAA,CAAOmlF,OAAA,CAAQllF,EAAE,EAAEkL,IAAA,CAAK,CAAC;UAAEu8D,IAAA,EAAAsgB;QAAK,MAAM,KAAKF,qBAAA,CAAsBE,KAAA,EAAM,IAAI,CAAC;QACjF,OAAOD,UAAA;MACT;MAEA,MAAM;QAAErgB;MAAK,IAAI,MAAM,KAAK1nE,MAAA,CAAOmlF,OAAA,CAAQllF,EAAE;MAE7C,KAAK6nF,qBAAA,CAAsBpgB,IAAI;MAE/B,OAAO,KAAK4f,SAAA,CAAUrnF,EAAE;IAC1B;IAEA,KAAOgoF,UAAA,GAAa,OAClBlhF,OAAA,EACAupB,IAAA,GAAiB,EAAC,EAClBlvB,OAAA,GAA6B,CAAC,MAC3B;MACH,MAAM;QAAEumE,KAAA;QAAO//D;MAAK,IAAI,MAAM,KAAK5H,MAAA,CAAOioF,UAAA,CAAWlhF,OAAA,EAAQupB,IAAA,EAAMlvB,OAAO;MAE1E,MAAM8mF,aAAA,GAAgBvgB,KAAA,CAAMppE,GAAA,CAAKmpE,IAAA,IAAS;QACxC,KAAKogB,qBAAA,CAAsBpgB,IAAA,EAAM,IAAI;QAErC,OAAO,KAAK4f,SAAA,CAAU5f,IAAA,CAAKznE,EAAE;MAC/B,CAAC;MAED,OAAO;QACL0nE,KAAA,EAAOugB,aAAA;QACPtgF;MACF;IACF;IAEA,KAAOkoE,gBAAA,GAAmB,CACxBz7C,QAAA,EACA8zD,cAAA,KACG;MACH,WAAW38E,OAAA,IAAW6oB,QAAA,EAAU;QAC9B,IAAI,CAAC7oB,OAAA,CAAQk8D,IAAA,EAAM;UACjB;QACF;QACA,MAAMqf,YAAA,GAAev7E,OAAA,CAAQk8D,IAAA;QAC7B,KAAKogB,qBAAA,CAAsBf,YAAA,EAAcoB,cAAc;MACzD;IACF;IAEA,KAAQL,qBAAA,GAAwB,CAC9Bf,YAAA,EACAoB,cAAA,KACG;MACH,IAAI,CAAC,KAAKnoF,MAAA,CAAO2vE,aAAA,CAAc,GAAG;QAChC;MACF;MACA,MAAMyY,aAAA,GAAgB,KAAKd,SAAA,CAAUP,YAAA,CAAa9mF,EAAE;MACpD,IAAI,CAACmoF,aAAA,EAAe;QAClB,MAAM1gB,IAAA,GAAO,IAAIsb,IAAA,CAAK;UAAEhjF,MAAA,EAAQ,KAAKA,MAAA;UAAQ0nE,IAAA,EAAMqf;QAAa,CAAC;QACjE,KAAKM,SAAA,CAAU99E,GAAA,CAAIm+D,IAAA,CAAKznE,EAAA,EAAIynE,IAAI;MAClC,WAAWygB,cAAA,EAAgB;QACzBC,aAAA,CAAcpE,iBAAA,CAAkB+C,YAAY;MAC9C;IACF;IAEA,KAAQS,oBAAA,GAAuB,MAC7B,KAAKxnF,MAAA,CAAO8gE,EAAA,CAAG,gBAAiBxjD,KAAA,IAAU;MACxC,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,EAAI;QAClB,KAAKqnF,SAAA,CAAUhqE,KAAA,CAAMoqD,IAAA,CAAKznE,EAAE,GAAGgkF,iBAAA,CAAkB3mE,KAAK;MACxD;IACF,CAAC,EAAEU,WAAA;IAEL,KAAQypE,mBAAA,GAAsB,MAC5B,KAAKznF,MAAA,CAAO8gE,EAAA,CAAG,eAAgBxjD,KAAA,IAAU;MACvC,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,EAAI;QAClB,KAAKqnF,SAAA,CAAUhqE,KAAA,CAAMoqD,IAAA,CAAKznE,EAAE,GAAGmkF,gBAAA,CAAiB9mE,KAAK;MACvD;IACF,CAAC,EAAEU,WAAA;IAEL,KAAQ0pE,mBAAA,GAAsB,MAC5B,KAAK1nF,MAAA,CAAO8gE,EAAA,CAAG,oBAAqBxjD,KAAA,IAAU;MAC5C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,EAAI;QAClB,KAAKqnF,SAAA,CAAUhqE,KAAA,CAAMoqD,IAAA,CAAKznE,EAAE,GAAGqkF,gBAAA,CAAiBhnE,KAAK;MACvD;IACF,CAAC,EAAEU,WAAA;IAEL,KAAQ2pE,oBAAA,GAAuB,MAC7B,KAAK3nF,MAAA,CAAO8gE,EAAA,CAAG,qBAAsBxjD,KAAA,IAAU;MAC7C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,EAAI;QAClB,KAAKqnF,SAAA,CAAUhqE,KAAA,CAAMoqD,IAAA,CAAKznE,EAAE,GAAG8kF,iBAAA,CAAkBznE,KAAK;MACxD;IACF,CAAC,EAAEU,WAAA;IAEL,KAAQ4pE,oBAAA,GAAuB,MAC7B,KAAK5nF,MAAA,CAAO8gE,EAAA,CAAG,qBAAsBxjD,KAAA,IAAU;MAC7C,IAAIA,KAAA,CAAMoqD,IAAA,EAAMznE,EAAA,EAAI;QAClB,KAAKqnF,SAAA,CAAUhqE,KAAA,CAAMoqD,IAAA,CAAKznE,EAAE,GAAGilF,iBAAA,CAAkB5nE,KAAK;MACxD;IACF,CAAC,EAAEU,WAAA;IAEL,KAAQupE,mBAAA,GAAsB,MAC5B,KAAKvnF,MAAA,CAAO8gE,EAAA,CAAG,eAAgBxjD,KAAA,IAAU;MACvC,MAAM;QAAE9R;MAAQ,IAAI8R,KAAA;MACpB,IAAI9R,OAAA,EAAS;QACX,MAAM02D,gBAAA,GAAmB5vC,aAAA,CAAc9mB,OAAO;QAC9C,KAAKskE,gBAAA,CAAiB,CAAC5N,gBAAgB,CAAC;MAC1C;IACF,CAAC,EAAElkD,WAAA;IA7IH,KAAKhe,MAAA,GAASA,MAAA;EAChB;EAEA,IAAIlB,KAAA,EAA0B;IAC5B,OAAO,KAAKuoF,SAAA;EACd;AAyIF;;;ACvEO,IAAMgB,mCAAA,GAET;EACF,mBAAmB;EACnB,kBAAkB;EAClB,qBAAqB;EACrB,mBAAmB;EACnB,mBAAmB;EACnB,eAAe;EACf,kBAAkB;EAClB,iCAAiC;EACjC,4BAA4B;EAC5B,qCAAqC;AACvC;AA0BO,IAAMC,+BAAA,GAAkC;EAC7CC,kBAAA,EAAoB;EACpBC,sCAAA,EAAwC;IACtC,mBAAmB;IACnB,eAAe;IACf,iCAAiC;IACjC,4BAA4B;EAC9B;EACAC,gBAAA,EAAkB;AACpB;AAEO,IAAMC,0CAAA,GAA6C;EACxDllD,KAAA,EAAO;EACPjK,MAAA,EAAQ;AACV;AAQO,IAAMovD,cAAA,GAAN,cAA6BtqB,iBAAA,CAAkB;EASpDt+D,YAAY;IACVC,MAAA;IACA4oF,qBAAA,GAAwB,CAAC;IACzBxnF,OAAA,GAAU,CAAC;EACb,GAIG;IACD,MAAM;IAfR,KAAQynF,aAAA,GAA+C,mBAAI/jC,GAAA,CAAI;IAC/D,KAAQ8jC,qBAAA,GAA+D,mBAAI9jC,GAAA,CAAI;IAC/E,KAAQ1jD,OAAA,GAAiC,CAAC;IAC1C,KAAQ0nF,YAAA,GAAoC,CAAC;IA6C7C,KAAOC,WAAA,GAAeC,cAAA,IAA+C;MACnE,KAAKrnE,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,IAAY;QAC3B,MAAM;UAAExM,QAAA,EAAU0tD;QAAgB,IAAIlhD,OAAA;QACtC,MAAM7L,WAAA,GAAcuL,OAAA,CAAQuhD,cAAc,IACtCA,cAAA,CAAeC,eAAe,IAC9BD,cAAA;QAIJ,IAAIC,eAAA,KAAoB/sD,WAAA,EAAa;UACnC,OAAO6L,OAAA;QACT;QAEA,OAAO;UAAE,GAAGA,OAAA;UAASxM,QAAA,EAAUW;QAAY;MAC7C,CAAC;MACD,MAAM;QACJX,QAAA;QACAhE,UAAA,EAAY;UAAEwD,OAAA;UAASzK;QAAK;MAC9B,IAAI,KAAK3O,KAAA,CAAMqnB,cAAA,CAAe;MAC9B,KAAKhpC,MAAA,CAAOglE,SAAA,EAAWC,kBAAA,CACpBC,EAAA,IACCA,EAAA,CAAGgkB,kBAAA,CAAmB;QACpB5zB,IAAA,EAAM/5B,QAAA,CAASh9B,GAAA,CAAKw7B,OAAA,IAAYA,OAAA,CAAQI,GAAG;QAC3CY,OAAA;QACAzK;MACF,CAAC,GACH;QAAE1b,MAAA,EAAQ;MAAqB,CACjC;IACF;IAEA,KAAOu0E,wBAAA,GAA2B,CAChCP,qBAAA,GAA6D,CAAC,MAC3D;MACH,MAAMQ,2BAAA,GAA8B/mF,MAAA,CAAOqQ,OAAA,CAAQk2E,qBAAqB,EAAExyD,MAAA,CAExE,CAACC,GAAA,EAAK,CAAC/wB,GAAA,EAAKoB,KAAK,MAAM;QACvB,IAAIA,KAAA,EAAO;UACT2vB,GAAA,CAAI/wB,GAAgD,IAAIoB,KAAA;QAC1D;QACA,OAAO2vB,GAAA;MACT,GAAG,CAAC,CAAC;MACL,KAAKuyD,qBAAA,GAAwB,IAAI9jC,GAAA,CAC/BziD,MAAA,CAAOqQ,OAAA,CAAkC02E,2BAA2B,CACtE;IACF;IAEA,KAAOC,UAAA,GAAa,CAACjoF,OAAA,GAAiC,CAAC,MAAM;MAC3D,KAAKA,OAAA,GAAU;QAAE,GAAGknF,+BAAA;QAAiC,GAAGlnF;MAAQ;IAClE;IAEA,KAAQkoF,oBAAA,GAAuB,OAC7BxiE,OAAA,EACAyiE,UAAA,GAAa,MACK;MAClB,MAAM;QAAExuD,OAAA;QAASzK,IAAA;QAAMlvB,OAAA;QAAS0nF;MAAa,IAAIhiE,OAAA;MACjD,MAAM;QAAEyS,MAAA;QAAQiK;MAAM,IAAI;QACxB,GAAGklD,0CAAA;QACH,GAAGtnF;MACL;MACA,IAAI;QACF,MAAMm6B,QAAA,GAAW,MAAM,KAAKv7B,MAAA,CAAO+0D,aAAA,CACjCh6B,OAAA,EACAzK,IAAA,EACAlvB,OAAA,EACA0nF,YACF;QACA,MAAMU,SAAA,GAAYjwD,MAAA,IAAUgC,QAAA,EAAUx/B,MAAA,IAAU;QAChD,MAAMwvD,UAAA,GAAa;UAAE,GAAGnqD,OAAA;UAASm4B,MAAA,EAAQiwD;QAAU;QACnD,MAAM;UAAEjyD;QAAW,IAAI,KAAK5V,KAAA,CAAMqnB,cAAA,CAAe;QAEjD,KAAKrnB,KAAA,CAAMkmB,WAAA,CAAY;UACrBtM,QAAA;UACAhE,UAAA,EAAY;YACV,GAAGA,UAAA;YACH1K,OAAA,GAAU0O,QAAA,EAAUx/B,MAAA,IAAU,MAAMynC,KAAA;YACpC0uB,SAAA,EAAW;YACX9wD,OAAA,EAASmqD;UACX;UACAtI,WAAA,EAAa;UACb52C,KAAA,EAAO;QACT,CAAC;QACD,KAAKrM,MAAA,CAAOglE,SAAA,EAAWC,kBAAA,CACpBC,EAAA,IACCA,EAAA,CAAGgkB,kBAAA,CAAmB;UACpB5zB,IAAA,EAAM/5B,QAAA,CAASh9B,GAAA,CAAKw7B,OAAA,IAAYA,OAAA,CAAQI,GAAG;UAC3CY,OAAA,EAASxD,UAAA,CAAWwD,OAAA;UACpBzK,IAAA,EAAMiH,UAAA,CAAWjH;QACnB,CAAC,GACH;UAAE1b,MAAA,EAAQ;QAAqB,CACjC;MACF,SAASuK,GAAA,EAAK;QACZ,IAAIoqE,UAAA,IAAcp7D,kCAAA,EAAoC;UACpDnK,OAAA,CAAQC,IAAA,CAAK9E,GAAG;UAEhB,MAAMsqE,YAAA,GAAe,IAAIrtF,KAAA,CACvB,8EAA8E+iB,GAAG,EACnF;UAEA,KAAKwC,KAAA,CAAMkmB,WAAA,CAAY;YAAEx7B,KAAA,EAAOo9E;UAAa,CAAC;UAC9C;QACF;QAEA,MAAMn7D,KAAA,CAAMF,yCAAyC;QAErD,OAAO,KAAKk7D,oBAAA,CAAqBxiE,OAAA,EAASyiE,UAAA,GAAa,CAAC;MAC1D;IACF;IAEA,KAAOx0B,aAAA,GAAgB,OACrBh6B,OAAA,EACAzK,IAAA,GAAoB,EAAC,EACrBlvB,OAAA,GAA0B,CAAC,GAC3B0nF,YAAA,GAAoC,CAAC,MAClC;MACH,MAAM;QACJvxD,UAAA,EAAY;UAAE26B,SAAA;UAAWn3B,OAAA,EAAS2uD;QAAiB;QACnDzmC;MACF,IAAI,KAAKthC,KAAA,CAAMqnB,cAAA,CAAe;MAE9B,IACEkpB,SAAA,IACA,CAAC,KAAK9wD,OAAA,CAAQmnF,kBAAA;MAAA;MAAA;MAGdh6E,IAAA,CAAKC,SAAA,CAAUk7E,gBAAgB,MAAMn7E,IAAA,CAAKC,SAAA,CAAUusB,OAAO,GAC3D;QACA;MACF;MAEA,MAAM4uD,2BAAA,GAA8B;QAAE5uD,OAAA;QAASzK,IAAA;QAAMlvB,OAAA;QAAS0nF;MAAa;MAE3E,IAAI;QACF,KAAKA,YAAA,GAAeA,YAAA;QACpB,KAAKnnE,KAAA,CAAM/Z,IAAA,CAAM28E,YAAA,KAAkB;UACjC,GAAGA,YAAA;UACHhtD,UAAA,EAAY;YACV,GAAGgtD,YAAA,CAAahtD,UAAA;YAChB26B,SAAA,EAAW;YACXgS,aAAA,EAAe;YACfnpC,OAAA;YACAzK,IAAA;YACAlvB;UACF;UACAiL,KAAA,EAAO;QACT,EAAE;QAEF,IAAI,KAAKrM,MAAA,CAAOglE,SAAA,EAAW4kB,mBAAA,IAAuB,KAAK5pF,MAAA,CAAOiuB,IAAA,EAAMhuB,EAAA,EAAI;UACtE,IAAI,CAACgjD,WAAA,EAAa;YAChB,MAAM4mC,cAAA,GAAiB,MAAM,KAAK7pF,MAAA,CAAOglE,SAAA,CAAU4kB,mBAAA,CAAoB;cACrEtoD,MAAA,EAAQ,KAAKthC,MAAA,CAAOiuB,IAAA,CAAKhuB,EAAA;cACzB86B,OAAA;cACAzK;YACF,CAAC;YAED,IAAIu5D,cAAA,EAAgB;cAClB,MAAMC,eAAA,GAAkB,KAAK9pF,MAAA,CAAO+pF,qBAAA,CAAsBF,cAAA,EAAgB;gBACxE7gB,WAAA,EAAa;gBACbghB,kBAAA,EAAoB;gBAAC;cACvB,CAAC;cAED,KAAKroE,KAAA,CAAMkmB,WAAA,CAAY;gBAAEtM,QAAA,EAAUuuD;cAAgB,CAAC;YACtD;UACF;UAEA,IAAI,CAAC,KAAK9pF,MAAA,CAAOglE,SAAA,CAAUilB,WAAA,CAAYC,UAAA,EAAY;YACjD,KAAKlqF,MAAA,CAAOglE,SAAA,CAAUilB,WAAA,CAAYE,gCAAA,CAChC,KAAKlqF,EAAA,EACL,YAAY;cACV,MAAM,KAAKqpF,oBAAA,CAAqBK,2BAA2B;YAC7D,CACF;YACA;UACF;QACF;QACA,MAAM,KAAKL,oBAAA,CAAqBK,2BAA2B;MAC7D,SAASt9E,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAUvtB,KAAA,CAAgBb,OAAO;QACpD,KAAKmW,KAAA,CAAM/Z,IAAA,CAAM28E,YAAA,KAAkB;UACjC,GAAGA,YAAA;UACHhtD,UAAA,EAAY;YAAE,GAAGgtD,YAAA,CAAahtD,UAAA;YAAY26B,SAAA,EAAW;UAAM;QAC7D,EAAE;QACF,MAAM7lD,KAAA;MACR;IACF;IAEA,KAAO+9E,QAAA,GAAW,YAAY;MAC5B,MAAM;QAAE7yD,UAAA;QAAY0rB;MAAY,IAAI,KAAKthC,KAAA,CAAMqnB,cAAA,CAAe;MAC9D,MAAM;QAAEjO,OAAA;QAASzK,IAAA;QAAMlvB,OAAA;QAAS8iE,aAAA;QAAer3C;MAAQ,IAAI0K,UAAA;MAE3D,IAAI,CAAC0rB,WAAA,IAAeihB,aAAA,IAAiB,CAACr3C,OAAA,EAAS;QAC7C;MACF;MAEA,IAAI;QACF,MAAM;UAAE0M,MAAA;UAAQiK;QAAM,IAAI;UACxB,GAAGklD,0CAAA;UACH,GAAGtnF;QACL;QACA,KAAKugB,KAAA,CAAMkmB,WAAA,CAAY;UACrBtQ,UAAA,EAAY;YAAE,GAAGA,UAAA;YAAY26B,SAAA,EAAW;YAAOgS,aAAA,EAAe;UAAK;QACrE,CAAC;QACD,MAAMmmB,YAAA,GAAe,MAAM,KAAKrqF,MAAA,CAAO+0D,aAAA,CACrCh6B,OAAA,EACAzK,IAAA,EACAlvB,OAAA,EACA,KAAK0nF,YACP;QACA,MAAM;UAAEvtD;QAAS,IAAI,KAAK5Z,KAAA,CAAMqnB,cAAA,CAAe;QAC/C,MAAMwgD,SAAA,GAAYjwD,MAAA,IAAU8wD,YAAA,EAActuF,MAAA,IAAU;QACpD,MAAMwvD,UAAA,GAAa;UAAE,GAAGnqD,OAAA;UAASm4B,MAAA,EAAQiwD;QAAU;QAEnD,KAAK7nE,KAAA,CAAMkmB,WAAA,CAAY;UACrBtM,QAAA,EAAUjF,MAAA,CAAgB,CAAC,IAAIiF,QAAA,IAAY,EAAC,GAAI,GAAG8uD,YAAY,GAAG,KAAK;UACvE9yD,UAAA,EAAY;YACV,GAAGA,UAAA;YACH1K,OAAA,GAAUw9D,YAAA,EAActuF,MAAA,IAAU,MAAMynC,KAAA;YACxC0uB,SAAA,EAAW;YACXgS,aAAA,EAAe;YACf9iE,OAAA,EAASmqD;UACX;QACF,CAAC;MACH,SAASl/C,KAAA,EAAO;QACd,KAAKrM,MAAA,CAAO45B,MAAA,CAAO,SAAUvtB,KAAA,CAAgBb,OAAO;QACpD,KAAKmW,KAAA,CAAM/Z,IAAA,CAAM28E,YAAA,KAAkB;UACjC,GAAGA,YAAA;UACHhtD,UAAA,EAAY;YAAE,GAAGgtD,YAAA,CAAahtD,UAAA;YAAY2sC,aAAA,EAAe;UAAM;QACjE,EAAE;QACF,MAAM73D,KAAA;MACR;IACF;IAEA,KAAQi+E,iCAAA,GAAoC,MAAOhtE,KAAA,IAAiB;MAClE,MAAM;QAAErd,EAAA;QAAI+C,IAAA;QAAMg3B;MAAQ,IAAI1c,KAAA,EAAOyc,OAAA,IAAW,CAAC;MAEjD,IACE,CAAC/2B,IAAA,IACD,CAAC,KAAK5B,OAAA,CAAQonF,sCAAA,GACZ,+BACF,GACA;QACA;MACF;MAEA,MAAMzuD,OAAA,GAAU,MAAMD,kBAAA,CAAmB;QACvC95B,MAAA,EAAQ,KAAKA,MAAA;QACbC,EAAA;QACA+5B,OAAA,EAASA,OAAA,EAAS5D,MAAA,CAAiB,CAACC,GAAA,EAAK;UAAEpI,IAAA;UAAM4S;QAAQ,MAAM;UAC7D,MAAMS,MAAA,GAAST,OAAA,IAAW5S,IAAA,EAAMhuB,EAAA;UAChC,IAAIqhC,MAAA,EAAQ;YACVjL,GAAA,CAAIh5B,IAAA,CAAKikC,MAAM;UACjB;UACA,OAAOjL,GAAA;QACT,GAAG,EAAE;QACLrzB;MACF,CAAC;MAED,MAAM;QAAEu0B,UAAA;QAAYgE;MAAS,IAAI,KAAK5Z,KAAA,CAAMqnB,cAAA,CAAe;MAC3D,IAAI,CAACzN,QAAA,EAAU;QACb;MACF;MAEA,MAAM;QAAEjL;MAAK,IAAIiH,UAAA,IAAc,CAAC;MAEhC,KAAKwxD,WAAA,CACHttD,cAAA,CAAe;QACbF,QAAA;QACAG,aAAA,EAAe3B,OAAA;QACfzJ;MACF,CAAC,CACH;IACF;IAEA,KAAQi6D,qBAAA,GAAyBjtE,KAAA,IAAiB;MAChD,MAAM;QAAEie;MAAS,IAAI,KAAK5Z,KAAA,CAAMqnB,cAAA,CAAe;MAC/C,IAAI,CAACzN,QAAA,EAAU;QACb;MACF;MAEA,MAAMW,WAAA,GAAc,CAAC,GAAGX,QAAQ;MAChC,MAAMivD,YAAA,GAAetuD,WAAA,CAAYL,SAAA,CAC9B9B,OAAA,IAAYA,OAAA,CAAQI,GAAA,MAAS7c,KAAA,CAAM6c,GAAA,IAAO7c,KAAA,CAAMyc,OAAA,EAASI,GAAA,CAC5D;MAEA,IAAIqwD,YAAA,GAAe,GAAG;QACpB;MACF;MAEAtuD,WAAA,CAAYxV,MAAA,CAAO8jE,YAAA,EAAc,CAAC;MAClC,KAAKzB,WAAA,CAAY7sD,WAAW;IAC9B;IAEA,KAAQuuD,oBAAA,GAAuB,KAAKF,qBAAA;IAEpC,KAAQG,iBAAA,GAAqBptE,KAAA,IAAiB;MAC5C,MAAM;QAAEia,UAAA;QAAYgE;MAAS,IAAI,KAAK5Z,KAAA,CAAMqnB,cAAA,CAAe;MAC3D,IAAI,CAACzN,QAAA,EAAU;QACb;MACF;MACA,MAAM;QAAER,OAAA;QAASzK;MAAK,IAAIiH,UAAA,IAAc,CAAC;MAEzC,MAAMgD,WAAA,GAAcjd,KAAA,CAAMqtE,YAAA;MAC1B,MAAMjhB,SAAA,GAAYpsD,KAAA,CAAMstE,UAAA;MAExB,IAAI,CAACrwD,WAAA,IAAe,CAACmvC,SAAA,EAAW;QAC9B;MACF;MAEA,MAAMmhB,aAAA,GAAgB,KAAK7qF,MAAA,CAAO+5B,OAAA,CAAQQ,WAAA,EAAamvC,SAAS;MAChE,MAAM9tC,kBAAA,GAAqBL,QAAA,CAASj/B,OAAA,CAAQuuF,aAAa;MACzD,MAAM/uD,6BAAA,GAAgCF,kBAAA,IAAsB;MAE5D,MAAMK,qBAAA,GAAwBxB,eAAA,CAAgBowD,aAAa;MAC3D,MAAMC,uBAAA,GAA0BlwD,iBAAA,CAAkBiwD,aAAa;MAE/D,MAAME,wBAAA,GAA2BjwD,8BAAA,CAA+BC,OAAO;MACvE,MAAMiB,sBAAA,GAAyBb,4BAAA,CAA6B7K,IAAI;MAEhE;MAAA;MAEGy6D,wBAAA,IAA4BD,uBAAA,IAA2B,CAAC/vD,OAAA,CAAQC,QAAA;MAAA;MAEhE+vD,wBAAA,IAA4B,CAACD,uBAAA,IAA2B/vD,OAAA,CAAQC,QAAA;MAAA;MAEhEgB,sBAAA,IAA0BC,qBAAA;MAAA;MAE3B,KAAK76B,OAAA,CAAQqnF,gBAAA;MAAA;MAEZ,CAAC3sD,6BAAA,IACA,CAAC,KAAK16B,OAAA,CAAQonF,sCAAA,GAAyC,aAAa,GACtE;QACA;MACF;MAEA,KAAKO,WAAA,CACHttD,cAAA,CAAe;QACbF,QAAA;QACAG,aAAA,EAAemvD,aAAA;QACflvD,gCAAA,EAAkCC,kBAAA;QAClCtL;MACF,CAAC,CACH;IACF;IAEA,KAAQ06D,6BAAA,GAAgC,MAAO1tE,KAAA,IAAiB;MAC9D,MAAM;QAAErd,EAAA;QAAI+C;MAAK,IAAIsa,KAAA,EAAOyc,OAAA,IAAW,CAAC;MAExC,IAAI,CAAC95B,EAAA,IAAM,CAAC+C,IAAA,EAAM;QAChB;MACF;MAEA,MAAM+2B,OAAA,GAAU,MAAMD,kBAAA,CAAmB;QACvC95B,MAAA,EAAQ,KAAKA,MAAA;QACbC,EAAA;QACA+C;MACF,CAAC;MAED,MAAM;QAAEu4B,QAAA;QAAUhE;MAAW,IAAI,KAAK5V,KAAA,CAAMqnB,cAAA,CAAe;MAC3D,MAAM;QAAEjO,OAAA;QAASzK;MAAK,IAAIiH,UAAA,IAAc,CAAC;MAEzC,MAAMwzD,wBAAA,GAA2BjwD,8BAAA,CAA+BC,OAAO;MACvE,MAAM+vD,uBAAA,GAA0BlwD,iBAAA,CAAkBb,OAAO;MAEzD,IACE,CAACwB,QAAA,IACAwvD,wBAAA,IAA4BD,uBAAA,IAA2B,CAAC/vD,OAAA,CAAQC,QAAA,IAChE+vD,wBAAA,IAA4B,CAACD,uBAAA,IAA2B/vD,OAAA,CAAQC,QAAA,IACjE,CAAC,KAAK55B,OAAA,CAAQonF,sCAAA,GAAyC,0BAA0B,GACjF;QACA;MACF;MAEA,KAAKO,WAAA,CACHttD,cAAA,CAAe;QACbF,QAAA;QACAG,aAAA,EAAe3B,OAAA;QACfzJ;MACF,CAAC,CACH;IACF;IAEA,KAAQ26D,qBAAA,GAAwB,MAAO3tE,KAAA,IAAiB;MACtD,MAAM;QAAEqtE,YAAA,EAAcpwD,WAAA;QAAaqwD,UAAA,EAAYlhB;MAAU,IAAIpsD,KAAA;MAE7D,IAAI,CAACid,WAAA,IAAe,CAACmvC,SAAA,EAAW;QAC9B;MACF;MAEA,MAAM3vC,OAAA,GAAU,MAAMD,kBAAA,CAAmB;QACvC95B,MAAA,EAAQ,KAAKA,MAAA;QACbC,EAAA,EAAIqd,KAAA,CAAMstE,UAAA;QACV5nF,IAAA,EAAMsa,KAAA,CAAMqtE;MACd,CAAC;MAED,MAAM;QAAEpvD,QAAA;QAAUhE;MAAW,IAAI,KAAK5V,KAAA,CAAMqnB,cAAA,CAAe;MAC3D,MAAM;QAAE1Y,IAAA;QAAMyK;MAAQ,IAAIxD,UAAA,IAAc,CAAC;MAEzC,MAAMwzD,wBAAA,GAA2BjwD,8BAAA,CAA+BC,OAAO;MACvE,MAAM+vD,uBAAA,GAA0BlwD,iBAAA,CAAkBb,OAAO;MAEzD,IACE,CAACwB,QAAA,IACAwvD,wBAAA,IAA4BD,uBAAA,IAA2B,CAAC/vD,OAAA,CAAQC,QAAA,IAChE+vD,wBAAA,IAA4B,CAACD,uBAAA,IAA2B/vD,OAAA,CAAQC,QAAA,IACjE,CAAC,KAAK55B,OAAA,CAAQonF,sCAAA,GAAyC,iBAAiB,GACxE;QACA;MACF;MAEA,KAAKO,WAAA,CACHttD,cAAA,CAAe;QACbF,QAAA;QACAG,aAAA,EAAe3B,OAAA;QACfzJ;MACF,CAAC,CACH;IACF;IAEA,KAAQ46D,qCAAA,GAAwC,KAAKX,qBAAA;IAErD,KAAQY,oBAAA,GAAwB7tE,KAAA,IAAiB;MAC/C,MAAM;QAAEia,UAAA;QAAYgE;MAAS,IAAI,KAAK5Z,KAAA,CAAMqnB,cAAA,CAAe;MAC3D,MAAM;QAAEjO,OAAA;QAASzK;MAAK,IAAIiH,UAAA;MAC1B,IACE,CAACja,KAAA,CAAMod,MAAA,EAAQzM,IAAA,IACf3Q,KAAA,CAAMod,MAAA,CAAOzM,IAAA,CAAKhuB,EAAA,KAAO,KAAKD,MAAA,CAAO4gC,MAAA,IACrC,CAACtjB,KAAA,CAAMqtE,YAAA,IACP,CAACrtE,KAAA,CAAMstE,UAAA,EACP;QACA;MACF;MACA,MAAMrwD,WAAA,GAAcjd,KAAA,CAAMqtE,YAAA;MAC1B,MAAMjhB,SAAA,GAAYpsD,KAAA,CAAMstE,UAAA;MAExB,MAAM5uD,sBAAA,GAAyBb,4BAAA,CAA6B7K,IAAI;MAChE,MAAMy6D,wBAAA,GAA2BjwD,8BAAA,CAA+BC,OAAO;MACvE,MAAMqwD,YAAA,GAAenwD,gBAAA,CAAiB;QAAEC,OAAA,EAAS;QAAG5K,IAAA;QAAMrqB,SAAA,EAAW;MAAY,CAAC;MAElF,IACE,CAACs1B,QAAA,IACA,CAACS,sBAAA,IAA0B,CAAC+uD,wBAAA,IAC7B,KAAK3pF,OAAA,CAAQqnF,gBAAA,EACb;QACA;MACF;MAEA,MAAMoC,aAAA,GAAgB,KAAK7qF,MAAA,CAAO+5B,OAAA,CAAQQ,WAAA,EAAamvC,SAAS;MAEhE,MAAM9tC,kBAAA,GAAqBL,QAAA,CAASj/B,OAAA,CAAQuuF,aAAa;MACzD,MAAM/uD,6BAAA,GAAgCF,kBAAA,IAAsB;MAE5D,MAAMK,qBAAA,GAAwBxB,eAAA,CAAgBowD,aAAa;MAC3D,MAAMC,uBAAA,GAA0BlwD,iBAAA,CAAkBiwD,aAAa;MAE/D,MAAM3uD,WAAA,GAAc,CAAC,GAAGX,QAAQ;MAEhC,IAAIO,6BAAA,EAA+B;QACjCI,WAAA,CAAYxV,MAAA,CAAOkV,kBAAA,EAAoB,CAAC;MAC1C;MAGA;MAAA;MAEGmvD,wBAAA,IAA4B,CAACD,uBAAA,IAA2B/vD,OAAA,EAASC,QAAA;MAAA;MAEjE+vD,wBAAA,IAA4BD,uBAAA,IAA2B,CAAC/vD,OAAA,EAASC,QAAA,EAClE;QACA,KAAK+tD,WAAA,CAAY7sD,WAAW;QAC5B;MACF;MAGA,IAAIV,sBAAA,GAAwC;MAE5C,IAAI4vD,YAAA,KAAiB,KAAMA,YAAA,KAAiB,MAAM,CAACnvD,qBAAA,EAAwB;QACzET,sBAAA,GAAyBF,0BAAA,CAA2B;UAAEC,QAAA,EAAUW;QAAY,CAAC;MAC/E;MACA,MAAMmvD,qBAAA,GACJ,OAAO7vD,sBAAA,KAA2B,WAAWA,sBAAA,GAAyB,IAAI;MAG5E,IAAID,QAAA,CAAS8vD,qBAAqB,MAAMR,aAAA,EAAe;QACrD;MACF;MAEA3uD,WAAA,CAAYxV,MAAA,CAAO2kE,qBAAA,EAAuB,GAAGR,aAAa;MAC1D,KAAK9B,WAAA,CAAY7sD,WAAW;IAC9B;IAEA,KAAQovD,sBAAA,GAA0BhuE,KAAA,IAAiB;MACjD,MAAMiuE,WAAA,GACJlD,mCAAA,CAAoC/qE,KAAA,CAAMta,IAAgC;MAC5E,MAAMwoF,mBAAA,GAAsB,KAAK3C,aAAA,CAAcjnF,GAAA,CAAI2pF,WAAW;MAC9D,MAAME,oBAAA,GAAuB,KAAK7C,qBAAA,CAAsBhnF,GAAA,CAAI2pF,WAAW;MACvE,IAAIE,oBAAA,IAAwB,OAAOA,oBAAA,KAAyB,YAAY;QACtEA,oBAAA,CAAqB,KAAK1C,WAAA,EAAazrE,KAAK;QAC5C;MACF;MAEA,IAAIkuE,mBAAA,IAAuB,OAAOA,mBAAA,KAAwB,YAAY;QACpEA,mBAAA,CAAoBluE,KAAK;MAC3B;IACF;IAEA,KAAO+iD,qBAAA,GAAwB,MAAM;MACnC,IAAI,KAAKtC,gBAAA,EAAkB;QAEzB;MACF;MAEA,WAAW+D,SAAA,IAAaz/D,MAAA,CAAO+C,IAAA,CAAKijF,mCAAmC,GAAG;QACxE,KAAKrqB,sBAAA,CACH,KAAKh+D,MAAA,CAAO8gE,EAAA,CAAGgB,SAAA,EAAW,KAAKwpB,sBAAsB,EAAEttE,WACzD;MACF;IACF;IAjiBE,KAAK/d,EAAA,GAAK,mBAAmB+wB,cAAA,CAAe,CAAC;IAC7C,KAAKhxB,MAAA,GAASA,MAAA;IACd,KAAK2hB,KAAA,GAAQ,IAAIgmB,UAAA,CAAgC;MAC/CpM,QAAA,EAAU,EAAC;MACXhE,UAAA,EAAY;QACV26B,SAAA,EAAW;QACXgS,aAAA,EAAe;QACfr3C,OAAA,EAAS;QACTkO,OAAA,EAAS,CAAC;QACVzK,IAAA,EAAM,CAAC;QACPlvB,OAAA,EAASsnF;MACX;MACAzlC,WAAA,EAAa;MACb52C,KAAA,EAAO;IACT,CAAC;IACD,KAAK88E,wBAAA,CAAyBP,qBAAqB;IACnD,KAAKS,UAAA,CAAWjoF,OAAO;IACvB,KAAKynF,aAAA,GAAgB,IAAI/jC,GAAA,CACvBziD,MAAA,CAAOqQ,OAAA,CAA0B;MAC/B63E,qBAAA,EAAuB,KAAKA,qBAAA;MAC5BE,oBAAA,EAAsB,KAAKA,oBAAA;MAC3BQ,qBAAA,EAAuB,KAAKA,qBAAA;MAC5BE,oBAAA,EAAsB,KAAKA,oBAAA;MAC3BT,iBAAA,EAAmB,KAAKA,iBAAA;MACxBJ,iCAAA,EAAmC,KAAKA,iCAAA;MACxCU,6BAAA,EAA+B,KAAKA,6BAAA;MACpCE,qCAAA,EAAuC,KAAKA;IAC9C,CAAC,CACH;EACF;AAqgBF;;;ACjtBA,IAAMQ,WAAA,GAAc;AAEb,IAAMC,mCAAA,GAAiE;EAC5EC,SAAA,EAAW;IACTv/E,KAAA,EAAOq/E,WAAA;IACPG,IAAA,EAAMH,WAAA;IACNI,OAAA,EAASJ,WAAA;IACTK,OAAA,EAASL;EACX;AACF;;;ACAO,IAAMM,mBAAA,GAAN,MAA0B;EAK/BjsF,YAAY0L,MAAA,GAA6C,CAAC,GAAG;IAH7D,KAAQwgF,QAAA,GAAwC,mBAAInnC,GAAA,CAAI;IAItD,KAAKonC,KAAA,GAAQ,IAAIvkD,UAAA,CAA8B;MAAE2J,aAAA,EAAe;IAAG,CAAC;IACpE,KAAK7lC,MAAA,GAASwiC,SAAA,CAAU09C,mCAAA,EAAqClgF,MAAM;EACrE;EAEA,IAAI6lC,cAAA,EAAgB;IAClB,OAAO,KAAK46C,KAAA,CAAMljD,cAAA,CAAe,EAAEsI,aAAA;EACrC;EAEA,IAAIy6C,QAAA,EAAU;IACZ,OAAO,KAAKz6C,aAAA,CAAchkC,MAAA,CAAQ0rD,CAAA,IAAMA,CAAA,CAAEmzB,QAAA,KAAa,SAAS;EAClE;EAEA,IAAI9/E,MAAA,EAAQ;IACV,OAAO,KAAKilC,aAAA,CAAchkC,MAAA,CAAQ0rD,CAAA,IAAMA,CAAA,CAAEmzB,QAAA,KAAa,OAAO;EAChE;EAEA,IAAIN,KAAA,EAAO;IACT,OAAO,KAAKv6C,aAAA,CAAchkC,MAAA,CAAQ0rD,CAAA,IAAMA,CAAA,CAAEmzB,QAAA,KAAa,MAAM;EAC/D;EAEA,IAAIL,QAAA,EAAU;IACZ,OAAO,KAAKx6C,aAAA,CAAchkC,MAAA,CAAQ0rD,CAAA,IAAMA,CAAA,CAAEmzB,QAAA,KAAa,SAAS;EAClE;EAEAx1D,IAAI;IAAEnrB,OAAA;IAASgmC,MAAA;IAAQpwC,OAAA,GAAU,CAAC;EAAE,GAAmC;IACrE,MAAMnB,EAAA,GAAK+wB,cAAA,CAAe;IAC1B,MAAMnX,GAAA,GAAMN,IAAA,CAAKM,GAAA,CAAI;IACrB,MAAMsyE,QAAA,GAAW/qF,OAAA,CAAQ+qF,QAAA,IAAY;IACrC,MAAMt6C,QAAA,GAAWzwC,OAAA,CAAQywC,QAAA,IAAY,KAAKpmC,MAAA,CAAOmgF,SAAA,CAAUO,QAAQ;IAEnE,MAAMC,YAAA,GAA6B;MACjCnsF,EAAA;MACAuL,OAAA;MACAgmC,MAAA;MACAxuC,IAAA,EAAM5B,OAAA,EAAS4B,IAAA;MACfmpF,QAAA;MACAvsB,SAAA,EAAW/lD,GAAA;MACXwyE,SAAA,EAAWxyE,GAAA,GAAMg4B,QAAA;MACjBy6C,OAAA,EAASlrF,OAAA,CAAQkrF,OAAA;MACjBp6C,QAAA,EAAU9wC,OAAA,CAAQ8wC,QAAA;MAClBE,aAAA,EAAehxC,OAAA,CAAQgxC;IACzB;IAEA,KAAK85C,KAAA,CAAMrkD,WAAA,CAAY;MACrByJ,aAAA,EAAe,CAAC,GAAG,KAAK46C,KAAA,CAAMljD,cAAA,CAAe,EAAEsI,aAAA,EAAe86C,YAAY;IAC5E,CAAC;IAED,IAAIA,YAAA,CAAaC,SAAA,EAAW;MAC1B,MAAMh4E,OAAA,GAAUmL,UAAA,CAAW,MAAM;QAC/B,KAAK5F,MAAA,CAAO3Z,EAAE;MAChB,GAAGmB,OAAA,CAAQywC,QAAA,IAAY,KAAKpmC,MAAA,CAAOmgF,SAAA,CAAUQ,YAAA,CAAaD,QAAQ,CAAC;MAEnE,KAAKF,QAAA,CAAS1iF,GAAA,CAAItJ,EAAA,EAAIoU,OAAO;IAC/B;IAEA,OAAOpU,EAAA;EACT;EAEAsxC,SAAS;IAAE/lC,OAAA;IAASgmC,MAAA;IAAQpwC;EAAQ,GAA2B;IAC7D,OAAO,KAAKu1B,GAAA,CAAI;MAAEnrB,OAAA;MAASgmC,MAAA;MAAQpwC,OAAA,EAAS;QAAE,GAAGA,OAAA;QAAS+qF,QAAA,EAAU;MAAQ;IAAE,CAAC;EACjF;EAEAl+B,WAAW;IAAEziD,OAAA;IAASgmC,MAAA;IAAQpwC;EAAQ,GAA2B;IAC/D,OAAO,KAAKu1B,GAAA,CAAI;MAAEnrB,OAAA;MAASgmC,MAAA;MAAQpwC,OAAA,EAAS;QAAE,GAAGA,OAAA;QAAS+qF,QAAA,EAAU;MAAU;IAAE,CAAC;EACnF;EAEAI,QAAQ;IAAE/gF,OAAA;IAASgmC,MAAA;IAAQpwC;EAAQ,GAA2B;IAC5D,OAAO,KAAKu1B,GAAA,CAAI;MAAEnrB,OAAA;MAASgmC,MAAA;MAAQpwC,OAAA,EAAS;QAAE,GAAGA,OAAA;QAAS+qF,QAAA,EAAU;MAAO;IAAE,CAAC;EAChF;EAEAK,WAAW;IAAEhhF,OAAA;IAASgmC,MAAA;IAAQpwC;EAAQ,GAA2B;IAC/D,OAAO,KAAKu1B,GAAA,CAAI;MAAEnrB,OAAA;MAASgmC,MAAA;MAAQpwC,OAAA,EAAS;QAAE,GAAGA,OAAA;QAAS+qF,QAAA,EAAU;MAAU;IAAE,CAAC;EACnF;EAEAvyE,OAAO3Z,EAAA,EAAkB;IACvB,MAAMoU,OAAA,GAAU,KAAK43E,QAAA,CAASrqF,GAAA,CAAI3B,EAAE;IACpC,IAAIoU,OAAA,EAAS;MACX0hB,YAAA,CAAa1hB,OAAO;MACpB,KAAK43E,QAAA,CAASzqF,MAAA,CAAOvB,EAAE;IACzB;IAEA,KAAKisF,KAAA,CAAMrkD,WAAA,CAAY;MACrByJ,aAAA,EAAe,KAAK46C,KAAA,CAAMljD,cAAA,CAAe,EAAEsI,aAAA,CAAchkC,MAAA,CAAQ0rD,CAAA,IAAMA,CAAA,CAAE/4D,EAAA,KAAOA,EAAE;IACpF,CAAC;EACH;EAEAyQ,MAAA,EAAc;IACZ,KAAKu7E,QAAA,CAAShnF,OAAA,CAASoP,OAAA,IAAY0hB,YAAA,CAAa1hB,OAAO,CAAC;IACxD,KAAK43E,QAAA,CAASv7E,KAAA,CAAM;IAEpB,KAAKw7E,KAAA,CAAMrkD,WAAA,CAAY;MAAEyJ,aAAA,EAAe;IAAG,CAAC;EAC9C;AACF;;;AC1GA,IAAMm7C,SAAA,GAAY,KAAK;AACvB,IAAMC,OAAA,GAAU,KAAKD,SAAA;AACrB,IAAME,MAAA,GAAS,KAAKD,OAAA;AACpB,IAAME,OAAA,GAAU,IAAID,MAAA;AAEpB,IAAME,YAAA,GAAe;EACnBC,MAAA,EAAQ;IAAEC,KAAA,EAAON,SAAA;IAAWO,KAAA,EAAON;EAAQ;EAC3CO,IAAA,EAAM;IAAEF,KAAA,EAAOL,OAAA;IAASM,KAAA,EAAOL;EAAO;EACtCO,GAAA,EAAK;IAAEH,KAAA,EAAOJ,MAAA;IAAQK,KAAA,EAAOJ;EAAQ;AACvC;AAEO,IAAMO,gCAAA,GAAmC,IAAIP,OAAA;AAM7C,IAAMQ,aAAA,GAAN,MAAoB;EAKzBrtF,YAAY;IACVstF,QAAA;IACA5hF;EACF,GAGG;IATH,KAAA4I,OAAA,GAAgD;IAChD,KAAAi5E,qBAAA,GAAgCH,gCAAA;IAgBhC,KAAAI,wBAAA,GAA2B,MAAM;MAC/B,IAAI,CAAC,KAAKF,QAAA,CAASG,QAAA,EAAU,OAAO;MACpC,MAAMC,sBAAA,GAAyBjjF,IAAA,CAAK6wB,GAAA,CAAIqyD,UAAA,CAAW,KAAKL,QAAA,CAASG,QAAA,CAAS34D,OAAA,CAAQ,CAAC,CAAC;MACpF,IAAI84D,eAAA;MACJ,IAAIF,sBAAA,KAA2B,GAAG;QAChCE,eAAA,GAAkBlB,SAAA;MACpB,WAAWgB,sBAAA,GAAyBZ,YAAA,CAAaC,MAAA,CAAOC,KAAA,EAAO;QAC7DY,eAAA,GAAkBF,sBAAA;MACpB,WAAWA,sBAAA,IAA0BZ,YAAA,CAAaC,MAAA,CAAOE,KAAA,EAAO;QAC9DW,eAAA,GAAkBlB,SAAA;MACpB,WAAWgB,sBAAA,IAA0BZ,YAAA,CAAaI,IAAA,CAAKD,KAAA,EAAO;QAC5DW,eAAA,GAAkBjB,OAAA;MACpB,OAAO;QACLiB,eAAA,GAAkBhB,MAAA;MACpB;MACA,OAAOgB,eAAA;IACT;IAEA,KAAAzqC,IAAA,GAAO,MAAM;MACX,IAAI,CAAC,KAAKmqC,QAAA,CAASG,QAAA,EAAU,OAAO;MACpC,MAAMI,aAAA,GAAgB,KAAKL,wBAAA,CAAyB;MACpD,IAAIK,aAAA,KAAkB,MAAM,OAAO;MAEnC,MAAMC,iBAAA,GACJ,KAAKR,QAAA,CAASG,QAAA,EAAU34D,OAAA,CAAQ,IAAI,KAAKy4D,qBAAA;MAC3C,MAAMQ,kBAAA,GAAqBD,iBAAA,GAAoBt0E,IAAA,CAAKM,GAAA,CAAI;MAExD,IAAIi0E,kBAAA,IAAsB,GAAG;QAC3B,KAAKz5E,OAAA,GAAU;QACf;MACF;MAEA,IAAI,KAAKA,OAAA,EAAS0hB,YAAA,CAAa,KAAK1hB,OAAO;MAE3C,KAAKA,OAAA,GAAUmL,UAAA,CAAW,MAAM;QAC9B,KAAK6tE,QAAA,CAASU,eAAA,CAAgB;QAC9B,KAAK7qC,IAAA,CAAK;MACZ,GAAG0qC,aAAa;IAClB;IAEA,KAAAl9E,KAAA,GAAQ,MAAM;MACZ,IAAI,KAAK2D,OAAA,EAAS;QAChB6kE,aAAA,CAAc,KAAK7kE,OAAO;QAC1B,KAAKA,OAAA,GAAU;MACjB;IACF;IApDE,KAAKg5E,QAAA,GAAWA,QAAA;IAEhB,IAAI,OAAO5hF,MAAA,EAAQ6hF,qBAAA,KAA0B,UAAU;MACrD,KAAKA,qBAAA,GAAwB7hF,MAAA,CAAO6hF,qBAAA;IACtC;EACF;AAgDF;;;AChFO,IAAMI,UAAA,GAAcF,QAAA,IAAqBA,QAAA,IAAW,mBAAIj0E,IAAA,CAAK,GAAEsb,OAAA,CAAQ;AAwBvE,IAAMm5D,SAAA,GAAN,MAAMA,SAAA,CAAS;EAGpBjuF,YAAY;IAAEjB,IAAA;IAAM2M;EAAO,GAAoB;IA4B/C,KAAAwiF,QAAA,GAAYnvF,IAAA,IAAyC;MACnD,KAAK6iB,KAAA,CAAM/Z,IAAA,CAAMmgC,OAAA,IAAY;QAC3B,MAAM0vB,QAAA,GAAW;UAAE,GAAG1vB,OAAA;UAAS,GAAGimD,SAAA,CAASE,YAAA,CAAapvF,IAAI;QAAE;QAC9D,IAAI24D,QAAA,CAAS02B,SAAA,EAAW;UACtB12B,QAAA,CAASi2B,UAAA,GAAaA,UAAA,CAAWj2B,QAAA,CAAS02B,SAAA,CAAUt5D,OAAA,CAAQ,CAAC;QAC/D;QACA,OAAO4iC,QAAA;MACT,CAAC;MAED,IAAI34D,IAAA,CAAKqvF,SAAA,EAAW;QAClB,KAAKC,SAAA,CAAU;MACjB,WAAW,CAACtvF,IAAA,CAAKqvF,SAAA,EAAW;QAC1B,KAAKE,UAAA,CAAW;MAClB;IACF;IAEA,KAAAN,eAAA,GAAkB,MAAM;MACtB,IAAI,CAAC,KAAKP,QAAA,EAAU;MACpB,KAAK7rE,KAAA,CAAMkmB,WAAA,CAAY;QAAE6lD,UAAA,EAAYA,UAAA,CAAW,KAAKF,QAAA,CAAS34D,OAAA,CAAQ,CAAC;MAAE,CAAC;IAC5E;IAEA,KAAAu5D,SAAA,GAAY,MAAM;MAChB,KAAKE,KAAA,CAAMprC,IAAA,CAAK;IAClB;IAEA,KAAAmrC,UAAA,GAAa,MAAM;MACjB,KAAKC,KAAA,CAAM59E,KAAA,CAAM;IACnB;IAtDE,KAAKiR,KAAA,GAAQ,IAAIgmB,UAAA,CAAWqmD,SAAA,CAASE,YAAA,CAAapvF,IAAI,CAAC;IACvD,KAAKwvF,KAAA,GAAQ,IAAIlB,aAAA,CAAc;MAAEC,QAAA,EAAU;MAAM5hF;IAAO,CAAC;IACzD,KAAK2iF,SAAA,CAAU;EACjB;EAYA,IAAInuF,GAAA,EAAK;IACP,OAAO,KAAK0hB,KAAA,CAAMqnB,cAAA,CAAe,EAAE1I,UAAA;EACrC;EAEA,IAAIktD,SAAA,EAAW;IACb,OAAO,KAAK7rE,KAAA,CAAMqnB,cAAA,CAAe,EAAEmlD,SAAA;EACrC;EAEA,IAAIT,WAAA,EAAa;IACf,OAAO,KAAK/rE,KAAA,CAAMqnB,cAAA,CAAe,EAAE0kD,UAAA;EACrC;AA8BF;AA3DaM,SAAA,CASJE,YAAA,GAAgBpvF,IAAA,KAAyD;EAC9E,GAAGA,IAAA;EACHquB,UAAA,EAAY,IAAI5T,IAAA,CAAKza,IAAA,CAAKquB,UAAU;EACpC3hB,OAAA,EAAS1M,IAAA,CAAK0M,OAAA,IAAW;EACzB2iF,SAAA,EAAWrvF,IAAA,CAAKqvF,SAAA,GAAY,IAAI50E,IAAA,CAAKza,IAAA,CAAKqvF,SAAS,IAAI;EACvDT,UAAA,EAAY5uF,IAAA,CAAKqvF,SAAA,GAAYT,UAAA,CAAW,IAAIn0E,IAAA,CAAKza,IAAA,CAAKqvF,SAAS,EAAEt5D,OAAA,CAAQ,CAAC,IAAI;EAC9EvH,UAAA,EAAY,IAAI/T,IAAA,CAAKza,IAAA,CAAKwuB,UAAU;EACpCW,IAAA,EAAMnvB,IAAA,CAAKmvB,IAAA,IAAQ;AACrB;AAjBK,IAAMsgE,QAAA,GAANP,SAAA;;;ACIA,IAAMQ,0BAAA,GAAyD;EACpEh9B,UAAA,EAAY;EACZC,QAAA,EAAU;AACZ;AAEO,IAAeg9B,aAAA,GAAf,MAAgC;EAM3B1uF,YAAYqB,OAAA,EAA4B;IAFlD,KAAUstF,mBAAA,GAAsB;IAyDhC,KAAA37B,kBAAA,GAAqB,CAAC;MAAEvB;IAAW,MAAgC;MACjE,KAAKm9B,sBAAA,GAAyBp5D,QAAA,CAAS,KAAK09B,YAAA,CAAanxD,IAAA,CAAK,IAAI,GAAG0vD,UAAU;IACjF;IAEA,KAAAM,eAAA,GAAmBnhC,SAAA,IAChB,CAAC,KAAKuhC,SAAA,IAAavhC,SAAA,KAAc,UAAU,KAAK9D,OAAA,IAChD8D,SAAA,KAAc,UAAU,KAAK7D,OAAA;IAoEhC,KAAAllB,IAAA,GAAO,MAAM,KAAKqrD,YAAA,CAAa;MAAEtiC,SAAA,EAAW;IAAO,CAAC;IAEpD,KAAAgxD,IAAA,GAAO,MAAM,KAAK1uB,YAAA,CAAa;MAAEtiC,SAAA,EAAW;IAAO,CAAC;IAEpD,KAAAi+D,aAAA,GAAgB,MAAM;MACpB,KAAKD,sBAAA,CAAuB;QAAEh+D,SAAA,EAAW;MAAO,CAAC;IACnD;IACA,KAAAk+D,aAAA,GAAgB,MAAM;MACpB,KAAKF,sBAAA,CAAuB;QAAEh+D,SAAA,EAAW;MAAO,CAAC;IACnD;IAzIE,MAAM;MAAE6gC,UAAA;MAAYC;IAAS,IAAI;MAAE,GAAG+8B,0BAAA;MAA4B,GAAGptF;IAAQ;IAC7E,KAAKqwD,QAAA,GAAWA,QAAA;IAChB,KAAK9vC,KAAA,GAAQ,IAAIgmB,UAAA,CAA8B,KAAKuiB,YAAY;IAChE,KAAK6I,kBAAA,CAAmB;MAAEvB;IAAW,CAAC;EACxC;EAEA,IAAIW,eAAA,EAAiB;IACnB,OAAO,KAAKxwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEmpB,cAAA;EACrC;EAEA,IAAItlC,QAAA,EAAU;IACZ,OAAO,KAAKlL,KAAA,CAAMqnB,cAAA,CAAe,EAAEnc,OAAA;EACrC;EAEA,IAAIC,QAAA,EAAU;IACZ,OAAO,KAAKnL,KAAA,CAAMqnB,cAAA,CAAe,EAAElc,OAAA;EACrC;EAEA,IAAIslC,WAAA,EAAa;IACf,OAAOz2D,KAAA,CAAMuH,OAAA,CAAQ,KAAKye,KAAA,CAAMqnB,cAAA,CAAe,EAAEqpB,KAAK;EACxD;EAEA,IAAIH,UAAA,EAAY;IACd,OAAO,KAAKvwC,KAAA,CAAMqnB,cAAA,CAAe,EAAEkpB,SAAA;EACrC;EAEA,IAAIhI,aAAA,EAA+B;IACjC,OAAO;MACLr9B,OAAA,EAAS;MACTC,OAAA,EAAS;MAAA;MACTolC,SAAA,EAAW;MACXG,KAAA,EAAO;MACPF,cAAA,EAAgB;MAChBlW,MAAA,EAAQ;MACR1iB,MAAA,EAAQ;IACV;EACF;EAEA,IAAI84B,MAAA,EAAQ;IACV,OAAO,KAAK1wC,KAAA,CAAMqnB,cAAA,CAAe,EAAEqpB,KAAA;EACrC;EAEA,IAAIpW,OAAA,EAAS;IACX,OAAO,KAAKt6B,KAAA,CAAMqnB,cAAA,CAAe,EAAEiT,MAAA;EACrC;EAEA,IAAI1iB,OAAA,EAAS;IACX,OAAO,KAAK5X,KAAA,CAAMqnB,cAAA,CAAe,EAAEzP,MAAA;EACrC;EAcU+4B,yBAAA,EAA8C;IACtD,OAAO;MACL,GAAG,KAAKpI,YAAA;MACRgI,SAAA,EAAW;IACb;EACF;EAEUK,mBACRC,WAAA,EACAC,WAAA,EACmB;IACnB,MAAM1qB,OAAA,GAAU,KAAKpmB,KAAA,CAAMqnB,cAAA,CAAe;IAC1C,OAAO;MACL,GAAGjB,OAAA;MACHoqB,cAAA,EAAgB;MAAA;MAChB,GAAGK,WAAA;MACHN,SAAA,EAAW;MACXG,KAAA,EAAOI,WAAA,GACHD,WAAA,CAAYH,KAAA,GACZ,CAAC,IAAI,KAAKA,KAAA,IAAS,EAAC,GAAI,IAAIG,WAAA,CAAYH,KAAA,IAAS,EAAG;IAC1D;EACF;EAEA,MAAMY,aAAa;IAAEtiC;EAAU,GAAuC;IACpE,IAAI,CAAC,KAAKmhC,eAAA,CAAgBnhC,SAAS,GAAG;IACtC,MAAM8hC,WAAA,GAAc,OAAO,KAAKJ,KAAA,KAAU;IAC1C,IAAII,WAAA,EAAa;MACf,KAAK9wC,KAAA,CAAM/Z,IAAA,CAAK,KAAK0qD,wBAAA,CAAyB,CAAC;IACjD,OAAO;MACL,KAAK3wC,KAAA,CAAMkmB,WAAA,CAAY;QAAEqqB,SAAA,EAAW;MAAK,CAAC;IAC5C;IAEA,MAAMM,WAAA,GAA0C,CAAC;IACjD,IAAI;MACF,MAAMU,OAAA,GAAU,MAAM,KAAKrvB,KAAA,CAAM;QAAElT;MAAU,CAAC;MAC9C,IAAI,CAACuiC,OAAA,EAAS;MACd,MAAM;QAAEb,KAAA;QAAOzqD,IAAA;QAAM+5E;MAAK,IAAIzuB,OAAA;MAC9B,IAAIT,WAAA,KAAgB7qD,IAAA,IAAQ+5E,IAAA,GAAO;QACjC,KAAK+M,mBAAA,GAAsB;MAC7B;MAEA,IAAI,KAAKA,mBAAA,EAAqB;QAC5Bl8B,WAAA,CAAYvW,MAAA,GAAS;UAAEr0C,IAAA,EAAMA,IAAA,IAAQ;UAAM+5E,IAAA,EAAMA,IAAA,IAAQ;QAAK;QAC9DnvB,WAAA,CAAY3lC,OAAA,GAAU,CAAC,CAACjlB,IAAA;QACxB4qD,WAAA,CAAY1lC,OAAA,GAAU,CAAC,CAAC60D,IAAA;MAC1B,OAAO;QACLnvB,WAAA,CAAYj5B,MAAA,IAAU,KAAKA,MAAA,IAAU,KAAK84B,KAAA,CAAMt2D,MAAA;QAChDy2D,WAAA,CAAY3lC,OAAA,GAAUwlC,KAAA,CAAMt2D,MAAA,KAAW,KAAK01D,QAAA;MAC9C;MAEAe,WAAA,CAAYH,KAAA,GAAQ,MAAM,KAAKc,kBAAA,CAAmBd,KAAK;IACzD,SAASnzD,CAAA,EAAG;MACVszD,WAAA,CAAYL,cAAA,GAAiBjzD,CAAA;IAC/B,UAAE;MACA,KAAKyiB,KAAA,CAAM/Z,IAAA,CAAK,KAAK2qD,kBAAA,CAAmBC,WAAA,EAAaC,WAAW,CAAC;IACnE;EACF;EAEAW,qBAAA,EAAuB;IACrB,KAAKu7B,sBAAA,CAAuBjuE,MAAA,CAAO;EACrC;EAEAkyC,WAAA,EAAa;IACX,KAAKjxC,KAAA,CAAM/Z,IAAA,CAAK,KAAKsiD,YAAY;EACnC;AAYF;;;AC9KO,IAAM4kC,iBAAA,GAAN,cAAgCL,aAAA,CAAgC;EAuBrE1uF,YAAYC,MAAA,EAAoBoB,OAAA,EAA4B;IAC1D,MAAMA,OAAO;IAIf,KAAAyiC,KAAA,GAAQ,OAAO;MACblT;IACF,MAAoF;MAClF,MAAMsrB,MAAA,GAAS,KAAKA,MAAA,GAAStrB,SAAS;MACtC,MAAM;QACJo/C,SAAA,EAAW1d,KAAA;QACXzqD,IAAA;QACA+5E;MACF,IAAI,MAAM,KAAK3hF,MAAA,CAAO+uF,cAAA,CAAe;QACnCzhF,MAAA,EAAQ,KAAKytB,OAAA;QACbzK,IAAA,EAAM,KAAKA,IAAA;QACXkT,KAAA,EAAO,KAAKiuB,QAAA;QACZ,CAAC9gC,SAAS,GAAGsrB;MACf,CAAC;MACD,OAAO;QAAEoW,KAAA;QAAOzqD,IAAA;QAAM+5E;MAAK;IAC7B;IAEA,KAAAxuB,kBAAA,GAAsBd,KAAA,IAA8BA,KAAA;IApBlD,KAAKryD,MAAA,GAASA,MAAA;EAChB;EArBA,IAAI+6B,QAAA,EAAuC;IACzC,OAAO,KAAKi0D,QAAA;EACd;EAEA,IAAI1+D,KAAA,EAAiC;IACnC,OAAO,KAAK2+D,KAAA;EACd;EAEA,IAAIl0D,QAAQA,OAAA,EAAsC;IAChD,KAAKi0D,QAAA,GAAWj0D,OAAA;IAChB,KAAK63B,UAAA,CAAW;EAClB;EAEA,IAAItiC,KAAKA,IAAA,EAAgC;IACvC,KAAK2+D,KAAA,GAAQ3+D,IAAA;IACb,KAAKsiC,UAAA,CAAW;EAClB;AAyBF;;;ACvCA,IAAMs8B,UAAA,GAAY,KAAK;AACvB,IAAMC,QAAA,GAAU,KAAKD,UAAA;AACrB,IAAME,OAAA,GAAS,KAAKD,QAAA;AAEb,IAAME,+BAAA,GAAyD;EACpEC,kBAAA,EAAoB,CAClB,IAAIJ,UAAA,EACJ,KAAKA,UAAA,EACLC,QAAA,EACA,IAAIA,QAAA,EACJ,IAAIA,QAAA,EACJC,OAAA,CACF;EACAG,0BAAA,EAA4BpC;AAC9B;AAEA,IAAMqC,qBAAA,GAAyBnjF,KAAA,IAC7BA,KAAA,CAAMb,OAAA,CAAQ0D,KAAA,CAAM,kDAAkD;AAExE,IAAMugF,2BAAA,GAA+BpjF,KAAA,IACnCA,KAAA,CAAMb,OAAA,CAAQ0D,KAAA,CAAM,yBAAyB;AA2BxC,IAAMwgF,gBAAA,GAAN,MAAMA,gBAAA,SAAwBrxB,iBAAA,CAAkB;EAMrDt+D,YAAY;IAAEC,MAAA;IAAQyL;EAAO,GAA2B;IACtD,MAAM;IA4CR,KAAAkkF,aAAA,GAAgB,CAAC;MACf7wF,IAAA;MACA8wF,SAAA,GAAY;IACd,MAGM;MACJ,IAAI,CAAC,KAAK5vF,MAAA,CAAO2vE,aAAA,CAAc,GAAG;QAChC;MACF;MACA,MAAMkgB,cAAA,GAAiB,KAAKC,YAAA,CAAahxF,IAAA,CAAKwhC,UAAU;MACxD,IAAI,CAACuvD,cAAA,EAAgB;QACnB,MAAMxC,QAAA,GAAW,IAAIkB,QAAA,CAAS;UAC5BzvF,IAAA;UACA2M,MAAA,EAAQ;YAAE6hF,qBAAA,EAAuB,KAAKiC;UAA2B;QACnE,CAAC;QACD,KAAK5tE,KAAA,CAAMkmB,WAAA,CAAY;UACrBkoC,SAAA,EAAW,IAAIjrB,GAAA,CAAI,KAAKirB,SAAA,CAAUxmE,GAAA,CAAIzK,IAAA,CAAKwhC,UAAA,EAAY+sD,QAAQ,CAAC;QAClE,CAAC;MACH,WAAWuC,SAAA,EAAW;QACpBC,cAAA,CAAe5B,QAAA,CAASnvF,IAAI;MAC9B;MACA,OAAO+wF,cAAA;IACT;IAEA,KAAAE,eAAA,GAAmBzsD,SAAA,IAAsB;MACvC,MAAMusD,cAAA,GAAiB,KAAKC,YAAA,CAAaxsD,SAAS;MAClD,IAAI,CAACusD,cAAA,EAAgB;MACrBA,cAAA,CAAexB,UAAA,CAAW;MAC1B,MAAMte,SAAA,GAAY,KAAKA,SAAA;MACvBA,SAAA,CAAUvuE,MAAA,CAAO8hC,SAAS;MAC1B,KAAK3hB,KAAA,CAAMkmB,WAAA,CAAY;QAAEkoC,SAAA,EAAW,IAAIjrB,GAAA,CAAIirB,SAAS;MAAE,CAAC;IAC1D;IAEA,KAAApQ,YAAA,GAAgBtrC,QAAA,IAAiD;MAC/DA,QAAA,CAASpvB,OAAA,CAAQ,CAAC;QAAEooF;MAAS,MAAM;QACjC,IAAIA,QAAA,EAAU;UACZ,KAAKsC,aAAA,CAAc;YAAE7wF,IAAA,EAAMuuF;UAAS,CAAC;QACvC;MACF,CAAC;IACH;IAIA;IAAA;IAAA,KAAA2C,UAAA,GAAa,MAAM;MACjB,KAAKjgB,SAAA,CAAU9qE,OAAA,CAASooF,QAAA,IAAaA,QAAA,CAASe,SAAA,CAAU,CAAC;IAC3D;IAEA,KAAA6B,WAAA,GAAc,MAAM;MAClB,KAAKlgB,SAAA,CAAU9qE,OAAA,CAASooF,QAAA,IAAaA,QAAA,CAASgB,UAAA,CAAW,CAAC;IAC5D;IAQA,KAAOhuB,qBAAA,GAAwB,MAAM;MACnC,IAAI,KAAKtC,gBAAA,EAAkB;MAC3B,KAAKC,sBAAA,CAAuB,KAAKkyB,wBAAA,CAAyB,CAAC;MAC3D,KAAKlyB,sBAAA,CAAuB,KAAKmyB,wBAAA,CAAyB,CAAC;MAC3D,KAAKnyB,sBAAA,CAAuB,KAAKoyB,wBAAA,CAAyB,CAAC;MAC3D,KAAKpyB,sBAAA,CAAuB,KAAKqyB,gCAAA,CAAiC,CAAC;MACnE,KAAKryB,sBAAA,CAAuB,KAAK4C,uBAAA,CAAwB,CAAC;MAC1D,KAAK5C,sBAAA,CAAuB,KAAKsyB,yBAAA,CAA0B,CAAC;MAC5D,KAAKtyB,sBAAA,CAAuB,KAAKuyB,8BAAA,CAA+B,CAAC;MACjE,KAAKvyB,sBAAA,CAAuB,KAAKwyB,2BAAA,CAA4B,CAAC;IAChE;IAEA,KAAQN,wBAAA,GAA2B,MACjC,KAAKlwF,MAAA,CAAO8gE,EAAA,CAAG,oBAAqBxjD,KAAA,IAAU;MAC5C,IAAI,CAACoyE,gBAAA,CAAgBe,wBAAA,CAAyBnzE,KAAK,GAAG;MACtD,MAAM;QAAE+vE;MAAS,IAAI/vE,KAAA;MACrB,KAAKqyE,aAAA,CAAc;QAAE7wF,IAAA,EAAMuuF;MAAS,CAAC;IACvC,CAAC,EAAErvE,WAAA;IAEL,KAAQmyE,wBAAA,GAA2B,MACjC,KAAKnwF,MAAA,CAAO8gE,EAAA,CAAG,oBAAqBxjD,KAAA,IAAU;MAC5C,IAAI,CAACoyE,gBAAA,CAAgBe,wBAAA,CAAyBnzE,KAAK,GAAG;MACtD,MAAM;QAAE+vE;MAAS,IAAI/vE,KAAA;MACrB,KAAKqyE,aAAA,CAAc;QAAE7wF,IAAA,EAAMuuF;MAAS,CAAC;IACvC,CAAC,EAAErvE,WAAA;IAEL,KAAQoyE,wBAAA,GAA2B,MACjC,KAAKpwF,MAAA,CAAO8gE,EAAA,CAAG,oBAAqBxjD,KAAA,IAAU;MAC5C,IAAI,CAACoyE,gBAAA,CAAgBe,wBAAA,CAAyBnzE,KAAK,GAAG;MACtD,KAAKyyE,eAAA,CAAgBzyE,KAAA,CAAMgjB,UAAU;IACvC,CAAC,EAAEtiB,WAAA;IAEL,KAAQ4iD,uBAAA,GAA0B,MAChC,KAAK5gE,MAAA,CAAO8gE,EAAA,CAAG,mBAAoBxjD,KAAA,IAAU;MAC3C,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAASvL,EAAA,EAAI;MACxB,KAAK8vF,eAAA,CAAgBzyE,KAAA,CAAM9R,OAAA,CAAQvL,EAAE;IACvC,CAAC,EAAE+d,WAAA;IAEL,KAAQsyE,yBAAA,GAA4B,MAClC,KAAKtwF,MAAA,CAAO8gE,EAAA,CAAG,qBAAsBxjD,KAAA,IAAU;MAC7C,IAAI,CAACA,KAAA,CAAM9R,OAAA,EAAS6hF,QAAA,EAAU;MAE9B,KAAKsC,aAAA,CAAc;QAAE7wF,IAAA,EAAMwe,KAAA,CAAM9R,OAAA,CAAQ6hF;MAAS,CAAC;IACrD,CAAC,EAAErvE,WAAA;IAEL,KAAQqyE,gCAAA,GAAmC,MACzC,KAAKrwF,MAAA,CAAO8gE,EAAA,CAAG,6BAA6B,MAAM,IAAI,EAAE9iD,WAAA;IAE1D;IAAA,KAAQuyE,8BAAA,GAAiC,MACvC,KAAKG,SAAA,CAAU/uE,KAAA,CAAMqmB,qBAAA,CACnB,CAAC;MAAEqqB;IAAM,MAAM,CAACA,KAAK,GACrB,CAAC,CAACA,KAAK,MAAM;MACX,IAAI,CAACA,KAAA,EAAO;MACZ,WAAWg7B,QAAA,IAAYh7B,KAAA,EAAO;QAC5B,KAAKs9B,aAAA,CAAc;UAAE7wF,IAAA,EAAMuuF;QAAS,CAAC;MACvC;IACF,CACF;IAEF,KAAQmD,2BAAA,GAA8B,MACpC,KAAK5pB,WAAA,CAAY5+B,qBAAA,CACf,CAAC;MAAEunD;IAA2B,OAAO;MAAEA;IAA2B,IAClE,CAAC;MAAEA;IAA2B,GAAG7oB,aAAA,KAAkB;MACjD,IACE,OAAO6oB,0BAAA,KAA+B,YACtCA,0BAAA,KAA+B7oB,aAAA,EAAe6oB,0BAAA,EAC9C;QACA,KAAKxf,SAAA,CAAU9qE,OAAA,CAASooF,QAAA,IAAuB;UAC7C,IAAIA,QAAA,CAASiB,KAAA,EAAO;YAClBjB,QAAA,CAASiB,KAAA,CAAMhB,qBAAA,GAAwBiC,0BAAA;UACzC;QACF,CAAC;MACH;IACF,CACF;IAIF;IAAA;IAAA,KAAAoB,cAAA,GAAiB,MAAOvvF,OAAA,IAAmC;MACzD,MAAM;QAAEkiC;MAAU,IAAIliC,OAAA;MACtB,IAAI,KAAK0uF,YAAA,CAAaxsD,SAAS,GAAG;QAChC,IAAI;UACF,OAAO,MAAM,KAAKstD,cAAA,CAAexvF,OAAO;QAC1C,SAASiL,KAAA,EAAO;UACd,IAAIojF,2BAAA,CAA4BpjF,KAAc,GAAG;YAC/C,OAAO,MAAM,KAAKwkF,cAAA,CAAezvF,OAAO;UAC1C;UACA,MAAMiL,KAAA;QACR;MACF,OAAO;QACL,IAAI;UACF,OAAO,MAAM,KAAKwkF,cAAA,CAAezvF,OAAO;QAC1C,SAASiL,KAAA,EAAO;UACd,IAAImjF,qBAAA,CAAsBnjF,KAAc,GAAG;YACzC,OAAO,MAAM,KAAKukF,cAAA,CAAexvF,OAAO;UAC1C;UACA,MAAMiL,KAAA;QACR;MACF;IACF;IAEA,KAAAwkF,cAAA,GAAiB,MAAOzvF,OAAA,IAAmC;MACzD,MAAM;QAAEisF;MAAS,IAAI,MAAM,KAAKrtF,MAAA,CAAO6wF,cAAA,CAAezvF,OAAO;MAC7D,OAAO,KAAKuuF,aAAA,CAAc;QAAE7wF,IAAA,EAAMuuF,QAAA;QAAUuC,SAAA,EAAW;MAAM,CAAC;IAChE;IAEA,KAAAgB,cAAA,GAAiB,MAAOxvF,OAAA,IAAmC;MACzD,MAAM;QAAEisF;MAAS,IAAI,MAAM,KAAKrtF,MAAA,CAAO4wF,cAAA,CAAexvF,OAAO;MAC7D,OAAO,KAAKuuF,aAAA,CAAc;QAAE7wF,IAAA,EAAMuuF;MAAS,CAAC;IAC9C;IAEA,KAAAyD,cAAA,GAAiB,MAAOxtD,SAAA,IAAyB;MAC/C,MAAM,KAAKtjC,MAAA,CAAO8wF,cAAA,CAAextD,SAAS;MAC1C,KAAKysD,eAAA,CAAgBzsD,SAAS;IAChC;IAEA,KAAAytD,kBAAA,GAAqB,YAAY;MAC/B,MAAM,KAAKL,SAAA,CAAU9oF,IAAA,CAAK;IAC5B;IAEA,KAAAopF,sBAAA,GAAyB,YAAY;MACnC,MAAM,KAAKN,SAAA,CAAU/O,IAAA,CAAK;IAC5B;IA/NE,KAAK3hF,MAAA,GAASA,MAAA;IACd,KAAK4mE,WAAA,GAAc,IAAIj/B,UAAA,CAAW;MAChC2nD,kBAAA,EACE7jF,MAAA,EAAQ6jF,kBAAA,IAAsBD,+BAAA,CAAgCC,kBAAA;MAChEC,0BAAA,EACE9jF,MAAA,EAAQ8jF,0BAAA,IACRF,+BAAA,CAAgCE;IACpC,CAAC;IACD,KAAK5tE,KAAA,GAAQ,IAAIgmB,UAAA,CAAW;MAAEooC,SAAA,EAAW,mBAAIjrB,GAAA,CAAyB;IAAE,CAAC;IACzE,KAAK4rC,SAAA,GAAY,IAAI5B,iBAAA,CAAkB9uF,MAAM;EAC/C;EAAA;EAGAyuC,aAAahjC,MAAA,EAAwC;IACnD,IACE,OAAOA,MAAA,CAAO8jF,0BAAA,KAA+B,YAC7C9jF,MAAA,CAAO8jF,0BAAA,KAA+B,KAAKA,0BAAA,EAC3C;MACA,KAAKxf,SAAA,CAAU9qE,OAAA,CAASooF,QAAA,IAAa;QACnCA,QAAA,CAASiB,KAAA,CAAMhB,qBAAA,GACb7hF,MAAA,EAAQ8jF,0BAAA;MACZ,CAAC;IACH;IACA,KAAK3oB,WAAA,CAAY/+B,WAAA,CAAYp8B,MAAM;EACrC;EAEA,IAAI8jF,2BAAA,EAA6B;IAC/B,OAAO,KAAK3oB,WAAA,CAAY59B,cAAA,CAAe,EAAEumD,0BAAA;EAC3C;EAEA,IAAID,mBAAA,EAAqB;IACvB,OAAO,KAAK1oB,WAAA,CAAY59B,cAAA,CAAe,EAAEsmD,kBAAA;EAC3C;EAAA;EAAA;EAIA,IAAIvf,UAAA,EAAY;IACd,OAAO,KAAKpuD,KAAA,CAAMqnB,cAAA,CAAe,EAAE+mC,SAAA;EACrC;EACA+f,aAAaxsD,SAAA,EAAsB;IACjC,OAAO,KAAKysC,SAAA,CAAUnuE,GAAA,CAAI0hC,SAAS;EACrC;EAAA;AAyLF;AAAA;AAAA;AA1OaosD,gBAAA,CAyGJe,wBAAA,GAA4BnzE,KAAA,IACjC,CAAC,CAACA,KAAA,CAAM+vE,QAAA,KACP/vE,KAAA,CAAMta,IAAA,CAAKokC,UAAA,CAAW,WAAW,KAAK9pB,KAAA,CAAMta,IAAA,KAAS;AA3GnD,IAAMiuF,eAAA,GAANvB,gBAAA;;;AtEiLP,SAASwB,UAASzxF,CAAA,EAAyB;EACzC,OAAO,OAAOA,CAAA,KAAM,YAAYA,CAAA,YAAaL,MAAA;AAC/C;AAsBO,IAAM+xF,UAAA,GAAN,MAAMC,WAAA,CAAW;EAqFtBrxF,YACEuF,GAAA,EACA+rF,eAAA,EACAjwF,OAAA,EACA;IAjCF,KAAQkwF,0BAAA,GAAqD;IAI7D;AAAA;AAAA;IAAA,KAAAnrB,0BAAA,GAA6B,IAAIx+B,UAAA,CAAsC;MACrEy+B,aAAA,EAAe;IACjB,CAAC;IA8OD,KAAAmrB,gBAAA,GAAmB,MACjB,KAAKxjB,YAAA,EAAcsH,YAAA,IAAgB,KAAKmc,UAAA,EAAYnc,YAAA;IAEtD,KAAA9G,gBAAA,GAAmB,MAAMhlB,OAAA,CAAQ,KAAKgoC,gBAAA,CAAiB,CAAC;IAExD,KAAOE,+BAAA,GACLrrB,aAAA,IACG;MACH,KAAKD,0BAAA,CAA2Bt+B,WAAA,CAAY;QAAEu+B;MAAc,CAAC;IAC/D;IAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAsrB,WAAA,GAAc,OACZzjE,IAAA,EACA0jE,mBAAA,KACG;MACH,IAAI,CAAC1jE,IAAA,CAAKhuB,EAAA,EAAI;QACZ,MAAM,IAAI7D,KAAA,CAAM,uCAAuC;MACzD;MAMA,IAAI,KAAKwkC,MAAA,KAAW3S,IAAA,CAAKhuB,EAAA,IAAM,KAAK2xF,cAAA,EAAgB;QAClD5tE,OAAA,CAAQC,IAAA,CACN,4GACF;QACA,OAAO,KAAK2tE,cAAA;MACd;MAEA,IAAI,KAAKhxD,MAAA,EAAQ;QACf,MAAM,IAAIxkC,KAAA,CACR,qGACF;MACF;MAEA,KACG,KAAKiyE,kBAAA,CAAmB,KAAK,KAAKwjB,IAAA,KACnC,CAAC,KAAKzwF,OAAA,CAAQ0wF,sBAAA,EACd;QACA9tE,OAAA,CAAQC,IAAA,CACN,wOACF;MACF;MAGA,KAAK2c,MAAA,GAAS3S,IAAA,CAAKhuB,EAAA;MACnB,KAAK8xF,SAAA,GAAY;MAEjB,MAAMC,eAAA,GAAkB,KAAKC,SAAA,CAAUhkE,IAAA,EAAM0jE,mBAAmB;MAChE,KAAKO,QAAA,CAASjkE,IAAI;MAElB,MAAMk8C,SAAA,GAAY,KAAKgoB,cAAA,CAAe;MAEtC,KAAKP,cAAA,GAAiBl0E,OAAA,CAAQ2N,GAAA,CAAI,CAAC2mE,eAAA,EAAiB7nB,SAAS,CAAC,EAAEh/D,IAAA,CAC7DnK,MAAA,IAAWA,MAAA,CAAO,CAAC;MAAA;MACtB;MAEA,IAAI;QACF,OAAO,MAAM,KAAK4wF,cAAA;MACpB,SAASzyE,GAAA,EAAK;QACZ,IAAI,KAAKizE,8BAAA,EAAgC;UAEvC,KAAKC,eAAA,CAAgB;QACvB,OAAO;UACL,KAAKC,cAAA,CAAe;QACtB;QACA,MAAMnzE,GAAA;MACR;IACF;IAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAozE,OAAA,GAAU,KAAKb,WAAA;IAEf,KAAAO,SAAA,GAAY,CAAChkE,IAAA,EAAoB0jE,mBAAA,KAC/B,KAAK3c,YAAA,CAAayG,kBAAA,CAAmBkW,mBAAA,EAAqB1jE,IAAI;IA0BhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAokE,eAAA,GAAkB,MAAOh+E,OAAA,IAAqB;MAC5C,IAAI,KAAKm+E,mBAAA,IAAuB,MAAM;QACpCtZ,aAAA,CAAc,KAAKsZ,mBAAmB;QACtC,KAAKA,mBAAA,GAAsB;MAC7B;MAEA,MAAM90E,OAAA,CAAQ2N,GAAA,CAAI,CAChB,KAAK0iD,YAAA,EAAckL,UAAA,CAAW5kE,OAAO,GACrC,KAAKm9E,UAAA,EAAYvY,UAAA,CAAW5kE,OAAO,EACpC;MAED,KAAK2wD,SAAA,EAAWC,kBAAA,CACd,MAAOC,EAAA,IAAO;QACZ,IAAI,KAAKtkC,MAAA,EAAQ;UACf,MAAMskC,EAAA,CAAGutB,oBAAA,CAAqB;YAC5BnxD,MAAA,EAAQ,KAAKV,MAAA;YACb8xD,YAAA,GAAc,mBAAIn5E,IAAA,CAAK,GAAEnX,QAAA,CAAS;UACpC,CAAC;QACH;MACF,GACA;QAAEwS,MAAA,EAAQ;MAAuB,CACnC;MAEA,OAAO8I,OAAA,CAAQ/E,OAAA,CAAQ;IACzB;IAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAg6E,oBAAA,GAAuB,CAAC;MACtB/J,qBAAA,GAAwB,CAAC;MACzBxnF,OAAA,GAAU,CAAC;IACb,MAGM,IAAIunF,cAAA,CAAe;MAAE3oF,MAAA,EAAQ;MAAM4oF,qBAAA;MAAuBxnF;IAAQ,CAAC;IAKzE;AAAA;AAAA;IAAA,KAAA+wF,cAAA,GAAiB,MAAM;MACrB,IAAI,CAAC,KAAKvxD,MAAA,EAAQ;QAChB,MAAMxkC,KAAA,CACJ,0FACF;MACF;MAEA,IAAI,KAAK2xE,YAAA,EAAc2J,YAAA,IAAgB,KAAKvN,SAAA,EAAW;QACrD,KAAKvwC,MAAA,CAAO,QAAQ,4DAA4D;UAC9E0tC,IAAA,EAAM,CAAC,cAAc,QAAQ;QAC/B,CAAC;QACD,OAAO,KAAK6C,SAAA;MACd;MAEA,KACG,KAAK4D,YAAA,EAAcC,SAAA,IAAa,KAAKwjB,UAAA,EAAYxjB,SAAA,CAAU,MAC5D,KAAKO,gBAAA,CAAiB,GACtB;QACA,KAAK30C,MAAA,CACH,QACA,4FACA;UACE0tC,IAAA,EAAM,CAAC,cAAc,QAAQ;QAC/B,CACF;QAEA;MACF;MAEA,KAAK6Q,QAAA,GAAW,GAAG,KAAKv3C,MAAM,KAAK7P,QAAA,CAAS,CAAC;MAC7C,KAAKo5C,SAAA,GAAY,KAAKuO,OAAA,CAAQ;MAC9B,KAAKka,cAAA,CAAe;MACpB,OAAO,KAAKzoB,SAAA;IACd;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA0oB,gBAAA,GAAmB,KAAKV,cAAA;IA2DxB,KAAAW,cAAA,GAAkB3pC,MAAA,IAAgD;MAChE,IAAIA,MAAA,YAAkB5vC,IAAA,EAAM;QAC1B4vC,MAAA,GAASA,MAAA,CAAO96C,WAAA,CAAY;MAC9B;MAEA,IAAI86C,MAAA,KAAW,IAAI;QACjB,MAAM,IAAI/sD,KAAA,CACR,mFACF;MACF;MAEA,OAAO+sD,MAAA;IACT;IAiHA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAmpC,cAAA,GAAkBj+E,OAAA,IAAqB;MACrC,KAAKulB,MAAA,CAAO,QAAQ,kDAAkD;QACpE0tC,IAAA,EAAM,CAAC,cAAc,QAAQ;MAC/B,CAAC;MAGD,OAAO,KAAKr5C,IAAA;MACZ,OAAO,KAAKinD,KAAA;MACZ,OAAO,KAAKt0C,MAAA;MAEZ,KAAKmxD,SAAA,GAAY;MAEjB,MAAMgB,YAAA,GAAe,KAAKV,eAAA,CAAgBh+E,OAAO;MAEjD,WAAW0lB,OAAA,IAAW13B,MAAA,CAAOsxC,MAAA,CAAO,KAAK4hB,cAAc,GAAG;QACxDx7B,OAAA,CAAQk5C,WAAA,CAAY;MACtB;MAEA,KAAK1d,cAAA,GAAiB,CAAC;MAEvB,KAAK5zC,KAAA,GAAQ,IAAIuxD,WAAA,CAAY;QAAElzE,MAAA,EAAQ;MAAK,CAAC;MAE7C,KAAKs9B,OAAA,CAAQs1B,UAAA,CAAW;MAExBpzC,UAAA,CAAW,KAAKw1D,YAAA,CAAa6G,KAAK;MAGlC,OAAOkX,YAAA;IACT;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA9Z,UAAA,GAAa,KAAKqZ,cAAA;IAKlB;AAAA;AAAA;IAAA,KAAAU,oBAAA,GAAuB,MAAM;MAC3B,KACG,KAAK3kB,kBAAA,CAAmB,KAAK,KAAKwjB,IAAA,KACnC,CAAC,KAAKzwF,OAAA,CAAQ0wF,sBAAA,EACd;QACA9tE,OAAA,CAAQC,IAAA,CACN,wOACF;MACF;MAEA,KAAK8tE,SAAA,GAAY;MACjB,KAAKnxD,MAAA,GAAS7P,QAAA,CAAS;MACvB,MAAMkiE,aAAA,GAAgB;QACpBhzF,EAAA,EAAI,KAAK2gC,MAAA;QACTm7C,IAAA,EAAM;MACR;MAEA,KAAKkW,SAAA,CAAUgB,aAAA,EAAe,EAAE;MAChC,KAAKf,QAAA,CAASe,aAAa;MAE3B,OAAO,KAAKJ,gBAAA,CAAiB;IAC/B;IAKA;AAAA;AAAA;IAAA,KAAAK,gBAAA,GAAmB,KAAKF,oBAAA;IAuJxB,KAAApW,cAAA,GAAiB,OACf55E,IAAA,EACA6M,GAAA,EACA/Q,IAAA,EACAsC,OAAA,GAEI,CAAC,MACU;MACf,MAAM,KAAK4zE,YAAA,CAAayE,UAAA,CAAW;MACnC,MAAM0Z,aAAA,GAAgB,KAAKC,mBAAA,CAAoBhyF,OAAO;MACtD,IAAI;QACF,IAAIuK,QAAA;QACJ,KAAK0nF,cAAA,CAAerwF,IAAA,EAAM6M,GAAA,EAAK/Q,IAAA,EAAMq0F,aAAa;QAClD,QAAQnwF,IAAA;UACN,KAAK;YACH2I,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAc1xF,GAAA,CAAIiO,GAAA,EAAKsjF,aAAa;YAC1D;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAc9xF,MAAA,CAAOqO,GAAA,EAAKsjF,aAAa;YAC7D;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAchqB,IAAA,CAAKz5D,GAAA,EAAK/Q,IAAA,EAAMq0F,aAAa;YACjE;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAcC,QAAA,CAAS1jF,GAAA,EAAK/Q,IAAA,EAAMq0F,aAAa;YACrE;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAcE,GAAA,CAAI3jF,GAAA,EAAK/Q,IAAA,EAAMq0F,aAAa;YAChE;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAc9oB,KAAA,CAAM36D,GAAA,EAAK/Q,IAAA,EAAMq0F,aAAa;YAClE;UACF,KAAK;YACHxnF,QAAA,GAAW,MAAM,KAAK2nF,aAAA,CAAclyF,OAAA,CAAQyO,GAAA,EAAKsjF,aAAa;YAC9D;UACF;YACE,MAAM,IAAI/2F,KAAA,CAAM,sBAAsB;QAC1C;QACA,KAAKq3F,eAAA,CAAmBzwF,IAAA,EAAM6M,GAAA,EAAKlE,QAAQ;QAC3C,KAAK6rE,mBAAA,GAAsB;QAC3B,OAAO,KAAKkc,cAAA,CAAe/nF,QAAQ;MAErC,SAASzM,CAAA,EAA4C;QACnDA,CAAA,CAAEy0F,iBAAA,GAAoBR,aAAA,CAAc//E,OAAA,GAAU,qBAAqB;QACnE,KAAKwgF,YAAA,CAAa5wF,IAAA,EAAM6M,GAAA,EAAK3Q,CAAC;QAC9B,KAAKs4E,mBAAA,IAAuB;QAC5B,IAAIt4E,CAAA,CAAEyM,QAAA,EAAU;UAEd,IACEzM,CAAA,CAAEyM,QAAA,CAAS7M,IAAA,CAAKlD,IAAA,KAAS6yB,SAAA,CAAUC,aAAA,IACnC,CAAC,KAAKsmD,YAAA,CAAa6D,QAAA,CAAS,GAC5B;YACA,IAAI,KAAKrB,mBAAA,GAAsB,GAAG;cAChC,MAAMlpD,KAAA,CAAMsC,aAAA,CAAc,KAAK4mD,mBAAmB,CAAC;YACrD;YACA,KAAKxC,YAAA,CAAa0E,SAAA,CAAU;YAC5B,OAAO,MAAM,KAAKkD,cAAA,CAAkB55E,IAAA,EAAM6M,GAAA,EAAK/Q,IAAA,EAAMsC,OAAO;UAC9D;UACA,OAAO,KAAKsyF,cAAA,CAAex0F,CAAA,CAAEyM,QAAQ;QACvC,OAAO;UACL,MAAMzM,CAAA;QACR;MACF;IACF;IA+DA,KAAAikC,aAAA,GAAiB7lB,KAAA,IAAiB;MAChC,IAAI,CAACA,KAAA,CAAM4lB,WAAA,EAAa5lB,KAAA,CAAM4lB,WAAA,GAAc,mBAAI3pB,IAAA,CAAK;MAGrD,MAAMs6E,qBAAA,GAAwB,KAAKC,kBAAA,CAAmBx2E,KAAK;MAG3D,MAAM6c,GAAA,GAAM7c,KAAA,CAAM6c,GAAA;MAClB,MAAMJ,OAAA,GAAUI,GAAA,GAAM,KAAKo7B,cAAA,CAAep7B,GAAG,IAAI;MACjD,IAAIJ,OAAA,EAAS;QACXA,OAAA,CAAQw3C,mBAAA,CAAoBj0D,KAAK;MACnC;MAEA,KAAKy2E,oBAAA,CAAqBz2E,KAAK;MAE/B,IAAIyc,OAAA,EAAS;QACXA,OAAA,CAAQ0uC,qBAAA,CAAsBnrD,KAAK;MACrC;MAEAu2E,qBAAA,CAAsB5uF,OAAA,CAASzF,CAAA,IAAMA,CAAA,CAAE,CAAC;MAExC,KAAKwlE,SAAA,EAAWC,kBAAA,CAAoBC,EAAA,IAAOA,EAAA,CAAGkS,WAAA,CAAY;QAAE95D;MAAM,CAAC,GAAG;QACpE1I,MAAA,EAAQ,eAAe0I,KAAA,CAAMta,IAAI;MACnC,CAAC;IACH;IAEA,KAAAo0E,WAAA,GAAe4c,YAAA,IAAyC;MAEtD,MAAMC,UAAA,GAAaD,YAAA,CAAal1F,IAAA;MAChC,MAAMwe,KAAA,GAAQ/O,IAAA,CAAKwE,KAAA,CAAMkhF,UAAU;MACnC,KAAK9wD,aAAA,CAAc7lB,KAAK;IAC1B;IAOA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA42E,8BAAA,GAAkCjmE,IAAA,IAAuB;MACvD,MAAMkmE,MAAA,GAAS,KAAKxyE,KAAA,CAAMwxD,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,KAAK,CAAC;MAC7D,WAAWqzE,SAAA,IAAa6gB,MAAA,EAAQ;QAC9B,MAAMp6D,OAAA,GAAU,KAAKw7B,cAAA,CAAe+d,SAAS;QAC7C,IAAIv5C,OAAA,EAASpY,KAAA,EAAO;UAClB,IAAIoY,OAAA,CAAQpY,KAAA,CAAMqY,OAAA,CAAQ/L,IAAA,CAAKhuB,EAAE,GAAG;YAClC85B,OAAA,CAAQpY,KAAA,CAAMqY,OAAA,CAAQ/L,IAAA,CAAKhuB,EAAE,EAAEguB,IAAA,GAAOA,IAAA;UACxC;UACA,IAAI8L,OAAA,CAAQpY,KAAA,CAAMyc,QAAA,CAASnQ,IAAA,CAAKhuB,EAAE,GAAG;YACnC85B,OAAA,CAAQpY,KAAA,CAAMyc,QAAA,CAASnQ,IAAA,CAAKhuB,EAAE,IAAIguB,IAAA;UACpC;UACA,IAAI8L,OAAA,CAAQpY,KAAA,CAAMlI,IAAA,CAAKwU,IAAA,CAAKhuB,EAAE,GAAG;YAC/B85B,OAAA,CAAQpY,KAAA,CAAMlI,IAAA,CAAKwU,IAAA,CAAKhuB,EAAE,EAAEguB,IAAA,GAAOA,IAAA;UACrC;QACF;MACF;IACF;IAMA;AAAA;AAAA;AAAA;IAAA,KAAAmmE,qBAAA,GAAwB,KAAKF,8BAAA;IAU7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAG,4BAAA,GAAgCpmE,IAAA,IAAuB;MACrD,MAAMkmE,MAAA,GAAS,KAAKxyE,KAAA,CAAMwxD,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,KAAK,CAAC;MAE7D,WAAWqzE,SAAA,IAAa6gB,MAAA,EAAQ;QAC9B,MAAMp6D,OAAA,GAAU,KAAKw7B,cAAA,CAAe+d,SAAS;QAE7C,IAAI,CAACv5C,OAAA,EAAS;QAEd,MAAMpY,KAAA,GAAQoY,OAAA,CAAQpY,KAAA;QAGtBA,KAAA,EAAOub,kBAAA,CAAmBjP,IAAI;MAChC;IACF;IAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAqmE,2BAAA,GAA8B,CAACrmE,IAAA,EAAoBwP,UAAA,GAAa,UAAU;MACxE,MAAM02D,MAAA,GAAS,KAAKxyE,KAAA,CAAMwxD,qBAAA,CAAsBllD,IAAA,CAAKhuB,EAAE,KAAK,CAAC;MAE7D,WAAWqzE,SAAA,IAAa6gB,MAAA,EAAQ;QAC9B,MAAMp6D,OAAA,GAAU,KAAKw7B,cAAA,CAAe+d,SAAS;QAC7C,IAAIv5C,OAAA,EAAS;UACX,MAAMpY,KAAA,GAAQoY,OAAA,CAAQpY,KAAA;UAGtBA,KAAA,EAAO6b,kBAAA,CAAmBvP,IAAA,EAAMwP,UAAU;QAC5C;MACF;IACF;IAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA82D,gBAAA,GAAoBj3E,KAAA,IAAiB;MACnC,IAAI,CAACA,KAAA,CAAM2Q,IAAA,EAAM;QACf;MACF;MAGA,IAAI3Q,KAAA,CAAMta,IAAA,KAAS,2BAA2Bsa,KAAA,CAAMta,IAAA,KAAS,gBAAgB;QAC3E,IAAIsa,KAAA,CAAM2Q,IAAA,CAAKhuB,EAAA,KAAO,KAAK2gC,MAAA,EAAQ;UACjC,MAAM3S,IAAA,GAAO;YAAE,GAAG,KAAKA;UAAK;UAC5B,MAAMinD,KAAA,GAAQ;YAAE,GAAG,KAAKA;UAAM;UAG9B,WAAW5vE,GAAA,IAAO,KAAK2oB,IAAA,EAAM;YAC3B,IAAI3oB,GAAA,IAAOgY,KAAA,CAAM2Q,IAAA,IAAQqB,qBAAA,CAAsBhqB,GAAG,GAAG;cACnD;YACF;YAEA,MAAMkvF,SAAA,GAAYlvF,GAAA;YAElB,OAAO2oB,IAAA,CAAKumE,SAAS;YACrB,OAAOtf,KAAA,CAAMsf,SAAS;UACxB;UAGA,WAAWlvF,GAAA,IAAO4vE,KAAA,EAAO;YACvB,MAAMuf,SAAA,GAAYnvF,GAAA;YAElB,IAAImvF,SAAA,IAAan3E,KAAA,CAAM2Q,IAAA,EAAM;cAE3BinD,KAAA,CAAMuf,SAAS,IAAIn3E,KAAA,CAAM2Q,IAAA,CAAKwmE,SAAS;YACzC;UACF;UAEA,KAAKvf,KAAA,GAAQA,KAAA;UACb,KAAKjnD,IAAA,GAAO;YAAE,GAAGA,IAAA;YAAM,GAAG3Q,KAAA,CAAM2Q;UAAK;QACvC;QAEA,KAAKtM,KAAA,CAAM0xD,UAAA,CAAW/1D,KAAA,CAAM2Q,IAAI;QAChC,KAAKimE,8BAAA,CAA+B52E,KAAA,CAAM2Q,IAAI;MAChD;MAEA,IAAI3Q,KAAA,CAAMta,IAAA,KAAS,gBAAgB;QACjC,KAAKqxF,4BAAA,CAA6B/2E,KAAA,CAAM2Q,IAAI;MAC9C;MAEA,IACE3Q,KAAA,CAAMta,IAAA,KAAS,kBACfsa,KAAA,CAAM2Q,IAAA,CAAKb,UAAA,KACV9P,KAAA,CAAMo3E,qBAAA,IAAyBp3E,KAAA,CAAMokD,WAAA,GACtC;QACA,KAAK4yB,2BAAA,CAA4Bh3E,KAAA,CAAM2Q,IAAA,EAAM3Q,KAAA,CAAMokD,WAAW;MAChE;IACF;IAiGA,KAAAqyB,oBAAA,GAAwBz2E,KAAA,IAAiB;MAEvC,MAAMtd,MAAA,GAAS;MAEf,MAAM0oE,SAAA,GAA2C,EAAC;MAClD,IAAI1oE,MAAA,CAAO0oE,SAAA,CAAUr9C,GAAA,EAAK;QACxBq9C,SAAA,CAAUrrE,IAAA,CAAK,GAAG2C,MAAA,CAAO0oE,SAAA,CAAUr9C,GAAG;MACxC;MACA,IAAIrrB,MAAA,CAAO0oE,SAAA,CAAUprD,KAAA,CAAMta,IAAI,GAAG;QAChC0lE,SAAA,CAAUrrE,IAAA,CAAK,GAAG2C,MAAA,CAAO0oE,SAAA,CAAUprD,KAAA,CAAMta,IAAI,CAAC;MAChD;MAGA,WAAW0Z,QAAA,IAAYgsD,SAAA,EAAW;QAChChsD,QAAA,CAASY,KAAK;MAChB;IACF;IAEA,KAAAy8D,YAAA,GAAe,YAAY;MACzB,KAAKngD,MAAA,CACH,QACA,mEAAmE,KAAK23D,gBAAA,CAAiB,CAAC,IAC1F;QACEjqB,IAAA,EAAM,CAAC,YAAY;MACrB,CACF;MAEA,MAAMhS,IAAA,GAAOjzD,MAAA,CAAO+C,IAAA,CAAK,KAAKmwD,cAAc;MAC5C,IAAID,IAAA,CAAKv5D,MAAA,IAAU,KAAK44F,uBAAA,EAAyB;QAC/C,KAAK/6D,MAAA,CACH,QACA,iDAAiD07B,IAAA,CAAKv5D,MAAM,aAC5D;UACEurE,IAAA,EAAM,CAAC,cAAc,QAAQ;QAC/B,CACF;QAEA,MAAM,KAAKvS,aAAA,CACT;UAAE56B,GAAA,EAAK;YAAE26B,GAAA,EAAKQ;UAAK;QAAE,GACrB;UAAEh3B,eAAA,EAAiB;QAAG,GACtB;UAAEkF,KAAA,EAAO;QAAG,CACd;QAEA,KAAK5J,MAAA,CAAO,QAAQ,sDAAsD;UACxE0tC,IAAA,EAAM,CAAC,cAAc,QAAQ;QAC/B,CAAC;QACD,KAAKnkC,aAAA,CAAc;UACjBngC,IAAA,EAAM;QACR,CAAU;MACZ,OAAO;QACL,KAAKmgC,aAAA,CAAc;UACjBngC,IAAA,EAAM;QACR,CAAU;MACZ;MAEA,KAAKmnE,SAAA,GAAYzsD,OAAA,CAAQ/E,OAAA,CAAQ;MACjC,KAAKi5E,cAAA,GAAiBl0E,OAAA,CAAQ/E,OAAA,CAAQ;IACxC;IA6lBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAi8E,mBAAA,GAAsB,CAACr6D,WAAA,EAAqB4pB,MAAA,KAAwB;MAGlE,MAAM0wC,SAAA,IAAa1wC,MAAA,CAAOnqB,OAAA,IAAW,EAAC,EAAGz7B,GAAA,CAAKm8B,MAAA,IAC5C,OAAOA,MAAA,KAAW,WAAWA,MAAA,GAAUA,MAAA,CAAOmG,OAAA,IAAW,EAC3D;MACA,MAAMrG,UAAA,GAAaq6D,SAAA,CAAUvkE,IAAA,CAAK,EAAEhzB,IAAA,CAAK,GAAG;MAC5C,MAAMw3F,OAAA,GAAU16D,sBAAA,CAAuBG,WAAA,EAAas6D,SAAS;MAE7D,IAAI,CAACC,OAAA,EAAS;QACZ,MAAM14F,KAAA,CAAM,qEAAqE;MACnF;MAOA,WAAWkJ,GAAA,IAAO,KAAKiwD,cAAA,EAAgB;QACrC,MAAMw/B,QAAA,GAAU,KAAKx/B,cAAA,CAAejwD,GAAG;QACvC,IAAIyvF,QAAA,CAAQ5rB,YAAA,EAAc;UACxB;QACF;QAEA,IAAI7jE,GAAA,KAAQwvF,OAAA,EAAS;UACnB,OAAOC,QAAA;QACT;QAEA,IAAIzvF,GAAA,CAAIhJ,OAAA,CAAQ,GAAGi+B,WAAW,YAAY,MAAM,GAAG;UACjD,MAAMy6D,2BAAA,GAA8B3yF,MAAA,CAAO+C,IAAA,CAAK2vF,QAAA,CAAQpzE,KAAA,CAAMqY,OAAO,EAClE1J,IAAA,CAAK,EACLhzB,IAAA,CAAK,GAAG;UACX,IAAI03F,2BAAA,KAAgCx6D,UAAA,EAAY;YAC9C,OAAOu6D,QAAA;UACT;QACF;MACF;MAEA,MAAMh7D,OAAA,GAAU,IAAI6tC,OAAA,CAAQ,MAAMrtC,WAAA,EAAa,QAAW4pB,MAAM;MAIhE,IAAI,KAAKwrB,aAAA,CAAc,GAAG;QACxB,KAAKpa,cAAA,CAAeu/B,OAAO,IAAI/6D,OAAA;MACjC;MAEA,OAAOA,OAAA;IACT;IAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAk7D,cAAA,GAAiB,CAAC16D,WAAA,EAAqB+4C,SAAA,EAAmBnvB,MAAA,KAAwB;MAChF,IAAI,OAAOmvB,SAAA,KAAc,YAAY,CAACA,SAAA,CAAUh3E,OAAA,CAAQ,GAAG,GAAG;QAC5D,MAAMF,KAAA,CAAM,sBAAsBk3E,SAAS,iCAAiC;MAC9E;MAGA,MAAMn5C,GAAA,GAAM,GAAGI,WAAW,IAAI+4C,SAAS;MACvC,IACEn5C,GAAA,IAAO,KAAKo7B,cAAA,IACZ,KAAKA,cAAA,CAAep7B,GAAG,KACvB,CAAC,KAAKo7B,cAAA,CAAep7B,GAAG,EAAEgvC,YAAA,EAC1B;QACA,MAAM4rB,QAAA,GAAU,KAAKx/B,cAAA,CAAep7B,GAAG;QACvC,IAAI93B,MAAA,CAAO+C,IAAA,CAAK++C,MAAM,EAAEpoD,MAAA,GAAS,GAAG;UAClCg5F,QAAA,CAAQj2F,IAAA,GAAO;YAAE,GAAGi2F,QAAA,CAAQj2F,IAAA;YAAM,GAAGqlD;UAAO;UAC5C4wC,QAAA,CAAQhsB,KAAA,GAAQ;YAAE,GAAGgsB,QAAA,CAAQhsB,KAAA;YAAO,GAAG5kB;UAAO;QAChD;QACA,OAAO4wC,QAAA;MACT;MACA,MAAMh7D,OAAA,GAAU,IAAI6tC,OAAA,CAAQ,MAAMrtC,WAAA,EAAa+4C,SAAA,EAAWnvB,MAAM;MAChE,IAAI,KAAKwrB,aAAA,CAAc,GAAG;QACxB,KAAKpa,cAAA,CAAex7B,OAAA,CAAQI,GAAG,IAAIJ,OAAA;MACrC;MAEA,OAAOA,OAAA;IACT;IA6CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAq5C,WAAA,GAAc,KAAK8hB,WAAA;IAqBnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAA7hB,UAAA,GAAa,KAAK8hB,UAAA;IAgYlB;IAAA,KAAAC,eAAA,GAAkB,KAAKC,cAAA;IAUvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAC,WAAA,GAAc,KAAKC,gBAAA;IA+fnB;AAAA;AAAA;IAAA,KAAAlnB,kBAAA,GAAqB,MAAM,CAAC,CAAC,KAAK8M,MAAA;IAElC,KAAAxL,aAAA,GAAgB,MAAM,CAAC,KAAKtB,kBAAA,CAAmB,KAAK,CAAC,KAAKjtE,OAAA,CAAQo0F,YAAA;IA4ElE;AAAA;AAAA;AAAA;AAAA;IAAA,KAAArf,eAAA,GAAmBwd,iBAAA,IACjBplF,IAAA,CAAKC,SAAA,CAAU;MACbqyB,OAAA,EAAS,KAAKD,MAAA;MACdq0C,YAAA,EAAc,KAAKC,KAAA;MACnBC,MAAA,EAAQ,KAAK/zE,OAAA,CAAQ+zE,MAAA;MACrBwe;IACF,CAAC;IAz8FD,KAAKruF,GAAA,GAAMA,GAAA;IACX,KAAKojE,SAAA,GAAY,CAAC;IAClB,KAAK/mD,KAAA,GAAQ,IAAIuxD,WAAA,CAAY;MAAElzE,MAAA,EAAQ;IAAK,CAAC;IAE7C,KAAKy1F,aAAA,GAAgB,EAAC;IACtB,KAAKt3D,UAAA,GAAa,EAAC;IAEnB,KAAKu3D,UAAA,GAAa,IAAIxX,UAAA,CAAW,IAAI;IAErC,KAAK5sC,aAAA,GAAgBlwC,OAAA,EAASkwC,aAAA,IAAiB,IAAI06C,mBAAA,CAAoB;IAGvE,IAAIqF,eAAA,IAAmBH,SAAA,CAASG,eAAe,GAAG;MAChD,KAAKlW,MAAA,GAASkW,eAAA;IAChB;IAGA,MAAMsE,YAAA,GAAev0F,OAAA,GACjBA,OAAA,GACAiwF,eAAA,IAAmB,CAACH,SAAA,CAASG,eAAe,IAC1CA,eAAA,GACA,CAAC;IAEP,KAAKuE,OAAA,GACH,OAAOD,YAAA,CAAaC,OAAA,KAAY,cAC5BD,YAAA,CAAaC,OAAA,GACb,OAAO53F,MAAA,KAAW;IACxB,KAAK6zF,IAAA,GAAO,CAAC,KAAK+D,OAAA;IAElB,KAAKx0F,OAAA,GAAU;MACbiT,OAAA,EAAS;MACTgM,eAAA,EAAiB;MAAA;MACjBw1E,MAAA,EAAQ;MACRlB,uBAAA,EAAyB;MACzBa,YAAA,EAAc;MACdnf,WAAA,EAAa,IAAIllE,eAAA,CAAgB,CAAC,CAAC;MACnC,GAAGwkF;IACL;IAEA,IAAI,KAAK9D,IAAA,IAAQ,CAAC,KAAKzwF,OAAA,CAAQ4hB,UAAA,EAAY;MACzC,KAAK5hB,OAAA,CAAQ4hB,UAAA,GAAa,IAAIuJ,YAAA,CAAAf,OAAA,CAAMsqE,KAAA,CAAM;QACxCC,SAAA,EAAW;QACXC,cAAA,EAAgB;MAClB,CAAC;IACH;IAEA,KAAK1C,aAAA,GAAgB7nE,aAAA,CAAMvrB,MAAA,CAAO,KAAKkB,OAAO;IAE9C,KAAK60F,UAAA,CAAW,KAAK70F,OAAA,CAAQ6Y,OAAA,IAAW,gCAAgC;IAExE,IACE,OAAOi8E,OAAA,KAAY,eACnB,SAASA,OAAA,IACTA,OAAA,CAAQpiF,GAAA,CAAIqiF,qBAAA,EACZ;MACA,KAAKF,UAAA,CAAW,uBAAuB;IACzC;IAEA,IACE,OAAOC,OAAA,KAAY,eACnB,SAASA,OAAA,IACTA,OAAA,CAAQpiF,GAAA,CAAIsiF,sBAAA,EACZ;MACA,KAAKH,UAAA,CAAW,YAAYC,OAAA,CAAQpiF,GAAA,CAAIsiF,sBAAsB;IAChE;IAGA,KAAKroB,YAAA,GAAe;IACpB,KAAK5D,SAAA,GAAY;IACjB,KAAKynB,cAAA,GAAiB;IAEtB,KAAKr8B,cAAA,GAAiB,CAAC;IAGvB,KAAK6T,OAAA,GAAU,CAAC;IAChB,KAAK2oB,SAAA,GAAY;IACjB,KAAKK,8BAAA,GAAiC,KAAKhxF,OAAA,EAASgxF,8BAAA;IAIpD,KAAKpd,YAAA,GAAe,IAAIwG,YAAA,CAAa,KAAKL,MAAM;IAChD,KAAK3D,mBAAA,GAAsB;IAC3B,KAAK5C,cAAA,GAAiB,IAAIhB,cAAA,CAAe;IAEzC,KAAKyiB,4BAAA,GAA+B,IAAI;IACxC,KAAKC,gBAAA,GAAmB,KAAK;IAE7B,KAAKhD,aAAA,CAActgF,QAAA,CAAS0L,gBAAA,GAAmB0T,qBAAA;IAkD/C,KAAKwH,MAAA,GAASrL,WAAA,CAAWonE,YAAA,CAAa/7D,MAAM,IAAI+7D,YAAA,CAAa/7D,MAAA,GAAS,MAAM;IAC5E,KAAK+6D,uBAAA,GAA0B,KAAKvzF,OAAA,CAAQuzF,uBAAA;IAC5C,KAAKr3D,OAAA,GAAU,IAAI2jD,aAAA,CAAc;MAAEjhF,MAAA,EAAQ;IAAK,CAAC;IACjD,KAAK2nE,KAAA,GAAQ,IAAIyf,WAAA,CAAY;MAAEpnF,MAAA,EAAQ;IAAK,CAAC;IAC7C,KAAK+vE,SAAA,GAAY,IAAIkhB,eAAA,CAAgB;MAAEjxF,MAAA,EAAQ;IAAK,CAAC;EACvD;EA8BA,OAAcu2F,YACZjxF,GAAA,EACA+rF,eAAA,EACAjwF,OAAA,EACY;IACZ,IAAI,CAACgwF,WAAA,CAAWoF,SAAA,EAAW;MACzB,IAAI,OAAOnF,eAAA,KAAoB,UAAU;QACvCD,WAAA,CAAWoF,SAAA,GAAY,IAAIpF,WAAA,CAAW9rF,GAAA,EAAK+rF,eAAA,EAAiBjwF,OAAO;MACrE,OAAO;QACLgwF,WAAA,CAAWoF,SAAA,GAAY,IAAIpF,WAAA,CAAW9rF,GAAA,EAAK+rF,eAAe;MAC5D;IACF;IAEA,OAAOD,WAAA,CAAWoF,SAAA;EACpB;EAEAC,gBAAgBC,iBAAA,EAAsC;IACpD,IAAI,KAAK1xB,SAAA,EAAW;MAClB;IACF;IAEA,KAAKA,SAAA,GAAY0xB,iBAAA;EACnB;EAEAC,SAAS/1D,MAAA,EAAgB;IACvB,OAAOq6C,QAAA,CAASr6C,MAAM;EACxB;EAEAm0C,YAAA,EAAc;IACZ,OAAO,KAAKgd,SAAA,GAAY,cAAc;EACxC;EAEAkE,WAAWh8E,OAAA,EAAiB;IAC1B,KAAKA,OAAA,GAAUA,OAAA;IACf,KAAKs8D,SAAA,GAAY,KAAKt8D,OAAA,CAAQjV,OAAA,CAAQ,QAAQ,IAAI,EAAEA,OAAA,CAAQ,SAAS,OAAO;EAC9E;EAgGAktF,SAASjkE,IAAA,EAAsC;IAK7C,KAAKA,IAAA,GAAOA,IAAA;IACZ,KAAK2S,MAAA,GAAS3S,IAAA,CAAKhuB,EAAA;IAEnB,KAAKi1E,KAAA,GAAQ;MAAE,GAAGjnD;IAAK;EACzB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAkJA,MAAM2oE,kBAAkBx1F,OAAA,EAAsB;IAC5C,MAAMy1F,UAAA,GAAaz1F,OAAA,CAAQy1F,UAAA;IAC3B,IAAIA,UAAA,EAAYC,QAAA,EAAU;MACxB11F,OAAA,GAAU;QACR,GAAGA,OAAA;QACHy1F,UAAA,EAAY;UACV,GAAGA,UAAA;UACHC,QAAA,EAAUxoF,MAAA,CAAOlC,IAAA,CAAKyqF,UAAA,CAAWC,QAAQ,EAAE10F,QAAA,CAAS,QAAQ;QAC9D;MACF;IACF;IACA,OAAO,MAAM,KAAKooE,KAAA,CAAmB,KAAKvwD,OAAA,GAAU,QAAQ7Y,OAAO;EACrE;EAAA;AAAA;AAAA;EAmBA,MAAM21F,aAAa5tC,MAAA,EAA8B;IAC/C,OAAO,MAAM,KAAKytC,iBAAA,CAAkB;MAClCI,2BAAA,EAA6B,KAAKlE,cAAA,CAAe3pC,MAAM;IACzD,CAAC;EACH;EAAA;AAAA;AAAA;EAKA,MAAM8tC,gBAAgBr2D,MAAA,EAAgBuoB,MAAA,EAA+B;IACnE,OAAO,MAAM,KAAK+tC,gBAAA,CAAiB,CAACt2D,MAAM,GAAGuoB,MAAM;EACrD;EAAA;AAAA;AAAA;EAKA,MAAM+tC,iBAAiBC,OAAA,EAAmBhuC,MAAA,EAA+B;IACvE,IAAIA,MAAA,KAAW,QAAW;MACxBA,MAAA,IAAS,mBAAI5vC,IAAA,CAAK,GAAElL,WAAA,CAAY;IAClC,OAAO;MACL86C,MAAA,GAAS,KAAK2pC,cAAA,CAAe3pC,MAAM;IACrC;IAEA,MAAMwL,KAAA,GAA6B,EAAC;IACpC,WAAW/zB,MAAA,IAAUu2D,OAAA,EAAS;MAC5BxiC,KAAA,CAAMt3D,IAAA,CAAK;QACT4C,EAAA,EAAI2gC,MAAA;QACJr3B,GAAA,EAA4B;UAC1BytF,2BAAA,EAA6B7tC;QAC/B;MACF,CAAC;IACH;IAEA,OAAO,MAAM,KAAKiuC,kBAAA,CAAmBziC,KAAK;EAC5C;EAAA;AAAA;AAAA;EAKA,MAAM9kB,eAAA,EAAiB;IACrB,KAAKD,kBAAA,GAAqB,KAAKhuC,GAAA,CAA4B,KAAKqY,OAAA,GAAU,MAAM;IAChF,OAAO,MAAM,KAAK21B,kBAAA;EACpB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAiBA,MAAMynD,iBAAiBz2D,MAAA,EAAgB9hC,IAAA,GAA0B,CAAC,GAAG;IACnE,OAAO,MAAM,KAAKwqE,IAAA,CAAwB,KAAKrvD,OAAA,GAAU,eAAe;MACtE4mB,OAAA,EAASD,MAAA;MACT,IAAI9hC,IAAA,CAAK6rE,SAAA,GAAY;QAAErqC,UAAA,EAAYxhC,IAAA,CAAK6rE;MAAU,IAAI,CAAC;MACvD,IAAI7rE,IAAA,CAAKw4F,WAAA,GAAc;QAAEC,YAAA,EAAcz4F,IAAA,CAAKw4F;MAAY,IAAI,CAAC;MAC7D,IAAIx4F,IAAA,CAAK04F,gBAAA,GAAmB;QAAEC,iBAAA,EAAmB34F,IAAA,CAAK04F;MAAiB,IAAI,CAAC;MAC5E,IAAI14F,IAAA,CAAK44F,oBAAA,GACL;QAAEC,sBAAA,EAAwB74F,IAAA,CAAK44F;MAAqB,IACpD,CAAC;MACL,IAAI54F,IAAA,CAAK84F,WAAA,GAAc;QAAEC,YAAA,EAAc;MAAK,IAAI,CAAC;MACjD,IAAI/4F,IAAA,CAAKg5F,gBAAA,GAAmB;QAAEC,kBAAA,EAAoBj5F,IAAA,CAAKg5F;MAAiB,IAAI,CAAC;MAC7E,IAAIh5F,IAAA,CAAKk5F,gBAAA,GAAmB;QAAEC,kBAAA,EAAoBn5F,IAAA,CAAKk5F;MAAiB,IAAI,CAAC;IAC/E,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAME,gBAAgBp5F,IAAA,GAAyB,CAAC,GAAG;IACjD,OAAO,MAAM,KAAKwqE,IAAA,CAAuB,KAAKrvD,OAAA,GAAU,cAAcnb,IAAI;EAC5E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAMq5F,gBAAgBr5F,IAAA,GAAyB,CAAC,GAAG;IACjD,OAAO,MAAM,KAAKwqE,IAAA,CAAuB,KAAKrvD,OAAA,GAAU,cAAcnb,IAAI;EAC5E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAoFA,MAAMs5F,aAAanqE,IAAA,EAAoB;IACrC,IAAItiB,QAAA;IACJ,KAAKomF,SAAA,GAAY;IACjB,IAAI;MACFpmF,QAAA,GAAW,MAAM,KAAK29D,IAAA,CAKpB,KAAKrvD,OAAA,GAAU,UAAU;QAAEgU;MAAK,CAAC;IACrC,SAAS/uB,CAAA,EAAG;MACV,KAAK6yF,SAAA,GAAY;MACjB,MAAM7yF,CAAA;IACR;IACA,KAAK6yF,SAAA,GAAY;IAEjB,MAAM;MAAE5kE,UAAA;MAAYG,UAAA;MAAY+qE,WAAA;MAAa1iB,MAAA;MAAQ,GAAG2iB;IAAU,IAAI3sF,QAAA,CAASsiB,IAAA;IAC/E,OAAO,MAAM,KAAKyjE,WAAA,CAAY4G,SAAA,EAA2B3sF,QAAA,CAAS4sF,YAAY;EAChF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAC,YAAY53D,MAAA,EAAgB63D,GAAA,EAAc9d,GAAA,EAAc;IACtD,IAAI,KAAKQ,MAAA,IAAU,MAAM;MACvB,MAAM/+E,KAAA,CAAM,6DAA6D;IAC3E;IACA,MAAM0wD,KAAA,GAAwC,CAAC;IAE/C,IAAI2rC,GAAA,EAAK;MACP3rC,KAAA,CAAM2rC,GAAA,GAAMA,GAAA;IACd;IAEA,IAAI9d,GAAA,EAAK;MACP7tB,KAAA,CAAM6tB,GAAA,GAAMA,GAAA;IACd;IAEA,OAAOP,YAAA,CAAa,KAAKe,MAAA,EAAQv6C,MAAA,EAAQksB,KAAA,EAAO,CAAC,CAAC;EACpD;EAgBAgU,GACEsQ,gBAAA,EACAC,iBAAA,EAC6B;IAC7B,MAAM/rE,GAAA,GAAM+rE,iBAAA,GAAqBD,gBAAA,GAA8B;IAC/D,MAAM9yE,QAAA,GAAW+yE,iBAAA,GACbA,iBAAA,GACCD,gBAAA;IACL,IAAI,EAAE9rE,GAAA,IAAO,KAAKojE,SAAA,GAAY;MAC5B,KAAKA,SAAA,CAAUpjE,GAAG,IAAI,EAAC;IACzB;IACA,KAAKs0B,MAAA,CAAO,QAAQ,0BAA0Bt0B,GAAG,UAAU;MACzDgiE,IAAA,EAAM,CAAC,SAAS,QAAQ;IAC1B,CAAC;IACD,KAAKoB,SAAA,CAAUpjE,GAAG,EAAEjI,IAAA,CAAKiB,QAAQ;IACjC,OAAO;MACL0f,WAAA,EAAaA,CAAA,KAAM;QACjB,KAAK4b,MAAA,CAAO,QAAQ,yBAAyBt0B,GAAG,UAAU;UACxDgiE,IAAA,EAAM,CAAC,SAAS,QAAQ;QAC1B,CAAC;QACD,KAAKoB,SAAA,CAAUpjE,GAAG,IAAI,KAAKojE,SAAA,CAAUpjE,GAAG,EAAEgI,MAAA,CAAQmB,EAAA,IAAOA,EAAA,KAAOnQ,QAAQ;MAC1E;IACF;EACF;EAQAgzE,IAAIF,gBAAA,EAAyCC,iBAAA,EAAkC;IAC7E,MAAM/rE,GAAA,GAAM+rE,iBAAA,GAAqBD,gBAAA,GAA8B;IAC/D,MAAM9yE,QAAA,GAAW+yE,iBAAA,GACbA,iBAAA,GACCD,gBAAA;IACL,IAAI,EAAE9rE,GAAA,IAAO,KAAKojE,SAAA,GAAY;MAC5B,KAAKA,SAAA,CAAUpjE,GAAG,IAAI,EAAC;IACzB;IAEA,KAAKs0B,MAAA,CAAO,QAAQ,yBAAyBt0B,GAAG,UAAU;MACxDgiE,IAAA,EAAM,CAAC,SAAS,QAAQ;IAC1B,CAAC;IACD,KAAKoB,SAAA,CAAUpjE,GAAG,IAAI,KAAKojE,SAAA,CAAUpjE,GAAG,EAAEgI,MAAA,CAAQ5G,KAAA,IAAUA,KAAA,KAAUpI,QAAQ;EAChF;EAEA+0F,eACErwF,IAAA,EACA6M,GAAA,EACA/Q,IAAA,EACA2M,MAAA,EAGA;IACA,KAAKmuB,MAAA,CAAO,QAAQ,WAAW52B,IAAI,gBAAgB6M,GAAG,IAAI;MACxDy3D,IAAA,EAAM,CAAC,OAAO,eAAe,QAAQ;MACrCz3D,GAAA;MACAiX,OAAA,EAAShoB,IAAA;MACT2M;IACF,CAAC;EACH;EAEAgoF,gBAAmBzwF,IAAA,EAAc6M,GAAA,EAAalE,QAAA,EAA4B;IACxE,KAAKiuB,MAAA,CACH,QACA,UAAU52B,IAAI,sBAAsB6M,GAAG,aAAalE,QAAA,CAASO,MAAM,IACnE;MACEo7D,IAAA,EAAM,CAAC,OAAO,gBAAgB,QAAQ;MACtCz3D,GAAA;MACAlE;IACF,CACF;EACF;EAEAioF,aAAa5wF,IAAA,EAAc6M,GAAA,EAAaxD,KAAA,EAAgB;IACtD,KAAKutB,MAAA,CAAO,SAAS,UAAU52B,IAAI,mBAAmB6M,GAAG,IAAI;MAC3Dy3D,IAAA,EAAM,CAAC,OAAO,gBAAgB,QAAQ;MACtCz3D,GAAA;MACAxD;IACF,CAAC;EACH;EAmEAzK,IAAOiO,GAAA,EAAaT,MAAA,EAAuC;IACzD,OAAO,KAAKwtE,cAAA,CAAkB,OAAO/sE,GAAA,EAAK,MAAM;MAAET;IAAO,CAAC;EAC5D;EAEAokF,IAAO3jF,GAAA,EAAa/Q,IAAA,EAAgB;IAClC,OAAO,KAAK89E,cAAA,CAAkB,OAAO/sE,GAAA,EAAK/Q,IAAI;EAChD;EAEAwqE,KAAQz5D,GAAA,EAAa/Q,IAAA,EAAgB;IACnC,OAAO,KAAK89E,cAAA,CAAkB,QAAQ/sE,GAAA,EAAK/Q,IAAI;EACjD;EAEA0rE,MAAS36D,GAAA,EAAa/Q,IAAA,EAAgB;IACpC,OAAO,KAAK89E,cAAA,CAAkB,SAAS/sE,GAAA,EAAK/Q,IAAI;EAClD;EAEA0C,OAAUqO,GAAA,EAAaT,MAAA,EAAuC;IAC5D,OAAO,KAAKwtE,cAAA,CAAkB,UAAU/sE,GAAA,EAAK,MAAM;MAAET;IAAO,CAAC;EAC/D;EAEAu6D,SACE95D,GAAA,EACAof,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IAAA,EACA;IACA,MAAMnvB,IAAA,GAAOqxB,iBAAA,CAAkBlB,GAAA,EAAKruB,IAAA,EAAMyS,WAAA,IAAe,qBAAqB;IAC9E,IAAI4a,IAAA,IAAQ,MAAMnvB,IAAA,CAAK+F,MAAA,CAAO,QAAQ0J,IAAA,CAAKC,SAAA,CAAUyf,IAAI,CAAC;IAE1D,OAAO,KAAK2uD,cAAA,CAAoC,YAAY/sE,GAAA,EAAK/Q,IAAA,EAAM;MACrEsU,OAAA,EAAStU,IAAA,CAAK45F,UAAA,GAAa55F,IAAA,CAAK45F,UAAA,CAAW,IAAI,CAAC;MAAA;MAChDjtF,MAAA,EAAQ;QACN4I,OAAA,EAAS;QACTG,gBAAA,EAAkBkpC,QAAA;QAClBjpC,aAAA,EAAeipC;MACjB;IACF,CAAC;EACH;EAEAi7C,kBAAkBhtF,QAAA,EAA2C;IAC3D,MAAMH,OAAA,GACJ,OAAOG,QAAA,CAAS7M,IAAA,CAAKlD,IAAA,KAAS,cAC1B,yBAAyB+P,QAAA,CAAS7M,IAAA,CAAKlD,IAAI,KAAK+P,QAAA,CAAS7M,IAAA,CAAK0M,OAAO,KACrE,+BAA+BG,QAAA,CAASO,MAAM;IAEpD,OAAO,IAAI2gD,iBAAA,CAAoCrhD,OAAA,EAAS;MACtD5P,IAAA,EAAM+P,QAAA,CAAS7M,IAAA,CAAKlD,IAAA,IAAQ;MAC5B+P,QAAA;MACAO,MAAA,EAAQP,QAAA,CAASO;IACnB,CAAC;EACH;EAEAwnF,eAAkB/nF,QAAA,EAA4B;IAC5C,MAAM7M,IAAA,GAAO6M,QAAA,CAAS7M,IAAA;IACtB,IAAIw9E,eAAA,CAAgB3wE,QAAQ,GAAG;MAC7B,MAAM,KAAKgtF,iBAAA,CAAkBhtF,QAAQ;IACvC;IACA,OAAO7M,IAAA;EACT;EAgLAg1F,mBAAmBx2E,KAAA,EAAc;IAE/B,MAAMtd,MAAA,GAAS;IACf,MAAM6zF,qBAAA,GAAwB,EAAC;IAC/B,KAAKj6D,MAAA,CACH,QACA,wDAAwDtc,KAAA,CAAMta,IAAI,MAClE;MACEskE,IAAA,EAAM,CAAC,SAAS,QAAQ;MACxBhqD;IACF,CACF;IAEA,IACEA,KAAA,CAAMta,IAAA,KAAS,2BACfsa,KAAA,CAAMta,IAAA,KAAS,kBACfsa,KAAA,CAAMta,IAAA,KAAS,gBACf;MACA,KAAKuxF,gBAAA,CAAiBj3E,KAAK;IAC7B;IAEA,IAAIA,KAAA,CAAMta,IAAA,KAAS,kBAAkBsa,KAAA,CAAMkkE,EAAA,EAAI;MAC7CxhF,MAAA,CAAOiuB,IAAA,GAAO3Q,KAAA,CAAMkkE,EAAA;MACpBxhF,MAAA,CAAO2hB,KAAA,CAAM0xD,UAAA,CAAW/1D,KAAA,CAAMkkE,EAAE;MAChCxhF,MAAA,CAAOy1F,aAAA,GAAgBn4E,KAAA,CAAMkkE,EAAA,CAAG/xD,aAAA;MAChCzvB,MAAA,CAAOm+B,UAAA,GAAa7gB,KAAA,CAAMkkE,EAAA,CAAG7xD,KAAA;IAC/B;IAEA,IAAIrS,KAAA,CAAMyc,OAAA,IAAWzc,KAAA,CAAMta,IAAA,KAAS,4BAA4B;MAC9D,MAAM;QAAE+2B;MAAQ,IAAIzc,KAAA;MACpB,KAAKsyD,iBAAA,CAAkB71C,OAAO;IAChC;IAEA,IAAIzc,KAAA,CAAMta,IAAA,KAAS,wCAAwCsa,KAAA,CAAMkkE,EAAA,EAAI/xD,aAAA,EAAe;MAClF,KAAKgmE,aAAA,GAAgBn4E,KAAA,CAAMkkE,EAAA,CAAG/xD,aAAA;IAChC;IAEA,IAAInS,KAAA,CAAMta,IAAA,KAAS,gCAAgCsa,KAAA,CAAMkkE,EAAA,EAAI7xD,KAAA,EAAO;MAClE,KAAKwO,UAAA,GAAa7gB,KAAA,CAAMkkE,EAAA,CAAG7xD,KAAA;IAC7B;IAEA,IAAIrS,KAAA,CAAMta,IAAA,KAAS,4BAA4Bsa,KAAA,CAAMsS,eAAA,KAAoB,GAAG;MAC1E,MAAMgpE,iBAAA,GAAoBv2F,MAAA,CAAO+C,IAAA,CAAK,KAAKmwD,cAAc;MACzDqjC,iBAAA,CAAkB3zF,OAAA,CACf4zF,gBAAA,IACE,KAAKtjC,cAAA,CAAesjC,gBAAgB,EAAEl3E,KAAA,CAAM0c,WAAA,GAAc,CAC/D;IACF;IAEA,KACG/gB,KAAA,CAAMta,IAAA,KAAS,qBACdsa,KAAA,CAAMta,IAAA,KAAS,mCACjBsa,KAAA,CAAM6c,GAAA,EACN;MACA,MAAM;QAAEA;MAAI,IAAI7c,KAAA;MAChBtd,MAAA,CAAO2hB,KAAA,CAAM4xD,yBAAA,CAA0Bp5C,GAAG;MAC1C,KAAKo7B,cAAA,CAAej4C,KAAA,CAAM6c,GAAG,GAAG84C,WAAA,CAAY;MAE5C4gB,qBAAA,CAAsBx2F,IAAA,CAAK,MAAM;QAC/B,IAAI,CAAC88B,GAAA,EAAK;QAEV,OAAO,KAAKo7B,cAAA,CAAep7B,GAAG;MAChC,CAAC;IACH;IAEA,OAAO05D,qBAAA;EACT;EAEAzmB,YAAYjzC,GAAA,EAAa;IACvB,IAAIgzC,UAAA;IACJ,SAAStxE,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAK45F,aAAA,CAAc15F,MAAA,EAAQF,CAAA,IAAK;MAClD,MAAMq/D,IAAA,GAAO,KAAKu6B,aAAA,CAAc55F,CAAC;MACjC,IAAIq/D,IAAA,CAAKnhC,OAAA,EAASI,GAAA,KAAQA,GAAA,EAAK;QAC7BgzC,UAAA,GAAa;UACXiC,KAAA,EAAOlU,IAAA,CAAK/hD,OAAA,GACR,IAAII,IAAA,CAAK2hD,IAAA,CAAK/hD,OAAO,EAAE0b,OAAA,CAAQ,KAAI,mBAAItb,IAAA,CAAK,GAAEsb,OAAA,CAAQ,IACtD;UACJ+qC,SAAA,EAAW1E,IAAA,CAAK/tC,UAAA,GAAa,IAAI5T,IAAA,CAAK2hD,IAAA,CAAK/tC,UAAU,IAAI,mBAAI5T,IAAA,CAAK;UAClE8yE,SAAA,EAAWnxB,IAAA,CAAK/hD,OAAA,GAAU,IAAII,IAAA,CAAK2hD,IAAA,CAAK/hD,OAAO,IAAI;QACrD;QACA;MACF;IACF;IAEA,IAAIg0D,UAAA,EAAY;MACd,OAAOA,UAAA;IACT;IAEA,OAAO;MACLiC,KAAA,EAAO;MACPxP,SAAA,EAAW;MACXysB,SAAA,EAAW;IACb;EACF;EAAA;AAAA;AAAA;EAgEA,MAAM3T,QAAA,EAAU;IACd,IAAI,CAAC,KAAK93C,MAAA,IAAU,CAAC,KAAKs0C,KAAA,EAAO;MAC/B,MAAM94E,KAAA,CACJ,yEACF;IACF;IACA,IAAI,CAAC,KAAKm6E,SAAA,EAAW;MACnB,MAAMn6E,KAAA,CAAM,4BAA4B;IAC1C;IACA,IAAI,CAAC,KAAK+7E,QAAA,EAAU;MAClB,MAAM/7E,KAAA,CAAM,qBAAqB;IACnC;IAEA,IAAI,CAAC,KAAK2xE,YAAA,KAAiB,KAAK3sE,OAAA,CAAQy0F,MAAA,IAAU,KAAKz0F,OAAA,CAAQy4E,cAAA,GAAiB;MAC9E,KAAKif,MAAA,CAAO;IACd;IAEA,IAAI,KAAK13F,OAAA,CAAQ2sE,YAAA,IAAgB,KAAK8jB,IAAA,EAAM;MAEzC,KAAKzwF,OAAA,CAAQ2sE,YAAA,CAA+C0K,SAAA,CAAU,IAAI;MAC3E,KAAK1K,YAAA,GAAe,KAAK3sE,OAAA,CAAQ2sE,YAAA;IACnC,OAAO;MACL,KAAKA,YAAA,GAAe,IAAIkI,kBAAA,CAAmB;QACzCj2E,MAAA,EAAQ;MACV,CAAC;IACH;IAEA,IAAI;MAEF,IAAI,KAAKwxF,UAAA,EAAY;QACnB,OAAO,MAAM,KAAKA,UAAA,CAAW9Y,OAAA,CAAQ;MACvC;MAGA,OAAO,MAAM,KAAK3K,YAAA,CAAa2K,OAAA,CAC7B,KAAKt3E,OAAA,CAAQm4E,gBAAA,GACT,KAAK8c,4BAAA,GACL,KAAKC,gBACX;IAEF,SAASjqF,KAAA,EAAY;MAGnB,IAAI,KAAKjL,OAAA,CAAQm4E,gBAAA,IAAoBxB,WAAA,CAAY1rE,KAAK,KAAKylB,QAAA,CAAS,GAAG;QACrE,KAAK8H,MAAA,CAAO,QAAQ,sDAAsD;UACxE0tC,IAAA,EAAM,CAAC,cAAc,QAAQ;QAC/B,CAAC;QACD,KAAKnkC,aAAA,CAAc;UAAEngC,IAAA,EAAM;UAAqB+1F,IAAA,EAAM;QAAW,CAAC;QAElE,KAAKhrB,YAAA,CAAa+L,2BAAA,CAA4B;QAC9C,KAAK/L,YAAA,CAAakL,UAAA,CAAW,EAAE9tE,IAAA,CAAK;QACpC,KAAKqmF,UAAA,GAAa,IAAIjV,oBAAA,CAAqB;UACzCv8E,MAAA,EAAQ;QACV,CAAC;QACD,OAAO,MAAM,KAAKwxF,UAAA,CAAW9Y,OAAA,CAAQ;MACvC;MAEA,MAAMrsE,KAAA;IACR;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAysF,OAAA,EAAS;IACP,MAAMnF,iBAAA,GAAoB5iE,QAAA,CAAS;IACnC,MAAMjN,IAAA,GAAO;MAAE1Q,OAAA,EAAS;QAAE,uBAAuBugF;MAAkB;IAAE;IACrE,KAAK/W,cAAA,CAAe,OAAO,KAAK3iE,OAAA,GAAU,OAAO,MAAM6J,IAAI,EAAE1Y,KAAA,CAAOlM,CAAA,IAAM;MACxE,IAAI,KAAKkC,OAAA,CAAQy4E,cAAA,EAAgB;QAC/B5F,YAAA,CAAa,kBAAkB;UAC7BS,OAAA,EAAS,KAAKpvE,GAAA;UACd6Z,GAAA,EAAKjgB,CAAA;UACLy0F;QACF,CAAC;MACH;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAM/+B,WACJwV,gBAAA,EACA95C,IAAA,GAAiB,EAAC,EAClBlvB,OAAA,GAAuB,CAAC,GACxB;IACA,MAAMmnE,cAAA,GAAiB;MACrBC,QAAA,EAAU;IACZ;IAGA,MAAM,KAAK2B,SAAA;IAEX,IAAI,CAAC,KAAKoE,gBAAA,CAAiB,GAAG;MAC5BhG,cAAA,CAAeC,QAAA,GAAW;IAC5B;IAGA,MAAM1pE,IAAA,GAAO,MAAM,KAAK8C,GAAA,CACtB,KAAKqY,OAAA,GAAU,UACf;MACE6M,OAAA,EAAS;QACPmjD,iBAAA,EAAmBG,gBAAA;QACnB95C,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;QAC7B,GAAGi4C,cAAA;QACH,GAAGnnE;MACL;IACF,CACF;IAEA,KAAKugB,KAAA,CAAMyxD,WAAA,CAAYt0E,IAAA,CAAK61D,KAAK;IAEjC,OAAO71D,IAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMk6F,iBACJ5uB,gBAAA,GAAuC,CAAC,GACxC95C,IAAA,GAAwB,EAAC,EACzBlvB,OAAA,GAAwC,CAAC,GACzC;IAEA,OAAO,MAAM,KAAKQ,GAAA,CAAyB,KAAKqY,OAAA,GAAU,uBAAuB;MAC/E6M,OAAA,EAAS;QACPmjD,iBAAA,EAAmBG,gBAAA;QACnB95C,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;QAC7B,GAAGlvB;MACL;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM63F,kBACJ7uB,gBAAA,GAAwC,CAAC,GACzChpE,OAAA,GAAyC,CAAC,GAC1C;IAEA,OAAO,MAAM,KAAKQ,GAAA,CAChB,KAAKqY,OAAA,GAAU,6BACf;MACE6M,OAAA,EAAS;QAAEmjD,iBAAA,EAAmBG,gBAAA;QAAkB,GAAGhpE;MAAQ;IAC7D,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA,MAAM83F,qBACJ9uB,gBAAA,EACA95C,IAAA,GAAoB,EAAC,EACrBlvB,OAAA,GAA0B,CAAC,GAC3B;IACA,MAAMmnE,cAAA,GAAiC;MACrC5mD,KAAA,EAAO;MACP2Y,KAAA,EAAO;MACPkuC,QAAA,EAAU;IACZ;IAGA,MAAM,KAAK2B,SAAA;IACX,IAAI,CAAC,KAAKoE,gBAAA,CAAiB,GAAG;MAC5BhG,cAAA,CAAejuC,KAAA,GAAQ;IACzB;IAGA,MAAMxT,OAAA,GAAU;MACdmjD,iBAAA,EAAmBG,gBAAA;MACnB95C,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGi4C,cAAA;MACH,GAAGnnE;IACL;IAEA,MAAMtC,IAAA,GAAO,MAAM,KAAKwqE,IAAA,CACtB,KAAKrvD,OAAA,GAAU,aACf6M,OACF;IAEA,OAAOhoB,IAAA,CAAKy8B,QAAA;EACd;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAMw5B,cACJqV,gBAAA,EACA95C,IAAA,GAAoB,EAAC,EACrBlvB,OAAA,GAA0B,CAAC,GAC3B0nF,YAAA,GAAoC,CAAC,GACrC;IACA,MAAMvtD,QAAA,GAAW,MAAM,KAAK29D,oBAAA,CAAqB9uB,gBAAA,EAAkB95C,IAAA,EAAMlvB,OAAO;IAEhF,KAAK+hC,aAAA,CAAc;MACjBngC,IAAA,EAAM;MACNgtE,eAAA,EAAiB;QACfz0C,QAAA;QACA00C,kBAAA,EAAoB;MACtB;IACF,CAAC;IACD,IAAI10C,QAAA,EAAUx/B,MAAA,IAAU,KAAKipE,SAAA,EAAWkL,cAAA,EAAgB;MACtD,MAAM,KAAKlL,SAAA,CAAUkL,cAAA,CAAe;QAClC30C,QAAA;QACA40C,mBAAA,EAAqB;MACvB,CAAC;IACH;IAEA,OAAO,KAAK4Z,qBAAA,CAAsBxuD,QAAA,EAAUutD,YAAA,EAAc1nF,OAAO;EACnE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAM+3F,eACJxuB,SAAA,EACA5jE,OAAA,EACAupB,IAAA,GAAqB,EAAC,EACtBlvB,OAAA,GAAiC,CAAC,GAClC;IACA,MAAM0lB,OAAA,GAAU;MACdxZ,MAAA,EAAAvG,OAAA;MACAupB,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL;IAEA,IAAI,KAAK4jE,SAAA,EAAW4J,YAAA,IAAgB,CAACxtE,OAAA,CAAQwG,IAAA,EAAM;MACjD,IAAI;QACF,MAAMwxF,eAAA,GAAkB,MAAM,KAAKp0B,SAAA,CAAU4J,YAAA,CAAa;UACxDtrC,SAAA,EAAWqnC,SAAA;UACX5vC,OAAA,EAASh0B,OAAA;UACTupB,IAAA;UACAkT,KAAA,EAAOpiC,OAAA,CAAQoiC;QACjB,CAAC;QAED,IAAI41D,eAAA,EAAiB;UACnB,KAAKj2D,aAAA,CAAc;YACjBngC,IAAA,EAAM;YACNq2F,gBAAA,EAAkBD;UACpB,CAAC;QACH;MACF,SAASl6F,CAAA,EAAG;QACV,KAAK06B,MAAA,CAAO,QAAQ,0DAA0D;UAC5EvtB,KAAA,EAAOnN;QACT,CAAC;MACH;IACF;IAGA,MAAM,KAAKirE,SAAA;IAEX,OAAO,MAAM,KAAKb,IAAA,CAChB,KAAKrvD,OAAA,GAAU,eAAehL,kBAAA,CAAmB07D,SAAS,IAAI,cAC9D7jD,OACF;EACF;EAEAijE,sBACEuP,eAAA,GAAwC,EAAC,EACzCxQ,YAAA,GAAoC,CAAC,GACrCyQ,oBAAA,EACA;IACA,MAAM;MAAEvP,kBAAA;MAAoBhhB,WAAA,GAAc;IAAM,IAAI8f,YAAA;IACpD,MAAMvtD,QAAA,GAAsB,EAAC;IAE7B,WAAWi2C,YAAA,IAAgB8nB,eAAA,EAAiB;MAC1C,KAAK1pB,iBAAA,CAAkB4B,YAAA,CAAaz3C,OAAO;MAC3C,MAAMv6B,CAAA,GAAI,KAAKu6B,OAAA,CAAQy3C,YAAA,CAAaz3C,OAAA,CAAQ/2B,IAAA,EAAMwuE,YAAA,CAAaz3C,OAAA,CAAQ95B,EAAE;MACzET,CAAA,CAAEV,IAAA,GAAO0yE,YAAA,CAAaz3C,OAAA;MACtBv6B,CAAA,CAAEwpE,WAAA,GAAcA,WAAA;MAChBxpE,CAAA,CAAEyjD,WAAA,GAAc,CAAC+lB,WAAA;MACjBxpE,CAAA,CAAE0wB,gBAAA,GAAmBshD,YAAA,CAAathD,gBAAA;MAElC,IAAIspE,kBAAA;MACJ,IAAIxP,kBAAA,KAAuB,QAAW;QACpC,MAAM;UAAErqD;QAAW,IAAIngC,CAAA,CAAEqwE,gBAAA,CAAiB2B,YAAA,EAAc,QAAQ;QAChEgoB,kBAAA,GAAqB75D,UAAA;MACvB,WAAW,CAACqqD,kBAAA,CAAmB1iD,QAAA,CAASkqC,YAAA,CAAaz3C,OAAA,CAAQ95B,EAAE,GAAG;QAChET,CAAA,CAAEmiB,KAAA,CAAMyhB,aAAA,CAAc;QACtB,MAAM;UAAEzD;QAAW,IAAIngC,CAAA,CAAEqwE,gBAAA,CAAiB2B,YAAA,EAAc,QAAQ;QAChEgoB,kBAAA,GAAqB75D,UAAA;MACvB;MAEA,IAAI65D,kBAAA,EAAoB;QACtBA,kBAAA,CAAmBjiE,UAAA,GAAa;UAC9B,GAAGiiE,kBAAA,CAAmBjiE,UAAA;UACtB,GAAGoC,oBAAA,CAAqB;YACtBzC,SAAA,EAAWsiE,kBAAA;YACXriE,iBAAA,EACEoiE,oBAAA,EAAsBE,aAAA,IACtB/sE,6CAAA;YACF0K,YAAA,EAAco6C,YAAA,CAAan9C,QAAA;YAC3BuF,MAAA,EAAQ,KAAKA;UACf,CAAC;QACH;QACA,KAAK+tC,KAAA,CAAMmI,gBAAA,CAAiB0B,YAAA,CAAan9C,QAAA,EAAU,IAAI;QACvD,KAAK07C,SAAA,CAAUpQ,YAAA,CAAa6R,YAAA,CAAan9C,QAAQ;MACnD;MAEA70B,CAAA,CAAEkkE,eAAA,CAAgBoB,4BAAA,CAA6B0M,YAAY;MAE3Dj2C,QAAA,CAASl+B,IAAA,CAAKmC,CAAC;IACjB;IAEA,OAAO+7B,QAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMtgB,OACJmvD,gBAAA,EACAvmC,KAAA,EACAziC,OAAA,GAAyB,CAAC,GAC1B;IACA,IAAIA,OAAA,CAAQm4B,MAAA,IAAUn4B,OAAA,CAAQwG,IAAA,EAAM;MAClC,MAAMxL,KAAA,CAAM,iCAAiC;IAC/C;IACA,MAAM0qB,OAAA,GAAyB;MAC7BmjD,iBAAA,EAAmBG,gBAAA;MACnB,GAAGhpE,OAAA;MACHkvB,IAAA,EAAMlvB,OAAA,CAAQkvB,IAAA,GACVD,kBAAA,CAA0CjvB,OAAA,CAAQkvB,IAAI,IACtD;IACN;IACA,IAAI,OAAOuT,KAAA,KAAU,UAAU;MAC7B/c,OAAA,CAAQ+c,KAAA,GAAQA,KAAA;IAClB,WAAW,OAAOA,KAAA,KAAU,UAAU;MACpC/c,OAAA,CAAQojD,yBAAA,GAA4BrmC,KAAA;IACtC,OAAO;MACL,MAAMznC,KAAA,CAAM,gBAAgB,OAAOynC,KAAK,sBAAsB;IAChE;IAGA,MAAM,KAAKsmC,SAAA;IAEX,OAAO,MAAM,KAAKvoE,GAAA,CAAuB,KAAKqY,OAAA,GAAU,WAAW;MAAE6M;IAAQ,CAAC;EAChF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA4yE,eAAevkB,MAAA,EAA0B;IACvC,IACG,KAAKpH,YAAA,EAAc2J,YAAA,IAAgB,KAAKvN,SAAA,KACvC,KAAK4D,YAAA,EAAcC,SAAA,IAAa,KAAKwjB,UAAA,EAAYxjB,SAAA,CAAU,MAC3D,KAAKO,gBAAA,CAAiB,GACxB;MACA,MAAM,IAAInyE,KAAA,CAAM,+DAA+D;IACjF;IAEA,KAAKgF,OAAA,CAAQ+zE,MAAA,GAASA,MAAA;EACxB;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMwkB,UACJ15F,EAAA,EACA25F,aAAA,EACAh5D,MAAA,EACAm3D,kBAAA,EACA;IACA,OAAO,MAAM,KAAKzuB,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,YAAY;MAC7Dha,EAAA;MACA25F,aAAA;MACA,IAAIh5D,MAAA,IAAU,OAAO;QAAEC,OAAA,EAASD;MAAO,IAAI,CAAC;MAC5C,IAAIm3D,kBAAA,IAAsB,OAAO;QAAEA;MAAmB,IAAI,CAAC;IAC7D,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM8B,WAAWj5D,MAAA,EAAiB;IAChC,OAAO,MAAM,KAAKh/B,GAAA,CAChB,KAAKqY,OAAA,GAAU,YACf2mB,MAAA,GAAS;MAAEC,OAAA,EAASD;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMk5D,eAAel5D,MAAA,EAAiB;IACpC,OAAO,MAAM,KAAKh/B,GAAA,CAChB,KAAKqY,OAAA,GAAU,WACf2mB,MAAA,GAAS;MAAEC,OAAA,EAASD;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMm5D,oBAAoB5C,OAAA,EAAmB;IAC3C,OAAO,MAAM,KAAK7tB,IAAA,CAChB,KAAKrvD,OAAA,GAAU,iBACf;MAAElZ,QAAA,EAAUo2F;IAAQ,CACtB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM6C,mBAAmBC,WAAA,EAA+B;IACtD,OAAO,MAAM,KAAK3wB,IAAA,CAChB,KAAKrvD,OAAA,GAAU,qBACf;MAAEggF;IAAY,CAChB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMC,aAAaj6F,EAAA,EAAY2gC,MAAA,EAAiB;IAC9C,OAAO,MAAM,KAAKp/B,MAAA,CAAoB,KAAKyY,OAAA,GAAU,YAAY;MAC/Dha,EAAA;MACA,IAAI2gC,MAAA,GAAS;QAAEC,OAAA,EAASD;MAAO,IAAI,CAAC;IACtC,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAu5D,cAAc/qF,MAAA,EAMX;IACD,MAAM;MAAEgrF,UAAA;MAAYC,GAAA;MAAKC,OAAA;MAASC,GAAA;MAAKC;IAAU,IAAIprF,MAAA,IAAU,CAAC;IAChE,OAAO,KAAKxN,GAAA,CAA2B,KAAKqY,OAAA,GAAU,gBAAgB;MACpEwgF,WAAA,EAAaL,UAAA;MACbC,GAAA;MACAC,OAAA;MACAC,GAAA;MACAC,SAAA,EAAWA,SAAA,GAAYA,SAAA,CAAUl9F,IAAA,CAAK,GAAG,IAAI;IAC/C,CAAC;EACH;EAEAsyE,kBAAkB;IAAEz1C,GAAA;IAAK1uB;EAAO,GAAoB;IAClD,IAAI,KAAKkkE,aAAA,CAAc,GAAG;MACxB,KAAKvG,OAAA,CAAQjvC,GAAG,IAAI1uB,MAAA;IACtB;EACF;EAkBAsuB,QACEQ,WAAA,EACAmgE,iBAAA,EACAv2C,MAAA,GAAsB,CAAC,GACvB;IACA,IAAI,CAAC,KAAKvjB,MAAA,IAAU,CAAC,KAAKytC,kBAAA,CAAmB,GAAG;MAC9C,MAAMjyE,KAAA,CAAM,oEAAoE;IAClF;IAEA,IAAI,CAACm+B,WAAA,CAAYj+B,OAAA,CAAQ,GAAG,GAAG;MAC7B,MAAM,IAAIF,KAAA,CACR,yBAAyBm+B,WAAW,iCACtC;IACF;IAGA,IAAImgE,iBAAA,IAAqB,OAAOA,iBAAA,KAAsB,UAAU;MAC9D,OAAO,KAAK9F,mBAAA,CAAoBr6D,WAAA,EAAamgE,iBAAiB;IAChE;IAGA,IAAI,CAACA,iBAAA,IAAqB,OAAOv2C,MAAA,KAAW,YAAYA,MAAA,CAAOnqB,OAAA,EAASj+B,MAAA,EAAQ;MAC9E,OAAO,KAAK64F,mBAAA,CAAoBr6D,WAAA,EAAa4pB,MAAM;IACrD;IAKA,IAAI,CAACu2C,iBAAA,EAAmB;MACtB,OAAO,IAAI9yB,OAAA,CAAQ,MAAMrtC,WAAA,EAAa,QAAW4pB,MAAM;IACzD;IAEA,OAAO,KAAK8wC,cAAA,CAAe16D,WAAA,EAAamgE,iBAAA,EAAmBv2C,MAAM;EACnE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAsHA,MAAMw2C,kBAAkBC,iBAAA,EAAsC;IAC5D,OAAO,MAAM,KAAKxD,kBAAA,CAAmB,CAACwD,iBAAiB,CAAC;EAC1D;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM1F,YAAYvgC,KAAA,EAAuB;IACvC,MAAMkmC,OAAA,GAA2C,CAAC;IAClD,WAAWC,UAAA,IAAcnmC,KAAA,EAAO;MAC9B,IAAI,CAACmmC,UAAA,CAAW76F,EAAA,EAAI;QAClB,MAAM7D,KAAA,CAAM,0CAA0C;MACxD;MACAy+F,OAAA,CAAQC,UAAA,CAAW76F,EAAE,IAAI66F,UAAA;IAC3B;IAEA,OAAO,MAAM,KAAKxxB,IAAA,CAIhB,KAAKrvD,OAAA,GAAU,UAAU;MAAE06C,KAAA,EAAOkmC;IAAQ,CAAC;EAC/C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAmBA1F,WAAW2F,UAAA,EAA0B;IACnC,OAAO,KAAK5F,WAAA,CAAY,CAAC4F,UAAU,CAAC;EACtC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAmBA,MAAM1D,mBAAmBziC,KAAA,EAA4B;IACnD,WAAWmmC,UAAA,IAAcnmC,KAAA,EAAO;MAC9B,IAAI,CAACmmC,UAAA,CAAW76F,EAAA,EAAI;QAClB,MAAM7D,KAAA,CAAM,0CAA0C;MACxD;IACF;IAEA,OAAO,MAAM,KAAKouE,KAAA,CAIhB,KAAKvwD,OAAA,GAAU,UAAU;MAAE06C;IAAM,CAAC;EACtC;EAEA,MAAMomC,WACJn6D,MAAA,EACAxxB,MAAA,EAKA;IACA,OAAO,MAAM,KAAK5N,MAAA,CAIhB,KAAKyY,OAAA,GAAU,UAAUhL,kBAAA,CAAmB2xB,MAAM,CAAC,IAAIxxB,MAAM;EACjE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM4rF,aAAaj6F,QAAA,EAAoB;IACrC,OAAO,MAAM,KAAKuoE,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,kBAAkB;MACnElZ;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMk6F,eAAer6D,MAAA,EAAgBx/B,OAAA,EAAiC;IACpE,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,UAAUhL,kBAAA,CAAmB2xB,MAAM,CAAC,eACnD;MAAE,GAAGx/B;IAAQ,CACf;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM85F,gBAAgBn6F,QAAA,EAAoBK,OAAA,EAAkC;IAC1E,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,qBACf;MAAElZ,QAAA;MAAU,GAAGK;IAAQ,CACzB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM+5F,eAAev6D,MAAA,EAAgBx/B,OAAA,EAAkC;IACrE,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,UAAUhL,kBAAA,CAAmB2xB,MAAM,CAAC,eACnD;MAAE,GAAGx/B;IAAQ,CACf;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMg6F,gBAAgBr6F,QAAA,EAAoBK,OAAA,EAAkC;IAC1E,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,qBACf;MAAElZ,QAAA;MAAU,GAAGK;IAAQ,CACzB;EACF;EAEA,MAAMi6F,WAAWz6D,MAAA,EAAgBx/B,OAAA,EAAkC;IACjE,OAAO,MAAM,KAAKQ,GAAA,CAMhB,KAAKqY,OAAA,GAAU,UAAUhL,kBAAA,CAAmB2xB,MAAM,CAAC,WAAW;MAAE,GAAGx/B;IAAQ,CAAC;EAChF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMgvE,QAAQC,YAAA,EAAsBjvE,OAAA,EAA0B;IAC5D,OAAO,MAAM,KAAKkoE,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,mBAAmB;MACpEqhF,cAAA,EAAgBjrB,YAAA;MAChB,GAAGjvE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMsvE,UAAUL,YAAA,EAAsBjvE,OAAA,EAA4B;IAChE,OAAO,MAAM,KAAKI,MAAA,CAAoB,KAAKyY,OAAA,GAAU,mBAAmB;MACtEqhF,cAAA,EAAgBjrB,YAAA;MAChB,GAAGjvE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMuvE,UAAUN,YAAA,EAAsBjvE,OAAA,EAA0B;IAC9D,OAAO,MAAM,KAAKgvE,OAAA,CAAQC,YAAA,EAAc;MACtCqC,MAAA,EAAQ;MACR,GAAGtxE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMwvE,gBAAgBP,YAAA,EAAsBjvE,OAAA,EAA4B;IACtE,OAAO,MAAM,KAAKsvE,SAAA,CAAUL,YAAA,EAAc;MACxCqC,MAAA,EAAQ;MACR,GAAGtxE;IACL,CAAC;EACH;EAEA,MAAMm6F,UAAUC,aAAA,EAAuB36D,OAAA,EAAkB;IACvD,OAAO,MAAM,KAAKyoC,IAAA,CAA2B,KAAKrvD,OAAA,GAAU,gBAAgB;MAC1EwhF,eAAA,EAAiBD,aAAA;MACjB,IAAI36D,OAAA,GAAU;QAAEA;MAAQ,IAAI,CAAC;IAC/B,CAAC;EACH;EAEA,MAAM66D,gBAAgB76D,OAAA,EAAkB;IACtC,OAAO,MAAM,KAAKj/B,GAAA,CAAgC,KAAKqY,OAAA,GAAU,gBAAgB;MAC/E,IAAI4mB,OAAA,GAAU;QAAEA;MAAQ,IAAI,CAAC;IAC/B,CAAC;EACH;EAEA,MAAM86D,YAAYH,aAAA,EAAuB56D,MAAA,EAAiB;IACxD,OAAO,MAAM,KAAK0oC,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,kBAAkB;MACnEwhF,eAAA,EAAiBD,aAAA;MACjB,IAAI56D,MAAA,GAAS;QAAEC,OAAA,EAASD;MAAO,IAAI,CAAC;IACtC,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMi+C,SAASC,QAAA,EAAkBl+C,MAAA,EAAiBx/B,OAAA,GAA2B,CAAC,GAAG;IAC/E,OAAO,MAAM,KAAKkoE,IAAA,CAAuB,KAAKrvD,OAAA,GAAU,oBAAoB;MAC1E2hF,SAAA,EAAW9c,QAAA;MACX,IAAIl+C,MAAA,GAAS;QAAEC,OAAA,EAASD;MAAO,IAAI,CAAC;MACpC,GAAGx/B;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM49E,WAAWF,QAAA,EAAkB+c,aAAA,EAAwB;IACzD,OAAO,MAAM,KAAKvyB,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,sBAAsB;MACvE2hF,SAAA,EAAW9c,QAAA;MACX,IAAI+c,aAAA,GAAgB;QAAEh7D,OAAA,EAASg7D;MAAc,IAAI,CAAC;IACpD,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA1sB,eAAe2P,QAAA,EAAkB;IAC/B,IAAI,CAAC,KAAK7wD,IAAA,IAAQ,CAAC,KAAKk8C,SAAA,EAAW;MACjC,MAAM,IAAI/tE,KAAA,CAAM,yCAAyC;IAC3D;IAEA,SAASP,CAAA,GAAI,GAAGA,CAAA,GAAI,KAAKsiC,UAAA,CAAWpiC,MAAA,EAAQF,CAAA,IAAK,GAAG;MAClD,IAAI,KAAKsiC,UAAA,CAAWtiC,CAAC,EAAEkP,MAAA,CAAO9K,EAAA,KAAO6+E,QAAA,EAAU,OAAO;IACxD;IACA,OAAO;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMR,YACJwd,eAAA,EACA16F,OAAA,GAAiD,CAAC,GAClD;IACA,OAAO,MAAM,KAAKkoE,IAAA,CAA0B,KAAKrvD,OAAA,GAAU,oBAAoB;MAC7E8hF,iBAAA,EAAmBD,eAAA;MACnB,GAAG16F;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM+8E,SAASW,QAAA,EAAkB19E,OAAA,GAAiD,CAAC,GAAG;IACpF,OAAO,MAAM,KAAKkoE,IAAA,CAAuB,KAAKrvD,OAAA,GAAU,oBAAoB;MAC1EqhF,cAAA,EAAgBxc,QAAA;MAChB,GAAG19E;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM46F,cAAcF,eAAA,EAAyB16F,OAAA,GAAgC,CAAC,GAAG;IAC/E,OAAO,MAAM,KAAKkoE,IAAA,CAA0B,KAAKrvD,OAAA,GAAU,sBAAsB;MAC/E8hF,iBAAA,EAAmBD,eAAA;MACnB,GAAG16F;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM66F,WAAWnd,QAAA,EAAkB19E,OAAA,GAAgC,CAAC,GAAG;IACrE,OAAO,MAAM,KAAKkoE,IAAA,CAAuB,KAAKrvD,OAAA,GAAU,sBAAsB;MAC5EqhF,cAAA,EAAgBxc,QAAA;MAChB,GAAG19E;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAM86F,YACJ9xB,gBAAA,GAAiC,CAAC,GAClChpE,OAAA,GAAkC,CAAC,GACnC;IAEA,OAAO,MAAM,KAAKkoE,IAAA,CAAoB,KAAKrvD,OAAA,GAAU,qBAAqB;MACxEgwD,iBAAA,EAAmBG,gBAAA;MACnB,GAAGhpE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAM+6F,kBACJ/xB,gBAAA,GAAuC,CAAC,GACxChpE,OAAA,GAAwC,CAAC,GACzC;IAEA,OAAO,MAAM,KAAKkoE,IAAA,CAA0B,KAAKrvD,OAAA,GAAU,uBAAuB;MAChFgwD,iBAAA,EAAmBG,gBAAA;MACnB,GAAGhpE;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAgBA,MAAMg7F,kBACJn8F,EAAA,EACAo8F,YAAA,EACAj7F,OAAA,GAAmC,CAAC,GACpC;IACA,OAAO,MAAM,KAAKopE,KAAA,CAChB,KAAKvwD,OAAA,GAAU,uBAAuBhL,kBAAA,CAAmBhP,EAAE,CAAC,IAC5D;MACEq8F,aAAA,EAAeD,YAAA;MACf,GAAGj7F;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMi0F,eAAeyG,eAAA,EAAyB16F,OAAA,GAAgC,CAAC,GAAG;IAChF,OAAO,MAAM,KAAKkoE,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,+BAA+B;MAChF8hF,iBAAA,EAAmBD,eAAA;MACnB,GAAG16F;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAuBA,MAAMm0F,iBAAiBz2F,IAAA,GAAgC,CAAC,GAAG;IACzD,MAAM,KAAKwqE,IAAA,CAAkB,KAAKrvD,OAAA,GAAU,kBAAkB;MAAE,GAAGnb;IAAK,CAAC;EAC3E;EAEAy9F,cAAcz9F,IAAA,EAA4B;IACxC,OAAO,KAAKwqE,IAAA,CAA4B,KAAKrvD,OAAA,GAAU,aAAanb,IAAI;EAC1E;EAEA09F,WAAW57F,IAAA,EAAc;IACvB,OAAO,KAAKgB,GAAA,CACV,KAAKqY,OAAA,GAAU,aAAahL,kBAAA,CAAmBrO,IAAI,CAAC,EACtD;EACF;EAEA67F,cAAc77F,IAAA,EAAc9B,IAAA,EAA4B;IACtD,OAAO,KAAK00F,GAAA,CACV,KAAKv5E,OAAA,GAAU,aAAahL,kBAAA,CAAmBrO,IAAI,CAAC,IACpD9B,IACF;EACF;EAEA49F,cAAc97F,IAAA,EAAc;IAC1B,OAAO,KAAKY,MAAA,CACV,KAAKyY,OAAA,GAAU,aAAahL,kBAAA,CAAmBrO,IAAI,CAAC,EACtD;EACF;EAEA+7F,aAAA,EAAe;IACb,OAAO,KAAK/6F,GAAA,CAA0B,KAAKqY,OAAA,GAAU,WAAW;EAClE;EAEA2iF,kBAAkB99F,IAAA,EAA4B;IAC5C,MAAMksE,WAAA,GAAc3oE,MAAA,CAAOsE,MAAA,CAAO,CAAC,GAAG;MAAEgxD,QAAA,EAAU,CAAC,KAAK;IAAE,GAAG74D,IAAI;IACjE,OAAO,KAAKwqE,IAAA,CAA4B,KAAKrvD,OAAA,GAAU,iBAAiB+wD,WAAW;EACrF;EAEA6xB,eAAetiE,WAAA,EAAqB;IAClC,OAAO,KAAK34B,GAAA,CACV,KAAKqY,OAAA,GAAU,iBAAiBhL,kBAAA,CAAmBsrB,WAAW,CAAC,EACjE;EACF;EAEAuiE,kBAAkBviE,WAAA,EAAqBz7B,IAAA,EAAgC;IACrE,OAAO,KAAK00F,GAAA,CACV,KAAKv5E,OAAA,GAAU,iBAAiBhL,kBAAA,CAAmBsrB,WAAW,CAAC,IAC/Dz7B,IACF;EACF;EAEAi+F,kBAAkBxiE,WAAA,EAAqB;IACrC,OAAO,KAAK/4B,MAAA,CACV,KAAKyY,OAAA,GAAU,iBAAiBhL,kBAAA,CAAmBsrB,WAAW,CAAC,EACjE;EACF;EAEAyiE,iBAAA,EAAmB;IACjB,OAAO,KAAKp7F,GAAA,CAAyB,KAAKqY,OAAA,GAAU,eAAe;EACrE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMgjF,iBAAiB35D,SAAA,EAAmB45D,QAAA,EAAkB;IAC1D,OAAO,MAAM,KAAK5zB,IAAA,CAChB,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBq0B,SAAS,CAAC,cACzD;MAAE45D;IAAS,CACb;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMC,UAAUz5C,IAAA,EAAc05C,oBAAA,EAA8BC,eAAA,EAAyB;IACnF,OAAO,MAAM,KAAK/zB,IAAA,CAAsC,KAAKrvD,OAAA,GAAU,cAAc;MACnFypC,IAAA;MACA25C,eAAA;MACAD;IACF,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;EAMAE,qBAAqBC,uBAAA,EAAyD;IAC5E,IAAIC,UAAA,GAA4B;IAChC,IAAI,OAAOD,uBAAA,KAA4B,UAAU;MAC/C,MAAM1jF,GAAA,GAAM,mBAAIN,IAAA,CAAK;MACrBM,GAAA,CAAI4jF,UAAA,CAAW5jF,GAAA,CAAI6jF,UAAA,CAAW,IAAIH,uBAAuB;MACzDC,UAAA,GAAa3jF,GAAA,CAAIxL,WAAA,CAAY;IAC/B,WAAW6iF,SAAA,CAASqM,uBAAuB,GAAG;MAC5CC,UAAA,GAAaD,uBAAA;IACf,WAAWA,uBAAA,YAAmChkF,IAAA,EAAM;MAClDikF,UAAA,GAAaD,uBAAA,CAAwBlvF,WAAA,CAAY;IACnD;IACA,OAAOmvF,UAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAG,yBACEC,kBAAA,EACA/vC,SAAA,EACA;IACA,IAAIvqB,SAAA;IACJ,IAAI,OAAOs6D,kBAAA,KAAuB,UAAU;MAC1Ct6D,SAAA,GAAYs6D,kBAAA;IACd,OAAO;MACL,IAAI,CAACA,kBAAA,CAAmB39F,EAAA,EAAI;QAC1B,MAAM7D,KAAA,CAAMyxD,SAAS;MACvB;MACAvqB,SAAA,GAAYs6D,kBAAA,CAAmB39F,EAAA;IACjC;IACA,OAAOqjC,SAAA;EACT;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAu6D,WACED,kBAAA,EACAL,uBAAA,EACAO,QAAA,EACAC,QAAA,EACA;IACA,MAAMz6D,SAAA,GAAY,KAAKq6D,wBAAA,CACrBC,kBAAA,EACA,yDACF;IACA,OAAO,KAAKI,oBAAA,CACV16D,SAAA,EACA;MACE/5B,GAAA,EAAK;QACH8pB,MAAA,EAAQ;QACR4qE,WAAA,EAAa,KAAKX,oBAAA,CAAqBC,uBAAuB;QAC9DlwE,SAAA,EAAW,KAAKiwE,oBAAA,CAAqBS,QAAQ;MAC/C;IACF,GACAD,QACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAI,aACEN,kBAAA,EACAt8D,MAAA,EACA;IACA,MAAMgC,SAAA,GAAY,KAAKq6D,wBAAA,CACrBC,kBAAA,EACA,yDACF;IACA,OAAO,KAAKI,oBAAA,CACV16D,SAAA,EACA;MACE/5B,GAAA,EAAK;QAAE8pB,MAAA,EAAQ;MAAM;IACvB,GACAiO,MACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAM2pC,cACJz/D,OAAA,EACA2yF,mBAAA,EACA/8F,OAAA,EACA;IACA,IAAI,CAACoK,OAAA,CAAQvL,EAAA,EAAI;MACf,MAAM7D,KAAA,CAAM,0DAA0D;IACxE;IAGA,MAAM0qB,OAAA,GAAUoM,uBAAA,CAAwB1nB,OAAO;IAG/C,IAAI,OAAO2yF,mBAAA,KAAwB,UAAU;MAC3Cr3E,OAAA,CAAQ+Z,OAAA,GAAUs9D,mBAAA;IACpB,WAAW,OAAOA,mBAAA,EAAqBl+F,EAAA,KAAO,UAAU;MACtD6mB,OAAA,CAAQ+Z,OAAA,GAAUs9D,mBAAA,CAAoBl+F,EAAA;IACxC;IAEA,OAAO,MAAM,KAAKqpE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBzD,OAAA,CAAQvL,EAAY,CAAC,IACpE;MACEuL,OAAA,EAASsb,OAAA;MACT,GAAG1lB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAM48F,qBACJ/9F,EAAA,EACAm+F,oBAAA,EACAD,mBAAA,EACA/8F,OAAA,EACA;IACA,IAAI,CAACnB,EAAA,EAAI;MACP,MAAM7D,KAAA,CAAM,iEAAiE;IAC/E;IAEA,IAAI6xB,IAAA,GAAmC;IAEvC,IAAI,OAAOkwE,mBAAA,KAAwB,UAAU;MAC3ClwE,IAAA,GAAO;QAAEhuB,EAAA,EAAIk+F;MAAoB;IACnC,WAAW,OAAOA,mBAAA,EAAqBl+F,EAAA,KAAO,UAAU;MACtDguB,IAAA,GAAO;QAAEhuB,EAAA,EAAIk+F,mBAAA,CAAoBl+F;MAAG;IACtC;IAEA,OAAO,MAAM,KAAKuzF,GAAA,CAChB,KAAKv5E,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,IAClD;MACE,GAAGm+F,oBAAA;MACH,GAAGh9F,OAAA;MACH6sB;IACF,CACF;EACF;EAEA,MAAMowE,cAAc1zB,SAAA,EAAmBltC,UAAA,EAAsB;IAC3D,IAAI;MACF,IAAI,KAAKunC,SAAA,EAAW;QAClB,IAAIvnC,UAAA,EAAY;UACd,MAAM,KAAKunC,SAAA,CAAUs5B,iBAAA,CAAkB;YAAEr+F,EAAA,EAAI0qE;UAAU,CAAC;QAC1D,OAAO;UACL,MAAM,KAAK3F,SAAA,CAAUu5B,iBAAA,CAAkB;YAAEt+F,EAAA,EAAI0qE;UAAU,CAAC;QAC1D;QACA,OAAO,MAAM,KAAK3F,SAAA,CAAUwE,SAAA,CAC1B;UACEC,IAAA,EAAM;YACJnmC,SAAA,EAAWqnC,SAAA;YACX7jD,OAAA,EAAS,CAAC6jD,SAAA,EAAWltC,UAAU;YAC/Bz6B,IAAA,EAAM;UACR;QACF,CACF;MACF;IACF,SAASqJ,KAAA,EAAO;MACd,KAAKutB,MAAA,CAAO,SAAS,2BAA2B;QAC9C0tC,IAAA,EAAM,CAAC,WAAW,WAAW;QAC7Bj7D;MACF,CAAC;IACH;IAEA,OAAO,KAAKmyF,cAAA,CAAe7zB,SAAA,EAAWltC,UAAU;EAClD;EAEA,MAAM+gE,eAAe7zB,SAAA,EAAmBltC,UAAA,EAAsB;IAC5D,IAAIruB,MAAA,GAAS,CAAC;IACd,IAAIquB,UAAA,EAAY;MACdruB,MAAA,GAAS;QAAEqvF,IAAA,EAAM;MAAK;IACxB;IACA,OAAO,MAAM,KAAKj9F,MAAA,CAChB,KAAKyY,OAAA,GAAU,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,IACzDv7D,MACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMsvF,gBAAgB/zB,SAAA,EAAmB/pC,MAAA,EAAgB;IACvD,OAAO,MAAM,KAAK0oC,IAAA,CAChB,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,aACzD;MAAEg0B,YAAA,EAAc/9D;IAAO,CACzB;EACF;EAEA,MAAMg+D,WAAWj0B,SAAA,EAAmBvpE,OAAA,EAA6B;IAC/D,OAAO,MAAM,KAAKQ,GAAA,CAChB,KAAKqY,OAAA,GAAU,aAAahL,kBAAA,CAAmB07D,SAAS,CAAC,IACzD;MACE,GAAGvpE;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAM8gF,aAAa9gF,OAAA,GAA+B,CAAC,GAAG;IACpD,MAAMy9F,mBAAA,GAAsB;MAC1Br7D,KAAA,EAAO;MACP6+C,iBAAA,EAAmB;MACnBC,WAAA,EAAa;MACbhoD,KAAA,EAAO;MACP,GAAGl5B;IACL;IAEA,MAAM09F,WAAA,GAAuC;MAC3C,GAAGD;IACL;IAEA,IACEA,mBAAA,CAAoBvxF,MAAA,IACpBjL,MAAA,CAAO+C,IAAA,CAAKy5F,mBAAA,CAAoBvxF,MAAM,EAAEvR,MAAA,GAAS,GACjD;MACA+iG,WAAA,CAAYxxF,MAAA,GAASuxF,mBAAA,CAAoBvxF,MAAA;IAC3C;IAEA,IACEuxF,mBAAA,CAAoBvuE,IAAA,KACnB30B,KAAA,CAAMuH,OAAA,CAAQ27F,mBAAA,CAAoBvuE,IAAI,IACnCuuE,mBAAA,CAAoBvuE,IAAA,CAAKv0B,MAAA,GAAS,IAClCsG,MAAA,CAAO+C,IAAA,CAAKy5F,mBAAA,CAAoBvuE,IAAI,EAAEv0B,MAAA,GAAS,IACnD;MACA+iG,WAAA,CAAYxuE,IAAA,GAAOD,kBAAA,CAAmBwuE,mBAAA,CAAoBvuE,IAAI;IAChE;IAEA,MAAM3kB,QAAA,GAAW,MAAM,KAAK29D,IAAA,CAC1B,GAAG,KAAKrvD,OAAO,YACf6kF,WACF;IAEA,OAAO;MACLxhE,OAAA,EAAS3xB,QAAA,CAAS2xB,OAAA,CAAQ/+B,GAAA,CACvBmhC,MAAA,IAAW,IAAI4/B,MAAA,CAAO;QAAEt/D,MAAA,EAAQ;QAAMo/D,UAAA,EAAY1/B;MAAO,CAAC,CAC7D;MACA93B,IAAA,EAAM+D,QAAA,CAAS/D;IACjB;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAaA,MAAM83D,UAAUp8B,SAAA,EAAmBliC,OAAA,GAA4B,CAAC,GAAG;IACjE,IAAI,CAACkiC,SAAA,EAAW;MACd,MAAM,IAAIlnC,KAAA,CAAM,qDAAqD;IACvE;IAEA,MAAMyiG,mBAAA,GAAsB;MAC1Bxc,iBAAA,EAAmB;MACnBC,WAAA,EAAa;MACbhoD,KAAA,EAAO;MACP,GAAGl5B;IACL;IAEA,MAAMuK,QAAA,GAAW,MAAM,KAAK/J,GAAA,CAC1B,GAAG,KAAKqY,OAAO,YAAYhL,kBAAA,CAAmBq0B,SAAS,CAAC,IACxDu7D,mBACF;IAEA,OAAO,IAAIv/B,MAAA,CAAO;MAAEt/D,MAAA,EAAQ;MAAMo/D,UAAA,EAAYzzD,QAAA,CAAS+zB;IAAO,CAAC;EACjE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMq/D,oBAAoBz7D,SAAA,EAAmB07D,mBAAA,EAA0C;IACrF,IAAI,CAAC17D,SAAA,EAAW;MACd,MAAMlnC,KAAA,CAAM,gEAAgE;IAC9E;IAIA,MAAM6iG,oBAAA,GAAuB,CAC3B,cACA,MACA,mBACA,QACA,cACA,QACA,eACA,gBACA,WACA,SACF;IAEA,WAAW35F,GAAA,IAAO;MAAE,GAAG05F,mBAAA,CAAoBz1F,GAAA;MAAK,GAAGy1F,mBAAA,CAAoBE;IAAM,GAAG;MAC9E,IAAID,oBAAA,CAAqB33D,QAAA,CAAShiC,GAAG,GAAG;QACtC,MAAMlJ,KAAA,CACJ,kBAAkBkJ,GAAG,4BAA4BA,GAAG,iDAAiDA,GAAG,wBAC1G;MACF;IACF;IAEA,OAAO,MAAM,KAAKklE,KAAA,CAChB,GAAG,KAAKvwD,OAAO,YAAYhL,kBAAA,CAAmBq0B,SAAS,CAAC,IACxD07D,mBACF;EACF;EAEA1oB,aAAA,EAAe;IACb,IAAI,KAAK97D,SAAA,EAAW;MAClB,OAAO,KAAKA,SAAA;IACd;IAEA,MAAMkJ,OAAA,GAAU;IAChB,MAAMy7E,YAAA,GAAe;IAErB,IAAIC,eAAA,GAAkB;IACtB,IAAI,KAAKC,aAAA,EAAe;MACtBD,eAAA,GAAkB,eAAe,KAAKC,aAAA,CAAcz+F,IAAI,KAAK,KAAKy+F,aAAA,CAAc37E,OAAO,SAASA,OAAO;IACzG,OAAO;MACL07E,eAAA,GAAkB,mBAAmB17E,OAAO,IAAI,KAAKmuE,IAAA,GAAO,SAAS,SAAS;IAChF;IAEA,MAAM;MAAEyN,EAAA;MAAIC;IAAM,IAAI,KAAKC,gBAAA,IAAoB,CAAC;IAEhD,OACE;IAAA;IAEE,CAAC,MAAMF,EAAE;IAAA;IAET,CAAC,gBAAgBC,KAAK;IAAA;IAEtB,CAAC,iBAAiBJ,YAAY,EAChC,CACA/oE,MAAA,CACA,CAACqpE,aAAA,EAAe,CAACn6F,GAAA,EAAKoB,KAAK,MACzBA,KAAA,IAASA,KAAA,CAAM3K,MAAA,GAAS,IACpB0jG,aAAA,CAAczyF,MAAA,CAAO,IAAI1H,GAAG,IAAIoB,KAAK,EAAE,IACvC+4F,aAAA,EACNL,eACF;EACF;EAAA;AAAA;AAAA;AAAA;EAMAM,aAAallF,SAAA,EAAmB;IAC9B,KAAKA,SAAA,GAAYA,SAAA;EACnB;EASA44E,oBACEhyF,OAAA,GAAgE;IAC9DgO,MAAA,EAAQ,CAAC;IACTgE,OAAA,EAAS,CAAC;IACV3H,MAAA,EAAQ,CAAC;EACX,GACoB;IACpB,MAAMyB,KAAA,GAAQ,KAAKyyF,SAAA,CAAU;IAC7B,MAAMC,aAAA,GAAgB1yF,KAAA,GAAQ;MAAE2yF,aAAA,EAAe3yF;IAAM,IAAI;IACzD,IAAI+Q,MAAA,GAA6B;IACjC,IAAI,KAAKqzE,0BAAA,KAA+B,MAAM;MAC5CrzE,MAAA,GAAS,KAAKqzE,0BAAA,CAA2BrzE,MAAA;MACzC,KAAKqzE,0BAAA,GAA6B;IACpC;IAEA,IAAI,CAAClwF,OAAA,CAAQgS,OAAA,GAAU,qBAAqB,GAAG;MAC7ChS,OAAA,CAAQgS,OAAA,GAAU;QAChB,GAAGhS,OAAA,CAAQgS,OAAA;QACX,uBAAuB2d,QAAA,CAAS;MAClC;IACF;IAEA,MAAM;MACJ3hB,MAAA,EAAQ0wF,wBAAA;MACR1sF,OAAA,EAAS2sF,yBAAA;MACT,GAAGC;IACL,IAAI,KAAK5+F,OAAA,CAAQ6+F,kBAAA,IAAsB,CAAC;IAExC,OAAO;MACL7wF,MAAA,EAAQ;QACNyxB,OAAA,EAAS,KAAKD,MAAA;QACdg5C,aAAA,EAAe,KAAK2X,gBAAA,CAAiB;QACrC7c,OAAA,EAAS,KAAKpvE,GAAA;QACd,GAAGlE,OAAA,CAAQgO,MAAA;QACX,IAAI0wF,wBAAA,IAA4B,CAAC;MACnC;MACA1sF,OAAA,EAAS;QACP,GAAGwsF,aAAA;QACH,oBAAoB,KAAK7qB,WAAA,CAAY;QACrC,mBAAmB,KAAKuB,YAAA,CAAa;QACrC,GAAGl1E,OAAA,CAAQgS,OAAA;QACX,IAAI2sF,yBAAA,IAA6B,CAAC;MACpC;MACA,IAAI9hF,MAAA,GAAS;QAAEA;MAAO,IAAI,CAAC;MAC3B,GAAG7c,OAAA,CAAQqK,MAAA;MACX,IAAIu0F,sBAAA,IAA0B,CAAC;IACjC;EACF;EAEAL,UAAA,EAAY;IACV,IAAI,CAAC,KAAK3qB,YAAA,IAAgB,KAAK+c,SAAA,EAAW,OAAO;IAEjD,OAAO,KAAK/c,YAAA,CAAaoB,QAAA,CAAS;EACpC;EAEAwc,eAAA,EAAiB;IAEf,MAAMsN,IAAA,GAAO;IACb,IAAI,KAAK1N,mBAAA,IAAuB,MAAM;MACpC;IACF;IACA,KAAKA,mBAAA,GAAsB2N,WAAA,CAAY,MAAM;MAE3C,WAAWpmE,OAAA,IAAW13B,MAAA,CAAOsxC,MAAA,CAAOusD,IAAA,CAAK3qC,cAAc,GAAG;QACxDx7B,OAAA,CAAQgJ,KAAA,CAAM;MAChB;IACF,GAAG,GAAG;EACR;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAqBAq9D,cAActB,WAAA,EAA8BuB,UAAA,EAAoB;IAC9D,OAAO,CAAC,CAAC,KAAKllB,MAAA,IAAUD,cAAA,CAAe4jB,WAAA,EAAa,KAAK3jB,MAAA,EAAQklB,UAAU;EAC7E;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAC,cAAc1/F,IAAA,EAAc;IAC1B,OAAO,KAAKgB,GAAA,CACV,GAAG,KAAKqY,OAAO,gBAAgBhL,kBAAA,CAAmBrO,IAAI,CAAC,EACzD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA2/F,iBAAiBC,cAAA,EAAyC;IACxD,OAAO,KAAKl3B,IAAA,CAAkB,GAAG,KAAKrvD,OAAO,gBAAgB;MAC3D,GAAGumF;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAC,iBAAiBxgG,EAAA,EAAYugG,cAAA,EAAqD;IAChF,OAAO,KAAKhN,GAAA,CACV,GAAG,KAAKv5E,OAAO,gBAAgBhL,kBAAA,CAAmBhP,EAAE,CAAC,IACrD;MACE,GAAGugG;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAE,iBAAiB9/F,IAAA,EAAc;IAC7B,OAAO,KAAKY,MAAA,CACV,GAAG,KAAKyY,OAAO,gBAAgBhL,kBAAA,CAAmBrO,IAAI,CAAC,EACzD;EACF;EAAA;AAAA;AAAA;AAAA;EAMA+/F,gBAAA,EAAkB;IAChB,OAAO,KAAK/+F,GAAA,CAA4B,GAAG,KAAKqY,OAAO,cAAc;EACvE;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA2mF,WAAWhgG,IAAA,EAAc;IACvB,OAAO,KAAK0oE,IAAA,CAAkB,GAAG,KAAKrvD,OAAO,UAAU;MAAErZ;IAAK,CAAC;EACjE;EAAA;AAAA;AAAA;AAAA;EAMAigG,UAAA,EAAY;IACV,OAAO,KAAKj/F,GAAA,CAAiB,GAAG,KAAKqY,OAAO,QAAQ;EACtD;EAAA;AAAA;AAAA;AAAA;AAAA;EAOA6mF,WAAWlgG,IAAA,EAAc;IACvB,OAAO,KAAKY,MAAA,CAAoB,GAAG,KAAKyY,OAAO,UAAUhL,kBAAA,CAAmBrO,IAAI,CAAC,EAAE;EACrF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAmgG,KAAKC,YAAA,EAAwBC,YAAA,EAAsB7/F,OAAA,GAAuB,CAAC,GAAG;IAC5E,OAAO,KAAKkoE,IAAA,CAAmB,GAAG,KAAKrvD,OAAO,SAAS;MACrD+mF,YAAA;MACAC,YAAA;MACA,GAAG7/F;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM8/F,oBAAoB7wB,YAAA,EAAsB/yD,KAAA,EAAwB;IACtE,OAAO,MAAM,KAAKgsD,IAAA,CAChB,GAAG,KAAKrvD,OAAO,UAAUhL,kBAAA,CAAmBohE,YAAY,CAAC,UACzD;MACE/yD;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYA6jF,gBAAgBC,SAAA,EAAsB;IACpC,OAAO,KAAK93B,IAAA,CAAkB,GAAG,KAAKrvD,OAAO,eAAemnF,SAAS;EACvE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAC,eAAeviG,IAAA,EAA0B;IACvC,OAAO,KAAK8C,GAAA,CACV,GAAG,KAAKqY,OAAO,eACfnb,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAwiG,aAAa1gG,IAAA,EAAc9B,IAAA,EAA0B;IACnD,OAAO,KAAK8C,GAAA,CACV,GAAG,KAAKqY,OAAO,eAAehL,kBAAA,CAAmBrO,IAAI,CAAC,IACtD9B,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAyiG,gBAAgB3gG,IAAA,EAAc9B,IAAA,EAA0C;IACtE,OAAO,KAAK00F,GAAA,CACV,GAAG,KAAKv5E,OAAO,eAAehL,kBAAA,CAAmBrO,IAAI,CAAC,IACtD9B,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA0iG,gBAAgB5gG,IAAA,EAAc9B,IAAA,EAA0B;IACtD,OAAO,KAAK0C,MAAA,CACV,GAAG,KAAKyY,OAAO,eAAehL,kBAAA,CAAmBrO,IAAI,CAAC,IACtD9B,IACF;EACF;EAEA2iG,eACE/1F,OAAA,EACAtK,OAAA,GAAgC,CAAC,GACjC;IACA,MAAM0lB,OAAA,GAAU;MAAEyU,QAAA,EAAU7vB,OAAA;MAAS,GAAGtK;IAAQ;IAChD,OAAO,KAAKkoE,IAAA,CACV,GAAG,KAAKrvD,OAAO,oBACf6M,OACF;EACF;EAEA46E,YAAYh2F,OAAA,EAA6B;IACvC,OAAO,KAAK49D,IAAA,CACV,GAAG,KAAKrvD,OAAO,iBACfvO,OACF;EACF;EAEAi2F,cAAcj2F,OAAA,EAA+BtK,OAAA,EAAgC;IAC3E,OAAO,KAAKqgG,cAAA,CAAe,CAAC/1F,OAAO,GAAGtK,OAAO;EAC/C;EAEAwgG,uBAAuB3hG,EAAA,EAAY;IACjC,OAAO,KAAK2B,GAAA,CACV,GAAG,KAAKqY,OAAO,oBAAoBhL,kBAAA,CAAmBhP,EAAE,CAAC,EAC3D;EACF;EAEAiB,SAAS2gG,QAAA,EAAiC/iG,IAAA,EAAqB;IAC7D,IAAI+iG,QAAA,IAAY,OAAOA,QAAA,KAAa,UAAU;MAC5C,OAAO,IAAI/hG,QAAA,CAAS,MAAM,MAAM+hG,QAAQ;IAC1C;IAEA,OAAO,IAAI/hG,QAAA,CAAS,MAAM+hG,QAAA,EAAU/iG,IAAI;EAC1C;EAEAgjG,QAAQ9+F,IAAA,EAAmB6+F,QAAA,EAAgC/iG,IAAA,EAAoB;IAC7E,IAAI,OAAO+iG,QAAA,KAAa,UAAU;MAChC,OAAO,IAAI7kB,OAAA,CAAQ,MAAMh6E,IAAA,EAAM6+F,QAAA,EAAU/iG,IAAI;IAC/C;IAEA,OAAO,IAAIk+E,OAAA,CAAQ,MAAMh6E,IAAA,EAAM,MAAM6+F,QAAQ;EAC/C;EAEAE,uBAAA,EAAyB;IACvB,IAAI,CAAC,KAAK5mB,MAAA,EAAQ;MAChB,MAAM,IAAI/+E,KAAA,CACR,0GACF;IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAaA+gF,cAAcn6E,IAAA,EAAmB/C,EAAA,EAAmBnB,IAAA,EAAoB;IACtE,KAAKijG,sBAAA,CAAuB;IAC5B,MAAM5hG,IAAA,GAAO;MACXF,EAAA;MACA+C,IAAA;MACA,GAAGlE;IACL;IACA,OAAO,KAAKwqE,IAAA,CAAmC,KAAKrvD,OAAA,GAAU,aAAa9Z,IAAI;EACjF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA6hG,kBAAkB/hG,EAAA,EAAmBnB,IAAA,EAAoB;IACvD,KAAKijG,sBAAA,CAAuB;IAC5B,OAAO,KAAK5kB,aAAA,CAAc,QAAQl9E,EAAA,EAAInB,IAAI;EAC5C;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWAmjG,qBAAqBhiG,EAAA,EAAmBnB,IAAA,EAAoB;IAC1D,KAAKijG,sBAAA,CAAuB;IAC5B,OAAO,KAAK5kB,aAAA,CAAc,WAAWl9E,EAAA,EAAInB,IAAI;EAC/C;EAEAu+E,WAAWp9E,EAAA,EAAY;IACrB,KAAK8hG,sBAAA,CAAuB;IAC5B,OAAO,KAAKngG,GAAA,CACV,KAAKqY,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,EACpD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAq9E,cAAcr9E,EAAA,EAAYnB,IAAA,EAAkC;IAC1D,KAAKijG,sBAAA,CAAuB;IAC5B,OAAO,KAAKvO,GAAA,CACV,KAAKv5E,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,IAClDnB,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA0+E,kBAAkBv9E,EAAA,EAAYsX,OAAA,EAAmB;IAC/C,KAAKwqF,sBAAA,CAAuB;IAC5B,MAAM5hG,IAAA,GAAO;MAAE4+E,UAAA,EAAYxnE;IAAQ;IACnC,OAAO,KAAK+xD,IAAA,CACV,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,eAClDE,IACF;EACF;EAEA49E,oBACE99E,EAAA,EACA8G,OAAA,GAA2C,CAAC,GAC5CupB,IAAA,GAAgC,EAAC,EACjClvB,OAAA,GAAU,CAAC,GACX;IACA,KAAK2gG,sBAAA,CAAuB;IAC5B,OAAO,KAAKz4B,IAAA,CACV,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,kBAClD;MACEqN,MAAA,EAAQvG,OAAA,IAAU,CAAC;MACnBupB,IAAA,EAAMA,IAAA,IAAQ,EAAC;MACf,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAs8E,qBAAqBz9E,EAAA,EAAYsX,OAAA,EAAmB;IAClD,KAAKwqF,sBAAA,CAAuB;IAC5B,MAAM5hG,IAAA,GAAO;MAAE4+E,UAAA,EAAYxnE;IAAQ;IACnC,OAAO,KAAK+xD,IAAA,CACV,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,kBAClDE,IACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA+hG,cAAcn7F,OAAA,EAAYupB,IAAA,EAAoBlvB,OAAA,GAAgC,CAAC,GAAG;IAChF,KAAK2gG,sBAAA,CAAuB;IAC5B,OAAO,KAAKz4B,IAAA,CAMV,KAAKrvD,OAAA,GAAU,mBAAmB;MAClC3M,MAAA,EAAAvG,OAAA;MACAupB,IAAA;MACA,GAAGlvB;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAu8E,cAAc19E,EAAA,EAAY;IACxB,KAAK8hG,sBAAA,CAAuB;IAC5B,OAAO,KAAKvgG,MAAA,CAAoB,KAAKyY,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,EAAE;EACtF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA49E,oBAAoBskB,SAAA,EAAmBl5C,QAAA,EAAkB;IACvD,KAAK84C,sBAAA,CAAuB;IAC5B,OAAO,KAAKngG,GAAA,CACV,KAAKqY,OAAA,GACH,aAAahL,kBAAA,CAAmBkzF,SAAS,CAAC,WAAWlzF,kBAAA,CAAmBg6C,QAAQ,CAAC,EACrF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAhoD,eAAemO,MAAA,EAAsB;IACnC,KAAK2yF,sBAAA,CAAuB;IAC5B,OAAO,KAAKz4B,IAAA,CAQV,KAAKrvD,OAAA,GAAU,cAAc;MAAE,GAAG7K;IAAO,CAAC;EAC9C;EAEAvN,YAAY5B,EAAA,EAAYmB,OAAA,EAA8B;IACpD,KAAK2gG,sBAAA,CAAuB;IAC5B,OAAO,KAAKngG,GAAA,CAQV,KAAKqY,OAAA,GAAU,cAAchL,kBAAA,CAAmBhP,EAAE,CAAC,IAAI;MAAE,GAAGmB,OAAA,EAASuzD;IAAM,CAAC;EAChF;EAEAtzD,cAAcpB,EAAA,EAAYmB,OAAA,EAAsD;IAC9E,KAAK2gG,sBAAA,CAAuB;IAC5B,OAAO,KAAKz4B,IAAA,CAQV,KAAKrvD,OAAA,GAAU,cAAchL,kBAAA,CAAmBhP,EAAE,CAAC,UAAU;MAC7DmiG,aAAA,EAAehhG,OAAA,EAASihG,YAAA;MACxBC,OAAA,EAASlhG,OAAA,EAASmhG;IACpB,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMC,eACJz7F,OAAA,EACAupB,IAAA,EACAlvB,OAAA,EACA;IACA,KAAK2gG,sBAAA,CAAuB;IAC5B,OAAO,MAAM,KAAKz4B,IAAA,CAMhB,KAAKrvD,OAAA,GAAU,oBAAoB;MACnC3M,MAAA,EAAAvG,OAAA;MACAupB,IAAA;MACA,IAAIlvB,OAAA,IAAW,CAAC;IAClB,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUAG,eAAetB,EAAA,EAAYmP,MAAA,EAA+B;IACxD,KAAK2yF,sBAAA,CAAuB;IAC5B,OAAO,KAAKvO,GAAA,CAMT,KAAKv5E,OAAA,GAAU,cAAchL,kBAAA,CAAmBhP,EAAE,CAAC,IAAImP,MAAM;EAClE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA3N,eAAexB,EAAA,EAAY;IACzB,KAAK8hG,sBAAA,CAAuB;IAC5B,OAAO,KAAKvgG,MAAA,CACV,KAAKyY,OAAA,GAAU,cAAchL,kBAAA,CAAmBhP,EAAE,CAAC,EACrD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA0B,aAAa1B,EAAA,EAAY;IACvB,KAAK8hG,sBAAA,CAAuB;IAC5B,OAAO,KAAKz4B,IAAA,CACV,KAAKrvD,OAAA,GAAU,cAAchL,kBAAA,CAAmBhP,EAAE,CAAC,OACrD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA2lD,UAAU/1C,GAAA,EAAa;IACrB,OAAO,KAAKjO,GAAA,CAAgC,KAAKqY,OAAA,GAAU,OAAO;MAAEpK;IAAI,CAAC;EAC3E;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA4yF,QAAQxiG,EAAA,EAAY;IAClB,OAAO,KAAK2B,GAAA,CACV,GAAG,KAAKqY,OAAO,UAAUhL,kBAAA,CAAmBhP,EAAE,CAAC,EACjD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMyiG,eAAeptC,IAAA,EAAgBl0D,OAAA,GAAqC,CAAC,GAAG;IAC5E,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,oBACf;MACEq7C,IAAA;MACA,GAAGl0D;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMuhG,YAAY5hG,QAAA,EAAoBK,OAAA,GAA6B,CAAC,GAAG;IACrE,IACE,OAAOA,OAAA,CAAQ6sB,IAAA,KAAS,eACxB,CAAC,CAAC,QAAQ,QAAQ,SAAS,EAAEqZ,QAAA,CAASlmC,OAAA,CAAQ6sB,IAAI,GAClD;MACA,MAAM,IAAI7xB,KAAA,CACR,sEACF;IACF;IACA,IACE,OAAOgF,OAAA,CAAQwhG,aAAA,KAAkB,eACjC,CAAC,CAAC,QAAQ,MAAM,EAAEt7D,QAAA,CAASlmC,OAAA,CAAQwhG,aAAa,GAChD;MACA,MAAM,IAAIxmG,KAAA,CACR,uEACF;IACF;IACA,IACE,OAAOgF,OAAA,CAAQizB,QAAA,KAAa,eAC5B,CAAC,CAAC,QAAQ,QAAQ,SAAS,EAAEiT,QAAA,CAASlmC,OAAA,CAAQizB,QAAQ,GACtD;MACA,MAAM,IAAIj4B,KAAA,CACR,0EACF;IACF;IACA,OAAO,MAAM,KAAKktE,IAAA,CAAiC,KAAKrvD,OAAA,GAAU,iBAAiB;MACjFlZ,QAAA;MACA,GAAGK;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAaA,MAAMyhG,iBAAiBC,QAAA,EAAkB;IACvC,OAAO,MAAM,KAAKx5B,IAAA,CAChB,KAAKrvD,OAAA,GAAU,gBACf;MACE6oF;IACF,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMC,cAAcj2F,IAAA,EAAc1L,OAAA,GAA+B;IAAE23F,IAAA,EAAM;EAAS,GAAG;IACnF,OAAO,MAAM,KAAKzvB,IAAA,CAChB,KAAKrvD,OAAA,GAAU,YACf;MACEnN,IAAA;MACA,GAAG1L;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAM4hG,WAAW/iG,EAAA,EAAY;IAC3B,OAAO,MAAM,KAAK2B,GAAA,CAChB,KAAKqY,OAAA,GAAU,YAAYhL,kBAAA,CAAmBhP,EAAE,CAAC,EACnD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAcA,MAAMgjG,aAAa7hG,OAAA,EAAuC;IACxD,OAAO,MAAM,KAAKQ,GAAA,CAChB,KAAKqY,OAAA,GAAU,YACf7Y,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAM8hG,mBAAmBC,YAAA,EAAkC;IACzD,OAAO,MAAM,KAAK75B,IAAA,CAChB,KAAKrvD,OAAA,GAAU,mBACf;MACE2/E,aAAA,EAAeuJ;IACjB,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMC,mBAAmB;IAAEpgG,IAAA;IAAMpC;EAAK,GAAmB;IACvD,OAAO,MAAM,KAAKY,MAAA,CAChB,KAAKyY,OAAA,GACH,mBAAmBhL,kBAAA,CAAmBjM,IAAI,CAAC,IAAIiM,kBAAA,CAAmBrO,IAAI,CAAC,EAC3E;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMyiG,kBAAA,EAAoB;IACxB,OAAO,MAAM,KAAKzhG,GAAA,CAChB,KAAKqY,OAAA,GAAU,iBACjB;EACF;EAAA;AAAA;AAAA;EAKAqpF,oCAAA,EAAsC;IACpC,OAAQ,KAAKhS,0BAAA,GAA6B,IAAIhpC,eAAA,CAAgB;EAChE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMi7C,cAActjG,EAAA,EAAY;IAC9B,OAAO,MAAM,KAAKqpE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,aAAahL,kBAAA,CAAmBhP,EAAE,CAAC,SACpD;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMwnE,WAAWC,IAAA,EAAsBpmC,MAAA,EAAiB;IACtD,OAAO,MAAM,KAAKgoC,IAAA,CAA0C,KAAKrvD,OAAA,GAAU,UAAU;MACnF,GAAGytD,IAAA;MACH,IAAIpmC,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM6jD,QAAQllF,EAAA,EAAYqhC,MAAA,EAA4D;IACpF,OAAO,MAAM,KAAK1/B,GAAA,CAChB,KAAKqY,OAAA,GAAU,UAAUhL,kBAAA,CAAmBhP,EAAE,CAAC,IAC/CqhC,MAAA,GAAS;MAAET,OAAA,EAASS;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM8jD,WAAW1d,IAAA,EAAgBpmC,MAAA,EAAiB;IAChD,OAAO,MAAM,KAAKkyD,GAAA,CAAyC,KAAKv5E,OAAA,GAAU,UAAU;MAClF,GAAGytD,IAAA;MACH,IAAIpmC,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMikD,kBACJtlF,EAAA,EACAqlF,iBAAA,EACAhkD,MAAA,EAC8C;IAC9C,OAAO,MAAM,KAAKkpC,KAAA,CAChB,KAAKvwD,OAAA,GAAU,UAAUhL,kBAAA,CAAmBhP,EAAE,CAAC,IAC/C;MACE,GAAGqlF,iBAAA;MACH,IAAIhkD,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMmkD,WAAWxlF,EAAA,EAAYqhC,MAAA,EAAuC;IAClE,OAAO,MAAM,KAAK9/B,MAAA,CAChB,KAAKyY,OAAA,GAAU,UAAUhL,kBAAA,CAAmBhP,EAAE,CAAC,IAC/C;MACE,IAAIqhC,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQAkkD,UAAUvlF,EAAA,EAAYqhC,MAAA,EAA+D;IACnF,OAAO,KAAKikD,iBAAA,CACVtlF,EAAA,EACA;MACEsJ,GAAA,EAAK;QACH86E,SAAA,EAAW;MACb;IACF,GACA/iD,MACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMqkD,iBAAiBv1B,MAAA,EAAgBtiD,MAAA,EAAwBwzB,MAAA,EAAiB;IAC9E,OAAO,MAAM,KAAKgoC,IAAA,CAChB,KAAKrvD,OAAA,GAAU,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,YACnD;MACE,GAAGtiD,MAAA;MACH,IAAIwzB,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMkiE,cAAcpzC,MAAA,EAAgB60B,QAAA,EAAkB3jD,MAAA,EAAiB;IACrE,OAAO,MAAM,KAAK1/B,GAAA,CAChB,KAAKqY,OAAA,GACH,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,YAAYnhD,kBAAA,CAAmBg2E,QAAQ,CAAC,IAC9E3jD,MAAA,GAAS;MAAET,OAAA,EAASS;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMukD,iBAAiBz1B,MAAA,EAAgBtiD,MAAA,EAAwBwzB,MAAA,EAAiB;IAC9E,OAAO,MAAM,KAAKkyD,GAAA,CAChB,KAAKv5E,OAAA,GAAU,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,YACnD;MACE,GAAGtiD,MAAA;MACH,IAAIwzB,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMykD,iBAAiB31B,MAAA,EAAgB60B,QAAA,EAAkB3jD,MAAA,EAAiB;IACxE,OAAO,MAAM,KAAK9/B,MAAA,CAChB,KAAKyY,OAAA,GACH,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,YAAYnhD,kBAAA,CAAmBg2E,QAAQ,CAAC,IAC9E3jD,MAAA,GAAS;MAAET,OAAA,EAASS;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMwvC,aACJxtC,SAAA,EACA8sB,MAAA,EACAygB,IAAA,EACAvvC,MAAA,EACA;IACA,OAAO,MAAM,KAAKgoC,IAAA,CAChB,KAAKrvD,OAAA,GACH,aAAahL,kBAAA,CAAmBq0B,SAAS,CAAC,UAAUr0B,kBAAA,CAAmBmhD,MAAM,CAAC,SAChF;MACEygB,IAAA;MACA,IAAIvvC,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA+kD,cAAc/iD,SAAA,EAAmB8sB,MAAA,EAAgBg2B,UAAA,EAAoB9kD,MAAA,EAAiB;IACpF,OAAO,KAAKwvC,YAAA,CACVxtC,SAAA,EACA8sB,MAAA,EACA;MACE2yB,WAAA,EAAaqD;IACf,GACA9kD,MACF;EACF;EAEA,MAAM2vC,eACJ3tC,SAAA,EACA8sB,MAAA,EACA4gB,MAAA,EACA1vC,MAAA,EACA;IACA,OAAO,MAAM,KAAK9/B,MAAA,CAChB,KAAKyY,OAAA,GACH,aAAahL,kBAAA,CAAmBq0B,SAAS,CAAC,UAAUr0B,kBAAA,CAAmBmhD,MAAM,CAAC,SAASnhD,kBAAA,CACrF+hE,MACF,CAAC,IACH;MACE,IAAI1vC,MAAA,GAAS;QAAET,OAAA,EAASS;MAAO,IAAI,CAAC;IACtC,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAM2mD,WACJlhF,OAAA,GAA4B,CAAC,GAC7BupB,IAAA,GAAiB,EAAC,EAClBlvB,OAAA,GAA6B,CAAC,GAC9BkgC,MAAA,EAC2C;IAC3C,MAAMmiE,CAAA,GAAIniE,MAAA,GAAS,YAAYA,MAAM,KAAK;IAC1C,OAAO,MAAM,KAAKgoC,IAAA,CAChB,KAAKrvD,OAAA,GAAU,eAAewpF,CAAC,IAC/B;MACEn2F,MAAA,EAAAvG,OAAA;MACAupB,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMulF,eACJv2B,MAAA,EACArpD,OAAA,GAA4B,CAAC,GAC7BupB,IAAA,GAAiB,EAAC,EAClBlvB,OAAA,GAA6B,CAAC,GAC9BkgC,MAAA,EAC6C;IAC7C,MAAMmiE,CAAA,GAAIniE,MAAA,GAAS,YAAYA,MAAM,KAAK;IAC1C,OAAO,MAAM,KAAKgoC,IAAA,CAChB,KAAKrvD,OAAA,GAAU,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,SAASqzC,CAAC,IAC7D;MACEn2F,MAAA,EAAAvG,OAAA;MACAupB,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAWA,MAAMqlF,iBACJr2B,MAAA,EACArpD,OAAA,GAA4B,CAAC,GAC7BupB,IAAA,GAAiB,EAAC,EAClBlvB,OAAA,GAA6B,CAAC,GAC9BkgC,MAAA,EAC+C;IAC/C,MAAMmiE,CAAA,GAAIniE,MAAA,GAAS,YAAYA,MAAM,KAAK;IAC1C,OAAO,MAAM,KAAKgoC,IAAA,CAChB,KAAKrvD,OAAA,GAAU,UAAUhL,kBAAA,CAAmBmhD,MAAM,CAAC,SAASqzC,CAAC,IAC7D;MACEn2F,MAAA,EAAQ;QAAE,GAAGvG,OAAA;QAAQ28F,SAAA,EAAW;MAAK;MACrCpzE,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAMuiG,oBACJ58F,OAAA,GAAqC,CAAC,GACtCupB,IAAA,GAAgC,EAAC,EACjClvB,OAAA,GAAsC,CAAC,GACa;IACpD,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,qBACf;MACE3M,MAAA,EAAAvG,OAAA;MACAupB,IAAA,EAAMD,kBAAA,CAAmBC,IAAI;MAC7B,GAAGlvB;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUA,MAAMwiG,YACJC,WAAA,EACAC,WAAA,EACA1iG,OAAA,GAAgC,CAAC,GACjC;IACA,OAAO,MAAM,KAAKkoE,IAAA,CAChB,KAAKrvD,OAAA,GAAU,uCACf;MACE4pF,WAAA;MACAC,WAAA;MACA,GAAG1iG;IACL,CACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAeA,MAAM2iG,YACJ3iG,OAAA,GAII,CAAC,GACL;IACA,MAAM0lB,OAAA,GAAU;MACd,GAAG1lB,OAAA;MACHkvB,IAAA,EAAMlvB,OAAA,CAAQkvB,IAAA,GAAOD,kBAAA,CAAmBjvB,OAAA,CAAQkvB,IAAI,IAAI;IAC1D;IAEA,OAAO,MAAM,KAAKg5C,IAAA,CAA0B,KAAKrvD,OAAA,GAAU,iBAAiB6M,OAAO;EACrF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAM+pE,eAAe;IAAEvtD,SAAA;IAAW,GAAGliC;EAAQ,GAA0B;IACrE,OAAO,MAAM,KAAKkoE,IAAA,CAChB,GAAG,KAAKrvD,OAAO,aAAaqpB,SAAS,cACrCliC,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMwvF,eAAe;IAAEttD,SAAA;IAAW,GAAGliC;EAAQ,GAA0B;IACrE,OAAO,MAAM,KAAKopE,KAAA,CAChB,GAAG,KAAKvwD,OAAO,aAAaqpB,SAAS,cACrCliC,OACF;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA,MAAM0vF,eAAextD,SAAA,EAAmBhC,MAAA,EAAuC;IAC7E,OAAO,MAAM,KAAK9/B,MAAA,CAChB,GAAG,KAAKyY,OAAO,aAAaqpB,SAAS,cACrChC,MAAA,GAAS;MAAET,OAAA,EAASS;IAAO,IAAI,CAAC,CAClC;EACF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAQA,MAAMytD,eAAe;IAAEzhF,MAAA,EAAAvG,OAAA;IAAQupB,IAAA;IAAM,GAAGkX;EAAK,IAA2B,CAAC,GAAG;IAC1E,OAAO,MAAM,KAAK8hC,IAAA,CAA6B,GAAG,KAAKrvD,OAAO,oBAAoB;MAChFgwD,iBAAA,EAAmBljE,OAAA;MACnBupB,IAAA,EAAMA,IAAA,IAAQD,kBAAA,CAAmBC,IAAI;MACrC,GAAGkX;IACL,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAw8D,WACE/0E,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IAAA,EACA;IACA,OAAO,KAAK07C,QAAA,CAAS,GAAG,KAAK1vD,OAAO,iBAAiBgV,GAAA,EAAKruB,IAAA,EAAMyS,WAAA,EAAa4a,IAAI;EACnF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAYAg2E,YACEh1E,GAAA,EACAruB,IAAA,EACAyS,WAAA,EACA4a,IAAA,EACA;IACA,OAAO,KAAK07C,QAAA,CAAS,GAAG,KAAK1vD,OAAO,kBAAkBgV,GAAA,EAAKruB,IAAA,EAAMyS,WAAA,EAAa4a,IAAI;EACpF;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASA47C,WAAWh6D,GAAA,EAAa;IACtB,OAAO,KAAKrO,MAAA,CAAoB,GAAG,KAAKyY,OAAO,iBAAiB;MAAEpK;IAAI,CAAC;EACzE;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EASAi6D,YAAYj6D,GAAA,EAAa;IACvB,OAAO,KAAKrO,MAAA,CAAoB,GAAG,KAAKyY,OAAO,kBAAkB;MAAEpK;IAAI,CAAC;EAC1E;AACF;;;AuEthJO,IAAMq0F,SAAA,GAAY;EACvB,mBAAmB;EACnB,mBAAmB;EACnB,kBAAkB;EAClB,kBAAkB;EAClB,iBAAiB;EACjB,qBAAqB;EACrB,mBAAmB;EACnB,mBAAmB;EACnB,mBAAmB;EACnB,iBAAiB;EACjB,iBAAiB;EACjB,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,eAAe;EACf,gBAAgB;EAChB,mBAAmB;EACnB,qBAAqB;EACrB,iCAAiC;EACjC,gCAAgC;EAChC,sCAAsC;EACtC,kCAAkC;EAClC,gCAAgC;EAChC,gCAAgC;EAChC,wBAAwB;EACxB,0BAA0B;EAC1B,4BAA4B;EAC5B,4BAA4B;EAC5B,8BAA8B;EAC9B,qCAAqC;EACrC,mCAAmC;EACnC,eAAe;EACf,gBAAgB;EAChB,oBAAoB;EACpB,qBAAqB;EACrB,qBAAqB;EACrB,oBAAoB;EACpB,gBAAgB;EAChB,oBAAoB;EACpB,kBAAkB;EAClB,gBAAgB;EAChB,eAAe;EACf,eAAe;EACf,gBAAgB;EAChB,yBAAyB;EACzB,iBAAiB;EACjB,gCAAgC;EAChC,gBAAgB;EAChB,uBAAuB;EACvB,sBAAsB;EAAA;EAEtB,uBAAuB;EACvB,qBAAqB;EACrB,sBAAsB;EAAA;EAGtB,oBAAoB;EACpB,6BAA6B;EAC7B,sBAAsB;EACtB,wBAAwB;EACxB,qBAAqB;EACrB,wBAAwB;EAAA;EAGxB,oBAAoB;EACpB,oBAAoB;EACpB,oBAAoB;EACpB,6BAA6B;AAC/B;;;ACnEO,IAAMC,KAAA,GAAQ;AACd,IAAMC,IAAA,GAAO;AACb,IAAMC,WAAA,GAAc,CAAC,GAAG;AACxB,IAAMC,OAAA,GAAU,CAAC,GAAG;AACpB,IAAMC,WAAA,GAAc;AACpB,IAAMC,WAAA,GAAc;AAKpB,IAAMC,UAAA,GAAN,MAAiB;EAOtB1kG,YACEa,IAAA,EACA8jG,QAAA,EACAC,SAAA,GAAYN,WAAA,EACZp0E,KAAA,GAAQq0E,OAAA,EACRM,KAAA,GAAQ,OACRC,MAAA,GAA6CV,KAAA,EAC7C;IACA,KAAKvjG,IAAA,GAAOA,IAAA;IACZ,KAAKikG,MAAA,GAASA,MAAA;IACd,KAAKD,KAAA,GAAQA,KAAA;IACb,KAAKF,QAAA,GAAWA,QAAA;IAChB,KAAKC,SAAA,GAAYA,SAAA;IACjB,KAAK10E,KAAA,GAAQA,KAAA;EACf;AACF;AAGO,IAAM60E,QAAA,GAAW,IAAIL,UAAA,CAC1B,aACAF,WAAA,EACAF,WAAA,EACAC,OAAA,EACA,OACAH,KACF;AAGO,IAAMY,OAAA,GAAU,IAAIN,UAAA,CACzB,YACAD,WAAA,EACAH,WAAA,EACAC,OAAA,EACA,OACAF,IACF;AAWO,IAAMY,YAAA,GAAe;EAC1BC,KAAA,EAAO;EACPC,SAAA,EAAW;EACXC,aAAA,EAAe;EACfC,gBAAA,EAAkB;EAClBC,KAAA,EAAO;EACPC,IAAA,EAAM;AACR;AAEO,IAAMC,kBAAA,GAAqB;EAChCC,QAAA,EAAU;EACVC,OAAA,EAAS;EACTC,aAAA,EAAe;EACfC,aAAA,EAAe;EACfC,cAAA,EAAgB;EAChBC,mBAAA,EAAqB;EACrBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,iBAAA,EAAmB;EACnBC,mBAAA,EAAqB;EACrBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,iBAAA,EAAmB;EACnBC,cAAA,EAAgB;EAChBC,cAAA,EAAgB;EAChBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,uBAAA,EAAyB;EACzBC,uBAAA,EAAyB;EACzBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;EAClBC,gBAAA,EAAkB;AACpB;;;ACoVO,IAAMC,YAAA,GAAN,cAA2B5qG,KAAA,CAAM;EAItC2D,YACEyL,OAAA,EACA;IACExI;EACF,GAGA;IACA,MAAMwI,OAAO;IAVf,KAAO5K,IAAA,GAAO;IAWZ,KAAKoC,IAAA,GAAOA,IAAA;EACd;EAAA;EAAA;EAIA6I,OAAA,EAAS;IACP,OAAO;MACLL,OAAA,EAAS,GAAG,KAAKxI,IAAI,MAAM,KAAKwI,OAAO;MACvCZ,KAAA,EAAO,KAAKA,KAAA;MACZhK,IAAA,EAAM,KAAKA;IACb;EACF;AACF;;;ACvcO,IAAMqmG,oBAAA,GAAN,MAA2B;EAShClnG,YAAY;IACVC,MAAA;IACAglE;EACF,GAGG;IAdH,KAAOklB,UAAA,GAAa;IACpB,KAAOgd,yBAAA,GAAgE;IACvE,KAAQC,mBAAA,GAAwD,EAAC;IACjE,KAAQC,4BAAA,GACN,mBAAItiD,GAAA,CAAI;IAqBV;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO5B,IAAA,GAAO,YAAY;MACxB,IAAI;QAIF,IAAI,KAAKljD,MAAA,CAAOiuB,IAAA,EAAMhuB,EAAA,IAAM,KAAKD,MAAA,CAAO+tE,YAAA,EAAcC,SAAA,EAAW;UAC/D,MAAM,KAAKq5B,0BAAA,CAA2B;UACtC,MAAM,KAAKC,yBAAA,CAA0B,IAAI;QAC3C;QAOA,IAAI,KAAKJ,yBAAA,EAA2B;UAClC,KAAKA,yBAAA,CAA0BlpF,WAAA,CAAY;QAC7C;QAEA,KAAKkpF,yBAAA,GAA4B,KAAKlnG,MAAA,CAAO8gE,EAAA,CAC3C,sBACA,MAAOxjD,KAAA,IAAU;UACf,IAAIA,KAAA,CAAMq4D,MAAA,EAAQ;YAChB,MAAM,KAAK0xB,0BAAA,CAA2B;YACtC,MAAM,KAAKC,yBAAA,CAA0B,IAAI;UAC3C,OAAO;YACL,MAAM,KAAKA,yBAAA,CAA0B,KAAK;UAC5C;QACF,CACF;MACF,SAASj7F,KAAA,EAAO;QACd2X,OAAA,CAAQyY,GAAA,CAAI,iCAAiCpwB,KAAK;MACpD;IACF;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOk7F,kBAAA,GAAsB7qF,QAAA,IAAwC;MACnE,KAAKyqF,mBAAA,CAAoB9pG,IAAA,CAAKqf,QAAQ;MAEtC,OAAO;QACLsB,WAAA,EAAaA,CAAA,KAAM;UACjB,KAAKmpF,mBAAA,GAAsB,KAAKA,mBAAA,CAAoB75F,MAAA,CACjDmB,EAAA,IAAOA,EAAA,KAAOiO,QACjB;QACF;MACF;IACF;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOytE,gCAAA,GAAmC,CACxCpiC,GAAA,EACAzpD,QAAA,KACG;MACH,KAAK8oG,4BAAA,CAA6B79F,GAAA,CAAIw+C,GAAA,EAAKzpD,QAAQ;IACrD;IAOA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAQgpG,yBAAA,GAA4B,MAAOp7F,MAAA,IAAoB;MAC7D,KAAKg+E,UAAA,GAAah+E,MAAA;MAClB,KAAKi7F,mBAAA,CAAoBliG,OAAA,CAASvF,CAAA,IAAMA,CAAA,CAAEwM,MAAM,CAAC;MAEjD,IAAIA,MAAA,EAAQ;QACV,MAAMof,QAAA,GAAW3vB,KAAA,CAAMyQ,IAAA,CAAK,KAAKg7F,4BAAA,CAA6BzzD,MAAA,CAAO,CAAC,EAAEp1C,GAAA,CAAK2zB,EAAA,IAC3EA,EAAA,CAAG,CACL;QACA,MAAMxU,OAAA,CAAQ2N,GAAA,CAAIC,QAAQ;QAE1B,KAAK87E,4BAAA,CAA6B12F,KAAA,CAAM;MAC1C;IACF;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAQqwF,IAAA,GAAO,YAAY;MACzB,IAAI,CAAC,KAAK/gG,MAAA,EAAQiuB,IAAA,EAAM;QACtB;MACF;MACA,IAAI;QACF,MAAMqnC,IAAA,GAAO,MAAM,KAAK0P,SAAA,CAAUwiC,iBAAA,CAAkB;QAEpD,IAAIlyC,IAAA,CAAKv5D,MAAA,KAAW,GAAG;UACrB;QACF;QAGA,MAAM22F,YAAA,GAAe,MAAM,KAAK1tB,SAAA,CAAUyiC,eAAA,CAAgB;UACxDnmE,MAAA,EAAQ,KAAKthC,MAAA,CAAOiuB,IAAA,CAAKhuB;QAC3B,CAAC;QAED,IAAIyyF,YAAA,EAAc;UAChB,MAAMgV,gBAAA,GAAmB,IAAInuF,IAAA,CAAKm5E,YAAY;UAC9C,MAAMiV,OAAA,GAAU,mBAAIpuF,IAAA,CAAK;UAGzB,MAAMq0B,IAAA,GAAOpjC,IAAA,CAAKuO,KAAA,EACf4uF,OAAA,CAAQ9yE,OAAA,CAAQ,IAAI6yE,gBAAA,CAAiB7yE,OAAA,CAAQ,MAAM,MAAO,KAAK,KAAK,GACvE;UAEA,IAAI+Y,IAAA,GAAO,IAAI;YAGb,MAAM,KAAKo3B,SAAA,CAAU4iC,OAAA,CAAQ;UAC/B,OAAO;YACL,MAAM5mG,MAAA,GAAS,MAAM,KAAKhB,MAAA,CAAO+gG,IAAA,CAAKzrC,IAAA,EAAMoyC,gBAAA,CAAiBr5F,WAAA,CAAY,CAAC;YAC1E,MAAMw5F,aAAA,GAAgB7mG,MAAA,CAAOk8C,MAAA,CAAO3+C,GAAA,CAAK+e,KAAA,IACvC,KAAK0nD,SAAA,CAAUoS,WAAA,CAAY;cAAE95D,KAAA;cAAOqsC,OAAA,EAAS;YAAM,CAAC,CACtD;YACA,MAAMm+C,YAAA,GAAe,MAAMpqF,OAAA,CAAQ2N,GAAA,CAAIw8E,aAAa;YACpD,MAAME,OAAA,GAAUD,YAAA,CAAaE,IAAA,CAAK;YAElC,IAAID,OAAA,CAAQhsG,MAAA,EAAQ;cAClB,MAAM,KAAKipE,SAAA,CAAUijC,eAAA,CAAgBF,OAAO;YAC9C;UACF;QACF;QACA,MAAM,KAAK/iC,SAAA,CAAUytB,oBAAA,CAAqB;UACxCnxD,MAAA,EAAQ,KAAKthC,MAAA,CAAOiuB,IAAA,CAAKhuB,EAAA;UACzByyF,YAAA,GAAc,mBAAIn5E,IAAA,CAAK,GAAEnX,QAAA,CAAS;QACpC,CAAC;MACH,SAASlD,CAAA,EAAG;QACV8kB,OAAA,CAAQyY,GAAA,CAAI,+CAA+Cv9B,CAAC;QAG5D,MAAM,KAAK8lE,SAAA,CAAU4iC,OAAA,CAAQ;MAC/B;IACF;IAKA;AAAA;AAAA;IAAA,KAAQP,0BAAA,GAA6B,YAAY;MAC/C,MAAM,KAAKriC,SAAA,CAAUkjC,mBAAA,CAAoB;MACzC,MAAM,KAAKnH,IAAA,CAAK;IAClB;IAjKE,KAAK/gG,MAAA,GAASA,MAAA;IACd,KAAKglE,SAAA,GAAYA,SAAA;EACnB;AAgKF;;;ACrKO,IAAemjC,iBAAA,GAAf,MAAyD;EAK9DpoG,YAAY;IAAEC;EAAO,GAA2B;IAoZhD;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOkjD,IAAA,GAAO,MAAO5hB,MAAA,IAAmB;MACtC,IAAI;QACF,IAAI,CAAC,KAAK8mE,gBAAA,CAAiB9mE,MAAM,GAAG;UAGlC,MAAM2hB,WAAA,GAAc,MAAM,KAAKolD,YAAA,CAAa;UAC5C,IAAIplD,WAAA,EAAa;YACf,MAAM,KAAKgnC,WAAA,CAAY/mC,IAAA,CAAK;YAC5B,KAAKvhC,KAAA,CAAMkmB,WAAA,CAAY;cAAEob,WAAA,EAAa;cAAM3hB;YAAO,CAAC;UACtD,OAAO;YACL,KAAK3f,KAAA,CAAMkmB,WAAA,CAAY;cAAEob,WAAA,EAAa;YAAM,CAAC;UAC/C;QACF;MACF,SAAS52C,KAAA,EAAO;QACd,KAAKsV,KAAA,CAAMkmB,WAAA,CAAY;UAAEob,WAAA,EAAa;UAAO3hB,MAAA,EAAQ;QAAU,CAAC;QAChEtd,OAAA,CAAQyY,GAAA,CAAI,0BAA0BpwB,KAAK;MAC7C;IACF;IAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO44D,kBAAA,GAAqB,CAC1BqjC,aAAA,EACA;MAAE1zF;IAAO,MACN;MACH,MAAM;QAAEquC;MAAY,IAAI,KAAKthC,KAAA,CAAMqnB,cAAA,CAAe;MAClD,IAAI,CAACia,WAAA,EAAa;QAChB;MACF;MACA5mB,WAAA,CAAYisE,aAAA,CAAc,IAAI,GAAG;QAAEziG,OAAA,EAAS,aAAa+O,MAAM;MAAI,CAAC;IACtE;IAoBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO2zF,uBAAA,GAA0B,OAC/B;MACEjrF,KAAA;MACAqsC,OAAA,GAAU;MACV6+C,WAAA,GAAc;IAChB,GACAC,aAAA,KACG;MACH,MAAMC,gBAAA,GAAmBprF,KAAA,CAAMyc,OAAA;MAC/B,MAAMI,GAAA,GAAM7c,KAAA,CAAM6c,GAAA,IAAOuuE,gBAAA,EAAkBvuE,GAAA;MAC3C,MAAMn3B,IAAA,GAAOsa,KAAA,CAAMta,IAAA;MAEnB,IAAI,CAACm3B,GAAA,EAAK;QACR,OAAO,MAAMsuE,aAAA,CAAc9+C,OAAO;MACpC;MAMA,MAAMg/C,uBAAA,GAA0BH,WAAA,IAAe,EAAE,MAAM,KAAKI,aAAA,CAAc;QAAEzuE;MAAI,CAAC;MACjF,IAAIwuE,uBAAA,EAAyB;QAC3B,IAAI39B,WAAA,GAAc09B,gBAAA;QAClB,IAAI,CAAC19B,WAAA,IAAe1tD,KAAA,CAAMqtE,YAAA,IAAgBrtE,KAAA,CAAMstE,UAAA,EAAY;UAC1D,MAAMie,gBAAA,GAAmB,KAAK7oG,MAAA,CAAO+5B,OAAA,CACnCzc,KAAA,CAAMqtE,YAAA,EACNrtE,KAAA,CAAMstE,UACR;UACA,IAAIie,gBAAA,CAAiB5lD,WAAA,IAAe,CAAC4lD,gBAAA,CAAiB1/B,YAAA,EAAc;YAClE6B,WAAA,GAAc69B,gBAAA,CAAiB/pG,IAAA;UACjC;QACF;QACA,IAAIksE,WAAA,EAAa;UACf,MAAM89B,YAAA,GAAe,MAAM,KAAKC,iBAAA,CAAkB;YAChDhvE,OAAA,EAASixC,WAAA;YACTrhB,OAAA,EAAS;UACX,CAAC;UACD,IAAIm/C,YAAA,EAAc;YAChB,MAAME,cAAA,GAAiB,MAAMP,aAAA,CAAc,KAAK;YAChD,MAAMQ,UAAA,GAAa,CAAC,GAAGH,YAAA,EAAc,GAAGE,cAAc;YACtD,IAAIr/C,OAAA,EAAS;cACX,MAAM,KAAKs+C,eAAA,CAAgBgB,UAAU;YACvC;YACA,OAAOA,UAAA;UACT,OAAO;YACLjlF,OAAA,CAAQC,IAAA,CACN,sCAAsCjhB,IAAI,uEAC1C;cAAEsa;YAAM,CACV;YACA,OAAO,EAAC;UACV;QACF,OAAO;UACL0G,OAAA,CAAQC,IAAA,CACN,YAAYjhB,IAAI,0EAChB;YAAEsa;UAAM,CACV;UACA,OAAO,EAAC;QACV;MACF;MACA,OAAO,MAAMmrF,aAAA,CAAc9+C,OAAO;IACpC;IAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOu/C,gBAAA,GAAmB,OAAO;MAC/B5rF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM3pD,MAAA,GAAS,KAAKA,MAAA;MACpB,MAAM;QAAEm6B,GAAA;QAAK3uB,OAAA;QAASyiB;MAAK,IAAI3Q,KAAA;MAE/B,IAAI,CAAC9R,OAAA,IAAYA,OAAA,CAAQoyB,SAAA,IAAa,CAACpyB,OAAA,CAAQg0B,eAAA,EAAkB;QAC/D,OAAO,EAAC;MACV;MAEA,MAAM2pE,YAAA,GAAe,MAAM,KAAKZ,uBAAA,CAC9B;QAAEjrF,KAAA;QAAOqsC;MAAQ,GACjB,YAAY;QACV,IAAIo+C,OAAA,GAAU,MAAM,KAAKqB,cAAA,CAAe;UACtCz/C,OAAA,EAAS;UACTt1B,QAAA,EAAU,CAAC7oB,OAAO;QACpB,CAAC;QACD,IAAI2uB,GAAA,IAAOn6B,MAAA,CAAOiuB,IAAA,IAAQjuB,MAAA,CAAOiuB,IAAA,CAAKhuB,EAAA,KAAOguB,IAAA,EAAMhuB,EAAA,EAAI;UACrD,MAAMqhC,MAAA,GAASthC,MAAA,CAAOiuB,IAAA,CAAKhuB,EAAA;UAC3B,MAAM85B,OAAA,GAAU/5B,MAAA,CAAOu1D,cAAA,CAAep7B,GAAG;UACzC,IAAIJ,OAAA,EAAS;YACX,MAAMsvE,QAAA,GAAWtvE,OAAA,CAAQpY,KAAA,CAAMlI,IAAA,CAAK6nB,MAAM;YAC1C,MAAMjD,WAAA,GAActE,OAAA,CAAQs1C,WAAA,CAAY;YACxC,MAAMi6B,kBAAA,GAAqB,MAAM,KAAKC,WAAA,CAAY;cAChDpvE,GAAA;cACAwvB,OAAA,EAAS;cACT6/C,KAAA,EAAO,CACL;gBACEjmC,SAAA,EAAW8lC,QAAA,CAAS9lC,SAAA,CAAUl1D,WAAA,CAAY;gBAC1CozD,oBAAA,EAAsB4nC,QAAA,CAAS5nC,oBAAA;gBAC/B6B,eAAA,EAAiBjlC,WAAA;gBACjBpQ,IAAA,EAAMjuB,MAAA,CAAOiuB;cACf;YAEJ,CAAC;YACD85E,OAAA,GAAU,CAAC,GAAGA,OAAA,EAAS,GAAGuB,kBAAkB;UAC9C;QACF;QACA,OAAOvB,OAAA;MACT,CACF;MAEA,IAAIp+C,OAAA,EAAS;QACX,MAAM,KAAKs+C,eAAA,CAAgBkB,YAAY;MACzC;MAEA,OAAOA,YAAA;IACT;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOM,mBAAA,GAAsB,OAAO;MAClCnsF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAEn+C,OAAA;QAASk2D,WAAA,GAAc;MAAM,IAAIpkD,KAAA;MAEzC,IAAI9R,OAAA,EAAS;QACX,MAAMk+F,YAAA,GAAehoC,WAAA,GAAc,KAAK48B,iBAAA,GAAoB,KAAKC,iBAAA;QACjE,OAAO,MAAM,KAAKgK,uBAAA,CAChB;UAAEjrF,KAAA;UAAOqsC;QAAQ,GACjB,MAAOggD,eAAA,IACL,MAAMD,YAAA,CAAa;UAAEzpG,EAAA,EAAIuL,OAAA,CAAQvL,EAAA;UAAI0pD,OAAA,EAASggD;QAAgB,CAAC,CACnE;MACF;MAEA,OAAO,EAAC;IACV;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOC,mBAAA,GAAsB,OAAO;MAClCtmE,SAAA;MACAqmB,OAAA,GAAU;IACZ,MAGM;MACJ,MAAMkgD,uBAAA,GAA0B,MAAM,KAAKC,gBAAA,CAAiB;QAC1DxmE,SAAA;QACAqmB,OAAA,EAAS;MACX,CAAC;MACD,MAAMogD,wBAAA,GAA2B,MAAM,KAAKzL,iBAAA,CAAkB;QAC5Dr+F,EAAA,EAAIqjC,SAAA;QACJqmB,OAAA,EAAS;MACX,CAAC;MACD,MAAMo+C,OAAA,GAAU,CAAC,GAAG8B,uBAAA,EAAyB,GAAGE,wBAAwB;MAExE,IAAIpgD,OAAA,EAAS;QACX,MAAM,KAAKs+C,eAAA,CAAgBF,OAAO;MACpC;MAEA,OAAOA,OAAA;IACT;IAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOiC,UAAA,GAAa,OAAO;MACzB1sF,KAAA;MACA2sF,cAAA;MACAtgD,OAAA,GAAU;IACZ,MAIM;MACJ,MAAM;QACJzmB,WAAA,EAAaqgC,SAAA;QACb9B,oBAAA;QACA6B,eAAA,GAAkB;QAClBr1C,IAAA;QACAkM;MACF,IAAI7c,KAAA;MAEJ,MAAM4sF,wBAAA,GAA2BD,cAAA,IAAkB3mC,eAAA;MAEnD,IAAIr1C,IAAA,EAAMhuB,EAAA,IAAMk6B,GAAA,EAAK;QACnB,OAAO,MAAM,KAAKouE,uBAAA,CAAwB;UAAEjrF,KAAA;UAAOqsC;QAAQ,GAAIggD,eAAA,IAC7D,KAAKJ,WAAA,CAAY;UACfpvE,GAAA;UACAwvB,OAAA,EAASggD,eAAA;UACTH,KAAA,EAAO,CACL;YACEjmC,SAAA;YACA9B,oBAAA;YACA6B,eAAA,EAAiB4mC,wBAAA;YACjBj8E;UACF;QAEJ,CAAC,CACH;MACF;MAEA,OAAO,EAAC;IACV;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOk8E,iBAAA,GAAoB,OAAO;MAChC7sF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAEjvB,MAAA;QAAQP,GAAA;QAAKn3B;MAAK,IAAIsa,KAAA;MAE9B,IAAIod,MAAA,IAAUP,GAAA,EAAK;QAIjB,OAAO,MAAM,KAAKouE,uBAAA,CAChB;UAAEjrF,KAAA;UAAOqsC,OAAA;UAAS6+C,WAAA,EAAa;QAAK,GACpC,MAAOmB,eAAA,IAAoB;UACzB,IAAI3mG,IAAA,KAAS,kBAAkB;YAC7B,OAAO,MAAM,KAAKonG,YAAA,CAAa;cAAE1vE,MAAA;cAAQP,GAAA;cAAKwvB,OAAA,EAASggD;YAAgB,CAAC;UAC1E;UAEA,OAAO,MAAM,KAAKU,aAAA,CAAc;YAC9BlwE,GAAA;YACAH,OAAA,EAAS,CAACU,MAAM;YAChBivB,OAAA,EAASggD;UACX,CAAC;QACH,CACF;MACF;MAEA,OAAO,EAAC;IACV;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOW,yBAAA,GAA4B,OAAO;MACxChtF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAEn+C;MAAQ,IAAI8R,KAAA;MAEpB,IAAI9R,OAAA,IAAW,CAACA,OAAA,CAAQoyB,SAAA,EAAW;QACjC,OAAO,MAAM,KAAK2qE,uBAAA,CAChB;UAAEjrF,KAAA;UAAOqsC;QAAQ,GACjB,MAAOggD,eAAA,IACL,MAAM,KAAK1+B,aAAA,CAAc;UAAEz/D,OAAA;UAASm+C,OAAA,EAASggD;QAAgB,CAAC,CAClE;MACF;MAEA,OAAO,EAAC;IACV;IAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOn3B,4BAAA,GAA+B,OAAO;MAC3Cl1D,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAE3mD,IAAA;QAAM+2B;MAAQ,IAAIzc,KAAA;MAE1B,IAAIyc,OAAA,IAAW/2B,IAAA,EAAM;QACnB,MAAMuvE,MAAA,GAASvvE,IAAA,KAAS;QACxB,OAAO,MAAM,KAAK+lG,iBAAA,CAAkB;UAClChvE,OAAA,EAAS;YAAE,GAAGA,OAAA;YAASw4C;UAAO;UAC9B5oB;QACF,CAAC;MACH;MAEA,OAAO,EAAC;IACV;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO4gD,2BAAA,GAA8B,OAAO;MAC1CjtF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAE5vB;MAAQ,IAAIzc,KAAA;MACpB,MAAMktF,OAAA,GAAU,KAAKxqG,MAAA,CAAOiuB,IAAA;MAC5B,IAAI8L,OAAA,IAAWywE,OAAA,EAAS;QACtB,MAAM;UAAErwE,GAAA;UAAK03C;QAAa,IAAI93C,OAAA;QAC9B,MAAM0wE,eAAA,GAAkB,MAAM,KAAKC,wBAAA,CAAyB;UAC1DvwE,GAAA;UACA03C,YAAA;UACAloB,OAAA,EAAS;QACX,CAAC;QAED,MAAMroB,MAAA,GAASkpE,OAAA,CAAQvqG,EAAA;QACvB,MAAM0qG,aAAA,GAAgB,KAAK3qG,MAAA,CAAOu1D,cAAA,CAAep7B,GAAG;QACpD,MAAMkvE,QAAA,GAAWsB,aAAA,CAAchpF,KAAA,CAAMlI,IAAA,CAAK6nB,MAAM;QAEhD,IAAIjD,WAAA,GAAc;QAElB,IAAIwzC,YAAA,EAAc;UAChB,MAAMC,WAAA,GAAc,IAAIv4D,IAAA,CAAKs4D,YAAY;UACzCxzC,WAAA,GAAcssE,aAAA,CAAct7B,WAAA,CAAYyC,WAAW;QACrD;QAEA,MAAM84B,iBAAA,GAAoB,MAAM,KAAKrB,WAAA,CAAY;UAC/CpvE,GAAA;UACAwvB,OAAA,EAAS;UACT6/C,KAAA,EAAO,CACL;YACEjmC,SAAA,EAAW8lC,QAAA,CAAS9lC,SAAA,CAAUnhE,QAAA,CAAS;YACvCq/D,oBAAA,EAAsB4nC,QAAA,CAAS5nC,oBAAA;YAC/B6B,eAAA,EAAiBjlC,WAAA;YACjBpQ,IAAA,EAAMu8E;UACR;QAEJ,CAAC;QAED,MAAMrB,YAAA,GAAe,CAAC,GAAGsB,eAAA,EAAiB,GAAGG,iBAAiB;QAE9D,IAAIjhD,OAAA,EAAS;UACX,MAAM,KAAKs+C,eAAA,CAAgBkB,YAAY;QACzC;QAEA,OAAOA,YAAA;MACT;MAEA,OAAO,EAAC;IACV;IAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO0B,mBAAA,GAAsB,OAAO;MAClCvtF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAE3mD,IAAA;QAAMwI,OAAA;QAASy0B;MAAS,IAAI3iB,KAAA;MAEpC,IAAI,EAAE9R,OAAA,IAAWy0B,QAAA,GAAW;QAC1B,OAAO,EAAC;MACV;MAEA,MAAM6qE,iBAAA,GAAqB1gE,KAAA,IAAwB;QACjD,QAAQA,KAAA;UACN,KAAK;YACH,OAAO,KAAK2gE,cAAA;UACd,KAAK;YACH,OAAO,KAAKlgC,cAAA;UACd,KAAK;YACH,OAAO,KAAKmgC,cAAA;UACd;YACE,MAAM,IAAI5uG,KAAA,CACR,kDAAkDguC,KAAI,gCACxD;QACJ;MACF;MAEA,MAAM6gE,cAAA,GAAiBH,iBAAA,CAAkB9nG,IAAI;MAE7C,OAAO,MAAM,KAAKulG,uBAAA,CAAwB;QAAEjrF,KAAA;QAAOqsC;MAAQ,GAAIggD,eAAA,IAC7DsB,cAAA,CAAe;QAAEz/F,OAAA;QAASy0B,QAAA;QAAU0pB,OAAA,EAASggD;MAAgB,CAAC,CAChE;IACF;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAAuB,gBAAA,GAAmB,OAAO;MACxB5tF,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAExvB,GAAA;QAAKg0B,KAAA;QAAOnrD;MAAK,IAAIsa,KAAA;MAE7B,IAAI,CAAC6wC,KAAA,EAAO,OAAO,EAAC;MAEpB,IAAInrD,IAAA,KAAS,iBAAiB;QAC5B,OAAO,MAAM,KAAKqkE,WAAA,CAAY;UAC5BlZ,KAAA;UACAxE;QACF,CAAC;MACH;MAEA,IAAI3mD,IAAA,KAAS,iBAAiB;QAC5B,IAAI,CAACm3B,GAAA,EAAK,OAAO,EAAC;QAElB,OAAO,MAAM,KAAKgrC,WAAA,CAAY;UAC5BhrC,GAAA;UACAyD,SAAA,EAAWuwB,KAAA,CAAMvwB,SAAA;UACjB+rB;QACF,CAAC;MACH;MAEA,OAAO,EAAC;IACV;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOytB,WAAA,GAAc,OAAO;MAC1B95D,KAAA;MACAqsC,OAAA,GAAU;IACZ,MAGM;MACJ,MAAM;QAAE3mD,IAAA;QAAM+2B;MAAQ,IAAIzc,KAAA;MAE1B,IAAIta,IAAA,CAAKokC,UAAA,CAAW,UAAU,GAAG;QAC/B,OAAO,MAAM,KAAKyjE,mBAAA,CAAoB;UAAEvtF,KAAA;UAAOqsC;QAAQ,CAAC;MAC1D;MAEA,IAAI3mD,IAAA,KAAS,eAAe;QAC1B,OAAO,MAAM,KAAKkmG,gBAAA,CAAiB;UAAE5rF,KAAA;UAAOqsC;QAAQ,CAAC;MACvD;MAEA,IAAI3mD,IAAA,KAAS,mBAAmB;QAC9B,OAAO,MAAM,KAAKymG,mBAAA,CAAoB;UAAEnsF,KAAA;UAAOqsC;QAAQ,CAAC;MAC1D;MAEA,IAAI3mD,IAAA,KAAS,qBAAqBA,IAAA,KAAS,qBAAqB;QAC9D,OAAO,KAAKsnG,yBAAA,CAA0B;UAAEhtF,KAAA;UAAOqsC;QAAQ,CAAC;MAC1D;MAEA,IAAI3mD,IAAA,KAAS,kBAAkBA,IAAA,KAAS,0BAA0B;QAChE,OAAO,KAAKgnG,UAAA,CAAW;UAAE1sF,KAAA;UAAO2sF,cAAA,EAAgB;UAAGtgD;QAAQ,CAAC;MAC9D;MAEA,IAAI3mD,IAAA,KAAS,4BAA4B;QACvC,OAAO,KAAKgnG,UAAA,CAAW;UAAE1sF,KAAA;UAAOqsC;QAAQ,CAAC;MAC3C;MAEA,IAAI3mD,IAAA,CAAKokC,UAAA,CAAW,SAAS,GAAG;QAC9B,OAAO,MAAM,KAAK+iE,iBAAA,CAAkB;UAAE7sF,KAAA;UAAOqsC;QAAQ,CAAC;MACxD;MAEA,IAAI3mD,IAAA,KAAS,oBAAoBA,IAAA,KAAS,mBAAmB;QAC3D,OAAO,MAAM,KAAKwvE,4BAAA,CAA6B;UAAEl1D,KAAA;UAAOqsC;QAAQ,CAAC;MACnE;MAEA,IAAI3mD,IAAA,KAAS,mBAAmBA,IAAA,KAAS,iBAAiB;QACxD,OAAO,MAAM,KAAKkoG,gBAAA,CAAiB;UAAE5tF,KAAA;UAAOqsC;QAAQ,CAAC;MACvD;MASA,KACG3mD,IAAA,KAAS,qBACRA,IAAA,KAAS,8BACTA,IAAA,KAAS,oCACX+2B,OAAA,EACA;QACA,OAAO,MAAM,KAAKgvE,iBAAA,CAAkB;UAAEhvE,OAAA;UAAS4vB;QAAQ,CAAC;MAC1D;MAEA,KACG3mD,IAAA,KAAS,qBACRA,IAAA,KAAS,kCACTA,IAAA,KAAS,wCACX+2B,OAAA,EACA;QACA,OAAO,MAAM,KAAKoxE,aAAA,CAAc;UAAEhxE,GAAA,EAAKJ,OAAA,CAAQI,GAAA;UAAKwvB;QAAQ,CAAC;MAC/D;MAEA,IAAI3mD,IAAA,KAAS,qBAAqB;QAChC,OAAO,MAAM,KAAKunG,2BAAA,CAA4B;UAAEjtF,KAAA;UAAOqsC;QAAQ,CAAC;MAClE;MAEA,OAAO,EAAC;IACV;IAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAO6f,SAAA,GAAY,OAAU;MAAEC;IAAK,MAAyC;MAC3E,MAAM2hC,oBAAA,GAAuB,MAAAA,CAAA,KAAY;QACvC,IAAI,CAAC,KAAKprG,MAAA,CAAO+tE,YAAA,EAAcC,SAAA,EAAW;UACxC,MAAM,IAAIg5B,YAAA,CACR,6DACA;YAAEhkG,IAAA,EAAM;UAAkB,CAC5B;QACF;QACA,OAAQ,MAAM,KAAKqoG,WAAA,CAAY;UAAE5hC;QAAK,CAAC;MACzC;MACA,IAAI;QACF,OAAO,MAAM2hC,oBAAA,CAAqB;MACpC,SAASlsG,CAAA,EAAG;QACV,IAAI,CAAC,KAAKosG,sBAAA,CAAuBpsG,CAAiC,GAAG;UACnE,MAAM,KAAKqsG,cAAA,CAAe9hC,IAAI;QAChC;QACA,MAAMvqE,CAAA;MACR;IACF;IASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAQosG,sBAAA,GAA0Bj/F,KAAA,IAChCA,KAAA,EAAOV,QAAA,EAAU7M,IAAA,EAAMlD,IAAA,KAAS,KAAKyQ,KAAA,EAAOV,QAAA,EAAU7M,IAAA,EAAMlD,IAAA,KAAS;IAcvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAQyvG,WAAA,GAAc,OACpB;MAAE5hC;IAAK,GACP+hC,aAAA,GAAgB,UACb;MACH,IAAI/hC,IAAA,CAAKzmE,IAAA,KAAS,kBAAkB;QAClC,OAAO,MAAM,KAAKhD,MAAA,CAAOw+F,cAAA,CAAe,GAAG/0B,IAAA,CAAK3iD,OAAO;MACzD;MAEA,MAAM;QAAEyT,WAAA;QAAamvC;MAAU,IAAID,IAAA;MAEnC,IAAIlvC,WAAA,IAAemvC,SAAA,EAAW;QAC5B,MAAM3vC,OAAA,GAAU,KAAK/5B,MAAA,CAAO+5B,OAAA,CAAQQ,WAAA,EAAamvC,SAAS;QAE1D,IAAID,IAAA,CAAKzmE,IAAA,KAAS,iBAAiB;UACjC,OAAO,MAAM+2B,OAAA,CAAQ6wC,aAAA,CAAc,GAAGnB,IAAA,CAAK3iD,OAAO;QACpD;QAEA,IAAI2iD,IAAA,CAAKzmE,IAAA,KAAS,mBAAmB;UACnC,OAAO,MAAM+2B,OAAA,CAAQgxC,eAAA,CAAgB,GAAGtB,IAAA,CAAK3iD,OAAO;QACtD;QAEA,IAAI2iD,IAAA,CAAKzmE,IAAA,KAAS,gBAAgB;UAChC,OAAO,MAAM+2B,OAAA,CAAQm3C,YAAA,CAAa,GAAGzH,IAAA,CAAK3iD,OAAO;QACnD;QAEA,IAAI2iD,IAAA,CAAKzmE,IAAA,KAAS,gBAAgB;UAChC,OAAO,MAAM+2B,OAAA,CAAQo3C,YAAA,CAAa,GAAG1H,IAAA,CAAK3iD,OAAO;QACnD;QAEA,IAAI2iD,IAAA,CAAKzmE,IAAA,KAAS,gBAAgB;UAChC,MAAMyoG,kBAAA,GAAqB,MAAM1xE,OAAA,CAAQsvC,YAAA,CAAa,GAAGI,IAAA,CAAK3iD,OAAO;UACrE,MAAMwN,UAAA,GAAam3E,kBAAA,EAAoBjgG,OAAA;UACvC,IAAIggG,aAAA,IAAiBl3E,UAAA,EAAY;YAC/B,IAAIA,UAAA,EAAYsJ,SAAA,EAAW;cACzB,KAAK59B,MAAA,CAAOs9B,OAAA,CAAQwkD,WAAA,CAAYxtD,UAAA,CAAWsJ,SAAS,GAAGujC,kBAAA,CAAmB;gBACxE31D,OAAA,EAAS8oB,UAAA;gBACTC,gBAAA,EAAkB;cACpB,CAAC;YACH;YACAwF,OAAA,CAAQpY,KAAA,CAAMgd,gBAAA,CAAiBrK,UAAA,EAAY,IAAI;UACjD;UACA,OAAOm3E,kBAAA;QACT;MACF;MAEA,MAAM,IAAIrvG,KAAA,CACR,+CAA+CqtE,IAAA,CAAKzmE,IAAI,qCAC1D;IACF;IAQA;AAAA;AAAA;AAAA;AAAA;AAAA;IAAA,KAAOklG,mBAAA,GAAsB,YAAY;MACvC,MAAMwD,KAAA,GAAQ,MAAM,KAAKC,eAAA,CAAgB;MACzC,WAAWliC,IAAA,IAAQiiC,KAAA,EAAO;QACxB,IAAI,CAACjiC,IAAA,CAAKxpE,EAAA,EAAI;UACZ;QACF;QAEA,IAAI;UACF,MAAM,KAAKorG,WAAA,CACT;YACE5hC;UACF,GACA,IACF;QACF,SAASvqE,CAAA,EAAG;UACV,MAAMmN,KAAA,GAAQnN,CAAA;UACd,IAAI,CAAC,KAAKosG,sBAAA,CAAuBj/F,KAAK,GAAG;YAEvC;UACF;QACF;QAEA,MAAM,KAAKu/F,iBAAA,CAAkB;UAC3B3rG,EAAA,EAAIwpE,IAAA,CAAKxpE;QACX,CAAC;MACH;IACF;IAloCE,KAAKD,MAAA,GAASA,MAAA;IACd,KAAKiqF,WAAA,GAAc,IAAIgd,oBAAA,CAAqB;MAAEjnG,MAAA;MAAQglE,SAAA,EAAW;IAAK,CAAC;IACvE,KAAKrjD,KAAA,GAAQ,IAAIgmB,UAAA,CAA2B;MAC1Csb,WAAA,EAAa;MACb3hB,MAAA,EAAQ,KAAKthC,MAAA,CAAO4gC;IACtB,CAAC;EACH;EAAA;AAAA;AAAA;AAAA;EAoaOwnE,iBAAiB9mE,MAAA,EAAyB;IAC/C,MAAM;MAAEA,MAAA,EAAQuqE,eAAA;MAAiB5oD;IAAY,IAAI,KAAKthC,KAAA,CAAMqnB,cAAA,CAAe;IAC3E,OAAO1H,MAAA,KAAWuqE,eAAA,IAAmB5oD,WAAA;EACvC;AAstBF;;;AC1pCO,IAAM6oD,mBAAA,GAAN,MAAgC;EAMrC/rG,YAAYuK,IAAA,EAAclJ,OAAA,EAAmD;IAC3E,IAAI,CAACkJ,IAAA,EAAM,MAAM,IAAIlO,KAAA,CAAM,6BAA6B;IACxD,KAAKgJ,IAAA,GAAO,EAAC;IACb,KAAKkF,IAAA,GAAOA,IAAA;IACZ,KAAK/L,GAAA,GAAM,mBAAIumD,GAAA,CAAI;IACnB,KAAKinD,OAAA,GAAU3qG,OAAA,EAAS2qG,OAAA,IAAW;EACrC;EAAA;AAAA;AAAA;AAAA;AAAA;EAOAp1E,IAAIrxB,GAAA,EAAQoB,KAAA,EAAU;IACpB,MAAMgI,KAAA,GAAQ,KAAKtJ,IAAA,CAAK9I,OAAA,CAAQgJ,GAAG;IAEnC,IAAIoJ,KAAA,GAAQ,IAAI;MACd,KAAKtJ,IAAA,CAAKshB,MAAA,CAAO,KAAKthB,IAAA,CAAK9I,OAAA,CAAQgJ,GAAG,GAAG,CAAC;IAC5C,WAAW,KAAKF,IAAA,CAAKrJ,MAAA,IAAU,KAAKuO,IAAA,EAAM;MACxC,MAAM0hG,OAAA,GAAU,KAAK5mG,IAAA,CAAK6mG,KAAA,CAAM;MAEhC,IAAID,OAAA,EAAS;QACX,MAAMv7E,IAAA,GAAO,KAAKy7E,IAAA,CAAKF,OAAO;QAE9B,IAAIv7E,IAAA,EAAM;UACR,KAAKs7E,OAAA,GAAUC,OAAA,EAASv7E,IAAI;QAC9B;QAEA,KAAKlyB,GAAA,CAAIiD,MAAA,CAAOwqG,OAAO;MACzB;IACF;IAEA,KAAK5mG,IAAA,CAAK/H,IAAA,CAAKiI,GAAG;IAClB,KAAK/G,GAAA,CAAIgL,GAAA,CAAIjE,GAAA,EAAKoB,KAAK;EACzB;EAAA;AAAA;AAAA;AAAA;EAMAwlG,KAAK5mG,GAAA,EAAQ;IACX,MAAMoB,KAAA,GAAQ,KAAKnI,GAAA,CAAIqD,GAAA,CAAI0D,GAAG;IAE9B,OAAOoB,KAAA;EACT;EAAA;AAAA;AAAA;AAAA;EAMA9E,IAAI0D,GAAA,EAAQ;IACV,MAAM6mG,SAAA,GAAY,KAAKD,IAAA,CAAK5mG,GAAG;IAE/B,IAAI6mG,SAAA,IAAa,KAAK/mG,IAAA,CAAK9I,OAAA,CAAQgJ,GAAG,MAAM,KAAKgF,IAAA,GAAO,GAAG;MACzD,KAAKlF,IAAA,CAAKshB,MAAA,CAAO,KAAKthB,IAAA,CAAK9I,OAAA,CAAQgJ,GAAG,GAAG,CAAC;MAC1C,KAAKF,IAAA,CAAK/H,IAAA,CAAKiI,GAAG;IACpB;IAEA,OAAO6mG,SAAA;EACT;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}