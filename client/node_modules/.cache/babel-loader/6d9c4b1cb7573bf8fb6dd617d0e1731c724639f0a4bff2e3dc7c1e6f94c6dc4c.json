{"ast":null,"code":"import React from 'react';\nimport clsx from 'clsx';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTypingContext } from '../../context/TypingContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nconst useJoinTypingUsers = names => {\n  const {\n    t\n  } = useTranslationContext();\n  if (!names.length) return null;\n  const [name, ...rest] = names;\n  if (names.length === 1) return t('{{ user }} is typing...', {\n    user: name\n  });\n  const MAX_JOINED_USERS = 3;\n  if (names.length > MAX_JOINED_USERS) return t('{{ users }} and more are typing...', {\n    users: names.slice(0, MAX_JOINED_USERS).join(', ').trim()\n  });\n  return t('{{ users }} and {{ user }} are typing...', {\n    user: name,\n    users: rest.join(', ').trim()\n  });\n};\n/**\n * TypingIndicator lists users currently typing, it needs to be a child of Channel component\n */\nconst UnMemoizedTypingIndicator = props => {\n  const {\n    threadList\n  } = props;\n  const {\n    channelConfig,\n    thread\n  } = useChannelStateContext('TypingIndicator');\n  const {\n    client\n  } = useChatContext('TypingIndicator');\n  const {\n    typing = {}\n  } = useTypingContext('TypingIndicator');\n  const typingInChannel = !threadList ? Object.values(typing).filter(({\n    parent_id,\n    user\n  }) => user?.id !== client.user?.id && !parent_id) : [];\n  const typingInThread = threadList ? Object.values(typing).filter(({\n    parent_id,\n    user\n  }) => user?.id !== client.user?.id && parent_id === thread?.id) : [];\n  const typingUserList = (threadList ? typingInThread : typingInChannel).map(({\n    user\n  }) => user?.name || user?.id).filter(Boolean);\n  const joinedTypingUsers = useJoinTypingUsers(typingUserList);\n  const isTypingActive = threadList && typingInThread.length || !threadList && typingInChannel.length;\n  if (channelConfig?.typing_events === false) {\n    return null;\n  }\n  if (!isTypingActive) return null;\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__typing-indicator', {\n      'str-chat__typing-indicator--typing': isTypingActive\n    }),\n    \"data-testid\": 'typing-indicator'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__dots'\n  }, React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  }), React.createElement(\"span\", {\n    className: 'str-chat__typing-indicator__dot'\n  })), React.createElement(\"div\", {\n    className: 'str-chat__typing-indicator__users',\n    \"data-testid\": 'typing-users'\n  }, joinedTypingUsers));\n};\nexport const TypingIndicator = React.memo(UnMemoizedTypingIndicator);","map":{"version":3,"names":["React","clsx","useChannelStateContext","useChatContext","useTypingContext","useTranslationContext","useJoinTypingUsers","names","t","length","name","rest","user","MAX_JOINED_USERS","users","slice","join","trim","UnMemoizedTypingIndicator","props","threadList","channelConfig","thread","client","typing","typingInChannel","Object","values","filter","parent_id","id","typingInThread","typingUserList","map","Boolean","joinedTypingUsers","isTypingActive","typing_events","createElement","className","TypingIndicator","memo"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/TypingIndicator/TypingIndicator.js"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTypingContext } from '../../context/TypingContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nconst useJoinTypingUsers = (names) => {\n    const { t } = useTranslationContext();\n    if (!names.length)\n        return null;\n    const [name, ...rest] = names;\n    if (names.length === 1)\n        return t('{{ user }} is typing...', {\n            user: name,\n        });\n    const MAX_JOINED_USERS = 3;\n    if (names.length > MAX_JOINED_USERS)\n        return t('{{ users }} and more are typing...', {\n            users: names.slice(0, MAX_JOINED_USERS).join(', ').trim(),\n        });\n    return t('{{ users }} and {{ user }} are typing...', {\n        user: name,\n        users: rest.join(', ').trim(),\n    });\n};\n/**\n * TypingIndicator lists users currently typing, it needs to be a child of Channel component\n */\nconst UnMemoizedTypingIndicator = (props) => {\n    const { threadList } = props;\n    const { channelConfig, thread } = useChannelStateContext('TypingIndicator');\n    const { client } = useChatContext('TypingIndicator');\n    const { typing = {} } = useTypingContext('TypingIndicator');\n    const typingInChannel = !threadList\n        ? Object.values(typing).filter(({ parent_id, user }) => user?.id !== client.user?.id && !parent_id)\n        : [];\n    const typingInThread = threadList\n        ? Object.values(typing).filter(({ parent_id, user }) => user?.id !== client.user?.id && parent_id === thread?.id)\n        : [];\n    const typingUserList = (threadList ? typingInThread : typingInChannel)\n        .map(({ user }) => user?.name || user?.id)\n        .filter(Boolean);\n    const joinedTypingUsers = useJoinTypingUsers(typingUserList);\n    const isTypingActive = (threadList && typingInThread.length) || (!threadList && typingInChannel.length);\n    if (channelConfig?.typing_events === false) {\n        return null;\n    }\n    if (!isTypingActive)\n        return null;\n    return (React.createElement(\"div\", { className: clsx('str-chat__typing-indicator', {\n            'str-chat__typing-indicator--typing': isTypingActive,\n        }), \"data-testid\": 'typing-indicator' },\n        React.createElement(\"div\", { className: 'str-chat__typing-indicator__dots' },\n            React.createElement(\"span\", { className: 'str-chat__typing-indicator__dot' }),\n            React.createElement(\"span\", { className: 'str-chat__typing-indicator__dot' }),\n            React.createElement(\"span\", { className: 'str-chat__typing-indicator__dot' })),\n        React.createElement(\"div\", { className: 'str-chat__typing-indicator__users', \"data-testid\": 'typing-users' }, joinedTypingUsers)));\n};\nexport const TypingIndicator = React.memo(UnMemoizedTypingIndicator);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}