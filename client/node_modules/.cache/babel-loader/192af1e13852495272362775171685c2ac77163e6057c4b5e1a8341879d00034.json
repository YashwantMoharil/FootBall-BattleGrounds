{"ast":null,"code":"import React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport const ChatContext = React.createContext(undefined);\nexport const ChatProvider = ({\n  children,\n  value\n}) => React.createElement(ChatContext.Provider, {\n  value: value\n}, children);\nexport const useChatContext = componentName => {\n  const contextValue = useContext(ChatContext);\n  if (!contextValue) {\n    console.warn(`The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChatContext = Component => {\n  const WithChatContextComponent = props => {\n    const chatContext = useChatContext();\n    return React.createElement(Component, {\n      ...props,\n      ...chatContext\n    });\n  };\n  WithChatContextComponent.displayName = `WithChatContext${getDisplayName(Component)}`;\n  return WithChatContextComponent;\n};","map":{"version":3,"names":["React","useContext","getDisplayName","ChatContext","createContext","undefined","ChatProvider","children","value","createElement","Provider","useChatContext","componentName","contextValue","console","warn","withChatContext","Component","WithChatContextComponent","props","chatContext","displayName"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/context/ChatContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { getDisplayName } from './utils/getDisplayName';\nexport const ChatContext = React.createContext(undefined);\nexport const ChatProvider = ({ children, value, }) => (React.createElement(ChatContext.Provider, { value: value }, children));\nexport const useChatContext = (componentName) => {\n    const contextValue = useContext(ChatContext);\n    if (!contextValue) {\n        console.warn(`The useChatContext hook was called outside of the ChatContext provider. Make sure this hook is called within a child of the Chat component. The errored call is located in the ${componentName} component.`);\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference so if ChatContext\n * typing is desired while using the HOC withChatContext the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChatContext = (Component) => {\n    const WithChatContextComponent = (props) => {\n        const chatContext = useChatContext();\n        return React.createElement(Component, { ...props, ...chatContext });\n    };\n    WithChatContextComponent.displayName = `WithChatContext${getDisplayName(Component)}`;\n    return WithChatContextComponent;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,cAAc,QAAQ,wBAAwB;AACvD,OAAO,MAAMC,WAAW,GAAGH,KAAK,CAACI,aAAa,CAACC,SAAS,CAAC;AACzD,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAMR,KAAK,CAACS,aAAa,CAACN,WAAW,CAACO,QAAQ,EAAE;EAAEF,KAAK,EAAEA;AAAM,CAAC,EAAED,QAAQ,CAAE;AAC7H,OAAO,MAAMI,cAAc,GAAIC,aAAa,IAAK;EAC7C,MAAMC,YAAY,GAAGZ,UAAU,CAACE,WAAW,CAAC;EAC5C,IAAI,CAACU,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,kLAAkLH,aAAa,aAAa,CAAC;IAC1N,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,eAAe,GAAIC,SAAS,IAAK;EAC1C,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;IACxC,MAAMC,WAAW,GAAGT,cAAc,CAAC,CAAC;IACpC,OAAOX,KAAK,CAACS,aAAa,CAACQ,SAAS,EAAE;MAAE,GAAGE,KAAK;MAAE,GAAGC;IAAY,CAAC,CAAC;EACvE,CAAC;EACDF,wBAAwB,CAACG,WAAW,GAAG,kBAAkBnB,cAAc,CAACe,SAAS,CAAC,EAAE;EACpF,OAAOC,wBAAwB;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}