{"ast":null,"code":"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { UploadIcon as DefaultUploadIcon } from './icons';\nimport { useAttachmentManagerState } from './hooks/useAttachmentManagerState';\nimport { CHANNEL_CONTAINER_ID } from '../Channel/constants';\nimport { DialogAnchor, useDialog, useDialogIsOpen } from '../Dialog';\nimport { DialogMenuButton } from '../Dialog/DialogMenu';\nimport { Modal } from '../Modal';\nimport { PollCreationDialog as DefaultPollCreationDialog } from '../Poll';\nimport { Portal } from '../Portal/Portal';\nimport { UploadFileInput } from '../ReactFileUtilities';\nimport { useChannelStateContext, useComponentContext, useMessageInputContext, useTranslationContext } from '../../context';\nimport { AttachmentSelectorContextProvider, useAttachmentSelectorContext } from '../../context/AttachmentSelectorContext';\nimport { useStableId } from '../UtilityComponents/useStableId';\nexport const SimpleAttachmentSelector = () => {\n  const {\n    AttachmentSelectorInitiationButtonContents,\n    FileUploadIcon = DefaultUploadIcon\n  } = useComponentContext();\n  const inputRef = useRef(null);\n  const [labelElement, setLabelElement] = useState(null);\n  const id = useStableId();\n  useEffect(() => {\n    if (!labelElement) return;\n    const handleKeyUp = event => {\n      if (![' ', 'Enter'].includes(event.key) || !inputRef.current) return;\n      event.preventDefault();\n      inputRef.current.click();\n    };\n    labelElement.addEventListener('keyup', handleKeyUp);\n    return () => {\n      labelElement.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [labelElement]);\n  return React.createElement(\"div\", {\n    className: 'str-chat__file-input-container',\n    \"data-testid\": 'file-upload-button'\n  }, React.createElement(UploadFileInput, {\n    id: id,\n    ref: inputRef\n  }), React.createElement(\"label\", {\n    className: 'str-chat__file-input-label',\n    htmlFor: id,\n    ref: setLabelElement,\n    tabIndex: 0\n  }, AttachmentSelectorInitiationButtonContents ? React.createElement(AttachmentSelectorInitiationButtonContents, null) : React.createElement(FileUploadIcon, null)));\n};\nconst AttachmentSelectorMenuInitButtonIcon = () => {\n  const {\n    AttachmentSelectorInitiationButtonContents,\n    FileUploadIcon\n  } = useComponentContext('SimpleAttachmentSelector');\n  if (AttachmentSelectorInitiationButtonContents) {\n    return React.createElement(AttachmentSelectorInitiationButtonContents, null);\n  }\n  if (FileUploadIcon) {\n    return React.createElement(FileUploadIcon, null);\n  }\n  return React.createElement(\"div\", {\n    className: 'str-chat__attachment-selector__menu-button__icon'\n  });\n};\nexport const DefaultAttachmentSelectorComponents = {\n  File({\n    closeMenu\n  }) {\n    const {\n      t\n    } = useTranslationContext();\n    const {\n      fileInput\n    } = useAttachmentSelectorContext();\n    const {\n      isUploadEnabled\n    } = useAttachmentManagerState();\n    return React.createElement(DialogMenuButton, {\n      className: 'str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__upload-file-button',\n      disabled: !isUploadEnabled,\n      onClick: () => {\n        if (fileInput) fileInput.click();\n        closeMenu();\n      }\n    }, t('File'));\n  },\n  Poll({\n    closeMenu,\n    openModalForAction\n  }) {\n    const {\n      t\n    } = useTranslationContext();\n    return React.createElement(DialogMenuButton, {\n      className: 'str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__create-poll-button',\n      onClick: () => {\n        openModalForAction('createPoll');\n        closeMenu();\n      }\n    }, t('Poll'));\n  }\n};\nexport const defaultAttachmentSelectorActionSet = [{\n  ActionButton: DefaultAttachmentSelectorComponents.File,\n  type: 'uploadFile'\n}, {\n  ActionButton: DefaultAttachmentSelectorComponents.Poll,\n  type: 'createPoll'\n}];\nconst useAttachmentSelectorActionsFiltered = original => {\n  const {\n    PollCreationDialog = DefaultPollCreationDialog\n  } = useComponentContext();\n  const {\n    channelCapabilities,\n    channelConfig\n  } = useChannelStateContext();\n  const {\n    isThreadInput\n  } = useMessageInputContext();\n  return original.filter(action => {\n    if (action.type === 'uploadFile' && !channelCapabilities['upload-file']) return false;\n    if (action.type === 'createPoll' && (!channelConfig?.polls || isThreadInput || !channelCapabilities['send-poll'])) return false;\n    return true;\n  }).map(action => {\n    if (action.type === 'createPoll' && !action.ModalContent) {\n      return {\n        ...action,\n        ModalContent: PollCreationDialog\n      };\n    }\n    return action;\n  });\n};\nexport const AttachmentSelector = ({\n  attachmentSelectorActionSet = defaultAttachmentSelectorActionSet,\n  getModalPortalDestination\n}) => {\n  const {\n    t\n  } = useTranslationContext();\n  const {\n    channelCapabilities\n  } = useChannelStateContext();\n  const {\n    isThreadInput\n  } = useMessageInputContext();\n  const actions = useAttachmentSelectorActionsFiltered(attachmentSelectorActionSet);\n  const menuDialogId = `attachment-actions-menu${isThreadInput ? '-thread' : ''}`;\n  const menuDialog = useDialog({\n    id: menuDialogId\n  });\n  const menuDialogIsOpen = useDialogIsOpen(menuDialogId);\n  const [modalContentAction, setModalContentActionAction] = useState();\n  const openModal = useCallback(actionType => {\n    const action = actions.find(a => a.type === actionType);\n    if (!action?.ModalContent) return;\n    setModalContentActionAction(action);\n  }, [actions]);\n  const closeModal = useCallback(() => setModalContentActionAction(undefined), []);\n  const [fileInput, setFileInput] = useState(null);\n  const menuButtonRef = useRef(null);\n  const getDefaultPortalDestination = useCallback(() => document.getElementById(CHANNEL_CONTAINER_ID), []);\n  if (actions.length === 0) return null;\n  if (actions.length === 1 && actions[0].type === 'uploadFile') return React.createElement(SimpleAttachmentSelector, null);\n  const ModalContent = modalContentAction?.ModalContent;\n  const modalIsOpen = !!ModalContent;\n  return React.createElement(AttachmentSelectorContextProvider, {\n    value: {\n      fileInput\n    }\n  }, React.createElement(\"div\", {\n    className: 'str-chat__attachment-selector'\n  }, channelCapabilities['upload-file'] && React.createElement(UploadFileInput, {\n    ref: setFileInput\n  }), React.createElement(\"button\", {\n    \"aria-expanded\": menuDialogIsOpen,\n    \"aria-haspopup\": 'true',\n    \"aria-label\": t('aria/Open Attachment Selector'),\n    className: 'str-chat__attachment-selector__menu-button',\n    \"data-testid\": 'invoke-attachment-selector-button',\n    onClick: () => menuDialog?.toggle(),\n    ref: menuButtonRef\n  }, React.createElement(AttachmentSelectorMenuInitButtonIcon, null)), React.createElement(DialogAnchor, {\n    id: menuDialogId,\n    placement: 'top-start',\n    referenceElement: menuButtonRef.current,\n    tabIndex: -1,\n    trapFocus: true\n  }, React.createElement(\"div\", {\n    className: 'str-chat__attachment-selector-actions-menu str-chat__dialog-menu',\n    \"data-testid\": 'attachment-selector-actions-menu'\n  }, actions.map(({\n    ActionButton,\n    type\n  }) => React.createElement(ActionButton, {\n    closeMenu: menuDialog.close,\n    key: `attachment-selector-item-${type}`,\n    openModalForAction: openModal\n  })))), React.createElement(Portal, {\n    getPortalDestination: getModalPortalDestination ?? getDefaultPortalDestination,\n    isOpen: modalIsOpen\n  }, React.createElement(Modal, {\n    className: 'str-chat__create-poll-modal',\n    onClose: closeModal,\n    open: modalIsOpen\n  }, ModalContent && React.createElement(ModalContent, {\n    close: closeModal\n  })))));\n};","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","UploadIcon","DefaultUploadIcon","useAttachmentManagerState","CHANNEL_CONTAINER_ID","DialogAnchor","useDialog","useDialogIsOpen","DialogMenuButton","Modal","PollCreationDialog","DefaultPollCreationDialog","Portal","UploadFileInput","useChannelStateContext","useComponentContext","useMessageInputContext","useTranslationContext","AttachmentSelectorContextProvider","useAttachmentSelectorContext","useStableId","SimpleAttachmentSelector","AttachmentSelectorInitiationButtonContents","FileUploadIcon","inputRef","labelElement","setLabelElement","id","handleKeyUp","event","includes","key","current","preventDefault","click","addEventListener","removeEventListener","createElement","className","ref","htmlFor","tabIndex","AttachmentSelectorMenuInitButtonIcon","DefaultAttachmentSelectorComponents","File","closeMenu","t","fileInput","isUploadEnabled","disabled","onClick","Poll","openModalForAction","defaultAttachmentSelectorActionSet","ActionButton","type","useAttachmentSelectorActionsFiltered","original","channelCapabilities","channelConfig","isThreadInput","filter","action","polls","map","ModalContent","AttachmentSelector","attachmentSelectorActionSet","getModalPortalDestination","actions","menuDialogId","menuDialog","menuDialogIsOpen","modalContentAction","setModalContentActionAction","openModal","actionType","find","a","closeModal","undefined","setFileInput","menuButtonRef","getDefaultPortalDestination","document","getElementById","length","modalIsOpen","value","toggle","placement","referenceElement","trapFocus","close","getPortalDestination","isOpen","onClose","open"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageInput/AttachmentSelector.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { UploadIcon as DefaultUploadIcon } from './icons';\nimport { useAttachmentManagerState } from './hooks/useAttachmentManagerState';\nimport { CHANNEL_CONTAINER_ID } from '../Channel/constants';\nimport { DialogAnchor, useDialog, useDialogIsOpen } from '../Dialog';\nimport { DialogMenuButton } from '../Dialog/DialogMenu';\nimport { Modal } from '../Modal';\nimport { PollCreationDialog as DefaultPollCreationDialog } from '../Poll';\nimport { Portal } from '../Portal/Portal';\nimport { UploadFileInput } from '../ReactFileUtilities';\nimport { useChannelStateContext, useComponentContext, useMessageInputContext, useTranslationContext, } from '../../context';\nimport { AttachmentSelectorContextProvider, useAttachmentSelectorContext, } from '../../context/AttachmentSelectorContext';\nimport { useStableId } from '../UtilityComponents/useStableId';\nexport const SimpleAttachmentSelector = () => {\n    const { AttachmentSelectorInitiationButtonContents, FileUploadIcon = DefaultUploadIcon, } = useComponentContext();\n    const inputRef = useRef(null);\n    const [labelElement, setLabelElement] = useState(null);\n    const id = useStableId();\n    useEffect(() => {\n        if (!labelElement)\n            return;\n        const handleKeyUp = (event) => {\n            if (![' ', 'Enter'].includes(event.key) || !inputRef.current)\n                return;\n            event.preventDefault();\n            inputRef.current.click();\n        };\n        labelElement.addEventListener('keyup', handleKeyUp);\n        return () => {\n            labelElement.removeEventListener('keyup', handleKeyUp);\n        };\n    }, [labelElement]);\n    return (React.createElement(\"div\", { className: 'str-chat__file-input-container', \"data-testid\": 'file-upload-button' },\n        React.createElement(UploadFileInput, { id: id, ref: inputRef }),\n        React.createElement(\"label\", { className: 'str-chat__file-input-label', htmlFor: id, ref: setLabelElement, tabIndex: 0 }, AttachmentSelectorInitiationButtonContents ? (React.createElement(AttachmentSelectorInitiationButtonContents, null)) : (React.createElement(FileUploadIcon, null)))));\n};\nconst AttachmentSelectorMenuInitButtonIcon = () => {\n    const { AttachmentSelectorInitiationButtonContents, FileUploadIcon } = useComponentContext('SimpleAttachmentSelector');\n    if (AttachmentSelectorInitiationButtonContents) {\n        return React.createElement(AttachmentSelectorInitiationButtonContents, null);\n    }\n    if (FileUploadIcon) {\n        return React.createElement(FileUploadIcon, null);\n    }\n    return React.createElement(\"div\", { className: 'str-chat__attachment-selector__menu-button__icon' });\n};\nexport const DefaultAttachmentSelectorComponents = {\n    File({ closeMenu }) {\n        const { t } = useTranslationContext();\n        const { fileInput } = useAttachmentSelectorContext();\n        const { isUploadEnabled } = useAttachmentManagerState();\n        return (React.createElement(DialogMenuButton, { className: 'str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__upload-file-button', disabled: !isUploadEnabled, onClick: () => {\n                if (fileInput)\n                    fileInput.click();\n                closeMenu();\n            } }, t('File')));\n    },\n    Poll({ closeMenu, openModalForAction }) {\n        const { t } = useTranslationContext();\n        return (React.createElement(DialogMenuButton, { className: 'str-chat__attachment-selector-actions-menu__button str-chat__attachment-selector-actions-menu__create-poll-button', onClick: () => {\n                openModalForAction('createPoll');\n                closeMenu();\n            } }, t('Poll')));\n    },\n};\nexport const defaultAttachmentSelectorActionSet = [\n    { ActionButton: DefaultAttachmentSelectorComponents.File, type: 'uploadFile' },\n    {\n        ActionButton: DefaultAttachmentSelectorComponents.Poll,\n        type: 'createPoll',\n    },\n];\nconst useAttachmentSelectorActionsFiltered = (original) => {\n    const { PollCreationDialog = DefaultPollCreationDialog } = useComponentContext();\n    const { channelCapabilities, channelConfig } = useChannelStateContext();\n    const { isThreadInput } = useMessageInputContext();\n    return original\n        .filter((action) => {\n        if (action.type === 'uploadFile' && !channelCapabilities['upload-file'])\n            return false;\n        if (action.type === 'createPoll' &&\n            (!channelConfig?.polls || isThreadInput || !channelCapabilities['send-poll']))\n            return false;\n        return true;\n    })\n        .map((action) => {\n        if (action.type === 'createPoll' && !action.ModalContent) {\n            return { ...action, ModalContent: PollCreationDialog };\n        }\n        return action;\n    });\n};\nexport const AttachmentSelector = ({ attachmentSelectorActionSet = defaultAttachmentSelectorActionSet, getModalPortalDestination, }) => {\n    const { t } = useTranslationContext();\n    const { channelCapabilities } = useChannelStateContext();\n    const { isThreadInput } = useMessageInputContext();\n    const actions = useAttachmentSelectorActionsFiltered(attachmentSelectorActionSet);\n    const menuDialogId = `attachment-actions-menu${isThreadInput ? '-thread' : ''}`;\n    const menuDialog = useDialog({ id: menuDialogId });\n    const menuDialogIsOpen = useDialogIsOpen(menuDialogId);\n    const [modalContentAction, setModalContentActionAction] = useState();\n    const openModal = useCallback((actionType) => {\n        const action = actions.find((a) => a.type === actionType);\n        if (!action?.ModalContent)\n            return;\n        setModalContentActionAction(action);\n    }, [actions]);\n    const closeModal = useCallback(() => setModalContentActionAction(undefined), []);\n    const [fileInput, setFileInput] = useState(null);\n    const menuButtonRef = useRef(null);\n    const getDefaultPortalDestination = useCallback(() => document.getElementById(CHANNEL_CONTAINER_ID), []);\n    if (actions.length === 0)\n        return null;\n    if (actions.length === 1 && actions[0].type === 'uploadFile')\n        return React.createElement(SimpleAttachmentSelector, null);\n    const ModalContent = modalContentAction?.ModalContent;\n    const modalIsOpen = !!ModalContent;\n    return (React.createElement(AttachmentSelectorContextProvider, { value: { fileInput } },\n        React.createElement(\"div\", { className: 'str-chat__attachment-selector' },\n            channelCapabilities['upload-file'] && React.createElement(UploadFileInput, { ref: setFileInput }),\n            React.createElement(\"button\", { \"aria-expanded\": menuDialogIsOpen, \"aria-haspopup\": 'true', \"aria-label\": t('aria/Open Attachment Selector'), className: 'str-chat__attachment-selector__menu-button', \"data-testid\": 'invoke-attachment-selector-button', onClick: () => menuDialog?.toggle(), ref: menuButtonRef },\n                React.createElement(AttachmentSelectorMenuInitButtonIcon, null)),\n            React.createElement(DialogAnchor, { id: menuDialogId, placement: 'top-start', referenceElement: menuButtonRef.current, tabIndex: -1, trapFocus: true },\n                React.createElement(\"div\", { className: 'str-chat__attachment-selector-actions-menu str-chat__dialog-menu', \"data-testid\": 'attachment-selector-actions-menu' }, actions.map(({ ActionButton, type }) => (React.createElement(ActionButton, { closeMenu: menuDialog.close, key: `attachment-selector-item-${type}`, openModalForAction: openModal }))))),\n            React.createElement(Portal, { getPortalDestination: getModalPortalDestination ?? getDefaultPortalDestination, isOpen: modalIsOpen },\n                React.createElement(Modal, { className: 'str-chat__create-poll-modal', onClose: closeModal, open: modalIsOpen }, ModalContent && React.createElement(ModalContent, { close: closeModal }))))));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACvE,SAASC,UAAU,IAAIC,iBAAiB,QAAQ,SAAS;AACzD,SAASC,yBAAyB,QAAQ,mCAAmC;AAC7E,SAASC,oBAAoB,QAAQ,sBAAsB;AAC3D,SAASC,YAAY,EAAEC,SAAS,EAAEC,eAAe,QAAQ,WAAW;AACpE,SAASC,gBAAgB,QAAQ,sBAAsB;AACvD,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,kBAAkB,IAAIC,yBAAyB,QAAQ,SAAS;AACzE,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,sBAAsB,EAAEC,mBAAmB,EAAEC,sBAAsB,EAAEC,qBAAqB,QAAS,eAAe;AAC3H,SAASC,iCAAiC,EAAEC,4BAA4B,QAAS,yCAAyC;AAC1H,SAASC,WAAW,QAAQ,kCAAkC;AAC9D,OAAO,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAC1C,MAAM;IAAEC,0CAA0C;IAAEC,cAAc,GAAGrB;EAAmB,CAAC,GAAGa,mBAAmB,CAAC,CAAC;EACjH,MAAMS,QAAQ,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAAC0B,YAAY,EAAEC,eAAe,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM2B,EAAE,GAAGP,WAAW,CAAC,CAAC;EACxBtB,SAAS,CAAC,MAAM;IACZ,IAAI,CAAC2B,YAAY,EACb;IACJ,MAAMG,WAAW,GAAIC,KAAK,IAAK;MAC3B,IAAI,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACD,KAAK,CAACE,GAAG,CAAC,IAAI,CAACP,QAAQ,CAACQ,OAAO,EACxD;MACJH,KAAK,CAACI,cAAc,CAAC,CAAC;MACtBT,QAAQ,CAACQ,OAAO,CAACE,KAAK,CAAC,CAAC;IAC5B,CAAC;IACDT,YAAY,CAACU,gBAAgB,CAAC,OAAO,EAAEP,WAAW,CAAC;IACnD,OAAO,MAAM;MACTH,YAAY,CAACW,mBAAmB,CAAC,OAAO,EAAER,WAAW,CAAC;IAC1D,CAAC;EACL,CAAC,EAAE,CAACH,YAAY,CAAC,CAAC;EAClB,OAAQ7B,KAAK,CAACyC,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE,gCAAgC;IAAE,aAAa,EAAE;EAAqB,CAAC,EACnH1C,KAAK,CAACyC,aAAa,CAACxB,eAAe,EAAE;IAAEc,EAAE,EAAEA,EAAE;IAAEY,GAAG,EAAEf;EAAS,CAAC,CAAC,EAC/D5B,KAAK,CAACyC,aAAa,CAAC,OAAO,EAAE;IAAEC,SAAS,EAAE,4BAA4B;IAAEE,OAAO,EAAEb,EAAE;IAAEY,GAAG,EAAEb,eAAe;IAAEe,QAAQ,EAAE;EAAE,CAAC,EAAEnB,0CAA0C,GAAI1B,KAAK,CAACyC,aAAa,CAACf,0CAA0C,EAAE,IAAI,CAAC,GAAK1B,KAAK,CAACyC,aAAa,CAACd,cAAc,EAAE,IAAI,CAAE,CAAC,CAAC;AACtS,CAAC;AACD,MAAMmB,oCAAoC,GAAGA,CAAA,KAAM;EAC/C,MAAM;IAAEpB,0CAA0C;IAAEC;EAAe,CAAC,GAAGR,mBAAmB,CAAC,0BAA0B,CAAC;EACtH,IAAIO,0CAA0C,EAAE;IAC5C,OAAO1B,KAAK,CAACyC,aAAa,CAACf,0CAA0C,EAAE,IAAI,CAAC;EAChF;EACA,IAAIC,cAAc,EAAE;IAChB,OAAO3B,KAAK,CAACyC,aAAa,CAACd,cAAc,EAAE,IAAI,CAAC;EACpD;EACA,OAAO3B,KAAK,CAACyC,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAmD,CAAC,CAAC;AACxG,CAAC;AACD,OAAO,MAAMK,mCAAmC,GAAG;EAC/CC,IAAIA,CAAC;IAAEC;EAAU,CAAC,EAAE;IAChB,MAAM;MAAEC;IAAE,CAAC,GAAG7B,qBAAqB,CAAC,CAAC;IACrC,MAAM;MAAE8B;IAAU,CAAC,GAAG5B,4BAA4B,CAAC,CAAC;IACpD,MAAM;MAAE6B;IAAgB,CAAC,GAAG7C,yBAAyB,CAAC,CAAC;IACvD,OAAQP,KAAK,CAACyC,aAAa,CAAC7B,gBAAgB,EAAE;MAAE8B,SAAS,EAAE,mHAAmH;MAAEW,QAAQ,EAAE,CAACD,eAAe;MAAEE,OAAO,EAAEA,CAAA,KAAM;QACnN,IAAIH,SAAS,EACTA,SAAS,CAACb,KAAK,CAAC,CAAC;QACrBW,SAAS,CAAC,CAAC;MACf;IAAE,CAAC,EAAEC,CAAC,CAAC,MAAM,CAAC,CAAC;EACvB,CAAC;EACDK,IAAIA,CAAC;IAAEN,SAAS;IAAEO;EAAmB,CAAC,EAAE;IACpC,MAAM;MAAEN;IAAE,CAAC,GAAG7B,qBAAqB,CAAC,CAAC;IACrC,OAAQrB,KAAK,CAACyC,aAAa,CAAC7B,gBAAgB,EAAE;MAAE8B,SAAS,EAAE,mHAAmH;MAAEY,OAAO,EAAEA,CAAA,KAAM;QACvLE,kBAAkB,CAAC,YAAY,CAAC;QAChCP,SAAS,CAAC,CAAC;MACf;IAAE,CAAC,EAAEC,CAAC,CAAC,MAAM,CAAC,CAAC;EACvB;AACJ,CAAC;AACD,OAAO,MAAMO,kCAAkC,GAAG,CAC9C;EAAEC,YAAY,EAAEX,mCAAmC,CAACC,IAAI;EAAEW,IAAI,EAAE;AAAa,CAAC,EAC9E;EACID,YAAY,EAAEX,mCAAmC,CAACQ,IAAI;EACtDI,IAAI,EAAE;AACV,CAAC,CACJ;AACD,MAAMC,oCAAoC,GAAIC,QAAQ,IAAK;EACvD,MAAM;IAAE/C,kBAAkB,GAAGC;EAA0B,CAAC,GAAGI,mBAAmB,CAAC,CAAC;EAChF,MAAM;IAAE2C,mBAAmB;IAAEC;EAAc,CAAC,GAAG7C,sBAAsB,CAAC,CAAC;EACvE,MAAM;IAAE8C;EAAc,CAAC,GAAG5C,sBAAsB,CAAC,CAAC;EAClD,OAAOyC,QAAQ,CACVI,MAAM,CAAEC,MAAM,IAAK;IACpB,IAAIA,MAAM,CAACP,IAAI,KAAK,YAAY,IAAI,CAACG,mBAAmB,CAAC,aAAa,CAAC,EACnE,OAAO,KAAK;IAChB,IAAII,MAAM,CAACP,IAAI,KAAK,YAAY,KAC3B,CAACI,aAAa,EAAEI,KAAK,IAAIH,aAAa,IAAI,CAACF,mBAAmB,CAAC,WAAW,CAAC,CAAC,EAC7E,OAAO,KAAK;IAChB,OAAO,IAAI;EACf,CAAC,CAAC,CACGM,GAAG,CAAEF,MAAM,IAAK;IACjB,IAAIA,MAAM,CAACP,IAAI,KAAK,YAAY,IAAI,CAACO,MAAM,CAACG,YAAY,EAAE;MACtD,OAAO;QAAE,GAAGH,MAAM;QAAEG,YAAY,EAAEvD;MAAmB,CAAC;IAC1D;IACA,OAAOoD,MAAM;EACjB,CAAC,CAAC;AACN,CAAC;AACD,OAAO,MAAMI,kBAAkB,GAAGA,CAAC;EAAEC,2BAA2B,GAAGd,kCAAkC;EAAEe;AAA2B,CAAC,KAAK;EACpI,MAAM;IAAEtB;EAAE,CAAC,GAAG7B,qBAAqB,CAAC,CAAC;EACrC,MAAM;IAAEyC;EAAoB,CAAC,GAAG5C,sBAAsB,CAAC,CAAC;EACxD,MAAM;IAAE8C;EAAc,CAAC,GAAG5C,sBAAsB,CAAC,CAAC;EAClD,MAAMqD,OAAO,GAAGb,oCAAoC,CAACW,2BAA2B,CAAC;EACjF,MAAMG,YAAY,GAAG,0BAA0BV,aAAa,GAAG,SAAS,GAAG,EAAE,EAAE;EAC/E,MAAMW,UAAU,GAAGjE,SAAS,CAAC;IAAEqB,EAAE,EAAE2C;EAAa,CAAC,CAAC;EAClD,MAAME,gBAAgB,GAAGjE,eAAe,CAAC+D,YAAY,CAAC;EACtD,MAAM,CAACG,kBAAkB,EAAEC,2BAA2B,CAAC,GAAG1E,QAAQ,CAAC,CAAC;EACpE,MAAM2E,SAAS,GAAG9E,WAAW,CAAE+E,UAAU,IAAK;IAC1C,MAAMd,MAAM,GAAGO,OAAO,CAACQ,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACvB,IAAI,KAAKqB,UAAU,CAAC;IACzD,IAAI,CAACd,MAAM,EAAEG,YAAY,EACrB;IACJS,2BAA2B,CAACZ,MAAM,CAAC;EACvC,CAAC,EAAE,CAACO,OAAO,CAAC,CAAC;EACb,MAAMU,UAAU,GAAGlF,WAAW,CAAC,MAAM6E,2BAA2B,CAACM,SAAS,CAAC,EAAE,EAAE,CAAC;EAChF,MAAM,CAACjC,SAAS,EAAEkC,YAAY,CAAC,GAAGjF,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMkF,aAAa,GAAGnF,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMoF,2BAA2B,GAAGtF,WAAW,CAAC,MAAMuF,QAAQ,CAACC,cAAc,CAACjF,oBAAoB,CAAC,EAAE,EAAE,CAAC;EACxG,IAAIiE,OAAO,CAACiB,MAAM,KAAK,CAAC,EACpB,OAAO,IAAI;EACf,IAAIjB,OAAO,CAACiB,MAAM,KAAK,CAAC,IAAIjB,OAAO,CAAC,CAAC,CAAC,CAACd,IAAI,KAAK,YAAY,EACxD,OAAO3D,KAAK,CAACyC,aAAa,CAAChB,wBAAwB,EAAE,IAAI,CAAC;EAC9D,MAAM4C,YAAY,GAAGQ,kBAAkB,EAAER,YAAY;EACrD,MAAMsB,WAAW,GAAG,CAAC,CAACtB,YAAY;EAClC,OAAQrE,KAAK,CAACyC,aAAa,CAACnB,iCAAiC,EAAE;IAAEsE,KAAK,EAAE;MAAEzC;IAAU;EAAE,CAAC,EACnFnD,KAAK,CAACyC,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAgC,CAAC,EACrEoB,mBAAmB,CAAC,aAAa,CAAC,IAAI9D,KAAK,CAACyC,aAAa,CAACxB,eAAe,EAAE;IAAE0B,GAAG,EAAE0C;EAAa,CAAC,CAAC,EACjGrF,KAAK,CAACyC,aAAa,CAAC,QAAQ,EAAE;IAAE,eAAe,EAAEmC,gBAAgB;IAAE,eAAe,EAAE,MAAM;IAAE,YAAY,EAAE1B,CAAC,CAAC,+BAA+B,CAAC;IAAER,SAAS,EAAE,4CAA4C;IAAE,aAAa,EAAE,mCAAmC;IAAEY,OAAO,EAAEA,CAAA,KAAMqB,UAAU,EAAEkB,MAAM,CAAC,CAAC;IAAElD,GAAG,EAAE2C;EAAc,CAAC,EAChTtF,KAAK,CAACyC,aAAa,CAACK,oCAAoC,EAAE,IAAI,CAAC,CAAC,EACpE9C,KAAK,CAACyC,aAAa,CAAChC,YAAY,EAAE;IAAEsB,EAAE,EAAE2C,YAAY;IAAEoB,SAAS,EAAE,WAAW;IAAEC,gBAAgB,EAAET,aAAa,CAAClD,OAAO;IAAES,QAAQ,EAAE,CAAC,CAAC;IAAEmD,SAAS,EAAE;EAAK,CAAC,EAClJhG,KAAK,CAACyC,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE,kEAAkE;IAAE,aAAa,EAAE;EAAmC,CAAC,EAAE+B,OAAO,CAACL,GAAG,CAAC,CAAC;IAAEV,YAAY;IAAEC;EAAK,CAAC,KAAM3D,KAAK,CAACyC,aAAa,CAACiB,YAAY,EAAE;IAAET,SAAS,EAAE0B,UAAU,CAACsB,KAAK;IAAE9D,GAAG,EAAE,4BAA4BwB,IAAI,EAAE;IAAEH,kBAAkB,EAAEuB;EAAU,CAAC,CAAE,CAAC,CAAC,CAAC,EAC5V/E,KAAK,CAACyC,aAAa,CAACzB,MAAM,EAAE;IAAEkF,oBAAoB,EAAE1B,yBAAyB,IAAIe,2BAA2B;IAAEY,MAAM,EAAER;EAAY,CAAC,EAC/H3F,KAAK,CAACyC,aAAa,CAAC5B,KAAK,EAAE;IAAE6B,SAAS,EAAE,6BAA6B;IAAE0D,OAAO,EAAEjB,UAAU;IAAEkB,IAAI,EAAEV;EAAY,CAAC,EAAEtB,YAAY,IAAIrE,KAAK,CAACyC,aAAa,CAAC4B,YAAY,EAAE;IAAE4B,KAAK,EAAEd;EAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7M,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}