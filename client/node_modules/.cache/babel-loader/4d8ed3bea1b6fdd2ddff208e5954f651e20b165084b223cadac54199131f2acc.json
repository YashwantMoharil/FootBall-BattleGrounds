{"ast":null,"code":"import React, { useContext } from 'react';\nexport const ChannelActionContext = React.createContext(undefined);\nexport const ChannelActionProvider = ({\n  children,\n  value\n}) => React.createElement(ChannelActionContext.Provider, {\n  value: value\n}, children);\nexport const useChannelActionContext = componentName => {\n  const contextValue = useContext(ChannelActionContext);\n  if (!contextValue) {\n    console.warn(`The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelActionContext\n * typing is desired while using the HOC withChannelActionContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelActionContext = Component => {\n  const WithChannelActionContextComponent = props => {\n    const channelActionContext = useChannelActionContext();\n    return React.createElement(Component, {\n      ...props,\n      ...channelActionContext\n    });\n  };\n  WithChannelActionContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithChannelActionContextComponent;\n};","map":{"version":3,"names":["React","useContext","ChannelActionContext","createContext","undefined","ChannelActionProvider","children","value","createElement","Provider","useChannelActionContext","componentName","contextValue","console","warn","withChannelActionContext","Component","WithChannelActionContextComponent","props","channelActionContext","displayName","name","replace"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/context/ChannelActionContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const ChannelActionContext = React.createContext(undefined);\nexport const ChannelActionProvider = ({ children, value, }) => (React.createElement(ChannelActionContext.Provider, { value: value }, children));\nexport const useChannelActionContext = (componentName) => {\n    const contextValue = useContext(ChannelActionContext);\n    if (!contextValue) {\n        console.warn(`The useChannelActionContext hook was called outside of the ChannelActionContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelActionContext\n * typing is desired while using the HOC withChannelActionContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelActionContext = (Component) => {\n    const WithChannelActionContextComponent = (props) => {\n        const channelActionContext = useChannelActionContext();\n        return React.createElement(Component, { ...props, ...channelActionContext });\n    };\n    WithChannelActionContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithChannelActionContextComponent;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,oBAAoB,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAClE,OAAO,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAMP,KAAK,CAACQ,aAAa,CAACN,oBAAoB,CAACO,QAAQ,EAAE;EAAEF,KAAK,EAAEA;AAAM,CAAC,EAAED,QAAQ,CAAE;AAC/I,OAAO,MAAMI,uBAAuB,GAAIC,aAAa,IAAK;EACtD,MAAMC,YAAY,GAAGX,UAAU,CAACC,oBAAoB,CAAC;EACrD,IAAI,CAACU,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,uMAAuMH,aAAa,aAAa,CAAC;IAC/O,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,wBAAwB,GAAIC,SAAS,IAAK;EACnD,MAAMC,iCAAiC,GAAIC,KAAK,IAAK;IACjD,MAAMC,oBAAoB,GAAGT,uBAAuB,CAAC,CAAC;IACtD,OAAOV,KAAK,CAACQ,aAAa,CAACQ,SAAS,EAAE;MAAE,GAAGE,KAAK;MAAE,GAAGC;IAAqB,CAAC,CAAC;EAChF,CAAC;EACDF,iCAAiC,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IAClEJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,iCAAiC;AAC5C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}