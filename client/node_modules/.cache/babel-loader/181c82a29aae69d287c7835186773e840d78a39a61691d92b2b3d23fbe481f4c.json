{"ast":null,"code":"import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { useStableId } from '../UtilityComponents/useStableId';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nconst MessageListWithContext = props => {\n  const {\n    channel,\n    channelUnreadUiState,\n    disableDateSeparator = false,\n    groupStyles,\n    hasMoreNewer = false,\n    headerPosition,\n    hideDeletedMessages = false,\n    hideNewMessageSeparator = false,\n    highlightedMessageId,\n    internalInfiniteScrollProps: {\n      threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD,\n      ...restInternalInfiniteScrollProps\n    } = {},\n    jumpToLatestMessage = () => Promise.resolve(),\n    loadMore: loadMoreCallback,\n    loadMoreNewer: loadMoreNewerCallback,\n    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    maxTimeBetweenGroupedMessages,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,\n    messages = [],\n    noGroupByUser = false,\n    notifications,\n    pinPermissions = defaultPinPermissions,\n    reactionDetailsSort,\n    read,\n    renderMessages = defaultRenderMessages,\n    returnAllReadData = false,\n    reviewProcessedMessage,\n    showUnreadNotificationAlways,\n    sortReactionDetails,\n    sortReactions,\n    suppressAutoscroll,\n    threadList = false,\n    unsafeHTML = false\n  } = props;\n  const [listElement, setListElement] = React.useState(null);\n  const [ulElement, setUlElement] = React.useState(null);\n  const {\n    customClasses\n  } = useChatContext('MessageList');\n  const {\n    EmptyStateIndicator = DefaultEmptyStateIndicator,\n    LoadingIndicator = DefaultLoadingIndicator,\n    MessageListMainPanel = DefaultMessageListMainPanel,\n    MessageListNotifications = DefaultMessageListNotifications,\n    MessageNotification = DefaultMessageNotification,\n    TypingIndicator = DefaultTypingIndicator,\n    UnreadMessagesNotification = DefaultUnreadMessagesNotification\n  } = useComponentContext('MessageList');\n  const {\n    hasNewMessages,\n    isMessageListScrolledToBottom,\n    onScroll,\n    scrollToBottom,\n    wrapperRect\n  } = useScrollLocationLogic({\n    hasMoreNewer,\n    listElement,\n    loadMoreScrollThreshold,\n    messages,\n    // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?\n    scrolledUpThreshold: props.scrolledUpThreshold,\n    suppressAutoscroll\n  });\n  const {\n    show: showUnreadMessagesNotification\n  } = useUnreadMessagesNotification({\n    isMessageListScrolledToBottom,\n    showAlways: !!showUnreadNotificationAlways,\n    unreadCount: channelUnreadUiState?.unread_messages\n  });\n  useMarkRead({\n    isMessageListScrolledToBottom,\n    messageListIsThread: threadList,\n    wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id\n  });\n  const {\n    messageGroupStyles,\n    messages: enrichedMessages\n  } = useEnrichedMessages({\n    channel,\n    disableDateSeparator,\n    groupStyles,\n    headerPosition,\n    hideDeletedMessages,\n    hideNewMessageSeparator,\n    maxTimeBetweenGroupedMessages,\n    messages,\n    noGroupByUser,\n    reviewProcessedMessage\n  });\n  const elements = useMessageListElements({\n    channelUnreadUiState,\n    enrichedMessages,\n    internalMessageProps: {\n      additionalMessageInputProps: props.additionalMessageInputProps,\n      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n      customMessageActions: props.customMessageActions,\n      disableQuotedMessages: props.disableQuotedMessages,\n      formatDate: props.formatDate,\n      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n      getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n      getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n      Message: props.Message,\n      messageActions,\n      messageListRect: wrapperRect,\n      onlySenderCanEdit: props.onlySenderCanEdit,\n      onMentionsClick: props.onMentionsClick,\n      onMentionsHover: props.onMentionsHover,\n      onUserClick: props.onUserClick,\n      onUserHover: props.onUserHover,\n      openThread: props.openThread,\n      pinPermissions,\n      reactionDetailsSort,\n      renderText: props.renderText,\n      retrySendMessage: props.retrySendMessage,\n      sortReactionDetails,\n      sortReactions,\n      unsafeHTML\n    },\n    messageGroupStyles,\n    read,\n    renderMessages,\n    returnAllReadData,\n    threadList\n  });\n  const messageListClass = customClasses?.messageList || 'str-chat__list';\n  const loadMore = React.useCallback(() => {\n    if (loadMoreCallback) {\n      loadMoreCallback(messageLimit);\n    }\n  }, [loadMoreCallback, messageLimit]);\n  const loadMoreNewer = React.useCallback(() => {\n    if (loadMoreNewerCallback) {\n      loadMoreNewerCallback(messageLimit);\n    }\n  }, [loadMoreNewerCallback, messageLimit]);\n  const scrollToBottomFromNotification = React.useCallback(async () => {\n    if (hasMoreNewer) {\n      await jumpToLatestMessage();\n    } else {\n      scrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollToBottom, hasMoreNewer]);\n  React.useLayoutEffect(() => {\n    if (highlightedMessageId) {\n      const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n      element?.scrollIntoView({\n        block: 'center'\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedMessageId]);\n  const id = useStableId();\n  const showEmptyStateIndicator = elements.length === 0 && !threadList;\n  const dialogManagerId = threadList ? `message-list-dialog-manager-thread-${id}` : `message-list-dialog-manager-${id}`;\n  return React.createElement(MessageListContextProvider, {\n    value: {\n      listElement,\n      scrollToBottom\n    }\n  }, React.createElement(MessageListMainPanel, null, React.createElement(DialogManagerProvider, {\n    id: dialogManagerId\n  }, !threadList && showUnreadMessagesNotification && React.createElement(UnreadMessagesNotification, {\n    unreadCount: channelUnreadUiState?.unread_messages\n  }), React.createElement(\"div\", {\n    className: clsx(messageListClass, customClasses?.threadList),\n    onScroll: onScroll,\n    ref: setListElement,\n    tabIndex: 0\n  }, showEmptyStateIndicator ? React.createElement(EmptyStateIndicator, {\n    listType: threadList ? 'thread' : 'message'\n  }) : React.createElement(InfiniteScroll, {\n    className: 'str-chat__message-list-scroll',\n    \"data-testid\": 'reverse-infinite-scroll',\n    hasNextPage: props.hasMoreNewer,\n    hasPreviousPage: props.hasMore,\n    head: props.head,\n    isLoading: props.loadingMore,\n    loader: React.createElement(\"div\", {\n      className: 'str-chat__list__loading',\n      key: 'loading-indicator'\n    }, props.loadingMore && React.createElement(LoadingIndicator, {\n      size: 20\n    })),\n    loadNextPage: loadMoreNewer,\n    loadPreviousPage: loadMore,\n    threshold: loadMoreScrollThreshold,\n    ...restInternalInfiniteScrollProps\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__ul',\n    ref: setUlElement\n  }, elements), React.createElement(TypingIndicator, {\n    threadList: threadList\n  }), React.createElement(\"div\", {\n    key: 'bottom'\n  }))))), React.createElement(MessageListNotifications, {\n    hasNewMessages: hasNewMessages,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottomFromNotification,\n    threadList: threadList,\n    unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages\n  }));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = props => {\n  const {\n    jumpToLatestMessage,\n    loadMore,\n    loadMoreNewer\n  } = useChannelActionContext('MessageList');\n  const {\n    members: membersPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext\n  } = useChannelStateContext('MessageList');\n  return React.createElement(MessageListWithContext, {\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer,\n    ...restChannelStateContext,\n    ...props\n  });\n};","map":{"version":3,"names":["clsx","React","useEnrichedMessages","useMessageListElements","useScrollLocationLogic","useUnreadMessagesNotification","useMarkRead","MessageNotification","DefaultMessageNotification","MessageListNotifications","DefaultMessageListNotifications","UnreadMessagesNotification","DefaultUnreadMessagesNotification","useChannelActionContext","useChannelStateContext","DialogManagerProvider","useChatContext","useComponentContext","MessageListContextProvider","EmptyStateIndicator","DefaultEmptyStateIndicator","InfiniteScroll","LoadingIndicator","DefaultLoadingIndicator","defaultPinPermissions","MESSAGE_ACTIONS","TypingIndicator","DefaultTypingIndicator","MessageListMainPanel","DefaultMessageListMainPanel","defaultRenderMessages","useStableId","DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD","DEFAULT_NEXT_CHANNEL_PAGE_SIZE","MessageListWithContext","props","channel","channelUnreadUiState","disableDateSeparator","groupStyles","hasMoreNewer","headerPosition","hideDeletedMessages","hideNewMessageSeparator","highlightedMessageId","internalInfiniteScrollProps","threshold","loadMoreScrollThreshold","restInternalInfiniteScrollProps","jumpToLatestMessage","Promise","resolve","loadMore","loadMoreCallback","loadMoreNewer","loadMoreNewerCallback","maxTimeBetweenGroupedMessages","messageActions","Object","keys","messageLimit","messages","noGroupByUser","notifications","pinPermissions","reactionDetailsSort","read","renderMessages","returnAllReadData","reviewProcessedMessage","showUnreadNotificationAlways","sortReactionDetails","sortReactions","suppressAutoscroll","threadList","unsafeHTML","listElement","setListElement","useState","ulElement","setUlElement","customClasses","hasNewMessages","isMessageListScrolledToBottom","onScroll","scrollToBottom","wrapperRect","scrolledUpThreshold","show","showUnreadMessagesNotification","showAlways","unreadCount","unread_messages","messageListIsThread","wasMarkedUnread","first_unread_message_id","messageGroupStyles","enrichedMessages","elements","internalMessageProps","additionalMessageInputProps","closeReactionSelectorOnClick","customMessageActions","disableQuotedMessages","formatDate","getDeleteMessageErrorNotification","getFlagMessageErrorNotification","getFlagMessageSuccessNotification","getMarkMessageUnreadErrorNotification","getMarkMessageUnreadSuccessNotification","getMuteUserErrorNotification","getMuteUserSuccessNotification","getPinMessageErrorNotification","Message","messageListRect","onlySenderCanEdit","onMentionsClick","onMentionsHover","onUserClick","onUserHover","openThread","renderText","retrySendMessage","messageListClass","messageList","useCallback","scrollToBottomFromNotification","useLayoutEffect","element","querySelector","scrollIntoView","block","id","showEmptyStateIndicator","length","dialogManagerId","createElement","value","className","ref","tabIndex","listType","hasNextPage","hasPreviousPage","hasMore","head","isLoading","loadingMore","loader","key","size","loadNextPage","loadPreviousPage","isNotAtLatestMessageSet","undefined","MessageList","members","membersPropToNotPass","mutes","mutesPropToNotPass","watchers","watchersPropToNotPass","restChannelStateContext"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageList/MessageList.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification, } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { useStableId } from '../UtilityComponents/useStableId';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE, } from '../../constants/limits';\nconst MessageListWithContext = (props) => {\n    const { channel, channelUnreadUiState, disableDateSeparator = false, groupStyles, hasMoreNewer = false, headerPosition, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {}, jumpToLatestMessage = () => Promise.resolve(), loadMore: loadMoreCallback, loadMoreNewer: loadMoreNewerCallback, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    maxTimeBetweenGroupedMessages, messageActions = Object.keys(MESSAGE_ACTIONS), messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages = [], noGroupByUser = false, notifications, pinPermissions = defaultPinPermissions, reactionDetailsSort, read, renderMessages = defaultRenderMessages, returnAllReadData = false, reviewProcessedMessage, showUnreadNotificationAlways, sortReactionDetails, sortReactions, suppressAutoscroll, threadList = false, unsafeHTML = false, } = props;\n    const [listElement, setListElement] = React.useState(null);\n    const [ulElement, setUlElement] = React.useState(null);\n    const { customClasses } = useChatContext('MessageList');\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator, LoadingIndicator = DefaultLoadingIndicator, MessageListMainPanel = DefaultMessageListMainPanel, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, TypingIndicator = DefaultTypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, } = useComponentContext('MessageList');\n    const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect, } = useScrollLocationLogic({\n        hasMoreNewer,\n        listElement,\n        loadMoreScrollThreshold,\n        messages, // todo: is it correct to base the scroll logic on an array that does not contain date separators or intro?\n        scrolledUpThreshold: props.scrolledUpThreshold,\n        suppressAutoscroll,\n    });\n    const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({\n        isMessageListScrolledToBottom,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages,\n    });\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: threadList,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({\n        channel,\n        disableDateSeparator,\n        groupStyles,\n        headerPosition,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        maxTimeBetweenGroupedMessages,\n        messages,\n        noGroupByUser,\n        reviewProcessedMessage,\n    });\n    const elements = useMessageListElements({\n        channelUnreadUiState,\n        enrichedMessages,\n        internalMessageProps: {\n            additionalMessageInputProps: props.additionalMessageInputProps,\n            closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n            customMessageActions: props.customMessageActions,\n            disableQuotedMessages: props.disableQuotedMessages,\n            formatDate: props.formatDate,\n            getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n            getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n            getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n            getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n            getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n            getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n            getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n            getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n            Message: props.Message,\n            messageActions,\n            messageListRect: wrapperRect,\n            onlySenderCanEdit: props.onlySenderCanEdit,\n            onMentionsClick: props.onMentionsClick,\n            onMentionsHover: props.onMentionsHover,\n            onUserClick: props.onUserClick,\n            onUserHover: props.onUserHover,\n            openThread: props.openThread,\n            pinPermissions,\n            reactionDetailsSort,\n            renderText: props.renderText,\n            retrySendMessage: props.retrySendMessage,\n            sortReactionDetails,\n            sortReactions,\n            unsafeHTML,\n        },\n        messageGroupStyles,\n        read,\n        renderMessages,\n        returnAllReadData,\n        threadList,\n    });\n    const messageListClass = customClasses?.messageList || 'str-chat__list';\n    const loadMore = React.useCallback(() => {\n        if (loadMoreCallback) {\n            loadMoreCallback(messageLimit);\n        }\n    }, [loadMoreCallback, messageLimit]);\n    const loadMoreNewer = React.useCallback(() => {\n        if (loadMoreNewerCallback) {\n            loadMoreNewerCallback(messageLimit);\n        }\n    }, [loadMoreNewerCallback, messageLimit]);\n    const scrollToBottomFromNotification = React.useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n        }\n        else {\n            scrollToBottom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [scrollToBottom, hasMoreNewer]);\n    React.useLayoutEffect(() => {\n        if (highlightedMessageId) {\n            const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n            element?.scrollIntoView({ block: 'center' });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [highlightedMessageId]);\n    const id = useStableId();\n    const showEmptyStateIndicator = elements.length === 0 && !threadList;\n    const dialogManagerId = threadList\n        ? `message-list-dialog-manager-thread-${id}`\n        : `message-list-dialog-manager-${id}`;\n    return (React.createElement(MessageListContextProvider, { value: { listElement, scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: clsx(messageListClass, customClasses?.threadList), onScroll: onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? (React.createElement(EmptyStateIndicator, { listType: threadList ? 'thread' : 'message' })) : (React.createElement(InfiniteScroll, { className: 'str-chat__message-list-scroll', \"data-testid\": 'reverse-infinite-scroll', hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: React.createElement(\"div\", { className: 'str-chat__list__loading', key: 'loading-indicator' }, props.loadingMore && React.createElement(LoadingIndicator, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },\n                    React.createElement(\"ul\", { className: 'str-chat__ul', ref: setUlElement }, elements),\n                    React.createElement(TypingIndicator, { threadList: threadList }),\n                    React.createElement(\"div\", { key: 'bottom' })))))),\n        React.createElement(MessageListNotifications, { hasNewMessages: hasNewMessages, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottomFromNotification, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages })));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = (props) => {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer } = useChannelActionContext('MessageList');\n    const { members: membersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext } = useChannelStateContext('MessageList');\n    return (React.createElement(MessageListWithContext, { jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer, ...restChannelStateContext, ...props }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}