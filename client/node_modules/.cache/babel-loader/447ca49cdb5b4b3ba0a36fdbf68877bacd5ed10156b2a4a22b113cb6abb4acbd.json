{"ast":null,"code":"import React, { useContext } from 'react';\nexport const TypingContext = React.createContext(undefined);\nexport const TypingProvider = ({\n  children,\n  value\n}) => React.createElement(TypingContext.Provider, {\n  value: value\n}, children);\nexport const useTypingContext = componentName => {\n  const contextValue = useContext(TypingContext);\n  if (!contextValue) {\n    console.warn(`The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withTypingContext = Component => {\n  const WithTypingContextComponent = props => {\n    const typingContext = useTypingContext();\n    return React.createElement(Component, {\n      ...props,\n      ...typingContext\n    });\n  };\n  WithTypingContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithTypingContextComponent;\n};","map":{"version":3,"names":["React","useContext","TypingContext","createContext","undefined","TypingProvider","children","value","createElement","Provider","useTypingContext","componentName","contextValue","console","warn","withTypingContext","Component","WithTypingContextComponent","props","typingContext","displayName","name","replace"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/context/TypingContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const TypingContext = React.createContext(undefined);\nexport const TypingProvider = ({ children, value, }) => (React.createElement(TypingContext.Provider, { value: value }, children));\nexport const useTypingContext = (componentName) => {\n    const contextValue = useContext(TypingContext);\n    if (!contextValue) {\n        console.warn(`The useTypingContext hook was called outside of the TypingContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if TypingContext\n * typing is desired while using the HOC withTypingContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withTypingContext = (Component) => {\n    const WithTypingContextComponent = (props) => {\n        const typingContext = useTypingContext();\n        return React.createElement(Component, { ...props, ...typingContext });\n    };\n    WithTypingContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithTypingContextComponent;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,aAAa,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAC3D,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAMP,KAAK,CAACQ,aAAa,CAACN,aAAa,CAACO,QAAQ,EAAE;EAAEF,KAAK,EAAEA;AAAM,CAAC,EAAED,QAAQ,CAAE;AACjI,OAAO,MAAMI,gBAAgB,GAAIC,aAAa,IAAK;EAC/C,MAAMC,YAAY,GAAGX,UAAU,CAACC,aAAa,CAAC;EAC9C,IAAI,CAACU,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,yLAAyLH,aAAa,aAAa,CAAC;IACjO,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,iBAAiB,GAAIC,SAAS,IAAK;EAC5C,MAAMC,0BAA0B,GAAIC,KAAK,IAAK;IAC1C,MAAMC,aAAa,GAAGT,gBAAgB,CAAC,CAAC;IACxC,OAAOV,KAAK,CAACQ,aAAa,CAACQ,SAAS,EAAE;MAAE,GAAGE,KAAK;MAAE,GAAGC;IAAc,CAAC,CAAC;EACzE,CAAC;EACDF,0BAA0B,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IAC3DJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,0BAA0B;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}