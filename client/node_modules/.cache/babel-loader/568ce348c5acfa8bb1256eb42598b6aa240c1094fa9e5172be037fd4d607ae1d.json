{"ast":null,"code":"import { useChatContext, useTranslationContext } from '../../../context';\nexport const MAX_MESSAGE_REACTIONS_TO_FETCH = 1000;\nexport function useReactionsFetcher(message, notifications = {}) {\n  const {\n    client\n  } = useChatContext('useRectionsFetcher');\n  const {\n    t\n  } = useTranslationContext('useReactionFetcher');\n  const {\n    getErrorNotification,\n    notify\n  } = notifications;\n  return async (reactionType, sort) => {\n    try {\n      return await fetchMessageReactions(client, message.id, reactionType, sort);\n    } catch (e) {\n      const errorMessage = getErrorNotification?.(message);\n      notify?.(errorMessage || t('Error fetching reactions'), 'error');\n      throw e;\n    }\n  };\n}\nasync function fetchMessageReactions(client, messageId, reactionType, sort) {\n  const reactions = [];\n  const limit = 25;\n  let next;\n  let hasNext = true;\n  while (hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH) {\n    const response = await client.queryReactions(messageId, reactionType ? {\n      type: reactionType\n    } : {}, sort, {\n      limit,\n      next\n    });\n    reactions.push(...response.reactions);\n    next = response.next;\n    hasNext = Boolean(next);\n  }\n  return reactions;\n}","map":{"version":3,"names":["useChatContext","useTranslationContext","MAX_MESSAGE_REACTIONS_TO_FETCH","useReactionsFetcher","message","notifications","client","t","getErrorNotification","notify","reactionType","sort","fetchMessageReactions","id","e","errorMessage","messageId","reactions","limit","next","hasNext","length","response","queryReactions","type","push","Boolean"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/hooks/useReactionsFetcher.js"],"sourcesContent":["import { useChatContext, useTranslationContext } from '../../../context';\nexport const MAX_MESSAGE_REACTIONS_TO_FETCH = 1000;\nexport function useReactionsFetcher(message, notifications = {}) {\n    const { client } = useChatContext('useRectionsFetcher');\n    const { t } = useTranslationContext('useReactionFetcher');\n    const { getErrorNotification, notify } = notifications;\n    return async (reactionType, sort) => {\n        try {\n            return await fetchMessageReactions(client, message.id, reactionType, sort);\n        }\n        catch (e) {\n            const errorMessage = getErrorNotification?.(message);\n            notify?.(errorMessage || t('Error fetching reactions'), 'error');\n            throw e;\n        }\n    };\n}\nasync function fetchMessageReactions(client, messageId, reactionType, sort) {\n    const reactions = [];\n    const limit = 25;\n    let next;\n    let hasNext = true;\n    while (hasNext && reactions.length < MAX_MESSAGE_REACTIONS_TO_FETCH) {\n        const response = await client.queryReactions(messageId, reactionType ? { type: reactionType } : {}, sort, { limit, next });\n        reactions.push(...response.reactions);\n        next = response.next;\n        hasNext = Boolean(next);\n    }\n    return reactions;\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,qBAAqB,QAAQ,kBAAkB;AACxE,OAAO,MAAMC,8BAA8B,GAAG,IAAI;AAClD,OAAO,SAASC,mBAAmBA,CAACC,OAAO,EAAEC,aAAa,GAAG,CAAC,CAAC,EAAE;EAC7D,MAAM;IAAEC;EAAO,CAAC,GAAGN,cAAc,CAAC,oBAAoB,CAAC;EACvD,MAAM;IAAEO;EAAE,CAAC,GAAGN,qBAAqB,CAAC,oBAAoB,CAAC;EACzD,MAAM;IAAEO,oBAAoB;IAAEC;EAAO,CAAC,GAAGJ,aAAa;EACtD,OAAO,OAAOK,YAAY,EAAEC,IAAI,KAAK;IACjC,IAAI;MACA,OAAO,MAAMC,qBAAqB,CAACN,MAAM,EAAEF,OAAO,CAACS,EAAE,EAAEH,YAAY,EAAEC,IAAI,CAAC;IAC9E,CAAC,CACD,OAAOG,CAAC,EAAE;MACN,MAAMC,YAAY,GAAGP,oBAAoB,GAAGJ,OAAO,CAAC;MACpDK,MAAM,GAAGM,YAAY,IAAIR,CAAC,CAAC,0BAA0B,CAAC,EAAE,OAAO,CAAC;MAChE,MAAMO,CAAC;IACX;EACJ,CAAC;AACL;AACA,eAAeF,qBAAqBA,CAACN,MAAM,EAAEU,SAAS,EAAEN,YAAY,EAAEC,IAAI,EAAE;EACxE,MAAMM,SAAS,GAAG,EAAE;EACpB,MAAMC,KAAK,GAAG,EAAE;EAChB,IAAIC,IAAI;EACR,IAAIC,OAAO,GAAG,IAAI;EAClB,OAAOA,OAAO,IAAIH,SAAS,CAACI,MAAM,GAAGnB,8BAA8B,EAAE;IACjE,MAAMoB,QAAQ,GAAG,MAAMhB,MAAM,CAACiB,cAAc,CAACP,SAAS,EAAEN,YAAY,GAAG;MAAEc,IAAI,EAAEd;IAAa,CAAC,GAAG,CAAC,CAAC,EAAEC,IAAI,EAAE;MAAEO,KAAK;MAAEC;IAAK,CAAC,CAAC;IAC1HF,SAAS,CAACQ,IAAI,CAAC,GAAGH,QAAQ,CAACL,SAAS,CAAC;IACrCE,IAAI,GAAGG,QAAQ,CAACH,IAAI;IACpBC,OAAO,GAAGM,OAAO,CAACP,IAAI,CAAC;EAC3B;EACA,OAAOF,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}