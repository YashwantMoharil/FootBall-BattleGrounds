{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { formatMessage } from 'stream-chat';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useMessageContext, useTranslationContext } from '../../context';\nexport const MessageIsThreadReplyInChannelButtonIndicator = () => {\n  const {\n    client\n  } = useChatContext();\n  const {\n    t\n  } = useTranslationContext();\n  const {\n    channel\n  } = useChannelStateContext();\n  const {\n    openThread\n  } = useChannelActionContext();\n  const {\n    message\n  } = useMessageContext();\n  const parentMessageRef = useRef(undefined);\n  const querySearchParent = () => channel.getClient().search({\n    cid: channel.cid\n  }, {\n    id: message.parent_id\n  }).then(({\n    results\n  }) => {\n    if (!results.length) {\n      throw new Error('Thread has not been found');\n    }\n    parentMessageRef.current = formatMessage(results[0].message);\n  }).catch(error => {\n    client.notifications.addError({\n      message: t('Thread has not been found'),\n      options: {\n        originalError: error,\n        type: 'api:message:search:not-found'\n      },\n      origin: {\n        context: {\n          threadReply: message\n        },\n        emitter: 'MessageIsThreadReplyInChannelButtonIndicator'\n      }\n    });\n  });\n  useEffect(() => {\n    if (parentMessageRef.current || parentMessageRef.current === null || !message.parent_id) return;\n    const localMessage = channel.state.findMessage(message.parent_id);\n    if (localMessage) {\n      parentMessageRef.current = localMessage;\n      return;\n    }\n  }, [channel, message]);\n  if (!message.parent_id) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__message-is-thread-reply-button-wrapper'\n  }, React.createElement(\"button\", {\n    className: 'str-chat__message-is-thread-reply-button',\n    \"data-testid\": 'message-is-thread-reply-button',\n    onClick: async () => {\n      if (!parentMessageRef.current) {\n        // search query is performed here in order to prevent multiple search queries in useEffect\n        // due to the message list 3x remounting its items\n        await querySearchParent();\n        if (parentMessageRef.current) {\n          openThread(parentMessageRef.current);\n        } else {\n          // prevent further search queries if the message is not found in the DB\n          parentMessageRef.current = null;\n        }\n        return;\n      }\n      openThread(parentMessageRef.current);\n    },\n    type: 'button'\n  }, t('Thread reply')));\n};","map":{"version":3,"names":["React","useEffect","useRef","formatMessage","useChannelActionContext","useChannelStateContext","useChatContext","useMessageContext","useTranslationContext","MessageIsThreadReplyInChannelButtonIndicator","client","t","channel","openThread","message","parentMessageRef","undefined","querySearchParent","getClient","search","cid","id","parent_id","then","results","length","Error","current","catch","error","notifications","addError","options","originalError","type","origin","context","threadReply","emitter","localMessage","state","findMessage","createElement","className","onClick"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/MessageIsThreadReplyInChannelButtonIndicator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { formatMessage } from 'stream-chat';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useMessageContext, useTranslationContext, } from '../../context';\nexport const MessageIsThreadReplyInChannelButtonIndicator = () => {\n    const { client } = useChatContext();\n    const { t } = useTranslationContext();\n    const { channel } = useChannelStateContext();\n    const { openThread } = useChannelActionContext();\n    const { message } = useMessageContext();\n    const parentMessageRef = useRef(undefined);\n    const querySearchParent = () => channel\n        .getClient()\n        .search({ cid: channel.cid }, { id: message.parent_id })\n        .then(({ results }) => {\n        if (!results.length) {\n            throw new Error('Thread has not been found');\n        }\n        parentMessageRef.current = formatMessage(results[0].message);\n    })\n        .catch((error) => {\n        client.notifications.addError({\n            message: t('Thread has not been found'),\n            options: {\n                originalError: error,\n                type: 'api:message:search:not-found',\n            },\n            origin: {\n                context: { threadReply: message },\n                emitter: 'MessageIsThreadReplyInChannelButtonIndicator',\n            },\n        });\n    });\n    useEffect(() => {\n        if (parentMessageRef.current ||\n            parentMessageRef.current === null ||\n            !message.parent_id)\n            return;\n        const localMessage = channel.state.findMessage(message.parent_id);\n        if (localMessage) {\n            parentMessageRef.current = localMessage;\n            return;\n        }\n    }, [channel, message]);\n    if (!message.parent_id)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__message-is-thread-reply-button-wrapper' },\n        React.createElement(\"button\", { className: 'str-chat__message-is-thread-reply-button', \"data-testid\": 'message-is-thread-reply-button', onClick: async () => {\n                if (!parentMessageRef.current) {\n                    // search query is performed here in order to prevent multiple search queries in useEffect\n                    // due to the message list 3x remounting its items\n                    await querySearchParent();\n                    if (parentMessageRef.current) {\n                        openThread(parentMessageRef.current);\n                    }\n                    else {\n                        // prevent further search queries if the message is not found in the DB\n                        parentMessageRef.current = null;\n                    }\n                    return;\n                }\n                openThread(parentMessageRef.current);\n            }, type: 'button' }, t('Thread reply'))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}