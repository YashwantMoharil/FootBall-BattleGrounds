{"ast":null,"code":"import * as fileIconSet from './FileIconSet';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes } from './mimeTypes';\nfunction generateMimeTypeToIconMap({\n  FileArchiveIcon,\n  FileCodeIcon,\n  FileExcelIcon,\n  FilePdfIcon,\n  FilePowerPointIcon,\n  FileWordIcon\n}) {\n  const mimeTypeToIconMap = {\n    'application/pdf': FilePdfIcon\n  };\n  for (const type of wordMimeTypes) {\n    mimeTypeToIconMap[type] = FileWordIcon;\n  }\n  for (const type of excelMimeTypes) {\n    mimeTypeToIconMap[type] = FileExcelIcon;\n  }\n  for (const type of powerpointMimeTypes) {\n    mimeTypeToIconMap[type] = FilePowerPointIcon;\n  }\n  for (const type of archiveFileTypes) {\n    mimeTypeToIconMap[type] = FileArchiveIcon;\n  }\n  for (const type of codeFileTypes) {\n    mimeTypeToIconMap[type] = FileCodeIcon;\n  }\n  return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap({\n  FileAltIcon,\n  FileAudioIcon,\n  FileImageIcon,\n  FileVideoIcon\n}) {\n  return {\n    'audio/': FileAudioIcon,\n    'image/': FileImageIcon,\n    'text/': FileAltIcon,\n    'video/': FileVideoIcon\n  };\n}\nexport const iconMap = {\n  alt: {\n    ...generateMimeTypeToIconMap({\n      FileArchiveIcon: fileIconSet.FileArchiveIconAlt,\n      FileCodeIcon: fileIconSet.FileCodeIconAlt,\n      FileExcelIcon: fileIconSet.FileExcelIconAlt,\n      FilePdfIcon: fileIconSet.FilePdfIcon,\n      FilePowerPointIcon: fileIconSet.FilePowerPointIconAlt,\n      FileWordIcon: fileIconSet.FileWordIconAlt\n    }),\n    ...generateGeneralTypeToIconMap({\n      FileAltIcon: fileIconSet.FileFallbackIcon,\n      FileAudioIcon: fileIconSet.FileAudioIconAlt,\n      FileImageIcon: fileIconSet.FileImageIcon,\n      FileVideoIcon: fileIconSet.FileVideoIconAlt\n    }),\n    fallback: fileIconSet.FileFallbackIcon\n  },\n  standard: {\n    ...generateMimeTypeToIconMap({\n      FileArchiveIcon: fileIconSet.FileArchiveIcon,\n      FileCodeIcon: fileIconSet.FileCodeIcon,\n      FileExcelIcon: fileIconSet.FileExcelIcon,\n      FilePdfIcon: fileIconSet.FilePdfIcon,\n      FilePowerPointIcon: fileIconSet.FilePowerPointIcon,\n      FileWordIcon: fileIconSet.FileWordIcon\n    }),\n    ...generateGeneralTypeToIconMap({\n      FileAltIcon: fileIconSet.FileFallbackIcon,\n      FileAudioIcon: fileIconSet.FileAudioIcon,\n      FileImageIcon: fileIconSet.FileImageIcon,\n      FileVideoIcon: fileIconSet.FileVideoIcon\n    }),\n    fallback: fileIconSet.FileFallbackIcon\n  }\n};","map":{"version":3,"names":["fileIconSet","archiveFileTypes","codeFileTypes","excelMimeTypes","powerpointMimeTypes","wordMimeTypes","generateMimeTypeToIconMap","FileArchiveIcon","FileCodeIcon","FileExcelIcon","FilePdfIcon","FilePowerPointIcon","FileWordIcon","mimeTypeToIconMap","type","generateGeneralTypeToIconMap","FileAltIcon","FileAudioIcon","FileImageIcon","FileVideoIcon","iconMap","alt","FileArchiveIconAlt","FileCodeIconAlt","FileExcelIconAlt","FilePowerPointIconAlt","FileWordIconAlt","FileFallbackIcon","FileAudioIconAlt","FileVideoIconAlt","fallback","standard"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js"],"sourcesContent":["import * as fileIconSet from './FileIconSet';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes, } from './mimeTypes';\nfunction generateMimeTypeToIconMap({ FileArchiveIcon, FileCodeIcon, FileExcelIcon, FilePdfIcon, FilePowerPointIcon, FileWordIcon, }) {\n    const mimeTypeToIconMap = {\n        'application/pdf': FilePdfIcon,\n    };\n    for (const type of wordMimeTypes) {\n        mimeTypeToIconMap[type] = FileWordIcon;\n    }\n    for (const type of excelMimeTypes) {\n        mimeTypeToIconMap[type] = FileExcelIcon;\n    }\n    for (const type of powerpointMimeTypes) {\n        mimeTypeToIconMap[type] = FilePowerPointIcon;\n    }\n    for (const type of archiveFileTypes) {\n        mimeTypeToIconMap[type] = FileArchiveIcon;\n    }\n    for (const type of codeFileTypes) {\n        mimeTypeToIconMap[type] = FileCodeIcon;\n    }\n    return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap({ FileAltIcon, FileAudioIcon, FileImageIcon, FileVideoIcon, }) {\n    return {\n        'audio/': FileAudioIcon,\n        'image/': FileImageIcon,\n        'text/': FileAltIcon,\n        'video/': FileVideoIcon,\n    };\n}\nexport const iconMap = {\n    alt: {\n        ...generateMimeTypeToIconMap({\n            FileArchiveIcon: fileIconSet.FileArchiveIconAlt,\n            FileCodeIcon: fileIconSet.FileCodeIconAlt,\n            FileExcelIcon: fileIconSet.FileExcelIconAlt,\n            FilePdfIcon: fileIconSet.FilePdfIcon,\n            FilePowerPointIcon: fileIconSet.FilePowerPointIconAlt,\n            FileWordIcon: fileIconSet.FileWordIconAlt,\n        }),\n        ...generateGeneralTypeToIconMap({\n            FileAltIcon: fileIconSet.FileFallbackIcon,\n            FileAudioIcon: fileIconSet.FileAudioIconAlt,\n            FileImageIcon: fileIconSet.FileImageIcon,\n            FileVideoIcon: fileIconSet.FileVideoIconAlt,\n        }),\n        fallback: fileIconSet.FileFallbackIcon,\n    },\n    standard: {\n        ...generateMimeTypeToIconMap({\n            FileArchiveIcon: fileIconSet.FileArchiveIcon,\n            FileCodeIcon: fileIconSet.FileCodeIcon,\n            FileExcelIcon: fileIconSet.FileExcelIcon,\n            FilePdfIcon: fileIconSet.FilePdfIcon,\n            FilePowerPointIcon: fileIconSet.FilePowerPointIcon,\n            FileWordIcon: fileIconSet.FileWordIcon,\n        }),\n        ...generateGeneralTypeToIconMap({\n            FileAltIcon: fileIconSet.FileFallbackIcon,\n            FileAudioIcon: fileIconSet.FileAudioIcon,\n            FileImageIcon: fileIconSet.FileImageIcon,\n            FileVideoIcon: fileIconSet.FileVideoIcon,\n        }),\n        fallback: fileIconSet.FileFallbackIcon,\n    },\n};\n"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,eAAe;AAC5C,SAASC,gBAAgB,EAAEC,aAAa,EAAEC,cAAc,EAAEC,mBAAmB,EAAEC,aAAa,QAAS,aAAa;AAClH,SAASC,yBAAyBA,CAAC;EAAEC,eAAe;EAAEC,YAAY;EAAEC,aAAa;EAAEC,WAAW;EAAEC,kBAAkB;EAAEC;AAAc,CAAC,EAAE;EACjI,MAAMC,iBAAiB,GAAG;IACtB,iBAAiB,EAAEH;EACvB,CAAC;EACD,KAAK,MAAMI,IAAI,IAAIT,aAAa,EAAE;IAC9BQ,iBAAiB,CAACC,IAAI,CAAC,GAAGF,YAAY;EAC1C;EACA,KAAK,MAAME,IAAI,IAAIX,cAAc,EAAE;IAC/BU,iBAAiB,CAACC,IAAI,CAAC,GAAGL,aAAa;EAC3C;EACA,KAAK,MAAMK,IAAI,IAAIV,mBAAmB,EAAE;IACpCS,iBAAiB,CAACC,IAAI,CAAC,GAAGH,kBAAkB;EAChD;EACA,KAAK,MAAMG,IAAI,IAAIb,gBAAgB,EAAE;IACjCY,iBAAiB,CAACC,IAAI,CAAC,GAAGP,eAAe;EAC7C;EACA,KAAK,MAAMO,IAAI,IAAIZ,aAAa,EAAE;IAC9BW,iBAAiB,CAACC,IAAI,CAAC,GAAGN,YAAY;EAC1C;EACA,OAAOK,iBAAiB;AAC5B;AACA,SAASE,4BAA4BA,CAAC;EAAEC,WAAW;EAAEC,aAAa;EAAEC,aAAa;EAAEC;AAAe,CAAC,EAAE;EACjG,OAAO;IACH,QAAQ,EAAEF,aAAa;IACvB,QAAQ,EAAEC,aAAa;IACvB,OAAO,EAAEF,WAAW;IACpB,QAAQ,EAAEG;EACd,CAAC;AACL;AACA,OAAO,MAAMC,OAAO,GAAG;EACnBC,GAAG,EAAE;IACD,GAAGf,yBAAyB,CAAC;MACzBC,eAAe,EAAEP,WAAW,CAACsB,kBAAkB;MAC/Cd,YAAY,EAAER,WAAW,CAACuB,eAAe;MACzCd,aAAa,EAAET,WAAW,CAACwB,gBAAgB;MAC3Cd,WAAW,EAAEV,WAAW,CAACU,WAAW;MACpCC,kBAAkB,EAAEX,WAAW,CAACyB,qBAAqB;MACrDb,YAAY,EAAEZ,WAAW,CAAC0B;IAC9B,CAAC,CAAC;IACF,GAAGX,4BAA4B,CAAC;MAC5BC,WAAW,EAAEhB,WAAW,CAAC2B,gBAAgB;MACzCV,aAAa,EAAEjB,WAAW,CAAC4B,gBAAgB;MAC3CV,aAAa,EAAElB,WAAW,CAACkB,aAAa;MACxCC,aAAa,EAAEnB,WAAW,CAAC6B;IAC/B,CAAC,CAAC;IACFC,QAAQ,EAAE9B,WAAW,CAAC2B;EAC1B,CAAC;EACDI,QAAQ,EAAE;IACN,GAAGzB,yBAAyB,CAAC;MACzBC,eAAe,EAAEP,WAAW,CAACO,eAAe;MAC5CC,YAAY,EAAER,WAAW,CAACQ,YAAY;MACtCC,aAAa,EAAET,WAAW,CAACS,aAAa;MACxCC,WAAW,EAAEV,WAAW,CAACU,WAAW;MACpCC,kBAAkB,EAAEX,WAAW,CAACW,kBAAkB;MAClDC,YAAY,EAAEZ,WAAW,CAACY;IAC9B,CAAC,CAAC;IACF,GAAGG,4BAA4B,CAAC;MAC5BC,WAAW,EAAEhB,WAAW,CAAC2B,gBAAgB;MACzCV,aAAa,EAAEjB,WAAW,CAACiB,aAAa;MACxCC,aAAa,EAAElB,WAAW,CAACkB,aAAa;MACxCC,aAAa,EAAEnB,WAAW,CAACmB;IAC/B,CAAC,CAAC;IACFW,QAAQ,EAAE9B,WAAW,CAAC2B;EAC1B;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}