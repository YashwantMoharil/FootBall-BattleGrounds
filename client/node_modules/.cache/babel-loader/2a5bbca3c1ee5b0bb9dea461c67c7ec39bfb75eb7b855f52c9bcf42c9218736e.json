{"ast":null,"code":"import { nanoid } from 'nanoid';\nimport { StateStore } from 'stream-chat';\n/**\n * Keeps a map of Dialog objects.\n * Dialog can be controlled via `Dialog` object retrieved using `useDialog()` hook.\n * The hook returns an object with the following API:\n *\n * - `dialog.open()` - opens the dialog\n * - `dialog.close()` - closes the dialog\n * - `dialog.toggle()` - toggles the dialog open state. Accepts boolean argument closeAll. If enabled closes any other dialog that would be open.\n * - `dialog.remove()` - removes the dialog object reference from the state (primarily for cleanup purposes)\n */\nexport class DialogManager {\n  constructor({\n    id\n  } = {}) {\n    this.state = new StateStore({\n      dialogsById: {}\n    });\n    this.id = id ?? nanoid();\n  }\n  get openDialogCount() {\n    return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {\n      if (dialog.isOpen) return count + 1;\n      return count;\n    }, 0);\n  }\n  getOrCreate({\n    id\n  }) {\n    let dialog = this.state.getLatestValue().dialogsById[id];\n    if (!dialog) {\n      dialog = {\n        close: () => {\n          this.close(id);\n        },\n        id,\n        isOpen: false,\n        open: () => {\n          this.open({\n            id\n          });\n        },\n        removalTimeout: undefined,\n        remove: () => {\n          this.remove(id);\n        },\n        toggle: (closeAll = false) => {\n          this.toggle({\n            id\n          }, closeAll);\n        }\n      };\n      this.state.next(current => ({\n        ...current,\n        ...{\n          dialogsById: {\n            ...current.dialogsById,\n            [id]: dialog\n          }\n        }\n      }));\n    }\n    if (dialog.removalTimeout) {\n      clearTimeout(dialog.removalTimeout);\n      this.state.next(current => ({\n        ...current,\n        ...{\n          dialogsById: {\n            ...current.dialogsById,\n            [id]: {\n              ...dialog,\n              removalTimeout: undefined\n            }\n          }\n        }\n      }));\n    }\n    return dialog;\n  }\n  open(params, closeRest) {\n    const dialog = this.getOrCreate(params);\n    if (dialog.isOpen) return;\n    if (closeRest) {\n      this.closeAll();\n    }\n    this.state.next(current => ({\n      ...current,\n      dialogsById: {\n        ...current.dialogsById,\n        [dialog.id]: {\n          ...dialog,\n          isOpen: true\n        }\n      }\n    }));\n  }\n  close(id) {\n    const dialog = this.state.getLatestValue().dialogsById[id];\n    if (!dialog?.isOpen) return;\n    this.state.next(current => ({\n      ...current,\n      dialogsById: {\n        ...current.dialogsById,\n        [dialog.id]: {\n          ...dialog,\n          isOpen: false\n        }\n      }\n    }));\n  }\n  closeAll() {\n    Object.values(this.state.getLatestValue().dialogsById).forEach(dialog => dialog.close());\n  }\n  toggle(params, closeAll = false) {\n    if (this.state.getLatestValue().dialogsById[params.id]?.isOpen) {\n      this.close(params.id);\n    } else {\n      this.open(params, closeAll);\n    }\n  }\n  remove(id) {\n    const state = this.state.getLatestValue();\n    const dialog = state.dialogsById[id];\n    if (!dialog) return;\n    if (dialog.removalTimeout) {\n      clearTimeout(dialog.removalTimeout);\n    }\n    this.state.next(current => {\n      const newDialogs = {\n        ...current.dialogsById\n      };\n      delete newDialogs[id];\n      return {\n        ...current,\n        dialogsById: newDialogs\n      };\n    });\n  }\n  /**\n   * Marks the dialog state as unused. If the dialog id is referenced again quickly,\n   * the state will not be removed. Otherwise, the state will be removed after\n   * a short timeout.\n   */\n  markForRemoval(id) {\n    const dialog = this.state.getLatestValue().dialogsById[id];\n    if (!dialog) {\n      return;\n    }\n    this.state.next(current => ({\n      ...current,\n      dialogsById: {\n        ...current.dialogsById,\n        [id]: {\n          ...dialog,\n          removalTimeout: setTimeout(() => {\n            this.remove(id);\n          }, 16)\n        }\n      }\n    }));\n  }\n}","map":{"version":3,"names":["nanoid","StateStore","DialogManager","constructor","id","state","dialogsById","openDialogCount","Object","values","getLatestValue","reduce","count","dialog","isOpen","getOrCreate","close","open","removalTimeout","undefined","remove","toggle","closeAll","next","current","clearTimeout","params","closeRest","forEach","newDialogs","markForRemoval","setTimeout"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Dialog/DialogManager.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nimport { StateStore } from 'stream-chat';\n/**\n * Keeps a map of Dialog objects.\n * Dialog can be controlled via `Dialog` object retrieved using `useDialog()` hook.\n * The hook returns an object with the following API:\n *\n * - `dialog.open()` - opens the dialog\n * - `dialog.close()` - closes the dialog\n * - `dialog.toggle()` - toggles the dialog open state. Accepts boolean argument closeAll. If enabled closes any other dialog that would be open.\n * - `dialog.remove()` - removes the dialog object reference from the state (primarily for cleanup purposes)\n */\nexport class DialogManager {\n    constructor({ id } = {}) {\n        this.state = new StateStore({\n            dialogsById: {},\n        });\n        this.id = id ?? nanoid();\n    }\n    get openDialogCount() {\n        return Object.values(this.state.getLatestValue().dialogsById).reduce((count, dialog) => {\n            if (dialog.isOpen)\n                return count + 1;\n            return count;\n        }, 0);\n    }\n    getOrCreate({ id }) {\n        let dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog) {\n            dialog = {\n                close: () => {\n                    this.close(id);\n                },\n                id,\n                isOpen: false,\n                open: () => {\n                    this.open({ id });\n                },\n                removalTimeout: undefined,\n                remove: () => {\n                    this.remove(id);\n                },\n                toggle: (closeAll = false) => {\n                    this.toggle({ id }, closeAll);\n                },\n            };\n            this.state.next((current) => ({\n                ...current,\n                ...{ dialogsById: { ...current.dialogsById, [id]: dialog } },\n            }));\n        }\n        if (dialog.removalTimeout) {\n            clearTimeout(dialog.removalTimeout);\n            this.state.next((current) => ({\n                ...current,\n                ...{\n                    dialogsById: {\n                        ...current.dialogsById,\n                        [id]: {\n                            ...dialog,\n                            removalTimeout: undefined,\n                        },\n                    },\n                },\n            }));\n        }\n        return dialog;\n    }\n    open(params, closeRest) {\n        const dialog = this.getOrCreate(params);\n        if (dialog.isOpen)\n            return;\n        if (closeRest) {\n            this.closeAll();\n        }\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: true } },\n        }));\n    }\n    close(id) {\n        const dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog?.isOpen)\n            return;\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: { ...current.dialogsById, [dialog.id]: { ...dialog, isOpen: false } },\n        }));\n    }\n    closeAll() {\n        Object.values(this.state.getLatestValue().dialogsById).forEach((dialog) => dialog.close());\n    }\n    toggle(params, closeAll = false) {\n        if (this.state.getLatestValue().dialogsById[params.id]?.isOpen) {\n            this.close(params.id);\n        }\n        else {\n            this.open(params, closeAll);\n        }\n    }\n    remove(id) {\n        const state = this.state.getLatestValue();\n        const dialog = state.dialogsById[id];\n        if (!dialog)\n            return;\n        if (dialog.removalTimeout) {\n            clearTimeout(dialog.removalTimeout);\n        }\n        this.state.next((current) => {\n            const newDialogs = { ...current.dialogsById };\n            delete newDialogs[id];\n            return {\n                ...current,\n                dialogsById: newDialogs,\n            };\n        });\n    }\n    /**\n     * Marks the dialog state as unused. If the dialog id is referenced again quickly,\n     * the state will not be removed. Otherwise, the state will be removed after\n     * a short timeout.\n     */\n    markForRemoval(id) {\n        const dialog = this.state.getLatestValue().dialogsById[id];\n        if (!dialog) {\n            return;\n        }\n        this.state.next((current) => ({\n            ...current,\n            dialogsById: {\n                ...current.dialogsById,\n                [id]: {\n                    ...dialog,\n                    removalTimeout: setTimeout(() => {\n                        this.remove(id);\n                    }, 16),\n                },\n            },\n        }));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}