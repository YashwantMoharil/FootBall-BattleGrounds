{"ast":null,"code":"import { useEffect } from 'react';\nimport { useChannelActionContext, useChannelStateContext, useChatContext } from '../../../context';\nconst hasReadLastMessage = (channel, userId) => {\n  const latestMessageIdInChannel = channel.state.latestMessages.slice(-1)[0]?.id;\n  const lastReadMessageIdServer = channel.state.read[userId]?.last_read_message_id;\n  return latestMessageIdInChannel === lastReadMessageIdServer;\n};\n/**\n * Takes care of marking a channel read. The channel is read only if all the following applies:\n * 1. the message list is not rendered in a thread\n * 2. the message list is scrolled to the bottom\n * 3. the channel was not marked unread by the user\n * @param isMessageListScrolledToBottom\n * @param messageListIsThread\n * @param wasChannelMarkedUnread\n */\nexport const useMarkRead = ({\n  isMessageListScrolledToBottom,\n  messageListIsThread,\n  wasMarkedUnread\n}) => {\n  const {\n    client\n  } = useChatContext('useMarkRead');\n  const {\n    markRead,\n    setChannelUnreadUiState\n  } = useChannelActionContext('useMarkRead');\n  const {\n    channel\n  } = useChannelStateContext('useMarkRead');\n  useEffect(() => {\n    const shouldMarkRead = () => !document.hidden && !wasMarkedUnread && !messageListIsThread && isMessageListScrolledToBottom && client.user?.id && !hasReadLastMessage(channel, client.user.id);\n    const onVisibilityChange = () => {\n      if (shouldMarkRead()) markRead();\n    };\n    const handleMessageNew = event => {\n      const mainChannelUpdated = !event.message?.parent_id || event.message?.show_in_channel;\n      if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {\n        setChannelUnreadUiState(prev => {\n          const previousUnreadCount = prev?.unread_messages ?? 0;\n          const previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);\n          return {\n            ...(prev || {}),\n            last_read: prev?.last_read ?? (previousUnreadCount === 0 && previousLastMessage?.created_at ? new Date(previousLastMessage.created_at) : new Date(0)),\n            // not having information about the last read message means the whole channel is unread,\n            unread_messages: previousUnreadCount + 1\n          };\n        });\n      } else if (mainChannelUpdated && shouldMarkRead()) {\n        markRead();\n      }\n    };\n    channel.on('message.new', handleMessageNew);\n    document.addEventListener('visibilitychange', onVisibilityChange);\n    if (shouldMarkRead()) {\n      markRead();\n    }\n    return () => {\n      channel.off('message.new', handleMessageNew);\n      document.removeEventListener('visibilitychange', onVisibilityChange);\n    };\n  }, [channel, client, isMessageListScrolledToBottom, markRead, messageListIsThread, setChannelUnreadUiState, wasMarkedUnread]);\n};\nfunction getPreviousLastMessage(messages, newMessage) {\n  if (!newMessage) return;\n  let previousLastMessage;\n  for (let i = messages.length - 1; i >= 0; i--) {\n    const msg = messages[i];\n    if (!msg?.id) break;\n    if (msg.id !== newMessage.id) {\n      previousLastMessage = msg;\n      break;\n    }\n  }\n  return previousLastMessage;\n}","map":{"version":3,"names":["useEffect","useChannelActionContext","useChannelStateContext","useChatContext","hasReadLastMessage","channel","userId","latestMessageIdInChannel","state","latestMessages","slice","id","lastReadMessageIdServer","read","last_read_message_id","useMarkRead","isMessageListScrolledToBottom","messageListIsThread","wasMarkedUnread","client","markRead","setChannelUnreadUiState","shouldMarkRead","document","hidden","user","onVisibilityChange","handleMessageNew","event","mainChannelUpdated","message","parent_id","show_in_channel","prev","previousUnreadCount","unread_messages","previousLastMessage","getPreviousLastMessage","messages","last_read","created_at","Date","on","addEventListener","off","removeEventListener","newMessage","i","length","msg"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/useMarkRead.js"],"sourcesContent":["import { useEffect } from 'react';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, } from '../../../context';\nconst hasReadLastMessage = (channel, userId) => {\n    const latestMessageIdInChannel = channel.state.latestMessages.slice(-1)[0]?.id;\n    const lastReadMessageIdServer = channel.state.read[userId]?.last_read_message_id;\n    return latestMessageIdInChannel === lastReadMessageIdServer;\n};\n/**\n * Takes care of marking a channel read. The channel is read only if all the following applies:\n * 1. the message list is not rendered in a thread\n * 2. the message list is scrolled to the bottom\n * 3. the channel was not marked unread by the user\n * @param isMessageListScrolledToBottom\n * @param messageListIsThread\n * @param wasChannelMarkedUnread\n */\nexport const useMarkRead = ({ isMessageListScrolledToBottom, messageListIsThread, wasMarkedUnread, }) => {\n    const { client } = useChatContext('useMarkRead');\n    const { markRead, setChannelUnreadUiState } = useChannelActionContext('useMarkRead');\n    const { channel } = useChannelStateContext('useMarkRead');\n    useEffect(() => {\n        const shouldMarkRead = () => !document.hidden &&\n            !wasMarkedUnread &&\n            !messageListIsThread &&\n            isMessageListScrolledToBottom &&\n            client.user?.id &&\n            !hasReadLastMessage(channel, client.user.id);\n        const onVisibilityChange = () => {\n            if (shouldMarkRead())\n                markRead();\n        };\n        const handleMessageNew = (event) => {\n            const mainChannelUpdated = !event.message?.parent_id || event.message?.show_in_channel;\n            if (!isMessageListScrolledToBottom || wasMarkedUnread || document.hidden) {\n                setChannelUnreadUiState((prev) => {\n                    const previousUnreadCount = prev?.unread_messages ?? 0;\n                    const previousLastMessage = getPreviousLastMessage(channel.state.messages, event.message);\n                    return {\n                        ...(prev || {}),\n                        last_read: prev?.last_read ??\n                            (previousUnreadCount === 0 && previousLastMessage?.created_at\n                                ? new Date(previousLastMessage.created_at)\n                                : new Date(0)), // not having information about the last read message means the whole channel is unread,\n                        unread_messages: previousUnreadCount + 1,\n                    };\n                });\n            }\n            else if (mainChannelUpdated && shouldMarkRead()) {\n                markRead();\n            }\n        };\n        channel.on('message.new', handleMessageNew);\n        document.addEventListener('visibilitychange', onVisibilityChange);\n        if (shouldMarkRead()) {\n            markRead();\n        }\n        return () => {\n            channel.off('message.new', handleMessageNew);\n            document.removeEventListener('visibilitychange', onVisibilityChange);\n        };\n    }, [\n        channel,\n        client,\n        isMessageListScrolledToBottom,\n        markRead,\n        messageListIsThread,\n        setChannelUnreadUiState,\n        wasMarkedUnread,\n    ]);\n};\nfunction getPreviousLastMessage(messages, newMessage) {\n    if (!newMessage)\n        return;\n    let previousLastMessage;\n    for (let i = messages.length - 1; i >= 0; i--) {\n        const msg = messages[i];\n        if (!msg?.id)\n            break;\n        if (msg.id !== newMessage.id) {\n            previousLastMessage = msg;\n            break;\n        }\n    }\n    return previousLastMessage;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}