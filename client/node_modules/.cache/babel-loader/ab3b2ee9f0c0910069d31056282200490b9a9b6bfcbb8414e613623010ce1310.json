{"ast":null,"code":"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageDeliveredIcon } from './icons';\nimport { getReadByTooltipText, mapToUserNameOrId } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { PopperTooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nconst UnMemoizedMessageStatus = props => {\n  const {\n    Avatar: propAvatar,\n    MessageDeliveredStatus,\n    MessageReadStatus,\n    MessageSendingStatus,\n    messageType = 'simple',\n    tooltipUserNameMapper = mapToUserNameOrId\n  } = props;\n  const {\n    handleEnter,\n    handleLeave,\n    tooltipVisible\n  } = useEnterLeaveHandlers();\n  const {\n    client\n  } = useChatContext('MessageStatus');\n  const {\n    Avatar: contextAvatar\n  } = useComponentContext('MessageStatus');\n  const {\n    isMyMessage,\n    lastReceivedId,\n    message,\n    readBy,\n    threadList\n  } = useMessageContext('MessageStatus');\n  const {\n    t\n  } = useTranslationContext('MessageStatus');\n  const [referenceElement, setReferenceElement] = useState(null);\n  const Avatar = propAvatar || contextAvatar || DefaultAvatar;\n  if (!isMyMessage() || message.type === 'error') return null;\n  const justReadByMe = readBy?.length === 1 && readBy[0].id === client.user?.id;\n  const rootClassName = `str-chat__message-${messageType}-status str-chat__message-status`;\n  const sending = message.status === 'sending';\n  const delivered = message.status === 'received' && message.id === lastReceivedId && !threadList;\n  const deliveredAndRead = !!(readBy?.length && !threadList && !justReadByMe);\n  const readersWithoutOwnUser = deliveredAndRead ? readBy.filter(item => item.id !== client.user?.id) : [];\n  const [lastReadUser] = readersWithoutOwnUser;\n  return React.createElement(\"span\", {\n    className: rootClassName,\n    \"data-testid\": clsx({\n      'message-status-read-by': deliveredAndRead,\n      'message-status-received': delivered && !deliveredAndRead,\n      'message-status-sending': sending\n    }),\n    onMouseEnter: handleEnter,\n    onMouseLeave: handleLeave,\n    ref: setReferenceElement\n  }, sending && (MessageSendingStatus ? React.createElement(MessageSendingStatus, null) : React.createElement(React.Fragment, null, React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, t('Sending...')), React.createElement(LoadingIndicator, null))), delivered && !deliveredAndRead && (MessageDeliveredStatus ? React.createElement(MessageDeliveredStatus, null) : React.createElement(React.Fragment, null, React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, t('Delivered')), React.createElement(MessageDeliveredIcon, null))), deliveredAndRead && (MessageReadStatus ? React.createElement(MessageReadStatus, null) : React.createElement(React.Fragment, null, React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper)), React.createElement(Avatar, {\n    className: 'str-chat__avatar--message-status',\n    image: lastReadUser.image,\n    name: lastReadUser.name || lastReadUser.id,\n    user: lastReadUser\n  }), readersWithoutOwnUser.length > 1 && React.createElement(\"span\", {\n    className: `str-chat__message-${messageType}-status-number`,\n    \"data-testid\": 'message-status-read-by-many'\n  }, readersWithoutOwnUser.length))));\n};\nexport const MessageStatus = React.memo(UnMemoizedMessageStatus);","map":{"version":3,"names":["React","useState","clsx","MessageDeliveredIcon","getReadByTooltipText","mapToUserNameOrId","Avatar","DefaultAvatar","LoadingIndicator","PopperTooltip","useEnterLeaveHandlers","useChatContext","useComponentContext","useMessageContext","useTranslationContext","UnMemoizedMessageStatus","props","propAvatar","MessageDeliveredStatus","MessageReadStatus","MessageSendingStatus","messageType","tooltipUserNameMapper","handleEnter","handleLeave","tooltipVisible","client","contextAvatar","isMyMessage","lastReceivedId","message","readBy","threadList","t","referenceElement","setReferenceElement","type","justReadByMe","length","id","user","rootClassName","sending","status","delivered","deliveredAndRead","readersWithoutOwnUser","filter","item","lastReadUser","createElement","className","onMouseEnter","onMouseLeave","ref","Fragment","offset","visible","image","name","MessageStatus","memo"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/MessageStatus.js"],"sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageDeliveredIcon } from './icons';\nimport { getReadByTooltipText, mapToUserNameOrId } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { LoadingIndicator } from '../Loading';\nimport { PopperTooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nconst UnMemoizedMessageStatus = (props) => {\n    const { Avatar: propAvatar, MessageDeliveredStatus, MessageReadStatus, MessageSendingStatus, messageType = 'simple', tooltipUserNameMapper = mapToUserNameOrId, } = props;\n    const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const { client } = useChatContext('MessageStatus');\n    const { Avatar: contextAvatar } = useComponentContext('MessageStatus');\n    const { isMyMessage, lastReceivedId, message, readBy, threadList } = useMessageContext('MessageStatus');\n    const { t } = useTranslationContext('MessageStatus');\n    const [referenceElement, setReferenceElement] = useState(null);\n    const Avatar = propAvatar || contextAvatar || DefaultAvatar;\n    if (!isMyMessage() || message.type === 'error')\n        return null;\n    const justReadByMe = readBy?.length === 1 && readBy[0].id === client.user?.id;\n    const rootClassName = `str-chat__message-${messageType}-status str-chat__message-status`;\n    const sending = message.status === 'sending';\n    const delivered = message.status === 'received' && message.id === lastReceivedId && !threadList;\n    const deliveredAndRead = !!(readBy?.length && !threadList && !justReadByMe);\n    const readersWithoutOwnUser = deliveredAndRead\n        ? readBy.filter((item) => item.id !== client.user?.id)\n        : [];\n    const [lastReadUser] = readersWithoutOwnUser;\n    return (React.createElement(\"span\", { className: rootClassName, \"data-testid\": clsx({\n            'message-status-read-by': deliveredAndRead,\n            'message-status-received': delivered && !deliveredAndRead,\n            'message-status-sending': sending,\n        }), onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },\n        sending &&\n            (MessageSendingStatus ? (React.createElement(MessageSendingStatus, null)) : (React.createElement(React.Fragment, null,\n                React.createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, t('Sending...')),\n                React.createElement(LoadingIndicator, null)))),\n        delivered &&\n            !deliveredAndRead &&\n            (MessageDeliveredStatus ? (React.createElement(MessageDeliveredStatus, null)) : (React.createElement(React.Fragment, null,\n                React.createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, t('Delivered')),\n                React.createElement(MessageDeliveredIcon, null)))),\n        deliveredAndRead &&\n            (MessageReadStatus ? (React.createElement(MessageReadStatus, null)) : (React.createElement(React.Fragment, null,\n                React.createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, getReadByTooltipText(readBy, t, client, tooltipUserNameMapper)),\n                React.createElement(Avatar, { className: 'str-chat__avatar--message-status', image: lastReadUser.image, name: lastReadUser.name || lastReadUser.id, user: lastReadUser }),\n                readersWithoutOwnUser.length > 1 && (React.createElement(\"span\", { className: `str-chat__message-${messageType}-status-number`, \"data-testid\": 'message-status-read-by-many' }, readersWithoutOwnUser.length)))))));\n};\nexport const MessageStatus = React.memo(UnMemoizedMessageStatus);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}