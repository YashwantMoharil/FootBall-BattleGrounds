{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useComponentContext, useMessageContext } from '../../../context';\nimport { defaultReactionOptions } from '../reactionOptions';\nexport const defaultReactionsSort = (a, b) => {\n  if (a.firstReactionAt && b.firstReactionAt) {\n    return +a.firstReactionAt - +b.firstReactionAt;\n  }\n  return a.reactionType.localeCompare(b.reactionType, 'en');\n};\nexport const useProcessReactions = params => {\n  const {\n    own_reactions: propOwnReactions,\n    reaction_groups: propReactionGroups,\n    reactionOptions: propReactionOptions,\n    reactions: propReactions,\n    sortReactions: propSortReactions\n  } = params;\n  const {\n    message,\n    sortReactions: contextSortReactions\n  } = useMessageContext('useProcessReactions');\n  const {\n    reactionOptions: contextReactionOptions = defaultReactionOptions\n  } = useComponentContext('useProcessReactions');\n  const reactionOptions = propReactionOptions ?? contextReactionOptions;\n  const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;\n  const latestReactions = propReactions || message.latest_reactions;\n  const ownReactions = propOwnReactions || message?.own_reactions;\n  const reactionGroups = propReactionGroups || message?.reaction_groups;\n  const isOwnReaction = useCallback(reactionType => ownReactions?.some(reaction => reaction.type === reactionType) ?? false, [ownReactions]);\n  const getEmojiByReactionType = useCallback(reactionType => reactionOptions.find(({\n    type\n  }) => type === reactionType)?.Component ?? null, [reactionOptions]);\n  const isSupportedReaction = useCallback(reactionType => reactionOptions.some(reactionOption => reactionOption.type === reactionType), [reactionOptions]);\n  const getLatestReactedUserNames = useCallback(reactionType => latestReactions?.flatMap(reaction => {\n    if (reactionType && reactionType === reaction.type) {\n      const username = reaction.user?.name || reaction.user?.id;\n      return username ? [username] : [];\n    }\n    return [];\n  }) ?? [], [latestReactions]);\n  const existingReactions = useMemo(() => {\n    if (!reactionGroups) {\n      return [];\n    }\n    const unsortedReactions = Object.entries(reactionGroups).flatMap(([reactionType, {\n      count,\n      first_reaction_at,\n      last_reaction_at\n    }]) => {\n      if (count === 0 || !isSupportedReaction(reactionType)) {\n        return [];\n      }\n      const latestReactedUserNames = getLatestReactedUserNames(reactionType);\n      return [{\n        EmojiComponent: getEmojiByReactionType(reactionType),\n        firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,\n        isOwnReaction: isOwnReaction(reactionType),\n        lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,\n        latestReactedUserNames,\n        reactionCount: count,\n        reactionType,\n        unlistedReactedUserCount: count - latestReactedUserNames.length\n      }];\n    });\n    return unsortedReactions.sort(sortReactions);\n  }, [getEmojiByReactionType, getLatestReactedUserNames, isOwnReaction, isSupportedReaction, reactionGroups, sortReactions]);\n  const hasReactions = existingReactions.length > 0;\n  const totalReactionCount = useMemo(() => existingReactions.reduce((total, {\n    reactionCount\n  }) => total + reactionCount, 0), [existingReactions]);\n  return {\n    existingReactions,\n    hasReactions,\n    totalReactionCount\n  };\n};","map":{"version":3,"names":["useCallback","useMemo","useComponentContext","useMessageContext","defaultReactionOptions","defaultReactionsSort","a","b","firstReactionAt","reactionType","localeCompare","useProcessReactions","params","own_reactions","propOwnReactions","reaction_groups","propReactionGroups","reactionOptions","propReactionOptions","reactions","propReactions","sortReactions","propSortReactions","message","contextSortReactions","contextReactionOptions","latestReactions","latest_reactions","ownReactions","reactionGroups","isOwnReaction","some","reaction","type","getEmojiByReactionType","find","Component","isSupportedReaction","reactionOption","getLatestReactedUserNames","flatMap","username","user","name","id","existingReactions","unsortedReactions","Object","entries","count","first_reaction_at","last_reaction_at","latestReactedUserNames","EmojiComponent","Date","lastReactionAt","reactionCount","unlistedReactedUserCount","length","sort","hasReactions","totalReactionCount","reduce","total"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Reactions/hooks/useProcessReactions.js"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useComponentContext, useMessageContext } from '../../../context';\nimport { defaultReactionOptions } from '../reactionOptions';\nexport const defaultReactionsSort = (a, b) => {\n    if (a.firstReactionAt && b.firstReactionAt) {\n        return +a.firstReactionAt - +b.firstReactionAt;\n    }\n    return a.reactionType.localeCompare(b.reactionType, 'en');\n};\nexport const useProcessReactions = (params) => {\n    const { own_reactions: propOwnReactions, reaction_groups: propReactionGroups, reactionOptions: propReactionOptions, reactions: propReactions, sortReactions: propSortReactions, } = params;\n    const { message, sortReactions: contextSortReactions } = useMessageContext('useProcessReactions');\n    const { reactionOptions: contextReactionOptions = defaultReactionOptions } = useComponentContext('useProcessReactions');\n    const reactionOptions = propReactionOptions ?? contextReactionOptions;\n    const sortReactions = propSortReactions ?? contextSortReactions ?? defaultReactionsSort;\n    const latestReactions = propReactions || message.latest_reactions;\n    const ownReactions = propOwnReactions || message?.own_reactions;\n    const reactionGroups = propReactionGroups || message?.reaction_groups;\n    const isOwnReaction = useCallback((reactionType) => ownReactions?.some((reaction) => reaction.type === reactionType) ?? false, [ownReactions]);\n    const getEmojiByReactionType = useCallback((reactionType) => reactionOptions.find(({ type }) => type === reactionType)?.Component ?? null, [reactionOptions]);\n    const isSupportedReaction = useCallback((reactionType) => reactionOptions.some((reactionOption) => reactionOption.type === reactionType), [reactionOptions]);\n    const getLatestReactedUserNames = useCallback((reactionType) => latestReactions?.flatMap((reaction) => {\n        if (reactionType && reactionType === reaction.type) {\n            const username = reaction.user?.name || reaction.user?.id;\n            return username ? [username] : [];\n        }\n        return [];\n    }) ?? [], [latestReactions]);\n    const existingReactions = useMemo(() => {\n        if (!reactionGroups) {\n            return [];\n        }\n        const unsortedReactions = Object.entries(reactionGroups).flatMap(([reactionType, { count, first_reaction_at, last_reaction_at }]) => {\n            if (count === 0 || !isSupportedReaction(reactionType)) {\n                return [];\n            }\n            const latestReactedUserNames = getLatestReactedUserNames(reactionType);\n            return [\n                {\n                    EmojiComponent: getEmojiByReactionType(reactionType),\n                    firstReactionAt: first_reaction_at ? new Date(first_reaction_at) : null,\n                    isOwnReaction: isOwnReaction(reactionType),\n                    lastReactionAt: last_reaction_at ? new Date(last_reaction_at) : null,\n                    latestReactedUserNames,\n                    reactionCount: count,\n                    reactionType,\n                    unlistedReactedUserCount: count - latestReactedUserNames.length,\n                },\n            ];\n        });\n        return unsortedReactions.sort(sortReactions);\n    }, [\n        getEmojiByReactionType,\n        getLatestReactedUserNames,\n        isOwnReaction,\n        isSupportedReaction,\n        reactionGroups,\n        sortReactions,\n    ]);\n    const hasReactions = existingReactions.length > 0;\n    const totalReactionCount = useMemo(() => existingReactions.reduce((total, { reactionCount }) => total + reactionCount, 0), [existingReactions]);\n    return {\n        existingReactions,\n        hasReactions,\n        totalReactionCount,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}