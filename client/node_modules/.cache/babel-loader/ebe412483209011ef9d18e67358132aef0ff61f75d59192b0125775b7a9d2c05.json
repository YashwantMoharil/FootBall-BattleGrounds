{"ast":null,"code":"import React, { useContext } from 'react';\nexport const ChannelStateContext = React.createContext(undefined);\nexport const ChannelStateProvider = ({\n  children,\n  value\n}) => React.createElement(ChannelStateContext.Provider, {\n  value: value\n}, children);\nexport const useChannelStateContext = componentName => {\n  const contextValue = useContext(ChannelStateContext);\n  if (!contextValue) {\n    console.warn(`The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelStateContext\n * typing is desired while using the HOC withChannelStateContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelStateContext = Component => {\n  const WithChannelStateContextComponent = props => {\n    const channelStateContext = useChannelStateContext();\n    return React.createElement(Component, {\n      ...props,\n      ...channelStateContext\n    });\n  };\n  WithChannelStateContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithChannelStateContextComponent;\n};","map":{"version":3,"names":["React","useContext","ChannelStateContext","createContext","undefined","ChannelStateProvider","children","value","createElement","Provider","useChannelStateContext","componentName","contextValue","console","warn","withChannelStateContext","Component","WithChannelStateContextComponent","props","channelStateContext","displayName","name","replace"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/context/ChannelStateContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const ChannelStateContext = React.createContext(undefined);\nexport const ChannelStateProvider = ({ children, value, }) => (React.createElement(ChannelStateContext.Provider, { value: value }, children));\nexport const useChannelStateContext = (componentName) => {\n    const contextValue = useContext(ChannelStateContext);\n    if (!contextValue) {\n        console.warn(`The useChannelStateContext hook was called outside of the ChannelStateContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the ${componentName} component.`);\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ChannelStateContext\n * typing is desired while using the HOC withChannelStateContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withChannelStateContext = (Component) => {\n    const WithChannelStateContextComponent = (props) => {\n        const channelStateContext = useChannelStateContext();\n        return React.createElement(Component, { ...props, ...channelStateContext });\n    };\n    WithChannelStateContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithChannelStateContextComponent;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,mBAAmB,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AACjE,OAAO,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAMP,KAAK,CAACQ,aAAa,CAACN,mBAAmB,CAACO,QAAQ,EAAE;EAAEF,KAAK,EAAEA;AAAM,CAAC,EAAED,QAAQ,CAAE;AAC7I,OAAO,MAAMI,sBAAsB,GAAIC,aAAa,IAAK;EACrD,MAAMC,YAAY,GAAGX,UAAU,CAACC,mBAAmB,CAAC;EACpD,IAAI,CAACU,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,qMAAqMH,aAAa,aAAa,CAAC;IAC7O,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,uBAAuB,GAAIC,SAAS,IAAK;EAClD,MAAMC,gCAAgC,GAAIC,KAAK,IAAK;IAChD,MAAMC,mBAAmB,GAAGT,sBAAsB,CAAC,CAAC;IACpD,OAAOV,KAAK,CAACQ,aAAa,CAACQ,SAAS,EAAE;MAAE,GAAGE,KAAK;MAAE,GAAGC;IAAoB,CAAC,CAAC;EAC/E,CAAC;EACDF,gCAAgC,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IACjEJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,gCAAgC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}