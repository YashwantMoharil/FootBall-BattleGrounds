{"ast":null,"code":"import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n  const {\n    loadMoreScrollThreshold,\n    onScrollBy,\n    scrollContainerMeasures,\n    scrolledUpThreshold,\n    scrollToBottom,\n    showNewMessages\n  } = params;\n  const {\n    client\n  } = useChatContext('useMessageListScrollManager');\n  const measures = useRef({\n    offsetHeight: 0,\n    scrollHeight: 0\n  });\n  const messages = useRef(undefined);\n  const scrollTop = useRef(0);\n  useLayoutEffect(() => {\n    const prevMeasures = measures.current;\n    const prevMessages = messages.current;\n    const newMessages = params.messages;\n    const lastNewMessage = newMessages[newMessages.length - 1] || {};\n    const lastPrevMessage = prevMessages?.[prevMessages.length - 1];\n    const newMeasures = scrollContainerMeasures();\n    const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current < scrolledUpThreshold;\n    if (typeof prevMessages !== 'undefined') {\n      if (prevMessages.length < newMessages.length) {\n        // messages added to the top\n        if (lastPrevMessage?.id === lastNewMessage.id) {\n          if (scrollTop.current < loadMoreScrollThreshold) {\n            const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n            onScrollBy(listHeightDelta);\n          }\n        }\n        // messages added to the bottom\n        else {\n          const lastMessageIsFromCurrentUser = lastNewMessage.user?.id === client.userID;\n          if (lastMessageIsFromCurrentUser || wasAtBottom) {\n            scrollToBottom();\n          } else {\n            showNewMessages();\n          }\n        }\n      }\n      // message list length didn't change, but check if last message had reaction/reply update\n      else {\n        const hasNewReactions = lastPrevMessage?.latest_reactions?.length !== lastNewMessage.latest_reactions?.length;\n        const hasNewReplies = lastPrevMessage?.reply_count !== lastNewMessage.reply_count;\n        if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n          scrollToBottom();\n        }\n      }\n    }\n    messages.current = newMessages;\n    measures.current = newMeasures;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [measures, messages, params.messages]);\n  return scrollTopValue => {\n    scrollTop.current = scrollTopValue;\n  };\n}","map":{"version":3,"names":["useLayoutEffect","useRef","useChatContext","useMessageListScrollManager","params","loadMoreScrollThreshold","onScrollBy","scrollContainerMeasures","scrolledUpThreshold","scrollToBottom","showNewMessages","client","measures","offsetHeight","scrollHeight","messages","undefined","scrollTop","prevMeasures","current","prevMessages","newMessages","lastNewMessage","length","lastPrevMessage","newMeasures","wasAtBottom","id","listHeightDelta","lastMessageIsFromCurrentUser","user","userID","hasNewReactions","latest_reactions","hasNewReplies","reply_count","scrollTopValue"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageList/hooks/MessageList/useMessageListScrollManager.js"],"sourcesContent":["import { useLayoutEffect, useRef } from 'react';\nimport { useChatContext } from '../../../../context/ChatContext';\n// FIXME: change this generic name to something like useAdjustScrollPositionToListSize\nexport function useMessageListScrollManager(params) {\n    const { loadMoreScrollThreshold, onScrollBy, scrollContainerMeasures, scrolledUpThreshold, scrollToBottom, showNewMessages, } = params;\n    const { client } = useChatContext('useMessageListScrollManager');\n    const measures = useRef({\n        offsetHeight: 0,\n        scrollHeight: 0,\n    });\n    const messages = useRef(undefined);\n    const scrollTop = useRef(0);\n    useLayoutEffect(() => {\n        const prevMeasures = measures.current;\n        const prevMessages = messages.current;\n        const newMessages = params.messages;\n        const lastNewMessage = newMessages[newMessages.length - 1] || {};\n        const lastPrevMessage = prevMessages?.[prevMessages.length - 1];\n        const newMeasures = scrollContainerMeasures();\n        const wasAtBottom = prevMeasures.scrollHeight - prevMeasures.offsetHeight - scrollTop.current <\n            scrolledUpThreshold;\n        if (typeof prevMessages !== 'undefined') {\n            if (prevMessages.length < newMessages.length) {\n                // messages added to the top\n                if (lastPrevMessage?.id === lastNewMessage.id) {\n                    if (scrollTop.current < loadMoreScrollThreshold) {\n                        const listHeightDelta = newMeasures.scrollHeight - prevMeasures.scrollHeight;\n                        onScrollBy(listHeightDelta);\n                    }\n                }\n                // messages added to the bottom\n                else {\n                    const lastMessageIsFromCurrentUser = lastNewMessage.user?.id === client.userID;\n                    if (lastMessageIsFromCurrentUser || wasAtBottom) {\n                        scrollToBottom();\n                    }\n                    else {\n                        showNewMessages();\n                    }\n                }\n            }\n            // message list length didn't change, but check if last message had reaction/reply update\n            else {\n                const hasNewReactions = lastPrevMessage?.latest_reactions?.length !==\n                    lastNewMessage.latest_reactions?.length;\n                const hasNewReplies = lastPrevMessage?.reply_count !== lastNewMessage.reply_count;\n                if ((hasNewReactions || hasNewReplies) && wasAtBottom) {\n                    scrollToBottom();\n                }\n            }\n        }\n        messages.current = newMessages;\n        measures.current = newMeasures;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [measures, messages, params.messages]);\n    return (scrollTopValue) => {\n        scrollTop.current = scrollTopValue;\n    };\n}\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,MAAM,QAAQ,OAAO;AAC/C,SAASC,cAAc,QAAQ,iCAAiC;AAChE;AACA,OAAO,SAASC,2BAA2BA,CAACC,MAAM,EAAE;EAChD,MAAM;IAAEC,uBAAuB;IAAEC,UAAU;IAAEC,uBAAuB;IAAEC,mBAAmB;IAAEC,cAAc;IAAEC;EAAiB,CAAC,GAAGN,MAAM;EACtI,MAAM;IAAEO;EAAO,CAAC,GAAGT,cAAc,CAAC,6BAA6B,CAAC;EAChE,MAAMU,QAAQ,GAAGX,MAAM,CAAC;IACpBY,YAAY,EAAE,CAAC;IACfC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGd,MAAM,CAACe,SAAS,CAAC;EAClC,MAAMC,SAAS,GAAGhB,MAAM,CAAC,CAAC,CAAC;EAC3BD,eAAe,CAAC,MAAM;IAClB,MAAMkB,YAAY,GAAGN,QAAQ,CAACO,OAAO;IACrC,MAAMC,YAAY,GAAGL,QAAQ,CAACI,OAAO;IACrC,MAAME,WAAW,GAAGjB,MAAM,CAACW,QAAQ;IACnC,MAAMO,cAAc,GAAGD,WAAW,CAACA,WAAW,CAACE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAChE,MAAMC,eAAe,GAAGJ,YAAY,GAAGA,YAAY,CAACG,MAAM,GAAG,CAAC,CAAC;IAC/D,MAAME,WAAW,GAAGlB,uBAAuB,CAAC,CAAC;IAC7C,MAAMmB,WAAW,GAAGR,YAAY,CAACJ,YAAY,GAAGI,YAAY,CAACL,YAAY,GAAGI,SAAS,CAACE,OAAO,GACzFX,mBAAmB;IACvB,IAAI,OAAOY,YAAY,KAAK,WAAW,EAAE;MACrC,IAAIA,YAAY,CAACG,MAAM,GAAGF,WAAW,CAACE,MAAM,EAAE;QAC1C;QACA,IAAIC,eAAe,EAAEG,EAAE,KAAKL,cAAc,CAACK,EAAE,EAAE;UAC3C,IAAIV,SAAS,CAACE,OAAO,GAAGd,uBAAuB,EAAE;YAC7C,MAAMuB,eAAe,GAAGH,WAAW,CAACX,YAAY,GAAGI,YAAY,CAACJ,YAAY;YAC5ER,UAAU,CAACsB,eAAe,CAAC;UAC/B;QACJ;QACA;QAAA,KACK;UACD,MAAMC,4BAA4B,GAAGP,cAAc,CAACQ,IAAI,EAAEH,EAAE,KAAKhB,MAAM,CAACoB,MAAM;UAC9E,IAAIF,4BAA4B,IAAIH,WAAW,EAAE;YAC7CjB,cAAc,CAAC,CAAC;UACpB,CAAC,MACI;YACDC,eAAe,CAAC,CAAC;UACrB;QACJ;MACJ;MACA;MAAA,KACK;QACD,MAAMsB,eAAe,GAAGR,eAAe,EAAES,gBAAgB,EAAEV,MAAM,KAC7DD,cAAc,CAACW,gBAAgB,EAAEV,MAAM;QAC3C,MAAMW,aAAa,GAAGV,eAAe,EAAEW,WAAW,KAAKb,cAAc,CAACa,WAAW;QACjF,IAAI,CAACH,eAAe,IAAIE,aAAa,KAAKR,WAAW,EAAE;UACnDjB,cAAc,CAAC,CAAC;QACpB;MACJ;IACJ;IACAM,QAAQ,CAACI,OAAO,GAAGE,WAAW;IAC9BT,QAAQ,CAACO,OAAO,GAAGM,WAAW;IAC9B;EACJ,CAAC,EAAE,CAACb,QAAQ,EAAEG,QAAQ,EAAEX,MAAM,CAACW,QAAQ,CAAC,CAAC;EACzC,OAAQqB,cAAc,IAAK;IACvBnB,SAAS,CAACE,OAAO,GAAGiB,cAAc;EACtC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}