{"ast":null,"code":"import clsx from 'clsx';\nimport React from 'react';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nimport { RemindMeActionButton } from './RemindMeSubmenu';\nimport { useMessageReminder } from '../Message';\nimport { useMessageComposer } from '../MessageInput';\nimport { useChatContext, useComponentContext, useMessageContext, useTranslationContext } from '../../context';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nconst UnMemoizedMessageActionsBox = props => {\n  const {\n    className,\n    getMessageActions,\n    handleDelete,\n    handleEdit,\n    handleFlag,\n    handleMarkUnread,\n    handleMute,\n    handlePin,\n    isUserMuted,\n    mine,\n    open,\n    ...restDivProps\n  } = props;\n  const {\n    client\n  } = useChatContext();\n  const {\n    CustomMessageActionsList = DefaultCustomMessageActionsList\n  } = useComponentContext('MessageActionsBox');\n  const {\n    customMessageActions,\n    message,\n    threadList\n  } = useMessageContext('MessageActionsBox');\n  const {\n    t\n  } = useTranslationContext('MessageActionsBox');\n  const messageComposer = useMessageComposer();\n  const reminder = useMessageReminder(message.id);\n  const messageActions = getMessageActions();\n  const handleQuote = () => {\n    messageComposer.setQuotedMessage(message);\n    const elements = message.parent_id ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea') : document.getElementsByClassName('str-chat__textarea__textarea');\n    const textarea = elements.item(0);\n    if (textarea instanceof HTMLTextAreaElement) {\n      textarea.focus();\n    }\n  };\n  const rootClassName = clsx('str-chat__message-actions-box', className, {\n    'str-chat__message-actions-box--open': open\n  });\n  const buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n  return React.createElement(\"div\", {\n    ...restDivProps,\n    className: rootClassName,\n    \"data-testid\": 'message-actions-box'\n  }, React.createElement(\"div\", {\n    \"aria-label\": t('aria/Message Options'),\n    className: 'str-chat__message-actions-list',\n    role: 'listbox'\n  }, React.createElement(CustomMessageActionsList, {\n    customMessageActions: customMessageActions,\n    message: message\n  }), messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleQuote,\n    role: 'option'\n  }, t('Reply')), messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handlePin,\n    role: 'option'\n  }, !message.pinned ? t('Pin') : t('Unpin')), messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 && !threadList && !!message.id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMarkUnread,\n    role: 'option'\n  }, t('Mark as unread')), messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleFlag,\n    role: 'option'\n  }, t('Flag')), messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMute,\n    role: 'option'\n  }, isUserMuted() ? t('Unmute') : t('Mute')), messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleEdit,\n    role: 'option'\n  }, t('Edit Message')), messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleDelete,\n    role: 'option'\n  }, t('Delete')), messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1 && React.createElement(RemindMeActionButton, {\n    className: buttonClassName,\n    isMine: mine\n  }), messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: () => reminder ? client.reminders.deleteReminder(reminder.id) : client.reminders.createReminder({\n      messageId: message.id\n    }),\n    role: 'option'\n  }, reminder ? t('Remove reminder') : t('Save for later'))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport const MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);","map":{"version":3,"names":["clsx","React","CustomMessageActionsList","DefaultCustomMessageActionsList","RemindMeActionButton","useMessageReminder","useMessageComposer","useChatContext","useComponentContext","useMessageContext","useTranslationContext","MESSAGE_ACTIONS","UnMemoizedMessageActionsBox","props","className","getMessageActions","handleDelete","handleEdit","handleFlag","handleMarkUnread","handleMute","handlePin","isUserMuted","mine","open","restDivProps","client","customMessageActions","message","threadList","t","messageComposer","reminder","id","messageActions","handleQuote","setQuotedMessage","elements","parent_id","document","querySelectorAll","getElementsByClassName","textarea","item","HTMLTextAreaElement","focus","rootClassName","buttonClassName","createElement","role","indexOf","quote","onClick","pin","pinned","markUnread","flag","mute","edit","delete","remindMe","isMine","saveForLater","reminders","deleteReminder","createReminder","messageId","MessageActionsBox","memo"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { CustomMessageActionsList as DefaultCustomMessageActionsList } from './CustomMessageActionsList';\nimport { RemindMeActionButton } from './RemindMeSubmenu';\nimport { useMessageReminder } from '../Message';\nimport { useMessageComposer } from '../MessageInput';\nimport { useChatContext, useComponentContext, useMessageContext, useTranslationContext, } from '../../context';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nconst UnMemoizedMessageActionsBox = (props) => {\n    const { className, getMessageActions, handleDelete, handleEdit, handleFlag, handleMarkUnread, handleMute, handlePin, isUserMuted, mine, open, ...restDivProps } = props;\n    const { client } = useChatContext();\n    const { CustomMessageActionsList = DefaultCustomMessageActionsList } = useComponentContext('MessageActionsBox');\n    const { customMessageActions, message, threadList } = useMessageContext('MessageActionsBox');\n    const { t } = useTranslationContext('MessageActionsBox');\n    const messageComposer = useMessageComposer();\n    const reminder = useMessageReminder(message.id);\n    const messageActions = getMessageActions();\n    const handleQuote = () => {\n        messageComposer.setQuotedMessage(message);\n        const elements = message.parent_id\n            ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')\n            : document.getElementsByClassName('str-chat__textarea__textarea');\n        const textarea = elements.item(0);\n        if (textarea instanceof HTMLTextAreaElement) {\n            textarea.focus();\n        }\n    };\n    const rootClassName = clsx('str-chat__message-actions-box', className, {\n        'str-chat__message-actions-box--open': open,\n    });\n    const buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n    return (React.createElement(\"div\", { ...restDivProps, className: rootClassName, \"data-testid\": 'message-actions-box' },\n        React.createElement(\"div\", { \"aria-label\": t('aria/Message Options'), className: 'str-chat__message-actions-list', role: 'listbox' },\n            React.createElement(CustomMessageActionsList, { customMessageActions: customMessageActions, message: message }),\n            messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleQuote, role: 'option' }, t('Reply'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.markUnread) > -1 &&\n                !threadList &&\n                !!message.id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMarkUnread, role: 'option' }, t('Mark as unread'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleFlag, role: 'option' }, t('Flag'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleEdit, role: 'option' }, t('Edit Message'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleDelete, role: 'option' }, t('Delete'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.remindMe) > -1 && (React.createElement(RemindMeActionButton, { className: buttonClassName, isMine: mine })),\n            messageActions.indexOf(MESSAGE_ACTIONS.saveForLater) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: () => reminder\n                    ? client.reminders.deleteReminder(reminder.id)\n                    : client.reminders.createReminder({ messageId: message.id }), role: 'option' }, reminder ? t('Remove reminder') : t('Save for later'))))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport const MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}