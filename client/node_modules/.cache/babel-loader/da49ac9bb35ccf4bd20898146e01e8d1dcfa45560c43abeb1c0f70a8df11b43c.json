{"ast":null,"code":"import { nanoid } from 'nanoid';\nexport const makeAddNotifications = (setNotifications, notificationTimeouts) => (text, type) => {\n  if (typeof text !== 'string' || type !== 'success' && type !== 'error') {\n    return;\n  }\n  const id = nanoid();\n  setNotifications(prevNotifications => [...prevNotifications, {\n    id,\n    text,\n    type\n  }]);\n  const timeout = setTimeout(() => setNotifications(prevNotifications => prevNotifications.filter(notification => notification.id !== id)), 5000);\n  notificationTimeouts.push(timeout);\n};\n/**\n * Utility function for jumpToFirstUnreadMessage\n * @param targetId\n * @param msgSet\n */\nexport const findInMsgSetById = (targetId, msgSet) => {\n  for (let i = msgSet.length - 1; i >= 0; i--) {\n    const item = msgSet[i];\n    if (item.id === targetId) {\n      return {\n        index: i,\n        target: item\n      };\n    }\n  }\n  return {\n    index: -1\n  };\n};\n/**\n * Utility function for jumpToFirstUnreadMessage\n * @param targetDate\n * @param msgSet\n * @param exact\n */\nexport const findInMsgSetByDate = (targetDate, msgSet, exact = false) => {\n  const targetTimestamp = targetDate.getTime();\n  let left = 0;\n  let middle = 0;\n  let right = msgSet.length - 1;\n  while (left <= right) {\n    middle = Math.floor((right + left) / 2);\n    const middleTimestamp = new Date(msgSet[middle].created_at).getTime();\n    const middleLeftTimestamp = msgSet[middle - 1]?.created_at && new Date(msgSet[middle - 1].created_at).getTime();\n    const middleRightTimestamp = msgSet[middle + 1]?.created_at && new Date(msgSet[middle + 1].created_at).getTime();\n    if (middleTimestamp === targetTimestamp || middleLeftTimestamp && middleRightTimestamp && middleLeftTimestamp < targetTimestamp && targetTimestamp < middleRightTimestamp) {\n      return {\n        index: middle,\n        target: msgSet[middle]\n      };\n    }\n    if (middleTimestamp < targetTimestamp) left = middle + 1;else right = middle - 1;\n  }\n  if (!exact || new Date(msgSet[left].created_at).getTime() === targetTimestamp) {\n    return {\n      index: left,\n      target: msgSet[left]\n    };\n  }\n  return {\n    index: -1\n  };\n};\nexport const generateMessageId = ({\n  client\n}) => `${client.userID}-${nanoid()}`;","map":{"version":3,"names":["nanoid","makeAddNotifications","setNotifications","notificationTimeouts","text","type","id","prevNotifications","timeout","setTimeout","filter","notification","push","findInMsgSetById","targetId","msgSet","i","length","item","index","target","findInMsgSetByDate","targetDate","exact","targetTimestamp","getTime","left","middle","right","Math","floor","middleTimestamp","Date","created_at","middleLeftTimestamp","middleRightTimestamp","generateMessageId","client","userID"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Channel/utils.js"],"sourcesContent":["import { nanoid } from 'nanoid';\nexport const makeAddNotifications = (setNotifications, notificationTimeouts) => (text, type) => {\n    if (typeof text !== 'string' || (type !== 'success' && type !== 'error')) {\n        return;\n    }\n    const id = nanoid();\n    setNotifications((prevNotifications) => [...prevNotifications, { id, text, type }]);\n    const timeout = setTimeout(() => setNotifications((prevNotifications) => prevNotifications.filter((notification) => notification.id !== id)), 5000);\n    notificationTimeouts.push(timeout);\n};\n/**\n * Utility function for jumpToFirstUnreadMessage\n * @param targetId\n * @param msgSet\n */\nexport const findInMsgSetById = (targetId, msgSet) => {\n    for (let i = msgSet.length - 1; i >= 0; i--) {\n        const item = msgSet[i];\n        if (item.id === targetId) {\n            return {\n                index: i,\n                target: item,\n            };\n        }\n    }\n    return {\n        index: -1,\n    };\n};\n/**\n * Utility function for jumpToFirstUnreadMessage\n * @param targetDate\n * @param msgSet\n * @param exact\n */\nexport const findInMsgSetByDate = (targetDate, msgSet, exact = false) => {\n    const targetTimestamp = targetDate.getTime();\n    let left = 0;\n    let middle = 0;\n    let right = msgSet.length - 1;\n    while (left <= right) {\n        middle = Math.floor((right + left) / 2);\n        const middleTimestamp = new Date(msgSet[middle].created_at).getTime();\n        const middleLeftTimestamp = msgSet[middle - 1]?.created_at &&\n            new Date(msgSet[middle - 1].created_at).getTime();\n        const middleRightTimestamp = msgSet[middle + 1]?.created_at &&\n            new Date(msgSet[middle + 1].created_at).getTime();\n        if (middleTimestamp === targetTimestamp ||\n            (middleLeftTimestamp &&\n                middleRightTimestamp &&\n                middleLeftTimestamp < targetTimestamp &&\n                targetTimestamp < middleRightTimestamp)) {\n            return { index: middle, target: msgSet[middle] };\n        }\n        if (middleTimestamp < targetTimestamp)\n            left = middle + 1;\n        else\n            right = middle - 1;\n    }\n    if (!exact ||\n        new Date(msgSet[left].created_at).getTime() === targetTimestamp) {\n        return { index: left, target: msgSet[left] };\n    }\n    return { index: -1 };\n};\nexport const generateMessageId = ({ client }) => `${client.userID}-${nanoid()}`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}