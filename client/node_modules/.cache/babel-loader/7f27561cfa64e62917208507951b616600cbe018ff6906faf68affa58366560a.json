{"ast":null,"code":"import React, { useContext } from 'react';\nexport const ComponentContext = React.createContext({});\nexport const ComponentProvider = ({\n  children,\n  value\n}) => React.createElement(ComponentContext.Provider, {\n  value: value\n}, children);\nexport const useComponentContext = (\n/**\n * @deprecated\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => useContext(ComponentContext);\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withComponentContext = Component => {\n  const WithComponentContextComponent = props => {\n    const componentContext = useComponentContext();\n    return React.createElement(Component, {\n      ...props,\n      ...componentContext\n    });\n  };\n  WithComponentContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithComponentContextComponent;\n};","map":{"version":3,"names":["React","useContext","ComponentContext","createContext","ComponentProvider","children","value","createElement","Provider","useComponentContext","_componentName","withComponentContext","Component","WithComponentContextComponent","props","componentContext","displayName","name","replace"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/context/ComponentContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nexport const ComponentContext = React.createContext({});\nexport const ComponentProvider = ({ children, value, }) => (React.createElement(ComponentContext.Provider, { value: value }, children));\nexport const useComponentContext = (\n/**\n * @deprecated\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n_componentName) => useContext(ComponentContext);\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport const withComponentContext = (Component) => {\n    const WithComponentContextComponent = (props) => {\n        const componentContext = useComponentContext();\n        return React.createElement(Component, { ...props, ...componentContext });\n    };\n    WithComponentContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithComponentContextComponent;\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,aAAa,CAAC,CAAC,CAAC,CAAC;AACvD,OAAO,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAO,CAAC,KAAMN,KAAK,CAACO,aAAa,CAACL,gBAAgB,CAACM,QAAQ,EAAE;EAAEF,KAAK,EAAEA;AAAM,CAAC,EAAED,QAAQ,CAAE;AACvI,OAAO,MAAMI,mBAAmB,GAAGA;AACnC;AACA;AACA;AACA;AACAC,cAAc,KAAKT,UAAU,CAACC,gBAAgB,CAAC;AAC/C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,oBAAoB,GAAIC,SAAS,IAAK;EAC/C,MAAMC,6BAA6B,GAAIC,KAAK,IAAK;IAC7C,MAAMC,gBAAgB,GAAGN,mBAAmB,CAAC,CAAC;IAC9C,OAAOT,KAAK,CAACO,aAAa,CAACK,SAAS,EAAE;MAAE,GAAGE,KAAK;MAAE,GAAGC;IAAiB,CAAC,CAAC;EAC5E,CAAC;EACDF,6BAA6B,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IAC9DJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,6BAA6B;AACxC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}