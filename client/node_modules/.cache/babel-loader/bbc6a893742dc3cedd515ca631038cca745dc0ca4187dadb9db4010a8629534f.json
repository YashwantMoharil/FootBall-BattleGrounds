{"ast":null,"code":"import { useCallback } from 'react';\nimport throttle from 'lodash.throttle';\nimport { useThreadContext } from '../../Threads';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const reactionHandlerWarning = `Reaction handler was called, but it is missing one of its required arguments.\nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;\nexport const useReactionHandler = message => {\n  const thread = useThreadContext();\n  const {\n    updateMessage\n  } = useChannelActionContext('useReactionHandler');\n  const {\n    channel,\n    channelCapabilities\n  } = useChannelStateContext('useReactionHandler');\n  const {\n    client\n  } = useChatContext('useReactionHandler');\n  const createMessagePreview = useCallback((add, reaction, message) => {\n    const newReactionGroups = message?.reaction_groups || {};\n    const reactionType = reaction.type;\n    const hasReaction = !!newReactionGroups[reactionType];\n    if (add) {\n      const timestamp = new Date().toISOString();\n      newReactionGroups[reactionType] = hasReaction ? {\n        ...newReactionGroups[reactionType],\n        count: newReactionGroups[reactionType].count + 1\n      } : {\n        count: 1,\n        first_reaction_at: timestamp,\n        last_reaction_at: timestamp,\n        sum_scores: 1\n      };\n    } else {\n      if (hasReaction && newReactionGroups[reactionType].count > 1) {\n        newReactionGroups[reactionType] = {\n          ...newReactionGroups[reactionType],\n          count: newReactionGroups[reactionType].count - 1\n        };\n      } else {\n        delete newReactionGroups[reactionType];\n      }\n    }\n    const newReactions = add ? [reaction, ...(message?.latest_reactions || [])] : message.latest_reactions?.filter(item => !(item.type === reaction.type && item.user_id === reaction.user_id));\n    const newOwnReactions = add ? [reaction, ...(message?.own_reactions || [])] : message?.own_reactions?.filter(item => item.type !== reaction.type);\n    return {\n      ...message,\n      latest_reactions: newReactions || message.latest_reactions,\n      own_reactions: newOwnReactions,\n      reaction_groups: newReactionGroups\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [client.user, client.userID]);\n  const createReactionPreview = type => ({\n    message_id: message?.id,\n    score: 1,\n    type,\n    user: client.user,\n    user_id: client.user?.id\n  });\n  const toggleReaction = throttle(async (id, type, add) => {\n    if (!message || !channelCapabilities['send-reaction']) return;\n    const newReaction = createReactionPreview(type);\n    const tempMessage = createMessagePreview(add, newReaction, message);\n    try {\n      updateMessage(tempMessage);\n      thread?.upsertReplyLocally({\n        message: tempMessage\n      });\n      const messageResponse = add ? await channel.sendReaction(id, {\n        type\n      }) : await channel.deleteReaction(id, type);\n      // seems useless as we're expecting WS event to come in and replace this anyway\n      updateMessage(messageResponse.message);\n    } catch (error) {\n      // revert to the original message if the API call fails\n      updateMessage(message);\n      thread?.upsertReplyLocally({\n        message\n      });\n    }\n  }, 1000);\n  return async (reactionType, event) => {\n    if (event?.preventDefault) {\n      event.preventDefault();\n    }\n    if (!message) {\n      return console.warn(reactionHandlerWarning);\n    }\n    let userExistingReaction = null;\n    if (message.own_reactions) {\n      message.own_reactions.forEach(reaction => {\n        // own user should only ever contain the current user id\n        // just in case we check to prevent bugs with message updates from breaking reactions\n        if (reaction.user && client.userID === reaction.user.id && reaction.type === reactionType) {\n          userExistingReaction = reaction;\n        } else if (reaction.user && client.userID !== reaction.user.id) {\n          console.warn(`message.own_reactions contained reactions from a different user, this indicates a bug`);\n        }\n      });\n    }\n    try {\n      if (userExistingReaction) {\n        await toggleReaction(message.id, userExistingReaction.type, false);\n      } else {\n        await toggleReaction(message.id, reactionType, true);\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  };\n};","map":{"version":3,"names":["useCallback","throttle","useThreadContext","useChannelActionContext","useChannelStateContext","useChatContext","reactionHandlerWarning","useReactionHandler","message","thread","updateMessage","channel","channelCapabilities","client","createMessagePreview","add","reaction","newReactionGroups","reaction_groups","reactionType","type","hasReaction","timestamp","Date","toISOString","count","first_reaction_at","last_reaction_at","sum_scores","newReactions","latest_reactions","filter","item","user_id","newOwnReactions","own_reactions","user","userID","createReactionPreview","message_id","id","score","toggleReaction","newReaction","tempMessage","upsertReplyLocally","messageResponse","sendReaction","deleteReaction","error","event","preventDefault","console","warn","userExistingReaction","forEach","log"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/hooks/useReactionHandler.js"],"sourcesContent":["import { useCallback } from 'react';\nimport throttle from 'lodash.throttle';\nimport { useThreadContext } from '../../Threads';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const reactionHandlerWarning = `Reaction handler was called, but it is missing one of its required arguments.\nMake sure the ChannelAction and ChannelState contexts are properly set and the hook is initialized with a valid message.`;\nexport const useReactionHandler = (message) => {\n    const thread = useThreadContext();\n    const { updateMessage } = useChannelActionContext('useReactionHandler');\n    const { channel, channelCapabilities } = useChannelStateContext('useReactionHandler');\n    const { client } = useChatContext('useReactionHandler');\n    const createMessagePreview = useCallback((add, reaction, message) => {\n        const newReactionGroups = message?.reaction_groups || {};\n        const reactionType = reaction.type;\n        const hasReaction = !!newReactionGroups[reactionType];\n        if (add) {\n            const timestamp = new Date().toISOString();\n            newReactionGroups[reactionType] = hasReaction\n                ? {\n                    ...newReactionGroups[reactionType],\n                    count: newReactionGroups[reactionType].count + 1,\n                }\n                : {\n                    count: 1,\n                    first_reaction_at: timestamp,\n                    last_reaction_at: timestamp,\n                    sum_scores: 1,\n                };\n        }\n        else {\n            if (hasReaction && newReactionGroups[reactionType].count > 1) {\n                newReactionGroups[reactionType] = {\n                    ...newReactionGroups[reactionType],\n                    count: newReactionGroups[reactionType].count - 1,\n                };\n            }\n            else {\n                delete newReactionGroups[reactionType];\n            }\n        }\n        const newReactions = add\n            ? [reaction, ...(message?.latest_reactions || [])]\n            : message.latest_reactions?.filter((item) => !(item.type === reaction.type && item.user_id === reaction.user_id));\n        const newOwnReactions = add\n            ? [reaction, ...(message?.own_reactions || [])]\n            : message?.own_reactions?.filter((item) => item.type !== reaction.type);\n        return {\n            ...message,\n            latest_reactions: newReactions || message.latest_reactions,\n            own_reactions: newOwnReactions,\n            reaction_groups: newReactionGroups,\n        };\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [client.user, client.userID]);\n    const createReactionPreview = (type) => ({\n        message_id: message?.id,\n        score: 1,\n        type,\n        user: client.user,\n        user_id: client.user?.id,\n    });\n    const toggleReaction = throttle(async (id, type, add) => {\n        if (!message || !channelCapabilities['send-reaction'])\n            return;\n        const newReaction = createReactionPreview(type);\n        const tempMessage = createMessagePreview(add, newReaction, message);\n        try {\n            updateMessage(tempMessage);\n            thread?.upsertReplyLocally({ message: tempMessage });\n            const messageResponse = add\n                ? await channel.sendReaction(id, { type })\n                : await channel.deleteReaction(id, type);\n            // seems useless as we're expecting WS event to come in and replace this anyway\n            updateMessage(messageResponse.message);\n        }\n        catch (error) {\n            // revert to the original message if the API call fails\n            updateMessage(message);\n            thread?.upsertReplyLocally({ message });\n        }\n    }, 1000);\n    return async (reactionType, event) => {\n        if (event?.preventDefault) {\n            event.preventDefault();\n        }\n        if (!message) {\n            return console.warn(reactionHandlerWarning);\n        }\n        let userExistingReaction = null;\n        if (message.own_reactions) {\n            message.own_reactions.forEach((reaction) => {\n                // own user should only ever contain the current user id\n                // just in case we check to prevent bugs with message updates from breaking reactions\n                if (reaction.user &&\n                    client.userID === reaction.user.id &&\n                    reaction.type === reactionType) {\n                    userExistingReaction = reaction;\n                }\n                else if (reaction.user && client.userID !== reaction.user.id) {\n                    console.warn(`message.own_reactions contained reactions from a different user, this indicates a bug`);\n                }\n            });\n        }\n        try {\n            if (userExistingReaction) {\n                await toggleReaction(message.id, userExistingReaction.type, false);\n            }\n            else {\n                await toggleReaction(message.id, reactionType, true);\n            }\n        }\n        catch (error) {\n            console.log({ error });\n        }\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}