{"ast":null,"code":"import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { ThreadProvider } from '../Threads';\nimport { Icon } from '../Threads/icons';\nimport { UnreadCountBadge } from '../Threads/UnreadCountBadge';\nimport { useChatContext } from '../../context';\nimport { useStateStore } from '../../store';\nimport clsx from 'clsx';\nconst ChatViewContext = createContext({\n  activeChatView: 'channels',\n  setActiveChatView: () => undefined\n});\nexport const ChatView = ({\n  children\n}) => {\n  const [activeChatView, setActiveChatView] = useState('channels');\n  const {\n    theme\n  } = useChatContext();\n  const value = useMemo(() => ({\n    activeChatView,\n    setActiveChatView\n  }), [activeChatView]);\n  return React.createElement(ChatViewContext.Provider, {\n    value: value\n  }, React.createElement(\"div\", {\n    className: clsx('str-chat', theme, 'str-chat__chat-view')\n  }, children));\n};\nconst ChannelsView = ({\n  children\n}) => {\n  const {\n    activeChatView\n  } = useContext(ChatViewContext);\n  if (activeChatView !== 'channels') return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__chat-view__channels'\n  }, children);\n};\nconst ThreadsViewContext = createContext({\n  activeThread: undefined,\n  setActiveThread: () => undefined\n});\nexport const useThreadsViewContext = () => useContext(ThreadsViewContext);\nconst ThreadsView = ({\n  children\n}) => {\n  const {\n    activeChatView\n  } = useContext(ChatViewContext);\n  const [activeThread, setActiveThread] = useState(undefined);\n  const value = useMemo(() => ({\n    activeThread,\n    setActiveThread\n  }), [activeThread]);\n  if (activeChatView !== 'threads') return null;\n  return React.createElement(ThreadsViewContext.Provider, {\n    value: value\n  }, React.createElement(\"div\", {\n    className: 'str-chat__chat-view__threads'\n  }, children));\n};\n// thread business logic that's impossible to keep within client but encapsulated for ease of use\nexport const useActiveThread = ({\n  activeThread\n}) => {\n  useEffect(() => {\n    if (!activeThread) return;\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible' && document.hasFocus()) {\n        activeThread.activate();\n      }\n      if (document.visibilityState === 'hidden' || !document.hasFocus()) {\n        activeThread.deactivate();\n      }\n    };\n    handleVisibilityChange();\n    window.addEventListener('focus', handleVisibilityChange);\n    window.addEventListener('blur', handleVisibilityChange);\n    return () => {\n      activeThread.deactivate();\n      window.addEventListener('blur', handleVisibilityChange);\n      window.removeEventListener('focus', handleVisibilityChange);\n    };\n  }, [activeThread]);\n};\n// ThreadList under View.Threads context, will access setting function and on item click will set activeThread\n// which can be accessed for the ease of use by ThreadAdapter which forwards it to required ThreadProvider\n// ThreadList can easily live without this context and click handler can be overriden, ThreadAdapter is then no longer needed\n/**\n * // this setup still works\n * const MyCustomComponent = () => {\n *  const [activeThread, setActiveThread] = useState();\n *\n *  return <>\n *    // simplified\n *    <ThreadList onItemPointerDown={setActiveThread} />\n *    <ThreadProvider thread={activeThread}>\n *      <Thread />\n *    </ThreadProvider>\n *  </>\n * }\n *\n */\nconst ThreadAdapter = ({\n  children\n}) => {\n  const {\n    activeThread\n  } = useThreadsViewContext();\n  useActiveThread({\n    activeThread\n  });\n  return React.createElement(ThreadProvider, {\n    thread: activeThread\n  }, children);\n};\nconst selector = ({\n  unreadThreadCount\n}) => ({\n  unreadThreadCount\n});\nconst ChatViewSelector = () => {\n  const {\n    client\n  } = useChatContext();\n  const {\n    unreadThreadCount\n  } = useStateStore(client.threads.state, selector);\n  const {\n    activeChatView,\n    setActiveChatView\n  } = useContext(ChatViewContext);\n  return React.createElement(\"div\", {\n    className: 'str-chat__chat-view__selector'\n  }, React.createElement(\"button\", {\n    \"aria-selected\": activeChatView === 'channels',\n    className: 'str-chat__chat-view__selector-button',\n    onPointerDown: () => setActiveChatView('channels'),\n    role: 'tab'\n  }, React.createElement(Icon.MessageBubbleEmpty, null), React.createElement(\"div\", {\n    className: 'str-chat__chat-view__selector-button-text'\n  }, \"Channels\")), React.createElement(\"button\", {\n    \"aria-selected\": activeChatView === 'threads',\n    className: 'str-chat__chat-view__selector-button',\n    onPointerDown: () => setActiveChatView('threads'),\n    role: 'tab'\n  }, React.createElement(UnreadCountBadge, {\n    count: unreadThreadCount,\n    position: 'top-right'\n  }, React.createElement(Icon.MessageBubble, null)), React.createElement(\"div\", {\n    className: 'str-chat__chat-view__selector-button-text'\n  }, \"Threads\")));\n};\nChatView.Channels = ChannelsView;\nChatView.Threads = ThreadsView;\nChatView.ThreadAdapter = ThreadAdapter;\nChatView.Selector = ChatViewSelector;","map":{"version":3,"names":["React","createContext","useContext","useEffect","useMemo","useState","ThreadProvider","Icon","UnreadCountBadge","useChatContext","useStateStore","clsx","ChatViewContext","activeChatView","setActiveChatView","undefined","ChatView","children","theme","value","createElement","Provider","className","ChannelsView","ThreadsViewContext","activeThread","setActiveThread","useThreadsViewContext","ThreadsView","useActiveThread","handleVisibilityChange","document","visibilityState","hasFocus","activate","deactivate","window","addEventListener","removeEventListener","ThreadAdapter","thread","selector","unreadThreadCount","ChatViewSelector","client","threads","state","onPointerDown","role","MessageBubbleEmpty","count","position","MessageBubble","Channels","Threads","Selector"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/ChatView/ChatView.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useMemo, useState } from 'react';\nimport { ThreadProvider } from '../Threads';\nimport { Icon } from '../Threads/icons';\nimport { UnreadCountBadge } from '../Threads/UnreadCountBadge';\nimport { useChatContext } from '../../context';\nimport { useStateStore } from '../../store';\nimport clsx from 'clsx';\nconst ChatViewContext = createContext({\n    activeChatView: 'channels',\n    setActiveChatView: () => undefined,\n});\nexport const ChatView = ({ children }) => {\n    const [activeChatView, setActiveChatView] = useState('channels');\n    const { theme } = useChatContext();\n    const value = useMemo(() => ({ activeChatView, setActiveChatView }), [activeChatView]);\n    return (React.createElement(ChatViewContext.Provider, { value: value },\n        React.createElement(\"div\", { className: clsx('str-chat', theme, 'str-chat__chat-view') }, children)));\n};\nconst ChannelsView = ({ children }) => {\n    const { activeChatView } = useContext(ChatViewContext);\n    if (activeChatView !== 'channels')\n        return null;\n    return React.createElement(\"div\", { className: 'str-chat__chat-view__channels' }, children);\n};\nconst ThreadsViewContext = createContext({\n    activeThread: undefined,\n    setActiveThread: () => undefined,\n});\nexport const useThreadsViewContext = () => useContext(ThreadsViewContext);\nconst ThreadsView = ({ children }) => {\n    const { activeChatView } = useContext(ChatViewContext);\n    const [activeThread, setActiveThread] = useState(undefined);\n    const value = useMemo(() => ({ activeThread, setActiveThread }), [activeThread]);\n    if (activeChatView !== 'threads')\n        return null;\n    return (React.createElement(ThreadsViewContext.Provider, { value: value },\n        React.createElement(\"div\", { className: 'str-chat__chat-view__threads' }, children)));\n};\n// thread business logic that's impossible to keep within client but encapsulated for ease of use\nexport const useActiveThread = ({ activeThread }) => {\n    useEffect(() => {\n        if (!activeThread)\n            return;\n        const handleVisibilityChange = () => {\n            if (document.visibilityState === 'visible' && document.hasFocus()) {\n                activeThread.activate();\n            }\n            if (document.visibilityState === 'hidden' || !document.hasFocus()) {\n                activeThread.deactivate();\n            }\n        };\n        handleVisibilityChange();\n        window.addEventListener('focus', handleVisibilityChange);\n        window.addEventListener('blur', handleVisibilityChange);\n        return () => {\n            activeThread.deactivate();\n            window.addEventListener('blur', handleVisibilityChange);\n            window.removeEventListener('focus', handleVisibilityChange);\n        };\n    }, [activeThread]);\n};\n// ThreadList under View.Threads context, will access setting function and on item click will set activeThread\n// which can be accessed for the ease of use by ThreadAdapter which forwards it to required ThreadProvider\n// ThreadList can easily live without this context and click handler can be overriden, ThreadAdapter is then no longer needed\n/**\n * // this setup still works\n * const MyCustomComponent = () => {\n *  const [activeThread, setActiveThread] = useState();\n *\n *  return <>\n *    // simplified\n *    <ThreadList onItemPointerDown={setActiveThread} />\n *    <ThreadProvider thread={activeThread}>\n *      <Thread />\n *    </ThreadProvider>\n *  </>\n * }\n *\n */\nconst ThreadAdapter = ({ children }) => {\n    const { activeThread } = useThreadsViewContext();\n    useActiveThread({ activeThread });\n    return React.createElement(ThreadProvider, { thread: activeThread }, children);\n};\nconst selector = ({ unreadThreadCount }) => ({\n    unreadThreadCount,\n});\nconst ChatViewSelector = () => {\n    const { client } = useChatContext();\n    const { unreadThreadCount } = useStateStore(client.threads.state, selector);\n    const { activeChatView, setActiveChatView } = useContext(ChatViewContext);\n    return (React.createElement(\"div\", { className: 'str-chat__chat-view__selector' },\n        React.createElement(\"button\", { \"aria-selected\": activeChatView === 'channels', className: 'str-chat__chat-view__selector-button', onPointerDown: () => setActiveChatView('channels'), role: 'tab' },\n            React.createElement(Icon.MessageBubbleEmpty, null),\n            React.createElement(\"div\", { className: 'str-chat__chat-view__selector-button-text' }, \"Channels\")),\n        React.createElement(\"button\", { \"aria-selected\": activeChatView === 'threads', className: 'str-chat__chat-view__selector-button', onPointerDown: () => setActiveChatView('threads'), role: 'tab' },\n            React.createElement(UnreadCountBadge, { count: unreadThreadCount, position: 'top-right' },\n                React.createElement(Icon.MessageBubble, null)),\n            React.createElement(\"div\", { className: 'str-chat__chat-view__selector-button-text' }, \"Threads\"))));\n};\nChatView.Channels = ChannelsView;\nChatView.Threads = ThreadsView;\nChatView.ThreadAdapter = ThreadAdapter;\nChatView.Selector = ChatViewSelector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}