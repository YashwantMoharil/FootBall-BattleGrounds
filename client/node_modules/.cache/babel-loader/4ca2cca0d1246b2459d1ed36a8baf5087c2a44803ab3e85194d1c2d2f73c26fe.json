{"ast":null,"code":"import { defaultPinPermissions, validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const usePinHandler = (message,\n// @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n_permissions = defaultPinPermissions,\n// eslint-disable-line\nnotifications = {}) => {\n  const {\n    getErrorNotification,\n    notify\n  } = notifications;\n  const {\n    updateMessage\n  } = useChannelActionContext('usePinHandler');\n  const {\n    channelCapabilities = {}\n  } = useChannelStateContext('usePinHandler');\n  const {\n    client\n  } = useChatContext('usePinHandler');\n  const {\n    t\n  } = useTranslationContext('usePinHandler');\n  const canPin = !!channelCapabilities['pin-message'];\n  const handlePin = async event => {\n    event.preventDefault();\n    if (!message) return;\n    if (!message.pinned) {\n      try {\n        const optimisticMessage = {\n          ...message,\n          pinned: true,\n          pinned_at: new Date(),\n          pinned_by: client.user\n        };\n        updateMessage(optimisticMessage);\n        await client.pinMessage(message);\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n        if (notify) notify(errorMessage || t('Error pinning message'), 'error');\n        updateMessage(message);\n      }\n    } else {\n      try {\n        const optimisticMessage = {\n          ...message,\n          pin_expires: null,\n          pinned: false,\n          pinned_at: null,\n          pinned_by: null\n        };\n        updateMessage(optimisticMessage);\n        await client.unpinMessage(message);\n      } catch (e) {\n        const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n        if (notify) notify(errorMessage || t('Error removing message pin'), 'error');\n        updateMessage(message);\n      }\n    }\n  };\n  return {\n    canPin,\n    handlePin\n  };\n};","map":{"version":3,"names":["defaultPinPermissions","validateAndGetMessage","useChannelActionContext","useChannelStateContext","useChatContext","useTranslationContext","usePinHandler","message","_permissions","notifications","getErrorNotification","notify","updateMessage","channelCapabilities","client","t","canPin","handlePin","event","preventDefault","pinned","optimisticMessage","pinned_at","Date","pinned_by","user","pinMessage","e","errorMessage","pin_expires","unpinMessage"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/hooks/usePinHandler.js"],"sourcesContent":["import { defaultPinPermissions, validateAndGetMessage } from '../utils';\nimport { useChannelActionContext } from '../../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useTranslationContext } from '../../../context/TranslationContext';\nexport const usePinHandler = (message, \n// @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n_permissions = defaultPinPermissions, // eslint-disable-line\nnotifications = {}) => {\n    const { getErrorNotification, notify } = notifications;\n    const { updateMessage } = useChannelActionContext('usePinHandler');\n    const { channelCapabilities = {} } = useChannelStateContext('usePinHandler');\n    const { client } = useChatContext('usePinHandler');\n    const { t } = useTranslationContext('usePinHandler');\n    const canPin = !!channelCapabilities['pin-message'];\n    const handlePin = async (event) => {\n        event.preventDefault();\n        if (!message)\n            return;\n        if (!message.pinned) {\n            try {\n                const optimisticMessage = {\n                    ...message,\n                    pinned: true,\n                    pinned_at: new Date(),\n                    pinned_by: client.user,\n                };\n                updateMessage(optimisticMessage);\n                await client.pinMessage(message);\n            }\n            catch (e) {\n                const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n                if (notify)\n                    notify(errorMessage || t('Error pinning message'), 'error');\n                updateMessage(message);\n            }\n        }\n        else {\n            try {\n                const optimisticMessage = {\n                    ...message,\n                    pin_expires: null,\n                    pinned: false,\n                    pinned_at: null,\n                    pinned_by: null,\n                };\n                updateMessage(optimisticMessage);\n                await client.unpinMessage(message);\n            }\n            catch (e) {\n                const errorMessage = getErrorNotification && validateAndGetMessage(getErrorNotification, [message]);\n                if (notify)\n                    notify(errorMessage || t('Error removing message pin'), 'error');\n                updateMessage(message);\n            }\n        }\n    };\n    return { canPin, handlePin };\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,qBAAqB,QAAQ,UAAU;AACvE,SAASC,uBAAuB,QAAQ,uCAAuC;AAC/E,SAASC,sBAAsB,QAAQ,sCAAsC;AAC7E,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,SAASC,qBAAqB,QAAQ,qCAAqC;AAC3E,OAAO,MAAMC,aAAa,GAAGA,CAACC,OAAO;AACrC;AACAC,YAAY,GAAGR,qBAAqB;AAAE;AACtCS,aAAa,GAAG,CAAC,CAAC,KAAK;EACnB,MAAM;IAAEC,oBAAoB;IAAEC;EAAO,CAAC,GAAGF,aAAa;EACtD,MAAM;IAAEG;EAAc,CAAC,GAAGV,uBAAuB,CAAC,eAAe,CAAC;EAClE,MAAM;IAAEW,mBAAmB,GAAG,CAAC;EAAE,CAAC,GAAGV,sBAAsB,CAAC,eAAe,CAAC;EAC5E,MAAM;IAAEW;EAAO,CAAC,GAAGV,cAAc,CAAC,eAAe,CAAC;EAClD,MAAM;IAAEW;EAAE,CAAC,GAAGV,qBAAqB,CAAC,eAAe,CAAC;EACpD,MAAMW,MAAM,GAAG,CAAC,CAACH,mBAAmB,CAAC,aAAa,CAAC;EACnD,MAAMI,SAAS,GAAG,MAAOC,KAAK,IAAK;IAC/BA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACZ,OAAO,EACR;IACJ,IAAI,CAACA,OAAO,CAACa,MAAM,EAAE;MACjB,IAAI;QACA,MAAMC,iBAAiB,GAAG;UACtB,GAAGd,OAAO;UACVa,MAAM,EAAE,IAAI;UACZE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;UACrBC,SAAS,EAAEV,MAAM,CAACW;QACtB,CAAC;QACDb,aAAa,CAACS,iBAAiB,CAAC;QAChC,MAAMP,MAAM,CAACY,UAAU,CAACnB,OAAO,CAAC;MACpC,CAAC,CACD,OAAOoB,CAAC,EAAE;QACN,MAAMC,YAAY,GAAGlB,oBAAoB,IAAIT,qBAAqB,CAACS,oBAAoB,EAAE,CAACH,OAAO,CAAC,CAAC;QACnG,IAAII,MAAM,EACNA,MAAM,CAACiB,YAAY,IAAIb,CAAC,CAAC,uBAAuB,CAAC,EAAE,OAAO,CAAC;QAC/DH,aAAa,CAACL,OAAO,CAAC;MAC1B;IACJ,CAAC,MACI;MACD,IAAI;QACA,MAAMc,iBAAiB,GAAG;UACtB,GAAGd,OAAO;UACVsB,WAAW,EAAE,IAAI;UACjBT,MAAM,EAAE,KAAK;UACbE,SAAS,EAAE,IAAI;UACfE,SAAS,EAAE;QACf,CAAC;QACDZ,aAAa,CAACS,iBAAiB,CAAC;QAChC,MAAMP,MAAM,CAACgB,YAAY,CAACvB,OAAO,CAAC;MACtC,CAAC,CACD,OAAOoB,CAAC,EAAE;QACN,MAAMC,YAAY,GAAGlB,oBAAoB,IAAIT,qBAAqB,CAACS,oBAAoB,EAAE,CAACH,OAAO,CAAC,CAAC;QACnG,IAAII,MAAM,EACNA,MAAM,CAACiB,YAAY,IAAIb,CAAC,CAAC,4BAA4B,CAAC,EAAE,OAAO,CAAC;QACpEH,aAAa,CAACL,OAAO,CAAC;MAC1B;IACJ;EACJ,CAAC;EACD,OAAO;IAAES,MAAM;IAAEC;EAAU,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}