{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context';\nexport var MessageDeliveryStatus;\n(function (MessageDeliveryStatus) {\n  MessageDeliveryStatus[\"DELIVERED\"] = \"delivered\";\n  MessageDeliveryStatus[\"READ\"] = \"read\";\n})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));\nexport const useMessageDeliveryStatus = ({\n  channel,\n  lastMessage\n}) => {\n  const {\n    client\n  } = useChatContext();\n  const [messageDeliveryStatus, setMessageDeliveryStatus] = useState();\n  const isOwnMessage = useCallback(message => client.user && message?.user?.id === client.user.id, [client]);\n  useEffect(() => {\n    const lastMessageIsOwn = isOwnMessage(lastMessage);\n    if (!lastMessage?.created_at || !lastMessageIsOwn) return;\n    const lastMessageCreatedAtDate = typeof lastMessage.created_at === 'string' ? new Date(lastMessage.created_at) : lastMessage.created_at;\n    const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(({\n      last_read: channelLastMarkedReadDate,\n      user\n    }) => {\n      const ignoreOwnReadStatus = client.user && user.id !== client.user.id;\n      return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;\n    });\n    setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate ? MessageDeliveryStatus.READ : MessageDeliveryStatus.DELIVERED);\n  }, [channel.state.read, client, isOwnMessage, lastMessage]);\n  useEffect(() => {\n    const handleMessageNew = event => {\n      // the last message is not mine, so do not show the delivery status\n      if (!isOwnMessage(event.message)) {\n        return setMessageDeliveryStatus(undefined);\n      }\n      return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);\n    };\n    channel.on('message.new', handleMessageNew);\n    return () => {\n      channel.off('message.new', handleMessageNew);\n    };\n  }, [channel, client, isOwnMessage]);\n  useEffect(() => {\n    if (!isOwnMessage(lastMessage)) return;\n    const handleMarkRead = event => {\n      if (event.user?.id !== client.user?.id) setMessageDeliveryStatus(MessageDeliveryStatus.READ);\n    };\n    channel.on('message.read', handleMarkRead);\n    return () => {\n      channel.off('message.read', handleMarkRead);\n    };\n  }, [channel, client, lastMessage, isOwnMessage]);\n  return {\n    messageDeliveryStatus\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useState","useChatContext","MessageDeliveryStatus","useMessageDeliveryStatus","channel","lastMessage","client","messageDeliveryStatus","setMessageDeliveryStatus","isOwnMessage","message","user","id","lastMessageIsOwn","created_at","lastMessageCreatedAtDate","Date","channelReadByOthersAfterLastMessageUpdate","Object","values","state","read","some","last_read","channelLastMarkedReadDate","ignoreOwnReadStatus","READ","DELIVERED","handleMessageNew","event","undefined","on","off","handleMarkRead"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/ChannelPreview/hooks/useMessageDeliveryStatus.js"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context';\nexport var MessageDeliveryStatus;\n(function (MessageDeliveryStatus) {\n    MessageDeliveryStatus[\"DELIVERED\"] = \"delivered\";\n    MessageDeliveryStatus[\"READ\"] = \"read\";\n})(MessageDeliveryStatus || (MessageDeliveryStatus = {}));\nexport const useMessageDeliveryStatus = ({ channel, lastMessage, }) => {\n    const { client } = useChatContext();\n    const [messageDeliveryStatus, setMessageDeliveryStatus] = useState();\n    const isOwnMessage = useCallback((message) => client.user && message?.user?.id === client.user.id, [client]);\n    useEffect(() => {\n        const lastMessageIsOwn = isOwnMessage(lastMessage);\n        if (!lastMessage?.created_at || !lastMessageIsOwn)\n            return;\n        const lastMessageCreatedAtDate = typeof lastMessage.created_at === 'string'\n            ? new Date(lastMessage.created_at)\n            : lastMessage.created_at;\n        const channelReadByOthersAfterLastMessageUpdate = Object.values(channel.state.read).some(({ last_read: channelLastMarkedReadDate, user }) => {\n            const ignoreOwnReadStatus = client.user && user.id !== client.user.id;\n            return ignoreOwnReadStatus && lastMessageCreatedAtDate < channelLastMarkedReadDate;\n        });\n        setMessageDeliveryStatus(channelReadByOthersAfterLastMessageUpdate\n            ? MessageDeliveryStatus.READ\n            : MessageDeliveryStatus.DELIVERED);\n    }, [channel.state.read, client, isOwnMessage, lastMessage]);\n    useEffect(() => {\n        const handleMessageNew = (event) => {\n            // the last message is not mine, so do not show the delivery status\n            if (!isOwnMessage(event.message)) {\n                return setMessageDeliveryStatus(undefined);\n            }\n            return setMessageDeliveryStatus(MessageDeliveryStatus.DELIVERED);\n        };\n        channel.on('message.new', handleMessageNew);\n        return () => {\n            channel.off('message.new', handleMessageNew);\n        };\n    }, [channel, client, isOwnMessage]);\n    useEffect(() => {\n        if (!isOwnMessage(lastMessage))\n            return;\n        const handleMarkRead = (event) => {\n            if (event.user?.id !== client.user?.id)\n                setMessageDeliveryStatus(MessageDeliveryStatus.READ);\n        };\n        channel.on('message.read', handleMarkRead);\n        return () => {\n            channel.off('message.read', handleMarkRead);\n        };\n    }, [channel, client, lastMessage, isOwnMessage]);\n    return {\n        messageDeliveryStatus,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}