{"ast":null,"code":"import React, { useCallback } from 'react';\nimport clsx from 'clsx';\nimport { Timestamp } from '../../Message/Timestamp';\nimport { Avatar } from '../../Avatar';\nimport { Icon } from '../icons';\nimport { UnreadCountBadge } from '../UnreadCountBadge';\nimport { useChannelPreviewInfo } from '../../ChannelPreview';\nimport { useChatContext } from '../../../context';\nimport { useThreadsViewContext } from '../../ChatView';\nimport { useThreadListItemContext } from './ThreadListItem';\nimport { useStateStore } from '../../../store';\n/**\n * TODO:\n * - maybe hover state? ask design\n */\nexport const attachmentTypeIconMap = {\n  audio: '🔈',\n  file: '📄',\n  image: '📷',\n  video: '🎥',\n  voiceRecording: '🎙️'\n};\n// TODO: translations\nconst getTitleFromMessage = ({\n  currentUserId,\n  message\n}) => {\n  const attachment = message?.attachments?.at(0);\n  let attachmentIcon = '';\n  if (attachment) {\n    attachmentIcon += attachmentTypeIconMap[attachment.type ?? 'file'] ?? attachmentTypeIconMap.file;\n  }\n  const messageBelongsToCurrentUser = message?.user?.id === currentUserId;\n  if (message?.deleted_at && message.parent_id) return clsx(messageBelongsToCurrentUser && 'You:', 'This reply was deleted.');\n  if (message?.deleted_at && !message.parent_id) return clsx(messageBelongsToCurrentUser && 'You:', 'The source message was deleted.');\n  if (attachment?.type === 'voiceRecording') return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', 'Voice message');\n  return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', message?.text || attachment?.fallback || 'N/A');\n};\nexport const ThreadListItemUI = props => {\n  const {\n    client\n  } = useChatContext();\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const thread = useThreadListItemContext();\n  const selector = useCallback(nextValue => ({\n    channel: nextValue.channel,\n    deletedAt: nextValue.deletedAt,\n    latestReply: nextValue.replies.at(-1),\n    ownUnreadMessageCount: client.userID && nextValue.read[client.userID]?.unreadMessageCount || 0,\n    parentMessage: nextValue.parentMessage\n  }), [client]);\n  const {\n    channel,\n    deletedAt,\n    latestReply,\n    ownUnreadMessageCount,\n    parentMessage\n  } = useStateStore(thread.state, selector);\n  const {\n    displayTitle: channelDisplayTitle\n  } = useChannelPreviewInfo({\n    channel\n  });\n  const {\n    activeThread,\n    setActiveThread\n  } = useThreadsViewContext();\n  const avatarProps = deletedAt ? null : latestReply?.user;\n  return React.createElement(\"button\", {\n    \"aria-selected\": activeThread === thread,\n    className: 'str-chat__thread-list-item',\n    \"data-thread-id\": thread.id,\n    onClick: () => setActiveThread(thread),\n    role: 'option',\n    ...props\n  }, React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__channel'\n  }, React.createElement(Icon.MessageBubble, null), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__channel-text'\n  }, channelDisplayTitle)), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__parent-message'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__parent-message-text'\n  }, \"replied to: \", getTitleFromMessage({\n    message: parentMessage\n  })), !deletedAt && React.createElement(UnreadCountBadge, {\n    count: ownUnreadMessageCount\n  })), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply'\n  }, React.createElement(Avatar, {\n    ...avatarProps\n  }), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-details'\n  }, !deletedAt && React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-created-by'\n  }, latestReply?.user?.name || latestReply?.user?.id || 'Unknown sender'), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-text-and-timestamp'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-text'\n  }, deletedAt ? 'This thread was deleted' : getTitleFromMessage({\n    currentUserId: client.user?.id,\n    message: latestReply\n  })), React.createElement(\"div\", {\n    className: 'str-chat__thread-list-item__latest-reply-timestamp'\n  }, React.createElement(Timestamp, {\n    timestamp: deletedAt ?? latestReply?.created_at\n  }))))));\n};","map":{"version":3,"names":["React","useCallback","clsx","Timestamp","Avatar","Icon","UnreadCountBadge","useChannelPreviewInfo","useChatContext","useThreadsViewContext","useThreadListItemContext","useStateStore","attachmentTypeIconMap","audio","file","image","video","voiceRecording","getTitleFromMessage","currentUserId","message","attachment","attachments","at","attachmentIcon","type","messageBelongsToCurrentUser","user","id","deleted_at","parent_id","text","fallback","ThreadListItemUI","props","client","thread","selector","nextValue","channel","deletedAt","latestReply","replies","ownUnreadMessageCount","userID","read","unreadMessageCount","parentMessage","state","displayTitle","channelDisplayTitle","activeThread","setActiveThread","avatarProps","createElement","className","onClick","role","MessageBubble","count","name","timestamp","created_at"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/Threads/ThreadList/ThreadListItemUI.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport clsx from 'clsx';\nimport { Timestamp } from '../../Message/Timestamp';\nimport { Avatar } from '../../Avatar';\nimport { Icon } from '../icons';\nimport { UnreadCountBadge } from '../UnreadCountBadge';\nimport { useChannelPreviewInfo } from '../../ChannelPreview';\nimport { useChatContext } from '../../../context';\nimport { useThreadsViewContext } from '../../ChatView';\nimport { useThreadListItemContext } from './ThreadListItem';\nimport { useStateStore } from '../../../store';\n/**\n * TODO:\n * - maybe hover state? ask design\n */\nexport const attachmentTypeIconMap = {\n    audio: '🔈',\n    file: '📄',\n    image: '📷',\n    video: '🎥',\n    voiceRecording: '🎙️',\n};\n// TODO: translations\nconst getTitleFromMessage = ({ currentUserId, message, }) => {\n    const attachment = message?.attachments?.at(0);\n    let attachmentIcon = '';\n    if (attachment) {\n        attachmentIcon +=\n            attachmentTypeIconMap[attachment.type ?? 'file'] ?? attachmentTypeIconMap.file;\n    }\n    const messageBelongsToCurrentUser = message?.user?.id === currentUserId;\n    if (message?.deleted_at && message.parent_id)\n        return clsx(messageBelongsToCurrentUser && 'You:', 'This reply was deleted.');\n    if (message?.deleted_at && !message.parent_id)\n        return clsx(messageBelongsToCurrentUser && 'You:', 'The source message was deleted.');\n    if (attachment?.type === 'voiceRecording')\n        return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', 'Voice message');\n    return clsx(attachmentIcon, messageBelongsToCurrentUser && 'You:', message?.text || attachment?.fallback || 'N/A');\n};\nexport const ThreadListItemUI = (props) => {\n    const { client } = useChatContext();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const thread = useThreadListItemContext();\n    const selector = useCallback((nextValue) => ({\n        channel: nextValue.channel,\n        deletedAt: nextValue.deletedAt,\n        latestReply: nextValue.replies.at(-1),\n        ownUnreadMessageCount: (client.userID && nextValue.read[client.userID]?.unreadMessageCount) || 0,\n        parentMessage: nextValue.parentMessage,\n    }), [client]);\n    const { channel, deletedAt, latestReply, ownUnreadMessageCount, parentMessage } = useStateStore(thread.state, selector);\n    const { displayTitle: channelDisplayTitle } = useChannelPreviewInfo({ channel });\n    const { activeThread, setActiveThread } = useThreadsViewContext();\n    const avatarProps = deletedAt ? null : latestReply?.user;\n    return (React.createElement(\"button\", { \"aria-selected\": activeThread === thread, className: 'str-chat__thread-list-item', \"data-thread-id\": thread.id, onClick: () => setActiveThread(thread), role: 'option', ...props },\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__channel' },\n            React.createElement(Icon.MessageBubble, null),\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__channel-text' }, channelDisplayTitle)),\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__parent-message' },\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__parent-message-text' },\n                \"replied to: \",\n                getTitleFromMessage({ message: parentMessage })),\n            !deletedAt && React.createElement(UnreadCountBadge, { count: ownUnreadMessageCount })),\n        React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply' },\n            React.createElement(Avatar, { ...avatarProps }),\n            React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-details' },\n                !deletedAt && (React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-created-by' }, latestReply?.user?.name || latestReply?.user?.id || 'Unknown sender')),\n                React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-text-and-timestamp' },\n                    React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-text' }, deletedAt\n                        ? 'This thread was deleted'\n                        : getTitleFromMessage({\n                            currentUserId: client.user?.id,\n                            message: latestReply,\n                        })),\n                    React.createElement(\"div\", { className: 'str-chat__thread-list-item__latest-reply-timestamp' },\n                        React.createElement(Timestamp, { timestamp: deletedAt ?? latestReply?.created_at })))))));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,IAAI,QAAQ,UAAU;AAC/B,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,SAASC,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,qBAAqB,QAAQ,gBAAgB;AACtD,SAASC,wBAAwB,QAAQ,kBAAkB;AAC3D,SAASC,aAAa,QAAQ,gBAAgB;AAC9C;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG;EACjCC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,IAAI;EACXC,cAAc,EAAE;AACpB,CAAC;AACD;AACA,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAS,CAAC,KAAK;EACzD,MAAMC,UAAU,GAAGD,OAAO,EAAEE,WAAW,EAAEC,EAAE,CAAC,CAAC,CAAC;EAC9C,IAAIC,cAAc,GAAG,EAAE;EACvB,IAAIH,UAAU,EAAE;IACZG,cAAc,IACVZ,qBAAqB,CAACS,UAAU,CAACI,IAAI,IAAI,MAAM,CAAC,IAAIb,qBAAqB,CAACE,IAAI;EACtF;EACA,MAAMY,2BAA2B,GAAGN,OAAO,EAAEO,IAAI,EAAEC,EAAE,KAAKT,aAAa;EACvE,IAAIC,OAAO,EAAES,UAAU,IAAIT,OAAO,CAACU,SAAS,EACxC,OAAO5B,IAAI,CAACwB,2BAA2B,IAAI,MAAM,EAAE,yBAAyB,CAAC;EACjF,IAAIN,OAAO,EAAES,UAAU,IAAI,CAACT,OAAO,CAACU,SAAS,EACzC,OAAO5B,IAAI,CAACwB,2BAA2B,IAAI,MAAM,EAAE,iCAAiC,CAAC;EACzF,IAAIL,UAAU,EAAEI,IAAI,KAAK,gBAAgB,EACrC,OAAOvB,IAAI,CAACsB,cAAc,EAAEE,2BAA2B,IAAI,MAAM,EAAE,eAAe,CAAC;EACvF,OAAOxB,IAAI,CAACsB,cAAc,EAAEE,2BAA2B,IAAI,MAAM,EAAEN,OAAO,EAAEW,IAAI,IAAIV,UAAU,EAAEW,QAAQ,IAAI,KAAK,CAAC;AACtH,CAAC;AACD,OAAO,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EACvC,MAAM;IAAEC;EAAO,CAAC,GAAG3B,cAAc,CAAC,CAAC;EACnC;EACA,MAAM4B,MAAM,GAAG1B,wBAAwB,CAAC,CAAC;EACzC,MAAM2B,QAAQ,GAAGpC,WAAW,CAAEqC,SAAS,KAAM;IACzCC,OAAO,EAAED,SAAS,CAACC,OAAO;IAC1BC,SAAS,EAAEF,SAAS,CAACE,SAAS;IAC9BC,WAAW,EAAEH,SAAS,CAACI,OAAO,CAACnB,EAAE,CAAC,CAAC,CAAC,CAAC;IACrCoB,qBAAqB,EAAGR,MAAM,CAACS,MAAM,IAAIN,SAAS,CAACO,IAAI,CAACV,MAAM,CAACS,MAAM,CAAC,EAAEE,kBAAkB,IAAK,CAAC;IAChGC,aAAa,EAAET,SAAS,CAACS;EAC7B,CAAC,CAAC,EAAE,CAACZ,MAAM,CAAC,CAAC;EACb,MAAM;IAAEI,OAAO;IAAEC,SAAS;IAAEC,WAAW;IAAEE,qBAAqB;IAAEI;EAAc,CAAC,GAAGpC,aAAa,CAACyB,MAAM,CAACY,KAAK,EAAEX,QAAQ,CAAC;EACvH,MAAM;IAAEY,YAAY,EAAEC;EAAoB,CAAC,GAAG3C,qBAAqB,CAAC;IAAEgC;EAAQ,CAAC,CAAC;EAChF,MAAM;IAAEY,YAAY;IAAEC;EAAgB,CAAC,GAAG3C,qBAAqB,CAAC,CAAC;EACjE,MAAM4C,WAAW,GAAGb,SAAS,GAAG,IAAI,GAAGC,WAAW,EAAEd,IAAI;EACxD,OAAQ3B,KAAK,CAACsD,aAAa,CAAC,QAAQ,EAAE;IAAE,eAAe,EAAEH,YAAY,KAAKf,MAAM;IAAEmB,SAAS,EAAE,4BAA4B;IAAE,gBAAgB,EAAEnB,MAAM,CAACR,EAAE;IAAE4B,OAAO,EAAEA,CAAA,KAAMJ,eAAe,CAAChB,MAAM,CAAC;IAAEqB,IAAI,EAAE,QAAQ;IAAE,GAAGvB;EAAM,CAAC,EACtNlC,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAsC,CAAC,EAC3EvD,KAAK,CAACsD,aAAa,CAACjD,IAAI,CAACqD,aAAa,EAAE,IAAI,CAAC,EAC7C1D,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAA2C,CAAC,EAAEL,mBAAmB,CAAC,CAAC,EAC/GlD,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAA6C,CAAC,EAClFvD,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAkD,CAAC,EACvF,cAAc,EACdrC,mBAAmB,CAAC;IAAEE,OAAO,EAAE2B;EAAc,CAAC,CAAC,CAAC,EACpD,CAACP,SAAS,IAAIxC,KAAK,CAACsD,aAAa,CAAChD,gBAAgB,EAAE;IAAEqD,KAAK,EAAEhB;EAAsB,CAAC,CAAC,CAAC,EAC1F3C,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAA2C,CAAC,EAChFvD,KAAK,CAACsD,aAAa,CAAClD,MAAM,EAAE;IAAE,GAAGiD;EAAY,CAAC,CAAC,EAC/CrD,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAmD,CAAC,EACxF,CAACf,SAAS,IAAKxC,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAsD,CAAC,EAAEd,WAAW,EAAEd,IAAI,EAAEiC,IAAI,IAAInB,WAAW,EAAEd,IAAI,EAAEC,EAAE,IAAI,gBAAgB,CAAE,EACtL5B,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAA8D,CAAC,EACnGvD,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAgD,CAAC,EAAEf,SAAS,GAC9F,yBAAyB,GACzBtB,mBAAmB,CAAC;IAClBC,aAAa,EAAEgB,MAAM,CAACR,IAAI,EAAEC,EAAE;IAC9BR,OAAO,EAAEqB;EACb,CAAC,CAAC,CAAC,EACPzC,KAAK,CAACsD,aAAa,CAAC,KAAK,EAAE;IAAEC,SAAS,EAAE;EAAqD,CAAC,EAC1FvD,KAAK,CAACsD,aAAa,CAACnD,SAAS,EAAE;IAAE0D,SAAS,EAAErB,SAAS,IAAIC,WAAW,EAAEqB;EAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}