{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nconst UnMemoizedScrollToBottomButton = props => {\n  const {\n    isMessageListScrolledToBottom,\n    onClick,\n    threadList\n  } = props;\n  const {\n    channel: activeChannel,\n    client\n  } = useChatContext();\n  const {\n    thread\n  } = useChannelStateContext();\n  const [countUnread, setCountUnread] = useState(activeChannel?.countUnread() || 0);\n  const [replyCount, setReplyCount] = useState(thread?.reply_count || 0);\n  const observedEvent = threadList ? 'message.updated' : 'message.new';\n  useEffect(() => {\n    const handleEvent = event => {\n      const newMessageInAnotherChannel = event.cid !== activeChannel?.cid;\n      const newMessageIsMine = event.user?.id === client.user?.id;\n      const isThreadOpen = !!thread;\n      const newMessageIsReply = !!event.message?.parent_id;\n      const dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {\n        return;\n      }\n      if (event.type === 'message.new') {\n        // cannot rely on channel.countUnread because active channel is automatically marked read\n        setCountUnread(prev => prev + 1);\n      } else if (event.message?.id === thread?.id) {\n        const newReplyCount = event.message?.reply_count || 0;\n        setCountUnread(() => newReplyCount - replyCount);\n      }\n    };\n    client.on(observedEvent, handleEvent);\n    return () => {\n      client.off(observedEvent, handleEvent);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n  useEffect(() => {\n    if (isMessageListScrolledToBottom) {\n      setCountUnread(0);\n      setReplyCount(thread?.reply_count || 0);\n    }\n  }, [isMessageListScrolledToBottom, thread]);\n  if (isMessageListScrolledToBottom) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__jump-to-latest-message'\n  }, React.createElement(\"button\", {\n    \"aria-live\": 'polite',\n    className: `\n        str-chat__message-notification-scroll-to-latest\n        str-chat__circle-fab\n      `,\n    \"data-testid\": 'message-notification',\n    onClick: onClick\n  }, React.createElement(ArrowDown, null), countUnread > 0 && React.createElement(\"div\", {\n    className: clsx('str-chat__message-notification', 'str-chat__jump-to-latest-unread-count'),\n    \"data-testid\": 'unread-message-notification-counter'\n  }, countUnread)));\n};\nexport const ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);","map":{"version":3,"names":["React","useEffect","useState","clsx","ArrowDown","useChannelStateContext","useChatContext","UnMemoizedScrollToBottomButton","props","isMessageListScrolledToBottom","onClick","threadList","channel","activeChannel","client","thread","countUnread","setCountUnread","replyCount","setReplyCount","reply_count","observedEvent","handleEvent","event","newMessageInAnotherChannel","cid","newMessageIsMine","user","id","isThreadOpen","newMessageIsReply","message","parent_id","dontIncreaseMainListCounterOnNewReply","type","prev","newReplyCount","on","off","createElement","className","ScrollToBottomButton","memo"],"sources":["/Users/yashwantmoharil/Desktop/football-battlegrounds/client/node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nconst UnMemoizedScrollToBottomButton = (props) => {\n    const { isMessageListScrolledToBottom, onClick, threadList } = props;\n    const { channel: activeChannel, client } = useChatContext();\n    const { thread } = useChannelStateContext();\n    const [countUnread, setCountUnread] = useState(activeChannel?.countUnread() || 0);\n    const [replyCount, setReplyCount] = useState(thread?.reply_count || 0);\n    const observedEvent = threadList ? 'message.updated' : 'message.new';\n    useEffect(() => {\n        const handleEvent = (event) => {\n            const newMessageInAnotherChannel = event.cid !== activeChannel?.cid;\n            const newMessageIsMine = event.user?.id === client.user?.id;\n            const isThreadOpen = !!thread;\n            const newMessageIsReply = !!event.message?.parent_id;\n            const dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n            if (isMessageListScrolledToBottom ||\n                newMessageInAnotherChannel ||\n                newMessageIsMine ||\n                dontIncreaseMainListCounterOnNewReply) {\n                return;\n            }\n            if (event.type === 'message.new') {\n                // cannot rely on channel.countUnread because active channel is automatically marked read\n                setCountUnread((prev) => prev + 1);\n            }\n            else if (event.message?.id === thread?.id) {\n                const newReplyCount = event.message?.reply_count || 0;\n                setCountUnread(() => newReplyCount - replyCount);\n            }\n        };\n        client.on(observedEvent, handleEvent);\n        return () => {\n            client.off(observedEvent, handleEvent);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n    useEffect(() => {\n        if (isMessageListScrolledToBottom) {\n            setCountUnread(0);\n            setReplyCount(thread?.reply_count || 0);\n        }\n    }, [isMessageListScrolledToBottom, thread]);\n    if (isMessageListScrolledToBottom)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__jump-to-latest-message' },\n        React.createElement(\"button\", { \"aria-live\": 'polite', className: `\n        str-chat__message-notification-scroll-to-latest\n        str-chat__circle-fab\n      `, \"data-testid\": 'message-notification', onClick: onClick },\n            React.createElement(ArrowDown, null),\n            countUnread > 0 && (React.createElement(\"div\", { className: clsx('str-chat__message-notification', 'str-chat__jump-to-latest-unread-count'), \"data-testid\": 'unread-message-notification-counter' }, countUnread)))));\n};\nexport const ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}