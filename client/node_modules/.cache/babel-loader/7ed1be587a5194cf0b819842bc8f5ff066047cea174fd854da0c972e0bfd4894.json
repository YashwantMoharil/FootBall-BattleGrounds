{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageBlocked as DefaultMessageBlocked } from './MessageBlocked';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { StreamedMessageText as DefaultStreamedMessageText } from './StreamedMessageText';\nimport { isDateSeparatorMessage } from '../MessageList';\nimport { MessageIsThreadReplyInChannelButtonIndicator as DefaultMessageIsThreadReplyInChannelButtonIndicator } from './MessageIsThreadReplyInChannelButtonIndicator';\nimport { ReminderNotification as DefaultReminderNotification } from './ReminderNotification';\nimport { useMessageReminder } from './hooks';\nimport { areMessageUIPropsEqual, isMessageBlocked, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { EditMessageModal } from '../MessageInput';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = props => {\n  const {\n    additionalMessageInputProps,\n    editing,\n    endOfGroup,\n    firstOfGroup,\n    groupedByUser,\n    handleAction,\n    handleOpenThread,\n    handleRetry,\n    highlighted,\n    isMessageAIGenerated,\n    isMyMessage,\n    message,\n    onUserClick,\n    onUserHover,\n    renderText,\n    threadList\n  } = props;\n  const {\n    client\n  } = useChatContext('MessageSimple');\n  const {\n    t\n  } = useTranslationContext('MessageSimple');\n  const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n  const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n  const reminder = useMessageReminder(message.id);\n  const {\n    Attachment = DefaultAttachment,\n    Avatar = DefaultAvatar,\n    MessageOptions = DefaultMessageOptions,\n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions,\n    MessageBlocked = DefaultMessageBlocked,\n    MessageBouncePrompt = DefaultMessageBouncePrompt,\n    MessageDeleted = DefaultMessageDeleted,\n    MessageIsThreadReplyInChannelButtonIndicator = DefaultMessageIsThreadReplyInChannelButtonIndicator,\n    MessageRepliesCountButton = DefaultMessageRepliesCountButton,\n    MessageStatus = DefaultMessageStatus,\n    MessageTimestamp = DefaultMessageTimestamp,\n    ReactionsList = DefaultReactionList,\n    ReminderNotification = DefaultReminderNotification,\n    StreamedMessageText = DefaultStreamedMessageText,\n    PinIndicator\n  } = useComponentContext('MessageSimple');\n  const hasAttachment = messageHasAttachments(message);\n  const hasReactions = messageHasReactions(message);\n  const isAIGenerated = useMemo(() => isMessageAIGenerated?.(message), [isMessageAIGenerated, message]);\n  if (isDateSeparatorMessage(message)) {\n    return null;\n  }\n  if (message.deleted_at || message.type === 'deleted') {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n  if (isMessageBlocked(message)) {\n    return React.createElement(MessageBlocked, null);\n  }\n  const showMetadata = !groupedByUser || endOfGroup;\n  const showReplyCountButton = !threadList && !!message.reply_count;\n  const showIsReplyInChannel = !threadList && message.show_in_channel && message.parent_id;\n  const allowRetry = message.status === 'failed' && message.error?.status !== 403;\n  const isBounced = isMessageBounced(message);\n  const isEdited = isMessageEdited(message) && !isAIGenerated;\n  let handleClick = undefined;\n  if (allowRetry) {\n    handleClick = () => handleRetry(message);\n  } else if (isBounced) {\n    handleClick = () => setIsBounceDialogOpen(true);\n  } else if (isEdited) {\n    handleClick = () => setEditedTimestampOpen(prev => !prev);\n  }\n  const rootClassName = clsx('str-chat__message str-chat__message-simple', `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage() ? 'str-chat__message--me str-chat__message-simple--me' : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n    'str-chat__message--has-attachment': hasAttachment,\n    'str-chat__message--highlighted': highlighted,\n    'str-chat__message--pinned pinned-message': message.pinned,\n    'str-chat__message--with-reactions': hasReactions,\n    'str-chat__message-send-can-be-retried': message?.status === 'failed' && message?.error?.status !== 403,\n    'str-chat__message-with-thread-link': showReplyCountButton || showIsReplyInChannel,\n    'str-chat__virtual-message__wrapper--end': endOfGroup,\n    'str-chat__virtual-message__wrapper--first': firstOfGroup,\n    'str-chat__virtual-message__wrapper--group': groupedByUser\n  });\n  const poll = message.poll_id && client.polls.fromState(message.poll_id);\n  return React.createElement(React.Fragment, null, editing && React.createElement(EditMessageModal, {\n    additionalMessageInputProps: additionalMessageInputProps\n  }), isBounceDialogOpen && React.createElement(MessageBounceModal, {\n    MessageBouncePrompt: MessageBouncePrompt,\n    onClose: () => setIsBounceDialogOpen(false),\n    open: isBounceDialogOpen\n  }), React.createElement(\"div\", {\n    className: rootClassName,\n    key: message.id\n  }, PinIndicator && React.createElement(PinIndicator, null), !!reminder && React.createElement(ReminderNotification, {\n    reminder: reminder\n  }), message.user && React.createElement(Avatar, {\n    image: message.user.image,\n    name: message.user.name || message.user.id,\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    user: message.user\n  }), React.createElement(\"div\", {\n    className: clsx('str-chat__message-inner', {\n      'str-chat__simple-message--error-failed': allowRetry || isBounced\n    }),\n    \"data-testid\": 'message-inner',\n    onClick: handleClick,\n    onKeyUp: handleClick\n  }, React.createElement(MessageActions, null), React.createElement(\"div\", {\n    className: 'str-chat__message-reactions-host'\n  }, hasReactions && React.createElement(ReactionsList, {\n    reverse: true\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message-bubble'\n  }, poll && React.createElement(Poll, {\n    poll: poll\n  }), message.attachments?.length && !message.quoted_message ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, isAIGenerated ? React.createElement(StreamedMessageText, {\n    message: message,\n    renderText: renderText\n  }) : React.createElement(MessageText, {\n    message: message,\n    renderText: renderText\n  }), React.createElement(MessageErrorIcon, null))), showReplyCountButton && React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  }), showIsReplyInChannel && React.createElement(MessageIsThreadReplyInChannelButtonIndicator, null), showMetadata && React.createElement(\"div\", {\n    className: 'str-chat__message-metadata'\n  }, React.createElement(MessageStatus, null), !isMyMessage() && !!message.user && React.createElement(\"span\", {\n    className: 'str-chat__message-simple-name'\n  }, message.user.name || message.user.id), React.createElement(MessageTimestamp, {\n    customClass: 'str-chat__message-simple-timestamp'\n  }), isEdited && React.createElement(\"span\", {\n    className: 'str-chat__mesage-simple-edited'\n  }, t('Edited')), isEdited && React.createElement(MessageEditedTimestamp, {\n    calendar: true,\n    open: isEditedTimestampOpen\n  }))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = props => {\n  const messageContext = useMessageContext('MessageSimple');\n  return React.createElement(MemoizedMessageSimple, {\n    ...messageContext,\n    ...props\n  });\n};","map":{"version":3,"names":["React","useMemo","useState","clsx","MessageErrorIcon","MessageBouncePrompt","DefaultMessageBouncePrompt","MessageDeleted","DefaultMessageDeleted","MessageBlocked","DefaultMessageBlocked","MessageOptions","DefaultMessageOptions","MessageRepliesCountButton","DefaultMessageRepliesCountButton","MessageStatus","DefaultMessageStatus","MessageText","MessageTimestamp","DefaultMessageTimestamp","StreamedMessageText","DefaultStreamedMessageText","isDateSeparatorMessage","MessageIsThreadReplyInChannelButtonIndicator","DefaultMessageIsThreadReplyInChannelButtonIndicator","ReminderNotification","DefaultReminderNotification","useMessageReminder","areMessageUIPropsEqual","isMessageBlocked","isMessageBounced","isMessageEdited","messageHasAttachments","messageHasReactions","Avatar","DefaultAvatar","Attachment","DefaultAttachment","EditMessageModal","Poll","ReactionsList","DefaultReactionList","MessageBounceModal","useComponentContext","useMessageContext","useChatContext","useTranslationContext","MessageEditedTimestamp","MessageSimpleWithContext","props","additionalMessageInputProps","editing","endOfGroup","firstOfGroup","groupedByUser","handleAction","handleOpenThread","handleRetry","highlighted","isMessageAIGenerated","isMyMessage","message","onUserClick","onUserHover","renderText","threadList","client","t","isBounceDialogOpen","setIsBounceDialogOpen","isEditedTimestampOpen","setEditedTimestampOpen","reminder","id","MessageActions","PinIndicator","hasAttachment","hasReactions","isAIGenerated","deleted_at","type","createElement","showMetadata","showReplyCountButton","reply_count","showIsReplyInChannel","show_in_channel","parent_id","allowRetry","status","error","isBounced","isEdited","handleClick","undefined","prev","rootClassName","text","pinned","poll","poll_id","polls","fromState","Fragment","onClose","open","className","key","user","image","name","onClick","onMouseOver","onKeyUp","reverse","attachments","length","quoted_message","actionHandler","customClass","calendar","MemoizedMessageSimple","memo","MessageSimple","messageContext"],"sources":["/Users/yashwantmoharil/Documents/Football-Battlegrounds/client/node_modules/stream-chat-react/dist/components/Message/MessageSimple.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageBlocked as DefaultMessageBlocked } from './MessageBlocked';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { StreamedMessageText as DefaultStreamedMessageText } from './StreamedMessageText';\nimport { isDateSeparatorMessage } from '../MessageList';\nimport { MessageIsThreadReplyInChannelButtonIndicator as DefaultMessageIsThreadReplyInChannelButtonIndicator } from './MessageIsThreadReplyInChannelButtonIndicator';\nimport { ReminderNotification as DefaultReminderNotification } from './ReminderNotification';\nimport { useMessageReminder } from './hooks';\nimport { areMessageUIPropsEqual, isMessageBlocked, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions, } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { EditMessageModal } from '../MessageInput';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = (props) => {\n    const { additionalMessageInputProps, editing, endOfGroup, firstOfGroup, groupedByUser, handleAction, handleOpenThread, handleRetry, highlighted, isMessageAIGenerated, isMyMessage, message, onUserClick, onUserHover, renderText, threadList, } = props;\n    const { client } = useChatContext('MessageSimple');\n    const { t } = useTranslationContext('MessageSimple');\n    const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n    const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n    const reminder = useMessageReminder(message.id);\n    const { Attachment = DefaultAttachment, Avatar = DefaultAvatar, MessageOptions = DefaultMessageOptions, \n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions, MessageBlocked = DefaultMessageBlocked, MessageBouncePrompt = DefaultMessageBouncePrompt, MessageDeleted = DefaultMessageDeleted, MessageIsThreadReplyInChannelButtonIndicator = DefaultMessageIsThreadReplyInChannelButtonIndicator, MessageRepliesCountButton = DefaultMessageRepliesCountButton, MessageStatus = DefaultMessageStatus, MessageTimestamp = DefaultMessageTimestamp, ReactionsList = DefaultReactionList, ReminderNotification = DefaultReminderNotification, StreamedMessageText = DefaultStreamedMessageText, PinIndicator, } = useComponentContext('MessageSimple');\n    const hasAttachment = messageHasAttachments(message);\n    const hasReactions = messageHasReactions(message);\n    const isAIGenerated = useMemo(() => isMessageAIGenerated?.(message), [isMessageAIGenerated, message]);\n    if (isDateSeparatorMessage(message)) {\n        return null;\n    }\n    if (message.deleted_at || message.type === 'deleted') {\n        return React.createElement(MessageDeleted, { message: message });\n    }\n    if (isMessageBlocked(message)) {\n        return React.createElement(MessageBlocked, null);\n    }\n    const showMetadata = !groupedByUser || endOfGroup;\n    const showReplyCountButton = !threadList && !!message.reply_count;\n    const showIsReplyInChannel = !threadList && message.show_in_channel && message.parent_id;\n    const allowRetry = message.status === 'failed' && message.error?.status !== 403;\n    const isBounced = isMessageBounced(message);\n    const isEdited = isMessageEdited(message) && !isAIGenerated;\n    let handleClick = undefined;\n    if (allowRetry) {\n        handleClick = () => handleRetry(message);\n    }\n    else if (isBounced) {\n        handleClick = () => setIsBounceDialogOpen(true);\n    }\n    else if (isEdited) {\n        handleClick = () => setEditedTimestampOpen((prev) => !prev);\n    }\n    const rootClassName = clsx('str-chat__message str-chat__message-simple', `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage()\n        ? 'str-chat__message--me str-chat__message-simple--me'\n        : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n        'str-chat__message--has-attachment': hasAttachment,\n        'str-chat__message--highlighted': highlighted,\n        'str-chat__message--pinned pinned-message': message.pinned,\n        'str-chat__message--with-reactions': hasReactions,\n        'str-chat__message-send-can-be-retried': message?.status === 'failed' && message?.error?.status !== 403,\n        'str-chat__message-with-thread-link': showReplyCountButton || showIsReplyInChannel,\n        'str-chat__virtual-message__wrapper--end': endOfGroup,\n        'str-chat__virtual-message__wrapper--first': firstOfGroup,\n        'str-chat__virtual-message__wrapper--group': groupedByUser,\n    });\n    const poll = message.poll_id && client.polls.fromState(message.poll_id);\n    return (React.createElement(React.Fragment, null,\n        editing && (React.createElement(EditMessageModal, { additionalMessageInputProps: additionalMessageInputProps })),\n        isBounceDialogOpen && (React.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt, onClose: () => setIsBounceDialogOpen(false), open: isBounceDialogOpen })),\n        React.createElement(\"div\", { className: rootClassName, key: message.id },\n            PinIndicator && React.createElement(PinIndicator, null),\n            !!reminder && React.createElement(ReminderNotification, { reminder: reminder }),\n            message.user && (React.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user })),\n            React.createElement(\"div\", { className: clsx('str-chat__message-inner', {\n                    'str-chat__simple-message--error-failed': allowRetry || isBounced,\n                }), \"data-testid\": 'message-inner', onClick: handleClick, onKeyUp: handleClick },\n                React.createElement(MessageActions, null),\n                React.createElement(\"div\", { className: 'str-chat__message-reactions-host' }, hasReactions && React.createElement(ReactionsList, { reverse: true })),\n                React.createElement(\"div\", { className: 'str-chat__message-bubble' },\n                    poll && React.createElement(Poll, { poll: poll }),\n                    message.attachments?.length && !message.quoted_message ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,\n                    isAIGenerated ? (React.createElement(StreamedMessageText, { message: message, renderText: renderText })) : (React.createElement(MessageText, { message: message, renderText: renderText })),\n                    React.createElement(MessageErrorIcon, null))),\n            showReplyCountButton && (React.createElement(MessageRepliesCountButton, { onClick: handleOpenThread, reply_count: message.reply_count })),\n            showIsReplyInChannel && React.createElement(MessageIsThreadReplyInChannelButtonIndicator, null),\n            showMetadata && (React.createElement(\"div\", { className: 'str-chat__message-metadata' },\n                React.createElement(MessageStatus, null),\n                !isMyMessage() && !!message.user && (React.createElement(\"span\", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)),\n                React.createElement(MessageTimestamp, { customClass: 'str-chat__message-simple-timestamp' }),\n                isEdited && (React.createElement(\"span\", { className: 'str-chat__mesage-simple-edited' }, t('Edited'))),\n                isEdited && (React.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen })))))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = (props) => {\n    const messageContext = useMessageContext('MessageSimple');\n    return React.createElement(MemoizedMessageSimple, { ...messageContext, ...props });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}